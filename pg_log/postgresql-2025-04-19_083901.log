2025-04-19 08:39:01.136 UTC [1] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 08:39:01.136 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2025-04-19 08:39:01.136 UTC [1] LOG:  listening on IPv6 address "::", port 5432
2025-04-19 08:39:01.138 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 08:39:01.140 UTC [58] LOG:  database system was shut down at 2025-04-19 08:39:01 UTC
2025-04-19 08:39:01.140 UTC [58] DEBUG:  checkpoint record is at 0/1705EA0
2025-04-19 08:39:01.140 UTC [58] DEBUG:  redo record is at 0/1705EA0; shutdown true
2025-04-19 08:39:01.140 UTC [58] DEBUG:  next transaction ID: 735; next OID: 16385
2025-04-19 08:39:01.140 UTC [58] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 08:39:01.140 UTC [58] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 08:39:01.140 UTC [58] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 08:39:01.140 UTC [58] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 08:39:01.140 UTC [58] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 08:39:01.140 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 08:39:01.140 UTC [58] DEBUG:  starting up replication slots
2025-04-19 08:39:01.141 UTC [58] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 08:39:01.141 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 08:39:01.141 UTC [58] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 08:39:01.143 UTC [1] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 08:39:01.143 UTC [62] DEBUG:  autovacuum launcher started
2025-04-19 08:39:01.143 UTC [1] LOG:  database system is ready to accept connections
2025-04-19 08:39:01.144 UTC [64] DEBUG:  logical replication launcher started
2025-04-19 08:39:13.350 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "user_checks" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "user_checks" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "prediction_numbers" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "prediction_numbers" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "predictions" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "predictions" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "expected_combinations" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "expected_combinations" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "numbers" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "numbers" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "draws" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "draws" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "users" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "users" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "user_stats" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "user_stats" does not exist, skipping
2025-04-19 08:39:13.351 UTC [72] DEBUG:  relation "analysis_results" does not exist
2025-04-19 08:39:13.351 UTC [72] NOTICE:  table "analysis_results" does not exist, skipping
2025-04-19 08:39:13.352 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:39:13.359 UTC [72] DEBUG:  building index "pg_toast_16386_index" on table "pg_toast_16386" serially
2025-04-19 08:39:13.361 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:39:13.362 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:39:13.362 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:39:13.363 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:39:13.363 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:39:13.363 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:39:13.364 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:39:13.364 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:39:13.364 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:39:13.365 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:39:13.366 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:39:13.366 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:39:13.366 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:39:13.367 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:39:13.367 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:39:13.367 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:39:13.368 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:39:13.370 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:39:13.370 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:39:13.370 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:39:13.371 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:39:13.371 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:39:13.371 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:39:13.373 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:39:13.373 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:39:13.374 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:39:13.374 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:39:13.375 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:39:13.377 UTC [72] DEBUG:  building index "pg_toast_16447_index" on table "pg_toast_16447" serially
2025-04-19 08:39:13.378 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:39:13.378 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:39:13.378 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:39:13.380 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:39:13.381 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:39:13.382 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:39:13.382 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:39:13.382 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:39:13.382 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:39:13.382 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:39:13.384 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:39:13.386 UTC [72] DEBUG:  building index "pg_toast_16480_index" on table "pg_toast_16480" serially
2025-04-19 08:39:13.386 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:39:13.387 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:39:13.387 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:39:13.388 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:39:13.389 UTC [72] DEBUG:  building index "pg_toast_16491_index" on table "pg_toast_16491" serially
2025-04-19 08:39:13.390 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:39:13.391 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:39:13.391 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:39:13.393 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:39:13.394 UTC [72] DEBUG:  building index "pg_toast_16514_index" on table "pg_toast_16514" serially
2025-04-19 08:39:13.395 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:39:13.395 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:39:13.395 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:39:13.396 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:39:13.396 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:39:13.397 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:39:13.397 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:39:13.398 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:39:13.398 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:39:13.399 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:39:13.399 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:39:13.400 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:39:13.400 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:39:13.401 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:39:13.401 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:39:13.402 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:39:13.402 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:39:13.403 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:39:13.403 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:39:13.404 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:39:13.404 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:39:13.405 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:39:13.405 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:39:13.407 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:39:13.407 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:39:13.417 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:13.698 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$vqY.5n2yTCYi63Azv3ujUObTU27g/l5NscRZBOlycwwgZvcinXDHy')
	                RETURNING id, username, email
	                
2025-04-19 08:39:13.699 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:39:13.699 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:39:13.700 UTC [72] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:39:13.717 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:13.719 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:39:13.723 UTC [72] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:39:13.728 UTC [72] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:39:13.728 UTC [72] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:39:13.733 UTC [72] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:39:13.737 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:39:13.739 UTC [72] DEBUG:  building index "pg_toast_16550_index" on table "pg_toast_16550" serially
2025-04-19 08:39:13.740 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:39:13.741 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:39:13.741 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:39:13.742 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:39:13.742 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:39:13.742 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:39:13.743 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:39:13.743 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:39:13.743 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:39:13.744 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:39:13.744 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:39:13.745 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:39:13.745 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:39:13.745 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:39:13.746 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:39:13.746 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:39:13.746 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:39:13.747 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:39:13.747 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:39:13.747 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:39:13.748 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:39:13.748 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:39:13.748 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:39:13.749 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:39:13.750 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:39:13.751 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:39:13.751 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:39:13.751 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:39:13.752 UTC [72] DEBUG:  building index "pg_toast_16611_index" on table "pg_toast_16611" serially
2025-04-19 08:39:13.753 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:39:13.753 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:39:13.753 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:39:13.755 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:39:13.755 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:39:13.756 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:39:13.756 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:39:13.756 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:39:13.757 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:39:13.757 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:39:13.758 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:39:13.758 UTC [72] DEBUG:  building index "pg_toast_16644_index" on table "pg_toast_16644" serially
2025-04-19 08:39:13.759 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:39:13.760 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:39:13.760 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:39:13.760 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:39:13.761 UTC [72] DEBUG:  building index "pg_toast_16655_index" on table "pg_toast_16655" serially
2025-04-19 08:39:13.762 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:39:13.762 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:39:13.762 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:39:13.764 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:39:13.764 UTC [72] DEBUG:  building index "pg_toast_16678_index" on table "pg_toast_16678" serially
2025-04-19 08:39:13.765 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:39:13.765 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:39:13.765 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:39:13.766 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:39:13.766 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:39:13.767 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:39:13.767 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:39:13.768 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:39:13.768 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:39:13.769 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:39:13.769 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:39:13.769 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:39:13.769 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:39:13.770 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:39:13.770 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:39:13.771 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:39:13.771 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:39:13.772 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:39:13.772 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:39:13.773 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:39:13.773 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:39:13.774 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:39:13.774 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:39:13.774 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:39:13.774 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:39:13.781 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:14.034 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$F5WlhiA2x7hhGCbavqNkV.kdkOStnTnmOt9wtbvlo9zhNMq7p0TTC')
	                RETURNING id, username, email
	                
2025-04-19 08:39:14.035 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:39:14.035 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:39:25.835 UTC [72] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:39:26.141 UTC [72] DEBUG:  unexpected EOF on client connection
2025-04-19 08:39:28.974 UTC [79] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:39:29.003 UTC [79] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:39:29.015 UTC [79] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:39:29.015 UTC [79] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:39:29.019 UTC [79] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:39:29.025 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:39:29.030 UTC [79] DEBUG:  building index "pg_toast_16714_index" on table "pg_toast_16714" serially
2025-04-19 08:39:29.034 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:39:29.034 UTC [79] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:39:29.034 UTC [79] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:39:29.036 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:39:29.036 UTC [79] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:39:29.036 UTC [79] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:39:29.038 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:39:29.038 UTC [79] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:39:29.038 UTC [79] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:39:29.040 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:39:29.041 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:39:29.041 UTC [79] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:39:29.041 UTC [79] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:39:29.042 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:39:29.042 UTC [79] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:39:29.042 UTC [79] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:39:29.043 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:39:29.044 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:39:29.044 UTC [79] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:39:29.044 UTC [79] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:39:29.045 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:39:29.045 UTC [79] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:39:29.045 UTC [79] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:39:29.046 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:39:29.047 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:39:29.048 UTC [79] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:39:29.048 UTC [79] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:39:29.049 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:39:29.050 UTC [79] DEBUG:  building index "pg_toast_16775_index" on table "pg_toast_16775" serially
2025-04-19 08:39:29.051 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:39:29.051 UTC [79] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:39:29.051 UTC [79] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:39:29.052 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:39:29.054 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:39:29.054 UTC [79] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:39:29.054 UTC [79] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:39:29.054 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:39:29.055 UTC [79] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:39:29.055 UTC [79] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:39:29.056 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:39:29.057 UTC [79] DEBUG:  building index "pg_toast_16808_index" on table "pg_toast_16808" serially
2025-04-19 08:39:29.057 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:39:29.058 UTC [79] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:39:29.058 UTC [79] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:39:29.058 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:39:29.059 UTC [79] DEBUG:  building index "pg_toast_16819_index" on table "pg_toast_16819" serially
2025-04-19 08:39:29.060 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:39:29.060 UTC [79] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:39:29.060 UTC [79] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:39:29.062 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:39:29.062 UTC [79] DEBUG:  building index "pg_toast_16842_index" on table "pg_toast_16842" serially
2025-04-19 08:39:29.063 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:39:29.063 UTC [79] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:39:29.063 UTC [79] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:39:29.064 UTC [79] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:39:29.064 UTC [79] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:39:29.065 UTC [79] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:39:29.065 UTC [79] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:39:29.066 UTC [79] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:39:29.066 UTC [79] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:39:29.067 UTC [79] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:39:29.067 UTC [79] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:39:29.069 UTC [79] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:39:29.069 UTC [79] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:39:29.071 UTC [79] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:39:29.071 UTC [79] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:39:29.072 UTC [79] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:39:29.072 UTC [79] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:39:29.073 UTC [79] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:39:29.073 UTC [79] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:39:29.074 UTC [79] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:39:29.074 UTC [79] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:39:29.076 UTC [79] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:39:29.076 UTC [79] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:39:29.077 UTC [79] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:39:29.077 UTC [79] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:39:29.088 UTC [79] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:29.399 UTC [79] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$mtb5XUPZis7M6iVBq4hrpOSGSCgUOpiSOfgdzfcgTpsuDFVqFX9nO')
	                RETURNING id, username, email
	                
2025-04-19 08:39:29.400 UTC [79] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:39:29.400 UTC [79] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:39:29.401 UTC [79] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:39:29.421 UTC [79] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:29.423 UTC [79] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:39:29.426 UTC [79] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:39:29.433 UTC [79] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:39:29.433 UTC [79] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:39:29.437 UTC [79] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:39:29.441 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:39:29.449 UTC [79] DEBUG:  building index "pg_toast_16878_index" on table "pg_toast_16878" serially
2025-04-19 08:39:29.463 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:39:29.464 UTC [79] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:39:29.464 UTC [79] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:39:29.466 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:39:29.466 UTC [79] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:39:29.466 UTC [79] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:39:29.467 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:39:29.467 UTC [79] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:39:29.467 UTC [79] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:39:29.468 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:39:29.469 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:39:29.469 UTC [79] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:39:29.469 UTC [79] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:39:29.470 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:39:29.471 UTC [79] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:39:29.471 UTC [79] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:39:29.472 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:39:29.474 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:39:29.474 UTC [79] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:39:29.474 UTC [79] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:39:29.475 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:39:29.475 UTC [79] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:39:29.475 UTC [79] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:39:29.476 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:39:29.477 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:39:29.477 UTC [79] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:39:29.477 UTC [79] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:39:29.478 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:39:29.481 UTC [79] DEBUG:  building index "pg_toast_16939_index" on table "pg_toast_16939" serially
2025-04-19 08:39:29.482 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:39:29.482 UTC [79] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:39:29.482 UTC [79] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:39:29.483 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:39:29.484 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:39:29.484 UTC [79] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:39:29.484 UTC [79] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:39:29.485 UTC [79] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:39:29.485 UTC [79] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:39:29.485 UTC [79] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:39:29.486 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:39:29.487 UTC [79] DEBUG:  building index "pg_toast_16972_index" on table "pg_toast_16972" serially
2025-04-19 08:39:29.488 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:39:29.488 UTC [79] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:39:29.488 UTC [79] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:39:29.489 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:39:29.490 UTC [79] DEBUG:  building index "pg_toast_16983_index" on table "pg_toast_16983" serially
2025-04-19 08:39:29.490 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:39:29.491 UTC [79] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:39:29.491 UTC [79] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:39:29.492 UTC [79] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:39:29.493 UTC [79] DEBUG:  building index "pg_toast_17006_index" on table "pg_toast_17006" serially
2025-04-19 08:39:29.494 UTC [79] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:39:29.494 UTC [79] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:39:29.494 UTC [79] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:39:29.495 UTC [79] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:39:29.495 UTC [79] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:39:29.496 UTC [79] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:39:29.496 UTC [79] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:39:29.497 UTC [79] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:39:29.497 UTC [79] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:39:29.498 UTC [79] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:39:29.498 UTC [79] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:39:29.499 UTC [79] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:39:29.499 UTC [79] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:39:29.499 UTC [79] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:39:29.499 UTC [79] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:39:29.500 UTC [79] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:39:29.500 UTC [79] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:39:29.501 UTC [79] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:39:29.501 UTC [79] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:39:29.502 UTC [79] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:39:29.502 UTC [79] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:39:29.503 UTC [79] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:39:29.503 UTC [79] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:39:29.504 UTC [79] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:39:29.505 UTC [79] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:39:29.519 UTC [79] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:29.777 UTC [79] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$dG0Gl3ixL61klkdjJZSj7OBGk1JM3A2lYgflNVlSxDB9FpImLQSTu')
	                RETURNING id, username, email
	                
2025-04-19 08:39:29.778 UTC [79] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:39:29.778 UTC [79] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:39:41.841 UTC [79] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:39:42.147 UTC [79] DEBUG:  unexpected EOF on client connection
2025-04-19 08:39:43.991 UTC [94] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:39:43.996 UTC [94] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:39:44.005 UTC [94] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:39:44.005 UTC [94] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:39:44.013 UTC [94] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:39:44.016 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:39:44.019 UTC [94] DEBUG:  building index "pg_toast_17042_index" on table "pg_toast_17042" serially
2025-04-19 08:39:44.025 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:39:44.026 UTC [94] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:39:44.026 UTC [94] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:39:44.028 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:39:44.029 UTC [94] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:39:44.029 UTC [94] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:39:44.030 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:39:44.031 UTC [94] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:39:44.031 UTC [94] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:39:44.032 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:39:44.033 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:39:44.033 UTC [94] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:39:44.033 UTC [94] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:39:44.034 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:39:44.034 UTC [94] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:39:44.034 UTC [94] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:39:44.035 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:39:44.036 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:39:44.036 UTC [94] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:39:44.036 UTC [94] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:39:44.037 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:39:44.038 UTC [94] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:39:44.038 UTC [94] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:39:44.039 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:39:44.040 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:39:44.040 UTC [94] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:39:44.040 UTC [94] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:39:44.041 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:39:44.043 UTC [94] DEBUG:  building index "pg_toast_17103_index" on table "pg_toast_17103" serially
2025-04-19 08:39:44.044 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:39:44.044 UTC [94] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:39:44.044 UTC [94] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:39:44.046 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:39:44.047 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:39:44.047 UTC [94] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:39:44.047 UTC [94] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:39:44.047 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:39:44.048 UTC [94] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:39:44.048 UTC [94] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:39:44.049 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:39:44.050 UTC [94] DEBUG:  building index "pg_toast_17136_index" on table "pg_toast_17136" serially
2025-04-19 08:39:44.051 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:39:44.051 UTC [94] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:39:44.051 UTC [94] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:39:44.052 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:39:44.053 UTC [94] DEBUG:  building index "pg_toast_17147_index" on table "pg_toast_17147" serially
2025-04-19 08:39:44.054 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:39:44.054 UTC [94] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:39:44.054 UTC [94] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:39:44.055 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:39:44.056 UTC [94] DEBUG:  building index "pg_toast_17170_index" on table "pg_toast_17170" serially
2025-04-19 08:39:44.057 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:39:44.057 UTC [94] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:39:44.057 UTC [94] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:39:44.058 UTC [94] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:39:44.058 UTC [94] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:39:44.059 UTC [94] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:39:44.059 UTC [94] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:39:44.060 UTC [94] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:39:44.060 UTC [94] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:39:44.061 UTC [94] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:39:44.061 UTC [94] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:39:44.062 UTC [94] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:39:44.062 UTC [94] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:39:44.063 UTC [94] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:39:44.063 UTC [94] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:39:44.064 UTC [94] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:39:44.064 UTC [94] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:39:44.064 UTC [94] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:39:44.064 UTC [94] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:39:44.065 UTC [94] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:39:44.065 UTC [94] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:39:44.066 UTC [94] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:39:44.066 UTC [94] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:39:44.067 UTC [94] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:39:44.067 UTC [94] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:39:44.079 UTC [94] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:44.347 UTC [94] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$EsuHx4CiuRLh..iYCI.F2.93ju5QvZgp83MAyThQNLe2JdbV.Le.y')
	                RETURNING id, username, email
	                
2025-04-19 08:39:44.348 UTC [94] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:39:44.348 UTC [94] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:39:44.349 UTC [94] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:39:44.358 UTC [94] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:44.359 UTC [94] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:39:44.361 UTC [94] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:39:44.365 UTC [94] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:39:44.365 UTC [94] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:39:44.369 UTC [94] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:39:44.372 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:39:44.373 UTC [94] DEBUG:  building index "pg_toast_17206_index" on table "pg_toast_17206" serially
2025-04-19 08:39:44.374 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:39:44.375 UTC [94] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:39:44.375 UTC [94] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:39:44.376 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:39:44.376 UTC [94] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:39:44.376 UTC [94] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:39:44.377 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:39:44.377 UTC [94] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:39:44.377 UTC [94] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:39:44.378 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:39:44.378 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:39:44.379 UTC [94] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:39:44.379 UTC [94] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:39:44.380 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:39:44.380 UTC [94] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:39:44.380 UTC [94] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:39:44.380 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:39:44.381 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:39:44.381 UTC [94] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:39:44.381 UTC [94] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:39:44.382 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:39:44.382 UTC [94] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:39:44.382 UTC [94] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:39:44.384 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:39:44.385 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:39:44.385 UTC [94] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:39:44.385 UTC [94] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:39:44.386 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:39:44.387 UTC [94] DEBUG:  building index "pg_toast_17267_index" on table "pg_toast_17267" serially
2025-04-19 08:39:44.388 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:39:44.388 UTC [94] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:39:44.388 UTC [94] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:39:44.389 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:39:44.390 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:39:44.390 UTC [94] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:39:44.390 UTC [94] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:39:44.391 UTC [94] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:39:44.391 UTC [94] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:39:44.391 UTC [94] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:39:44.393 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:39:44.393 UTC [94] DEBUG:  building index "pg_toast_17300_index" on table "pg_toast_17300" serially
2025-04-19 08:39:44.394 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:39:44.395 UTC [94] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:39:44.395 UTC [94] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:39:44.396 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:39:44.397 UTC [94] DEBUG:  building index "pg_toast_17311_index" on table "pg_toast_17311" serially
2025-04-19 08:39:44.398 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:39:44.398 UTC [94] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:39:44.398 UTC [94] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:39:44.400 UTC [94] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:39:44.400 UTC [94] DEBUG:  building index "pg_toast_17334_index" on table "pg_toast_17334" serially
2025-04-19 08:39:44.401 UTC [94] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:39:44.402 UTC [94] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:39:44.402 UTC [94] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:39:44.402 UTC [94] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:39:44.402 UTC [94] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:39:44.403 UTC [94] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:39:44.403 UTC [94] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:39:44.404 UTC [94] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:39:44.404 UTC [94] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:39:44.405 UTC [94] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:39:44.405 UTC [94] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:39:44.406 UTC [94] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:39:44.406 UTC [94] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:39:44.407 UTC [94] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:39:44.407 UTC [94] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:39:44.407 UTC [94] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:39:44.407 UTC [94] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:39:44.408 UTC [94] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:39:44.408 UTC [94] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:39:44.409 UTC [94] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:39:44.409 UTC [94] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:39:44.410 UTC [94] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:39:44.410 UTC [94] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:39:44.411 UTC [94] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:39:44.411 UTC [94] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:39:44.417 UTC [94] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:39:44.666 UTC [94] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$HMjOhgCi/QdrT4TP.IWwveNu8Haj68gHsGKKMzkEWSG3mLVrms2XG')
	                RETURNING id, username, email
	                
2025-04-19 08:39:44.667 UTC [94] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:39:44.667 UTC [94] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:39:52.802 UTC [102] LOG:  statement: set search_path to 'public';
2025-04-19 08:39:52.805 UTC [102] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:39:52.822 UTC [102] LOG:  statement: SHOW ALL
2025-04-19 08:39:52.824 UTC [102] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:39:57.499 UTC [103] LOG:  statement: set search_path to 'public';
2025-04-19 08:39:57.500 UTC [103] LOG:  statement: SELECT * FROM user_stats LIMIT 100
2025-04-19 08:39:57.518 UTC [102] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:39:57.527 UTC [102] LOG:  statement: SHOW ALL
2025-04-19 08:39:57.530 UTC [102] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:39:57.876 UTC [94] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:39:58.242 UTC [94] DEBUG:  unexpected EOF on client connection
2025-04-19 08:40:00.452 UTC [111] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:00.463 UTC [111] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:00.469 UTC [111] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:00.469 UTC [111] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:00.473 UTC [111] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:00.477 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:00.485 UTC [111] DEBUG:  building index "pg_toast_17370_index" on table "pg_toast_17370" serially
2025-04-19 08:40:00.489 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:00.490 UTC [111] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:00.491 UTC [111] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:00.493 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:00.493 UTC [111] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:00.493 UTC [111] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:00.494 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:00.494 UTC [111] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:00.494 UTC [111] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:00.495 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:00.496 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:00.496 UTC [111] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:00.496 UTC [111] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:00.497 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:00.497 UTC [111] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:00.497 UTC [111] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:00.498 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:00.499 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:00.500 UTC [111] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:00.500 UTC [111] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:00.500 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:00.501 UTC [111] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:00.501 UTC [111] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:00.502 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:00.503 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:00.504 UTC [111] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:00.504 UTC [111] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:00.505 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:00.507 UTC [111] DEBUG:  building index "pg_toast_17431_index" on table "pg_toast_17431" serially
2025-04-19 08:40:00.508 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:00.508 UTC [111] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:00.508 UTC [111] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:00.509 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:00.510 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:00.510 UTC [111] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:00.510 UTC [111] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:00.511 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:00.512 UTC [111] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:00.512 UTC [111] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:00.513 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:00.514 UTC [111] DEBUG:  building index "pg_toast_17464_index" on table "pg_toast_17464" serially
2025-04-19 08:40:00.515 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:00.516 UTC [111] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:00.516 UTC [111] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:00.517 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:00.519 UTC [111] DEBUG:  building index "pg_toast_17475_index" on table "pg_toast_17475" serially
2025-04-19 08:40:00.521 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:00.521 UTC [111] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:00.521 UTC [111] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:00.523 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:00.525 UTC [111] DEBUG:  building index "pg_toast_17498_index" on table "pg_toast_17498" serially
2025-04-19 08:40:00.526 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:00.527 UTC [111] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:00.527 UTC [111] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:00.528 UTC [111] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:00.528 UTC [111] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:00.530 UTC [111] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:00.530 UTC [111] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:00.531 UTC [111] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:00.531 UTC [111] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:00.531 UTC [111] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:00.531 UTC [111] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:00.533 UTC [111] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:00.533 UTC [111] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:00.533 UTC [111] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:00.533 UTC [111] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:00.534 UTC [111] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:00.534 UTC [111] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:00.536 UTC [111] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:00.536 UTC [111] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:00.537 UTC [111] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:00.537 UTC [111] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:00.539 UTC [111] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:00.539 UTC [111] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:00.540 UTC [111] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:00.540 UTC [111] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:00.558 UTC [111] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:00.560 UTC [103] LOG:  statement: SELECT * FROM users LIMIT 100
2025-04-19 08:40:00.589 UTC [102] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:40:00.603 UTC [102] LOG:  statement: SHOW ALL
2025-04-19 08:40:00.605 UTC [102] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:40:00.914 UTC [111] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Yt14ODbO2YisF3jyhvSl6uiYMP0XnRvRahHKJdZIxpBURSML07OKO')
	                RETURNING id, username, email
	                
2025-04-19 08:40:00.915 UTC [111] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:00.916 UTC [111] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:00.917 UTC [111] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:40:00.935 UTC [111] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:00.938 UTC [111] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:00.941 UTC [111] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:00.946 UTC [111] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:00.946 UTC [111] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:00.949 UTC [111] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:00.953 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:00.954 UTC [111] DEBUG:  building index "pg_toast_17534_index" on table "pg_toast_17534" serially
2025-04-19 08:40:00.955 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:00.955 UTC [111] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:00.955 UTC [111] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:00.956 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:00.957 UTC [111] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:00.957 UTC [111] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:00.957 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:00.957 UTC [111] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:00.957 UTC [111] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:00.958 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:00.959 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:00.959 UTC [111] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:00.959 UTC [111] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:00.960 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:00.960 UTC [111] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:00.960 UTC [111] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:00.961 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:00.963 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:00.963 UTC [111] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:00.963 UTC [111] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:00.964 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:00.964 UTC [111] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:00.964 UTC [111] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:00.966 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:00.969 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:00.970 UTC [111] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:00.970 UTC [111] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:00.981 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:00.985 UTC [111] DEBUG:  building index "pg_toast_17595_index" on table "pg_toast_17595" serially
2025-04-19 08:40:00.987 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:00.988 UTC [111] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:00.988 UTC [111] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:00.990 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:00.992 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:00.992 UTC [111] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:00.992 UTC [111] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:00.994 UTC [111] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:00.996 UTC [111] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:00.997 UTC [111] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:00.999 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:01.000 UTC [111] DEBUG:  building index "pg_toast_17628_index" on table "pg_toast_17628" serially
2025-04-19 08:40:01.001 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:01.001 UTC [111] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:01.001 UTC [111] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:01.002 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:01.003 UTC [111] DEBUG:  building index "pg_toast_17639_index" on table "pg_toast_17639" serially
2025-04-19 08:40:01.004 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:01.004 UTC [111] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:01.004 UTC [111] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:01.006 UTC [111] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:01.007 UTC [111] DEBUG:  building index "pg_toast_17662_index" on table "pg_toast_17662" serially
2025-04-19 08:40:01.008 UTC [111] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:01.008 UTC [111] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:01.008 UTC [111] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:01.009 UTC [111] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:01.009 UTC [111] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:01.010 UTC [111] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:01.010 UTC [111] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:01.011 UTC [111] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:01.011 UTC [111] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:01.012 UTC [111] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:01.012 UTC [111] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:01.013 UTC [111] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:01.013 UTC [111] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:01.014 UTC [111] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:01.014 UTC [111] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:01.014 UTC [111] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:01.014 UTC [111] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:01.016 UTC [111] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:01.016 UTC [111] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:01.016 UTC [111] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:01.017 UTC [111] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:01.017 UTC [111] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:01.017 UTC [111] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:01.018 UTC [111] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:01.018 UTC [111] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:01.032 UTC [111] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:01.176 UTC [112] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:40:01.290 UTC [111] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$7nStG4C0/lka4QM2Fxz.6e8s/AvkAo2XNEZQBuXl0hCEPe5Yz6kU6')
	                RETURNING id, username, email
	                
2025-04-19 08:40:01.291 UTC [111] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:01.291 UTC [111] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:13.904 UTC [111] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:40:14.179 UTC [111] DEBUG:  unexpected EOF on client connection
2025-04-19 08:40:15.925 UTC [119] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:15.934 UTC [119] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:15.940 UTC [119] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:15.940 UTC [119] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:15.944 UTC [119] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:15.948 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:15.950 UTC [119] DEBUG:  building index "pg_toast_17698_index" on table "pg_toast_17698" serially
2025-04-19 08:40:15.951 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:15.951 UTC [119] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:15.951 UTC [119] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:15.952 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:15.952 UTC [119] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:15.953 UTC [119] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:15.953 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:15.953 UTC [119] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:15.953 UTC [119] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:15.955 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:15.956 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:15.956 UTC [119] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:15.956 UTC [119] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:15.957 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:15.957 UTC [119] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:15.957 UTC [119] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:15.957 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:15.958 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:15.959 UTC [119] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:15.959 UTC [119] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:15.959 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:15.959 UTC [119] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:15.959 UTC [119] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:15.961 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:15.962 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:15.962 UTC [119] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:15.962 UTC [119] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:15.964 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:15.965 UTC [119] DEBUG:  building index "pg_toast_17759_index" on table "pg_toast_17759" serially
2025-04-19 08:40:15.966 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:15.966 UTC [119] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:15.966 UTC [119] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:15.967 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:15.968 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:15.969 UTC [119] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:15.969 UTC [119] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:15.970 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:15.970 UTC [119] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:15.970 UTC [119] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:15.971 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:15.972 UTC [119] DEBUG:  building index "pg_toast_17792_index" on table "pg_toast_17792" serially
2025-04-19 08:40:15.973 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:15.973 UTC [119] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:15.973 UTC [119] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:15.974 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:15.975 UTC [119] DEBUG:  building index "pg_toast_17803_index" on table "pg_toast_17803" serially
2025-04-19 08:40:15.976 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:15.976 UTC [119] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:15.976 UTC [119] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:15.978 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:15.978 UTC [119] DEBUG:  building index "pg_toast_17826_index" on table "pg_toast_17826" serially
2025-04-19 08:40:15.979 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:15.979 UTC [119] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:15.979 UTC [119] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:15.980 UTC [119] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:15.980 UTC [119] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:15.981 UTC [119] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:15.981 UTC [119] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:15.982 UTC [119] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:15.982 UTC [119] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:15.983 UTC [119] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:15.983 UTC [119] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:15.984 UTC [119] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:15.984 UTC [119] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:15.985 UTC [119] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:15.985 UTC [119] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:15.986 UTC [119] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:15.986 UTC [119] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:15.986 UTC [119] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:15.986 UTC [119] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:15.987 UTC [119] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:15.987 UTC [119] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:15.988 UTC [119] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:15.988 UTC [119] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:15.989 UTC [119] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:15.989 UTC [119] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:16.002 UTC [119] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:16.271 UTC [119] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$9KakefPy9JJWsczpEranNu.Tz1lIk0gQJlFOKx9BGd4rYiisxNBlW')
	                RETURNING id, username, email
	                
2025-04-19 08:40:16.271 UTC [119] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:16.272 UTC [119] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:16.272 UTC [119] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:40:16.281 UTC [119] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:16.282 UTC [119] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:16.285 UTC [119] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:16.290 UTC [119] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:16.290 UTC [119] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:16.293 UTC [119] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:16.297 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:16.298 UTC [119] DEBUG:  building index "pg_toast_17862_index" on table "pg_toast_17862" serially
2025-04-19 08:40:16.299 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:16.299 UTC [119] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:16.299 UTC [119] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:16.300 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:16.300 UTC [119] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:16.300 UTC [119] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:16.301 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:16.301 UTC [119] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:16.301 UTC [119] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:16.302 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:16.303 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:16.303 UTC [119] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:16.303 UTC [119] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:16.304 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:16.304 UTC [119] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:16.304 UTC [119] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:16.305 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:16.306 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:16.306 UTC [119] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:16.306 UTC [119] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:16.307 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:16.307 UTC [119] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:16.307 UTC [119] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:16.308 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:16.309 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:16.309 UTC [119] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:16.309 UTC [119] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:16.311 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:16.311 UTC [119] DEBUG:  building index "pg_toast_17923_index" on table "pg_toast_17923" serially
2025-04-19 08:40:16.312 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:16.312 UTC [119] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:16.312 UTC [119] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:16.314 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:16.316 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:16.316 UTC [119] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:16.316 UTC [119] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:16.317 UTC [119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:16.317 UTC [119] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:16.317 UTC [119] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:16.319 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:16.322 UTC [119] DEBUG:  building index "pg_toast_17956_index" on table "pg_toast_17956" serially
2025-04-19 08:40:16.323 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:16.323 UTC [119] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:16.323 UTC [119] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:16.324 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:16.325 UTC [119] DEBUG:  building index "pg_toast_17967_index" on table "pg_toast_17967" serially
2025-04-19 08:40:16.326 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:16.326 UTC [119] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:16.326 UTC [119] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:16.327 UTC [119] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:16.328 UTC [119] DEBUG:  building index "pg_toast_17990_index" on table "pg_toast_17990" serially
2025-04-19 08:40:16.329 UTC [119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:16.329 UTC [119] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:16.329 UTC [119] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:16.330 UTC [119] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:16.330 UTC [119] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:16.331 UTC [119] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:16.331 UTC [119] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:16.332 UTC [119] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:16.332 UTC [119] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:16.333 UTC [119] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:16.333 UTC [119] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:16.333 UTC [119] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:16.334 UTC [119] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:16.334 UTC [119] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:16.334 UTC [119] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:16.335 UTC [119] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:16.335 UTC [119] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:16.336 UTC [119] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:16.336 UTC [119] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:16.337 UTC [119] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:16.337 UTC [119] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:16.338 UTC [119] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:16.338 UTC [119] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:16.339 UTC [119] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:16.339 UTC [119] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:16.347 UTC [119] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:16.591 UTC [119] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$JjwMj58FPWG5GUDfwzJRfuCcr2Cr6unUCfQ0mKAkR/MX4i1CKpkRe')
	                RETURNING id, username, email
	                
2025-04-19 08:40:16.592 UTC [119] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:16.592 UTC [119] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:19.527 UTC [102] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:40:19.550 UTC [102] LOG:  statement: SHOW ALL
2025-04-19 08:40:19.554 UTC [102] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:40:23.694 UTC [103] LOG:  statement: SELECT * FROM users LIMIT 100
2025-04-19 08:40:23.736 UTC [102] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:40:23.744 UTC [102] LOG:  statement: SHOW ALL
2025-04-19 08:40:23.752 UTC [102] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:40:28.576 UTC [119] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:40:28.870 UTC [119] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:40:29.738 UTC [119] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:40:30.054 UTC [119] DEBUG:  unexpected EOF on client connection
2025-04-19 08:40:32.152 UTC [134] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:32.208 UTC [134] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:32.239 UTC [134] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:32.239 UTC [134] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:32.244 UTC [134] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:32.251 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:32.256 UTC [134] DEBUG:  building index "pg_toast_18026_index" on table "pg_toast_18026" serially
2025-04-19 08:40:32.257 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:32.258 UTC [134] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:32.258 UTC [134] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:32.259 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:32.259 UTC [134] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:32.259 UTC [134] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:32.260 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:32.260 UTC [134] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:32.260 UTC [134] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:32.261 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:32.264 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:32.264 UTC [134] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:32.264 UTC [134] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:32.265 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:32.265 UTC [134] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:32.265 UTC [134] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:32.266 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:32.267 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:32.268 UTC [134] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:32.268 UTC [134] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:32.269 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:32.270 UTC [134] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:32.270 UTC [134] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:32.272 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:32.274 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:32.274 UTC [134] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:32.274 UTC [134] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:32.275 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:32.277 UTC [134] DEBUG:  building index "pg_toast_18087_index" on table "pg_toast_18087" serially
2025-04-19 08:40:32.278 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:32.278 UTC [134] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:32.278 UTC [134] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:32.280 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:32.283 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:32.283 UTC [134] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:32.283 UTC [134] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:32.284 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:32.285 UTC [134] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:32.285 UTC [134] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:32.287 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:32.289 UTC [134] DEBUG:  building index "pg_toast_18120_index" on table "pg_toast_18120" serially
2025-04-19 08:40:32.293 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:32.293 UTC [134] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:32.294 UTC [134] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:32.295 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:32.297 UTC [134] DEBUG:  building index "pg_toast_18131_index" on table "pg_toast_18131" serially
2025-04-19 08:40:32.298 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:32.298 UTC [134] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:32.298 UTC [134] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:32.300 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:32.301 UTC [134] DEBUG:  building index "pg_toast_18154_index" on table "pg_toast_18154" serially
2025-04-19 08:40:32.302 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:32.302 UTC [134] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:32.302 UTC [134] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:32.303 UTC [134] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:32.303 UTC [134] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:32.304 UTC [134] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:32.304 UTC [134] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:32.305 UTC [134] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:32.305 UTC [134] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:32.306 UTC [134] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:32.306 UTC [134] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:32.307 UTC [134] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:32.307 UTC [134] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:32.309 UTC [134] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:32.309 UTC [134] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:32.311 UTC [134] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:32.311 UTC [134] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:32.314 UTC [134] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:32.314 UTC [134] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:32.315 UTC [134] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:32.315 UTC [134] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:32.316 UTC [134] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:32.316 UTC [134] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:32.317 UTC [134] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:32.317 UTC [134] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:32.345 UTC [134] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:32.655 UTC [134] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$vje9NXDrl727ImgNJfDQ0e0yXAgMIiMGk7KSAKP08dM2flSlREYE.')
	                RETURNING id, username, email
	                
2025-04-19 08:40:32.656 UTC [134] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:32.657 UTC [134] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:32.658 UTC [134] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:40:32.671 UTC [134] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:32.673 UTC [134] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:32.676 UTC [134] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:32.681 UTC [134] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:32.681 UTC [134] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:32.684 UTC [134] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:32.687 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:32.688 UTC [134] DEBUG:  building index "pg_toast_18190_index" on table "pg_toast_18190" serially
2025-04-19 08:40:32.689 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:32.690 UTC [134] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:32.690 UTC [134] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:32.691 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:32.691 UTC [134] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:32.691 UTC [134] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:32.692 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:32.693 UTC [134] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:32.693 UTC [134] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:32.693 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:32.694 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:32.695 UTC [134] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:32.695 UTC [134] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:32.696 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:32.696 UTC [134] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:32.696 UTC [134] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:32.696 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:32.698 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:32.698 UTC [134] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:32.698 UTC [134] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:32.699 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:32.700 UTC [134] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:32.700 UTC [134] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:32.702 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:32.704 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:32.705 UTC [134] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:32.705 UTC [134] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:32.707 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:32.710 UTC [134] DEBUG:  building index "pg_toast_18251_index" on table "pg_toast_18251" serially
2025-04-19 08:40:32.711 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:32.711 UTC [134] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:32.711 UTC [134] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:32.713 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:32.714 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:32.714 UTC [134] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:32.714 UTC [134] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:32.715 UTC [134] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:32.715 UTC [134] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:32.715 UTC [134] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:32.717 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:32.718 UTC [134] DEBUG:  building index "pg_toast_18284_index" on table "pg_toast_18284" serially
2025-04-19 08:40:32.719 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:32.719 UTC [134] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:32.719 UTC [134] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:32.720 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:32.721 UTC [134] DEBUG:  building index "pg_toast_18295_index" on table "pg_toast_18295" serially
2025-04-19 08:40:32.722 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:32.722 UTC [134] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:32.722 UTC [134] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:32.724 UTC [134] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:32.725 UTC [134] DEBUG:  building index "pg_toast_18318_index" on table "pg_toast_18318" serially
2025-04-19 08:40:32.726 UTC [134] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:32.726 UTC [134] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:32.726 UTC [134] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:32.727 UTC [134] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:32.727 UTC [134] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:32.728 UTC [134] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:32.728 UTC [134] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:32.729 UTC [134] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:32.729 UTC [134] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:32.730 UTC [134] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:32.730 UTC [134] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:32.730 UTC [134] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:32.730 UTC [134] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:32.731 UTC [134] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:32.731 UTC [134] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:32.732 UTC [134] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:32.732 UTC [134] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:32.733 UTC [134] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:32.733 UTC [134] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:32.735 UTC [134] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:32.735 UTC [134] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:32.736 UTC [134] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:32.736 UTC [134] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:32.737 UTC [134] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:32.737 UTC [134] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:32.745 UTC [134] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:32.992 UTC [134] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$rB5zSnV3g629.cAz/K3R2.F5cBVnyBeCTmS5oXKsWqxyorezGGBzK')
	                RETURNING id, username, email
	                
2025-04-19 08:40:32.993 UTC [134] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:32.994 UTC [134] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:43.755 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.766 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:40:43.770 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:40:43.771 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.790 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 08:40:43.796 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:40:43.802 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:40:43.805 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.806 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:40:43.806 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:40:43.807 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.808 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 08:40:43.808 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:40:43.813 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:40:43.816 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.817 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:40:43.817 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:40:43.817 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.818 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 08:40:43.818 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:40:43.821 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:40:43.823 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.824 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:40:43.825 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:40:43.825 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.826 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 08:40:43.827 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:40:43.831 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:40:43.837 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.837 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:40:43.838 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:40:43.839 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.840 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 08:40:43.842 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:40:43.850 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:40:43.856 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.857 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:40:43.857 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:40:43.857 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.858 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 08:40:43.859 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:40:43.863 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:40:43.866 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.867 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:40:43.867 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:40:43.867 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.868 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 08:40:43.869 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:40:43.872 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:40:43.874 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.875 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:40:43.875 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:40:43.875 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.876 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 08:40:43.876 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:40:43.880 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:40:43.882 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.883 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:40:43.883 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:40:43.884 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.884 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 08:40:43.885 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:40:43.889 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:40:43.893 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.893 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:40:43.894 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:40:43.894 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.895 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 08:40:43.896 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:40:43.901 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:40:43.903 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.904 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:40:43.904 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:40:43.904 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.905 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 08:40:43.905 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:40:43.909 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:40:43.912 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.913 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:40:43.913 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:40:43.914 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.916 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 08:40:43.916 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:40:43.921 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:40:43.926 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.926 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:40:43.927 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:40:43.927 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.928 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 08:40:43.928 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:40:43.933 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:40:43.936 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.936 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:40:43.936 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:40:43.937 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.938 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 08:40:43.938 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:40:43.941 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:40:43.944 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.945 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:40:43.946 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:40:43.948 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.949 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 08:40:43.950 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:40:43.953 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:40:43.955 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.956 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:40:43.956 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:40:43.957 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.957 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 08:40:43.958 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:40:43.962 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:40:43.965 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.966 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:40:43.966 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:40:43.966 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.967 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 08:40:43.967 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:40:43.970 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:40:43.972 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.973 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:40:43.973 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:40:43.973 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.974 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 08:40:43.975 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:40:43.978 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:40:43.982 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.982 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:40:43.982 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:40:43.983 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.983 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 08:40:43.984 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:40:43.987 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:40:43.989 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.990 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:40:43.990 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:40:43.990 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.991 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 08:40:43.991 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:40:43.994 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:40:43.997 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:43.997 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:40:43.997 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:40:43.998 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:43.999 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 08:40:43.999 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:40:44.003 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:40:44.005 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.005 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:40:44.006 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:40:44.006 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.007 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 08:40:44.007 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:40:44.010 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:40:44.012 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.012 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:40:44.013 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:40:44.014 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.014 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 08:40:44.015 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:40:44.018 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:40:44.021 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.021 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:40:44.021 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:40:44.021 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.022 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 08:40:44.023 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:40:44.026 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:40:44.029 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.030 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:40:44.030 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:40:44.031 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.032 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 08:40:44.032 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:40:44.035 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:40:44.038 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.038 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:40:44.039 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:40:44.040 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.040 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 08:40:44.041 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:40:44.045 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:40:44.050 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.051 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:40:44.051 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:40:44.051 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.052 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 08:40:44.053 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:40:44.057 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:40:44.060 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.060 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:40:44.061 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:40:44.061 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.062 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 08:40:44.062 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:40:44.067 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:40:44.069 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.069 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:40:44.070 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:40:44.070 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.071 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 08:40:44.071 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:40:44.074 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:40:44.076 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.077 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:40:44.077 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:40:44.077 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.078 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 08:40:44.078 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:40:44.083 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:40:44.085 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.086 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:40:44.086 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:40:44.087 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.087 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 08:40:44.088 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:40:44.091 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:40:44.093 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.094 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:40:44.094 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:40:44.094 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.095 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 08:40:44.096 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:40:44.100 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:40:44.102 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.102 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:40:44.103 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:40:44.103 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.104 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 08:40:44.104 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:40:44.107 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:40:44.109 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.110 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:40:44.110 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:40:44.110 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.111 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 08:40:44.111 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:40:44.115 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:40:44.117 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.118 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:40:44.118 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:40:44.118 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.119 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 08:40:44.120 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:40:44.123 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:40:44.125 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.125 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:40:44.126 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:40:44.126 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.126 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 08:40:44.127 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:40:44.130 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:40:44.133 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.133 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:40:44.133 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:40:44.134 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.134 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 08:40:44.135 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:40:44.138 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:40:44.140 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.140 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:40:44.140 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:40:44.141 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.141 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 08:40:44.142 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:40:44.145 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:40:44.148 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.148 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:40:44.149 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:40:44.149 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.150 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 08:40:44.150 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:40:44.154 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:40:44.156 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.157 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:40:44.158 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:40:44.158 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.159 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 08:40:44.159 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:40:44.162 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:40:44.165 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.165 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:40:44.166 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:40:44.166 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.166 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 08:40:44.167 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:40:44.170 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:40:44.172 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.173 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:40:44.173 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:40:44.173 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.174 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 08:40:44.174 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:40:44.177 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:40:44.179 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.180 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:40:44.180 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:40:44.181 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.182 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 08:40:44.182 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:40:44.186 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:40:44.189 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.189 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:40:44.190 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:40:44.190 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.190 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 08:40:44.191 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:40:44.194 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:40:44.196 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.196 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:40:44.197 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:40:44.197 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.198 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 08:40:44.198 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:40:44.202 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:40:44.204 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.204 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:40:44.205 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:40:44.205 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.206 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 08:40:44.206 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:40:44.209 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:40:44.211 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.212 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:40:44.212 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:40:44.213 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.214 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 08:40:44.215 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:40:44.218 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:40:44.220 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.221 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:40:44.221 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:40:44.221 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.222 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 08:40:44.223 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:40:44.226 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:40:44.229 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.229 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:40:44.229 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:40:44.230 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.231 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 08:40:44.232 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:40:44.250 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:40:44.255 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.256 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:40:44.256 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:40:44.257 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.258 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 08:40:44.258 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:40:44.262 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:40:44.266 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.266 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:40:44.267 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:40:44.267 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.268 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 08:40:44.269 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:40:44.272 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:40:44.275 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.276 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:40:44.276 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:40:44.276 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.277 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 08:40:44.278 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:40:44.284 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:40:44.287 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.287 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:40:44.288 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:40:44.288 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.288 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 08:40:44.289 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:40:44.293 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:40:44.295 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.295 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:40:44.296 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:40:44.296 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.297 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 08:40:44.297 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:40:44.300 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:40:44.303 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.303 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:40:44.303 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:40:44.304 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.304 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 08:40:44.305 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:40:44.315 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:40:44.319 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.319 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:40:44.320 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:40:44.320 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.321 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 08:40:44.321 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:40:44.325 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:40:44.328 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.328 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:40:44.329 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:40:44.329 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.330 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 08:40:44.330 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:40:44.334 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:40:44.336 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.337 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:40:44.337 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:40:44.337 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.338 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 08:40:44.338 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:40:44.342 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:40:44.344 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.344 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:40:44.345 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:40:44.345 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.346 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 08:40:44.347 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:40:44.355 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:40:44.358 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.359 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:40:44.359 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:40:44.359 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.360 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 08:40:44.360 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:40:44.364 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:40:44.367 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.367 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:40:44.368 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:40:44.368 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.369 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 08:40:44.369 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:40:44.372 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:40:44.374 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.375 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:40:44.375 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:40:44.375 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.376 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 08:40:44.376 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:40:44.379 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:40:44.382 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.382 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:40:44.383 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:40:44.383 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.383 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 08:40:44.384 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:40:44.387 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:40:44.389 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.389 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:40:44.389 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:40:44.390 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.390 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 08:40:44.391 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:40:44.394 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:40:44.396 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.396 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:40:44.397 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:40:44.397 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.398 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 08:40:44.398 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:40:44.401 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:40:44.404 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.404 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:40:44.404 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:40:44.405 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.405 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 08:40:44.405 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:40:44.408 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:40:44.411 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.412 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:40:44.412 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:40:44.412 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.414 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 08:40:44.414 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:40:44.418 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:40:44.420 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.421 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:40:44.421 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:40:44.421 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.422 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 08:40:44.423 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:40:44.426 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:40:44.429 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.429 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:40:44.430 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:40:44.430 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.431 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 08:40:44.432 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:40:44.435 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:40:44.438 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.438 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:40:44.439 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:40:44.439 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.440 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 08:40:44.440 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:40:44.444 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:40:44.447 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.448 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:40:44.449 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:40:44.449 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.450 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 08:40:44.450 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:40:44.453 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:40:44.456 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.456 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:40:44.456 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:40:44.457 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.457 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 08:40:44.458 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:40:44.462 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:40:44.466 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.467 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:40:44.467 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:40:44.468 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.469 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 08:40:44.470 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:40:44.478 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:40:44.483 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.483 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:40:44.484 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:40:44.484 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.485 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 08:40:44.486 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:40:44.490 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:40:44.492 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.493 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:40:44.493 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:40:44.493 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.494 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 08:40:44.494 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:40:44.498 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:40:44.500 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.501 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:40:44.501 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:40:44.501 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.502 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 08:40:44.503 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:40:44.508 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:40:44.511 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.511 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:40:44.511 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:40:44.512 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.513 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 08:40:44.513 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:40:44.518 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:40:44.520 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.521 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:40:44.521 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:40:44.521 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.522 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 08:40:44.522 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:40:44.525 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:40:44.527 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.527 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:40:44.528 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:40:44.528 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.529 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 08:40:44.529 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:40:44.533 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:40:44.535 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.535 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:40:44.536 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:40:44.536 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.537 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 08:40:44.537 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:40:44.540 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:40:44.543 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.543 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:40:44.544 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:40:44.544 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.545 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 08:40:44.545 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:40:44.549 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:40:44.553 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.553 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:40:44.554 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:40:44.554 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.555 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 08:40:44.555 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:40:44.558 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:40:44.560 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.561 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:40:44.561 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:40:44.561 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.562 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 08:40:44.563 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:40:44.566 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:40:44.568 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.569 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:40:44.569 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:40:44.569 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.570 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 08:40:44.570 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:40:44.573 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:40:44.576 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.576 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:40:44.576 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:40:44.577 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.577 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 08:40:44.578 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:40:44.581 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:40:44.584 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.584 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:40:44.584 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:40:44.585 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.585 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 08:40:44.586 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:40:44.589 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:40:44.592 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.593 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:40:44.593 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:40:44.593 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.594 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 08:40:44.594 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:40:44.598 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:40:44.600 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.601 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:40:44.601 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:40:44.601 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.602 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 08:40:44.602 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:40:44.605 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:40:44.609 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.609 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:40:44.610 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:40:44.611 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.612 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 08:40:44.613 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:40:44.619 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:40:44.623 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.624 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:40:44.625 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:40:44.625 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.626 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 08:40:44.627 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:40:44.633 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:40:44.636 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.637 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:40:44.637 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:40:44.638 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.638 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 08:40:44.639 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:40:44.645 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:40:44.649 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.649 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:40:44.652 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:40:44.653 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.654 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 08:40:44.655 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:40:44.659 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:40:44.662 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.662 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:40:44.662 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:40:44.663 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.663 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 08:40:44.664 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:40:44.667 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:40:44.669 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.669 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:40:44.669 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:40:44.670 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.670 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 08:40:44.671 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:40:44.674 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:40:44.676 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.677 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:40:44.677 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:40:44.678 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.678 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 08:40:44.679 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:40:44.683 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:40:44.686 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.687 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:40:44.687 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:40:44.688 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.688 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 08:40:44.688 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:40:44.691 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:40:44.693 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.694 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:40:44.694 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:40:44.694 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.695 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 08:40:44.695 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:40:44.699 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:40:44.701 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.702 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:40:44.702 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:40:44.702 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.703 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 08:40:44.703 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:40:44.706 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:40:44.708 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.709 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:40:44.709 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:40:44.709 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.710 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 08:40:44.710 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:40:44.714 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:40:44.716 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.717 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:40:44.717 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:40:44.717 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.718 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 08:40:44.718 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:40:44.721 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:40:44.723 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.724 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:40:44.724 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:40:44.724 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.725 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 08:40:44.725 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:40:44.728 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:40:44.731 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.731 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:40:44.732 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:40:44.732 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.732 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 08:40:44.733 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:40:44.736 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:40:44.737 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.738 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:40:44.738 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:40:44.738 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.739 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 08:40:44.739 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:40:44.742 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:40:44.744 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.745 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:40:44.746 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:40:44.746 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.747 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 08:40:44.748 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:40:44.751 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:40:44.754 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.755 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:40:44.755 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:40:44.755 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.756 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 08:40:44.756 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:40:44.760 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:40:44.762 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.762 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:40:44.763 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:40:44.763 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.764 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 08:40:44.765 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:40:44.768 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:40:44.770 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.770 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:40:44.771 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:40:44.771 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.772 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 08:40:44.772 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:40:44.776 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:40:44.779 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.779 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:40:44.779 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:40:44.780 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.782 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 08:40:44.782 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:40:44.785 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:40:44.787 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.788 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:40:44.788 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:40:44.789 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.789 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 08:40:44.790 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:40:44.793 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:40:44.795 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.795 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:40:44.796 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:40:44.796 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.797 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 08:40:44.797 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:40:44.801 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:40:44.803 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.803 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:40:44.803 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:40:44.804 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.805 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 08:40:44.805 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:40:44.808 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:40:44.811 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.811 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:40:44.811 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:40:44.812 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.813 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 08:40:44.813 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:40:44.818 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:40:44.820 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.820 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:40:44.821 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:40:44.821 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.822 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 08:40:44.822 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:40:44.825 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:40:44.827 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.827 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:40:44.828 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:40:44.828 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.829 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 08:40:44.829 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:40:44.833 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:40:44.835 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.835 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:40:44.836 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:40:44.836 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.836 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 08:40:44.837 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:40:44.840 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:40:44.842 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.842 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:40:44.843 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:40:44.843 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.843 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 08:40:44.844 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:40:44.847 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:40:44.850 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.850 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:40:44.850 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:40:44.851 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.851 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 08:40:44.852 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:40:44.854 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:40:44.857 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.857 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:40:44.857 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:40:44.857 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.858 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 08:40:44.858 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:40:44.861 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:40:44.865 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.865 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:40:44.866 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:40:44.866 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.867 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 08:40:44.867 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:40:44.870 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:40:44.873 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.873 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:40:44.874 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:40:44.874 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.875 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 08:40:44.876 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:40:44.881 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:40:44.884 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.884 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:40:44.885 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:40:44.885 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.886 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 08:40:44.886 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:40:44.889 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:40:44.892 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.892 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:40:44.892 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:40:44.893 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.893 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 08:40:44.894 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:40:44.897 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:40:44.900 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.900 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:40:44.900 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:40:44.901 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.901 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 08:40:44.902 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:40:44.904 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:40:44.907 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.907 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:40:44.907 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:40:44.908 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.908 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 08:40:44.909 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:40:44.911 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:40:44.915 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.915 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:40:44.915 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:40:44.916 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.916 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 08:40:44.917 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:40:44.920 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:40:44.922 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.922 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:40:44.922 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:40:44.923 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.923 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 08:40:44.924 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:40:44.927 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:40:44.929 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.929 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:40:44.929 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:40:44.929 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.930 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 08:40:44.930 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:40:44.933 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:40:44.935 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.936 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:40:44.936 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:40:44.936 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.936 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 08:40:44.937 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:40:44.939 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:40:44.941 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.942 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:40:44.942 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:40:44.943 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.943 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 08:40:44.944 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:40:44.948 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:40:44.951 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.952 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:40:44.952 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:40:44.952 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.953 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 08:40:44.953 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:40:44.957 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:40:44.960 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.960 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:40:44.961 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:40:44.961 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.962 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 08:40:44.962 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:40:44.966 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:40:44.969 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.969 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:40:44.970 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:40:44.970 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.971 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 08:40:44.971 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:40:44.974 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:40:44.976 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.977 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:40:44.977 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:40:44.977 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.978 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 08:40:44.978 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:40:44.983 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:40:44.986 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.987 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:40:44.987 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:40:44.987 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.988 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 08:40:44.989 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:40:44.993 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:40:44.995 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:44.996 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:40:44.996 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:40:44.996 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:44.997 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 08:40:44.997 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:40:45.000 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:40:45.002 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.003 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:40:45.003 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:40:45.003 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.004 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 08:40:45.005 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:40:45.008 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:40:45.010 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.011 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:40:45.011 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:40:45.011 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.013 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 08:40:45.013 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:40:45.018 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:40:45.020 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.020 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:40:45.020 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:40:45.021 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.021 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 08:40:45.022 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:40:45.025 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:40:45.027 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.027 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:40:45.028 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:40:45.028 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.029 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 08:40:45.029 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:40:45.032 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:40:45.035 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.035 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:40:45.035 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:40:45.036 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.036 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 08:40:45.037 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:40:45.040 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:40:45.042 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.042 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:40:45.043 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:40:45.043 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.043 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 08:40:45.044 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:40:45.047 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:40:45.050 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.050 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:40:45.050 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:40:45.050 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.051 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 08:40:45.052 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:40:45.055 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:40:45.057 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.058 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:40:45.058 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:40:45.058 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.059 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 08:40:45.059 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:40:45.063 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:40:45.067 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.067 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:40:45.068 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:40:45.068 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.069 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 08:40:45.069 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:40:45.072 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:40:45.074 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.075 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:40:45.075 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:40:45.075 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.076 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 08:40:45.076 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:40:45.080 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:40:45.083 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.084 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:40:45.084 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:40:45.085 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.085 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 08:40:45.086 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:40:45.090 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:40:45.093 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.093 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:40:45.094 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:40:45.094 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.094 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 08:40:45.095 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:40:45.099 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:40:45.101 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.101 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:40:45.101 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:40:45.102 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.102 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 08:40:45.103 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:40:45.105 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:40:45.108 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.108 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:40:45.108 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:40:45.109 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.109 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 08:40:45.109 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:40:45.112 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:40:45.115 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.115 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:40:45.116 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:40:45.116 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.117 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 08:40:45.117 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:40:45.120 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:40:45.123 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.123 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:40:45.123 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:40:45.124 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.125 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 08:40:45.125 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:40:45.129 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:40:45.133 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.133 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:40:45.134 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:40:45.134 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.135 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 08:40:45.135 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:40:45.139 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:40:45.142 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.143 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:40:45.143 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:40:45.144 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.144 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 08:40:45.145 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:40:45.149 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:40:45.152 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.153 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:40:45.153 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:40:45.154 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.154 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 08:40:45.155 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:40:45.159 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:40:45.162 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.162 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:40:45.163 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:40:45.164 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.165 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 08:40:45.165 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:40:45.168 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:40:45.170 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.171 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:40:45.171 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:40:45.171 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.172 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 08:40:45.172 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:40:45.175 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:40:45.177 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.178 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:40:45.178 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:40:45.178 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.179 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 08:40:45.179 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:40:45.183 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:40:45.186 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.187 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:40:45.187 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:40:45.187 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.188 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 08:40:45.188 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:40:45.191 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:40:45.193 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.193 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:40:45.193 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:40:45.194 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.194 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 08:40:45.195 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:40:45.198 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:40:45.201 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.201 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:40:45.201 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:40:45.202 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.203 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 08:40:45.203 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:40:45.206 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:40:45.210 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.210 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:40:45.210 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:40:45.211 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.211 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 08:40:45.212 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:40:45.216 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:40:45.218 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.219 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:40:45.219 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:40:45.219 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.220 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 08:40:45.220 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:40:45.224 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:40:45.227 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.227 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:40:45.227 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:40:45.227 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.228 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 08:40:45.229 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:40:45.233 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:40:45.235 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.235 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:40:45.236 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:40:45.236 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.237 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 08:40:45.237 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:40:45.240 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:40:45.243 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.243 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:40:45.244 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:40:45.244 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.245 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 08:40:45.245 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:40:45.249 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:40:45.252 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.252 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:40:45.253 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:40:45.253 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.253 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 08:40:45.254 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:40:45.256 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:40:45.258 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.258 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:40:45.259 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:40:45.259 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.259 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 08:40:45.260 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:40:45.262 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:40:45.265 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.266 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:40:45.266 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:40:45.266 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.267 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 08:40:45.267 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:40:45.270 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:40:45.273 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.273 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:40:45.274 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:40:45.274 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.275 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 08:40:45.276 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:40:45.279 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:40:45.282 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.282 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:40:45.283 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:40:45.283 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.284 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 08:40:45.284 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:40:45.287 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:40:45.289 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.290 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:40:45.290 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:40:45.290 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.291 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 08:40:45.291 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:40:45.294 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:40:45.296 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.297 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:40:45.297 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:40:45.298 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.298 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 08:40:45.299 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:40:45.302 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:40:45.304 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.305 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:40:45.305 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:40:45.305 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.306 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 08:40:45.306 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:40:45.310 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:40:45.312 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.312 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:40:45.312 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:40:45.313 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.314 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 08:40:45.315 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:40:45.318 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:40:45.320 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.320 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:40:45.321 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:40:45.321 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.321 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 08:40:45.322 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:40:45.325 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:40:45.327 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.328 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:40:45.328 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:40:45.328 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.329 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 08:40:45.331 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:40:45.334 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:40:45.336 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.337 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:40:45.337 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:40:45.338 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.338 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 08:40:45.339 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:40:45.343 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:40:45.345 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.346 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:40:45.347 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:40:45.348 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.348 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 08:40:45.349 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:40:45.352 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:40:45.354 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.354 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:40:45.355 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:40:45.355 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.356 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 08:40:45.356 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:40:45.359 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:40:45.362 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.362 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:40:45.362 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:40:45.363 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.364 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 08:40:45.365 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:40:45.368 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:40:45.371 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.371 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:40:45.372 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:40:45.372 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.373 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 08:40:45.374 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:40:45.378 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:40:45.382 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.382 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:40:45.382 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:40:45.382 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.383 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 08:40:45.383 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:40:45.386 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:40:45.388 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.389 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:40:45.389 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:40:45.389 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.390 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 08:40:45.390 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:40:45.393 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:40:45.395 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.396 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:40:45.396 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:40:45.396 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.397 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 08:40:45.398 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:40:45.401 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:40:45.403 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.404 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:40:45.404 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:40:45.405 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.405 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 08:40:45.406 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:40:45.410 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:40:45.414 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.415 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:40:45.416 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:40:45.416 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.417 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 08:40:45.417 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:40:45.422 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:40:45.425 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.425 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:40:45.426 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:40:45.426 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.427 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 08:40:45.428 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:40:45.433 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:40:45.435 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.436 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:40:45.436 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:40:45.436 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.437 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 08:40:45.437 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:40:45.442 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:40:45.445 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.445 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:40:45.445 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:40:45.446 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.448 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 08:40:45.450 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:40:45.454 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:40:45.457 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.458 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:40:45.459 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:40:45.459 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.465 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 08:40:45.466 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:40:45.469 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:40:45.472 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.472 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:40:45.473 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:40:45.476 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.477 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 08:40:45.478 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:40:45.484 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:40:45.487 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.488 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:40:45.488 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:40:45.489 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.490 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 08:40:45.491 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:40:45.495 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:40:45.500 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.500 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:40:45.501 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:40:45.501 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.502 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 08:40:45.502 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:40:45.508 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:40:45.511 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.511 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:40:45.511 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:40:45.512 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.513 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 08:40:45.513 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:40:45.518 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:40:45.520 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.521 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:40:45.521 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:40:45.522 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.522 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 08:40:45.523 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:40:45.526 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:40:45.528 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.529 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:40:45.529 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:40:45.529 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.529 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 08:40:45.530 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:40:45.535 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:40:45.537 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.538 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:40:45.538 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:40:45.538 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.539 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 08:40:45.540 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:40:45.544 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:40:45.548 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.548 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:40:45.549 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:40:45.549 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.550 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 08:40:45.550 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:40:45.556 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:40:45.559 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.559 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:40:45.560 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:40:45.560 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.561 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 08:40:45.562 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:40:45.567 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:40:45.570 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.571 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:40:45.571 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:40:45.572 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.573 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 08:40:45.573 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:40:45.577 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:40:45.581 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.582 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:40:45.582 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:40:45.583 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.583 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 08:40:45.584 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:40:45.587 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:40:45.589 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.590 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:40:45.590 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:40:45.591 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.591 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 08:40:45.592 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:40:45.597 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:40:45.600 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.601 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:40:45.601 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:40:45.602 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.603 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 08:40:45.603 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:40:45.608 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:40:45.611 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.611 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:40:45.611 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:40:45.612 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.613 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 08:40:45.614 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:40:45.618 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:40:45.620 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.621 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:40:45.621 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:40:45.622 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.622 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 08:40:45.623 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:40:45.626 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:40:45.629 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.629 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:40:45.631 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:40:45.632 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.633 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 08:40:45.634 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:40:45.639 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:40:45.642 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.642 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:40:45.643 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:40:45.643 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.644 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 08:40:45.645 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:40:45.651 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:40:45.654 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.655 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:40:45.655 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:40:45.655 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.656 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 08:40:45.657 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:40:45.662 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:40:45.667 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.668 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:40:45.669 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:40:45.670 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.671 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 08:40:45.671 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:40:45.675 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:40:45.677 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.678 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:40:45.678 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:40:45.679 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.679 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 08:40:45.680 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:40:45.684 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:40:45.687 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.693 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:40:45.695 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:40:45.696 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.697 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 08:40:45.698 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:40:45.701 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:40:45.704 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.704 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:40:45.705 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:40:45.705 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.705 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 08:40:45.706 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:40:45.709 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:40:45.712 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.712 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:40:45.713 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:40:45.714 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.716 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 08:40:45.716 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:40:45.720 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:40:45.728 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:45.729 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:40:45.729 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:40:45.729 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:45.731 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 08:40:45.732 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:40:45.735 UTC [134] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:40:46.013 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:40:46.019 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:46.020 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:40:46.020 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:40:46.020 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:46.021 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 08:40:46.022 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:40:46.025 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:40:46.027 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:46.028 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:40:46.028 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:40:46.028 UTC [134] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:40:46.029 UTC [134] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 08:40:46.029 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:40:46.035 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:40:46.037 UTC [134] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:40:46.038 UTC [134] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:40:46.058 UTC [134] DEBUG:  unexpected EOF on client connection
2025-04-19 08:40:47.985 UTC [142] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:47.992 UTC [142] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:48.005 UTC [142] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:48.005 UTC [142] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:48.012 UTC [142] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:48.022 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:48.026 UTC [142] DEBUG:  building index "pg_toast_18354_index" on table "pg_toast_18354" serially
2025-04-19 08:40:48.028 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:48.028 UTC [142] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:48.028 UTC [142] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:48.030 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:48.030 UTC [142] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:48.030 UTC [142] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:48.031 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:48.032 UTC [142] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:48.032 UTC [142] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:48.032 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:48.033 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:48.034 UTC [142] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:48.034 UTC [142] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:48.035 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:48.035 UTC [142] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:48.035 UTC [142] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:48.036 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:48.037 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:48.037 UTC [142] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:48.037 UTC [142] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:48.038 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:48.038 UTC [142] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:48.038 UTC [142] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:48.039 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:48.040 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:48.040 UTC [142] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:48.040 UTC [142] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:48.041 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:48.043 UTC [142] DEBUG:  building index "pg_toast_18415_index" on table "pg_toast_18415" serially
2025-04-19 08:40:48.044 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:48.044 UTC [142] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:48.044 UTC [142] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:48.046 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:48.047 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:48.047 UTC [142] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:48.047 UTC [142] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:48.048 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:48.049 UTC [142] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:48.049 UTC [142] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:48.050 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:48.052 UTC [142] DEBUG:  building index "pg_toast_18448_index" on table "pg_toast_18448" serially
2025-04-19 08:40:48.052 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:48.052 UTC [142] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:48.052 UTC [142] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:48.053 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:48.054 UTC [142] DEBUG:  building index "pg_toast_18459_index" on table "pg_toast_18459" serially
2025-04-19 08:40:48.055 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:48.055 UTC [142] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:48.055 UTC [142] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:48.056 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:48.057 UTC [142] DEBUG:  building index "pg_toast_18482_index" on table "pg_toast_18482" serially
2025-04-19 08:40:48.058 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:48.058 UTC [142] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:48.058 UTC [142] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:48.059 UTC [142] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:48.059 UTC [142] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:48.060 UTC [142] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:48.060 UTC [142] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:48.061 UTC [142] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:48.061 UTC [142] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:48.061 UTC [142] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:48.061 UTC [142] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:48.062 UTC [142] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:48.062 UTC [142] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:48.063 UTC [142] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:48.063 UTC [142] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:48.064 UTC [142] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:48.064 UTC [142] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:48.065 UTC [142] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:48.065 UTC [142] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:48.067 UTC [142] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:48.067 UTC [142] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:48.068 UTC [142] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:48.068 UTC [142] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:48.069 UTC [142] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:48.069 UTC [142] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:48.079 UTC [142] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:48.357 UTC [142] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$qmP/aoAa3kGdPHvwcMYF0OoIAqIIWldBvCxTUNjbuSvbCFMIr92/K')
	                RETURNING id, username, email
	                
2025-04-19 08:40:48.358 UTC [142] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:48.358 UTC [142] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:40:48.359 UTC [142] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:40:48.371 UTC [142] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:48.373 UTC [142] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:40:48.377 UTC [142] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:40:48.388 UTC [142] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:40:48.388 UTC [142] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:40:48.393 UTC [142] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:40:48.396 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:40:48.397 UTC [142] DEBUG:  building index "pg_toast_18518_index" on table "pg_toast_18518" serially
2025-04-19 08:40:48.399 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:40:48.399 UTC [142] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:40:48.399 UTC [142] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:40:48.400 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:40:48.401 UTC [142] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:40:48.401 UTC [142] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:40:48.402 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:40:48.402 UTC [142] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:40:48.402 UTC [142] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:40:48.405 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:40:48.406 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:40:48.407 UTC [142] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:40:48.407 UTC [142] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:40:48.408 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:40:48.408 UTC [142] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:40:48.408 UTC [142] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:40:48.409 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:40:48.411 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:40:48.411 UTC [142] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:40:48.411 UTC [142] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:40:48.413 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:40:48.413 UTC [142] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:40:48.413 UTC [142] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:40:48.415 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:40:48.416 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:40:48.417 UTC [142] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:40:48.417 UTC [142] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:40:48.419 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:40:48.421 UTC [142] DEBUG:  building index "pg_toast_18579_index" on table "pg_toast_18579" serially
2025-04-19 08:40:48.422 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:40:48.422 UTC [142] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:40:48.422 UTC [142] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:40:48.424 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:40:48.425 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:40:48.425 UTC [142] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:40:48.425 UTC [142] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:40:48.426 UTC [142] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:40:48.426 UTC [142] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:40:48.426 UTC [142] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:40:48.427 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:40:48.428 UTC [142] DEBUG:  building index "pg_toast_18612_index" on table "pg_toast_18612" serially
2025-04-19 08:40:48.429 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:40:48.429 UTC [142] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:40:48.429 UTC [142] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:40:48.430 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:40:48.431 UTC [142] DEBUG:  building index "pg_toast_18623_index" on table "pg_toast_18623" serially
2025-04-19 08:40:48.431 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:40:48.432 UTC [142] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:40:48.432 UTC [142] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:40:48.433 UTC [142] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:40:48.434 UTC [142] DEBUG:  building index "pg_toast_18646_index" on table "pg_toast_18646" serially
2025-04-19 08:40:48.435 UTC [142] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:40:48.435 UTC [142] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:40:48.435 UTC [142] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:40:48.436 UTC [142] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:40:48.436 UTC [142] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:40:48.436 UTC [142] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:40:48.437 UTC [142] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:40:48.437 UTC [142] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:40:48.437 UTC [142] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:40:48.439 UTC [142] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:40:48.439 UTC [142] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:40:48.440 UTC [142] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:40:48.440 UTC [142] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:40:48.441 UTC [142] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:40:48.441 UTC [142] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:40:48.442 UTC [142] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:40:48.442 UTC [142] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:40:48.443 UTC [142] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:40:48.443 UTC [142] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:40:48.444 UTC [142] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:40:48.444 UTC [142] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:40:48.445 UTC [142] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:40:48.445 UTC [142] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:40:48.446 UTC [142] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:40:48.446 UTC [142] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:40:48.457 UTC [142] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:40:48.708 UTC [142] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cfcFElTBRLRUZCSPCo2JkOcHaW8kOikC3atzVMSThY8gU8r3EpmKu')
	                RETURNING id, username, email
	                
2025-04-19 08:40:48.709 UTC [142] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:40:48.709 UTC [142] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:01.172 UTC [157] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:41:01.434 UTC [157] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:41:01.754 UTC [142] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:41:02.065 UTC [142] DEBUG:  unexpected EOF on client connection
2025-04-19 08:41:04.277 UTC [158] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:04.283 UTC [158] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:04.289 UTC [158] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:04.289 UTC [158] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:04.292 UTC [158] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:04.296 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:04.298 UTC [158] DEBUG:  building index "pg_toast_18683_index" on table "pg_toast_18683" serially
2025-04-19 08:41:04.299 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:04.301 UTC [158] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:04.301 UTC [158] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:04.303 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:04.304 UTC [158] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:04.304 UTC [158] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:04.308 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:04.308 UTC [158] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:04.308 UTC [158] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:04.310 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:04.312 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:04.313 UTC [158] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:04.313 UTC [158] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:04.315 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:04.315 UTC [158] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:04.315 UTC [158] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:04.318 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:04.321 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:04.322 UTC [158] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:04.322 UTC [158] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:04.324 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:04.325 UTC [158] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:04.325 UTC [158] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:04.329 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:04.331 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:04.332 UTC [158] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:04.332 UTC [158] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:04.335 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:04.338 UTC [158] DEBUG:  building index "pg_toast_18744_index" on table "pg_toast_18744" serially
2025-04-19 08:41:04.340 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:04.340 UTC [158] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:04.340 UTC [158] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:04.342 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:04.343 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:04.343 UTC [158] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:04.343 UTC [158] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:04.344 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:04.344 UTC [158] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:04.344 UTC [158] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:04.345 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:04.347 UTC [158] DEBUG:  building index "pg_toast_18777_index" on table "pg_toast_18777" serially
2025-04-19 08:41:04.348 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:04.348 UTC [158] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:04.348 UTC [158] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:04.349 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:04.350 UTC [158] DEBUG:  building index "pg_toast_18788_index" on table "pg_toast_18788" serially
2025-04-19 08:41:04.351 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:04.351 UTC [158] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:04.351 UTC [158] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:04.353 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:04.353 UTC [158] DEBUG:  building index "pg_toast_18811_index" on table "pg_toast_18811" serially
2025-04-19 08:41:04.354 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:04.354 UTC [158] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:04.354 UTC [158] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:04.355 UTC [158] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:04.355 UTC [158] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:04.356 UTC [158] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:04.356 UTC [158] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:04.357 UTC [158] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:04.357 UTC [158] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:04.357 UTC [158] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:04.358 UTC [158] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:04.359 UTC [158] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:04.359 UTC [158] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:04.360 UTC [158] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:04.360 UTC [158] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:04.362 UTC [158] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:04.362 UTC [158] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:04.364 UTC [158] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 08:41:04.364 UTC [158] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:04.364 UTC [158] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:04.366 UTC [158] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:04.366 UTC [158] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:04.368 UTC [158] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:04.368 UTC [158] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:04.369 UTC [158] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:04.369 UTC [158] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:04.388 UTC [158] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:04.659 UTC [158] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Zl7bnsA188tAnM59mL/5huQDc6WMlEWx7XzowR8EtoZFKhguJ81GG')
	                RETURNING id, username, email
	                
2025-04-19 08:41:04.660 UTC [158] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:04.660 UTC [158] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:04.661 UTC [158] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:41:04.664 UTC [158] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 08:41:04.664 UTC [158] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 08:41:04.674 UTC [158] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:04.675 UTC [158] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:04.678 UTC [158] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:04.681 UTC [158] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:04.681 UTC [158] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:04.685 UTC [158] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:04.687 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:04.688 UTC [158] DEBUG:  building index "pg_toast_18847_index" on table "pg_toast_18847" serially
2025-04-19 08:41:04.690 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:04.690 UTC [158] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:04.690 UTC [158] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:04.691 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:04.691 UTC [158] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:04.691 UTC [158] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:04.692 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:04.692 UTC [158] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:04.692 UTC [158] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:04.693 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:04.693 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:04.694 UTC [158] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:04.694 UTC [158] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:04.695 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:04.695 UTC [158] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:04.695 UTC [158] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:04.695 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:04.696 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:04.696 UTC [158] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:04.696 UTC [158] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:04.697 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:04.697 UTC [158] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:04.697 UTC [158] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:04.699 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:04.699 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:04.700 UTC [158] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:04.700 UTC [158] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:04.702 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:04.705 UTC [158] DEBUG:  building index "pg_toast_18908_index" on table "pg_toast_18908" serially
2025-04-19 08:41:04.707 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:04.707 UTC [158] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:04.707 UTC [158] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:04.710 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:04.711 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:04.711 UTC [158] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:04.711 UTC [158] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:04.713 UTC [158] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:04.713 UTC [158] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:04.713 UTC [158] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:04.714 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:04.716 UTC [158] DEBUG:  building index "pg_toast_18941_index" on table "pg_toast_18941" serially
2025-04-19 08:41:04.716 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:04.716 UTC [158] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:04.717 UTC [158] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:04.717 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:04.719 UTC [158] DEBUG:  building index "pg_toast_18952_index" on table "pg_toast_18952" serially
2025-04-19 08:41:04.719 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:04.719 UTC [158] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:04.720 UTC [158] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:04.721 UTC [158] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:04.723 UTC [158] DEBUG:  building index "pg_toast_18975_index" on table "pg_toast_18975" serially
2025-04-19 08:41:04.723 UTC [158] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:04.724 UTC [158] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:04.724 UTC [158] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:04.724 UTC [158] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:04.724 UTC [158] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:04.725 UTC [158] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:04.725 UTC [158] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:04.726 UTC [158] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:04.726 UTC [158] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:04.728 UTC [158] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:04.728 UTC [158] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:04.729 UTC [158] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:04.729 UTC [158] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:04.729 UTC [158] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:04.729 UTC [158] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:04.730 UTC [158] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:04.730 UTC [158] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:04.731 UTC [158] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:04.731 UTC [158] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:04.732 UTC [158] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:04.732 UTC [158] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:04.733 UTC [158] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:04.733 UTC [158] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:04.734 UTC [158] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:04.734 UTC [158] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:04.741 UTC [158] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:04.991 UTC [158] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$sE//mqMDV1z/IefHwBdtyeHY7WM1K8SCyJEL29PZFXbkuaDWiawbi')
	                RETURNING id, username, email
	                
2025-04-19 08:41:04.992 UTC [158] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:04.992 UTC [158] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:05.339 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.341 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:41:05.342 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:41:05.342 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.346 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 08:41:05.348 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:41:05.355 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:41:05.361 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.362 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:41:05.362 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:41:05.362 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.363 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 08:41:05.363 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:41:05.367 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:41:05.370 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.371 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:41:05.371 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:41:05.371 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.372 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 08:41:05.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:41:05.376 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:41:05.380 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.380 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:41:05.381 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:41:05.382 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.383 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 08:41:05.383 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:41:05.386 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:41:05.388 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.389 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:41:05.389 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:41:05.390 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.390 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 08:41:05.391 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:41:05.393 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:41:05.395 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.395 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:41:05.395 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:41:05.396 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.396 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 08:41:05.397 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:41:05.399 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:41:05.402 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.402 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:41:05.402 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:41:05.402 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.403 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 08:41:05.403 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:41:05.406 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:41:05.409 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.410 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:41:05.410 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:41:05.410 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.411 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 08:41:05.411 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:41:05.414 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:41:05.417 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.417 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:41:05.417 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:41:05.418 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.418 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 08:41:05.419 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:41:05.421 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:41:05.423 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.423 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:41:05.424 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:41:05.424 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.424 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 08:41:05.425 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:41:05.428 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:41:05.430 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.431 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:41:05.431 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:41:05.432 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.432 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 08:41:05.433 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:41:05.436 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:41:05.438 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.439 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:41:05.439 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:41:05.439 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.440 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 08:41:05.441 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:41:05.443 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:41:05.446 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.446 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:41:05.447 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:41:05.447 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.448 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 08:41:05.449 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:41:05.452 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:41:05.454 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.455 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:41:05.455 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:41:05.455 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.455 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 08:41:05.456 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:41:05.458 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:41:05.460 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.461 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:41:05.461 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:41:05.461 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.462 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 08:41:05.462 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:41:05.465 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:41:05.468 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.468 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:41:05.469 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:41:05.469 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.470 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 08:41:05.470 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:41:05.472 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:41:05.475 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.475 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:41:05.475 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:41:05.476 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.476 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 08:41:05.477 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:41:05.479 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:41:05.482 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.482 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:41:05.482 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:41:05.483 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.483 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 08:41:05.483 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:41:05.486 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:41:05.487 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.488 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:41:05.488 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:41:05.488 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.489 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 08:41:05.489 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:41:05.491 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:41:05.494 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.494 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:41:05.495 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:41:05.496 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.499 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 08:41:05.499 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:41:05.503 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:41:05.505 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:41:05.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:41:05.506 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.507 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 08:41:05.507 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:41:05.510 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:41:05.512 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.513 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:41:05.513 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:41:05.514 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.514 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 08:41:05.515 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:41:05.518 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:41:05.520 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:41:05.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:41:05.521 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.522 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 08:41:05.522 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:41:05.524 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:41:05.526 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.526 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:41:05.526 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:41:05.527 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.527 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 08:41:05.527 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:41:05.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:41:05.532 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.533 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:41:05.533 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:41:05.533 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.533 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 08:41:05.534 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:41:05.536 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:41:05.538 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.538 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:41:05.539 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:41:05.539 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.539 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 08:41:05.540 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:41:05.542 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:41:05.544 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.544 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:41:05.545 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:41:05.545 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.545 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 08:41:05.546 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:41:05.548 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:41:05.551 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.551 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:41:05.551 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:41:05.551 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.552 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 08:41:05.552 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:41:05.554 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:41:05.556 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.557 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:41:05.557 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:41:05.557 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.557 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 08:41:05.558 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:41:05.560 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:41:05.562 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.562 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:41:05.562 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:41:05.562 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.563 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 08:41:05.563 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:41:05.566 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:41:05.568 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.568 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:41:05.569 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:41:05.569 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.569 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 08:41:05.570 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:41:05.572 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:41:05.574 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:41:05.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:41:05.575 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.575 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 08:41:05.575 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:41:05.578 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:41:05.580 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.580 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:41:05.581 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:41:05.581 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.582 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 08:41:05.582 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:41:05.584 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:41:05.586 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.587 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:41:05.587 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:41:05.587 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.587 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 08:41:05.588 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:41:05.590 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:41:05.593 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.593 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:41:05.594 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:41:05.594 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.595 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 08:41:05.595 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:41:05.598 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:41:05.601 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.601 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:41:05.601 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:41:05.601 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.602 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 08:41:05.602 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:41:05.604 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:41:05.607 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.607 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:41:05.608 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:41:05.608 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.608 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 08:41:05.609 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:41:05.611 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:41:05.613 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.613 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:41:05.613 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:41:05.614 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.614 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 08:41:05.615 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:41:05.617 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:41:05.619 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.619 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:41:05.620 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:41:05.620 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.620 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 08:41:05.621 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:41:05.623 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:41:05.625 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.626 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:41:05.627 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:41:05.627 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.627 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 08:41:05.628 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:41:05.631 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:41:05.633 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.634 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:41:05.634 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:41:05.634 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.635 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 08:41:05.635 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:41:05.637 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:41:05.639 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.640 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:41:05.640 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:41:05.640 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.641 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 08:41:05.641 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:41:05.643 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:41:05.646 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.646 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:41:05.647 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:41:05.648 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.648 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 08:41:05.649 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:41:05.652 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:41:05.654 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.655 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:41:05.655 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:41:05.656 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.656 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 08:41:05.656 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:41:05.659 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:41:05.661 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.661 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:41:05.661 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:41:05.662 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.662 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 08:41:05.663 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:41:05.666 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:41:05.668 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.668 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:41:05.668 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:41:05.669 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.669 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 08:41:05.669 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:41:05.671 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:41:05.673 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:41:05.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:41:05.674 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.675 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 08:41:05.675 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:41:05.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:41:05.679 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.680 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:41:05.680 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:41:05.680 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.681 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 08:41:05.681 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:41:05.684 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:41:05.685 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:41:05.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:41:05.686 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.687 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 08:41:05.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:41:05.689 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:41:05.691 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.692 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:41:05.692 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:41:05.692 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.692 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 08:41:05.693 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:41:05.695 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:41:05.697 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.698 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:41:05.698 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:41:05.699 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.699 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 08:41:05.700 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:41:05.701 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:41:05.703 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:41:05.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:41:05.704 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.705 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 08:41:05.705 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:41:05.707 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:41:05.709 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.709 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:41:05.710 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:41:05.710 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.710 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 08:41:05.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:41:05.713 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:41:05.716 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.716 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:41:05.716 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:41:05.717 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.717 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 08:41:05.717 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:41:05.719 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:41:05.721 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.722 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:41:05.722 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:41:05.722 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.723 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 08:41:05.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:41:05.726 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:41:05.728 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:41:05.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:41:05.729 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.729 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 08:41:05.730 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:41:05.733 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:41:05.735 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.736 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:41:05.736 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:41:05.736 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.737 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 08:41:05.737 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:41:05.739 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:41:05.741 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:41:05.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:41:05.742 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.743 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 08:41:05.743 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:41:05.745 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:41:05.748 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.749 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:41:05.749 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:41:05.749 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.750 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 08:41:05.751 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:41:05.753 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:41:05.755 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.755 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:41:05.755 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:41:05.756 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.756 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 08:41:05.756 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:41:05.758 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:41:05.760 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.761 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:41:05.761 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:41:05.761 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.762 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 08:41:05.763 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:41:05.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:41:05.789 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.797 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:41:05.799 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:41:05.800 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.802 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 08:41:05.810 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:41:05.815 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:41:05.822 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.823 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:41:05.824 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:41:05.824 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.825 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 08:41:05.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:41:05.829 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:41:05.834 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.834 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:41:05.835 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:41:05.835 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.836 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 08:41:05.836 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:41:05.841 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:41:05.844 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:41:05.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:41:05.845 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.845 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 08:41:05.846 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:41:05.850 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:41:05.855 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.856 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:41:05.857 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:41:05.857 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.858 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 08:41:05.858 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:41:05.862 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:41:05.869 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.869 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:41:05.870 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:41:05.870 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.870 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 08:41:05.871 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:41:05.873 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:41:05.876 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.876 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:41:05.877 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:41:05.877 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.878 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 08:41:05.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:41:05.882 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:41:05.884 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.884 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:41:05.884 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:41:05.885 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.885 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 08:41:05.885 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:41:05.887 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:41:05.889 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:41:05.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:41:05.891 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.891 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 08:41:05.892 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:41:05.894 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:41:05.895 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.896 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:41:05.896 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:41:05.896 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.897 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 08:41:05.897 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:41:05.899 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:41:05.901 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.902 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:41:05.902 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:41:05.902 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.902 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 08:41:05.903 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:41:05.905 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:41:05.907 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.907 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:41:05.907 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:41:05.908 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.908 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 08:41:05.909 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:41:05.911 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:41:05.913 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.913 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:41:05.914 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:41:05.914 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.915 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 08:41:05.915 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:41:05.917 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:41:05.919 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.919 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:41:05.919 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:41:05.920 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.920 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 08:41:05.920 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:41:05.922 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:41:05.924 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.925 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:41:05.925 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:41:05.925 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.926 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 08:41:05.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:41:05.928 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:41:05.930 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.930 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:41:05.931 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:41:05.931 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.931 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 08:41:05.932 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:41:05.934 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:41:05.936 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.936 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:41:05.937 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:41:05.937 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.937 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 08:41:05.938 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:41:05.941 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:41:05.943 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.943 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:41:05.943 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:41:05.944 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.944 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 08:41:05.944 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:41:05.946 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:41:05.949 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.949 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:41:05.950 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:41:05.950 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.950 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 08:41:05.951 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:41:05.952 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:41:05.954 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:41:05.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:41:05.955 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.956 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 08:41:05.956 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:41:05.958 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:41:05.960 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.960 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:41:05.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:41:05.961 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.961 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 08:41:05.962 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:41:05.964 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:41:05.966 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.967 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:41:05.967 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:41:05.967 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.968 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 08:41:05.968 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:41:05.970 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:41:05.972 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.973 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:41:05.973 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:41:05.974 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.975 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 08:41:05.977 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:41:05.985 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:41:05.988 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:41:05.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:41:05.989 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:05.990 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 08:41:05.990 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:41:05.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:41:05.997 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:05.998 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:41:05.999 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:41:06.000 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.001 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 08:41:06.002 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:41:06.006 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:41:06.009 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.010 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:41:06.010 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:41:06.010 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.011 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 08:41:06.012 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:41:06.016 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:41:06.019 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.020 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:41:06.021 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:41:06.021 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.022 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 08:41:06.024 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:41:06.030 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:41:06.035 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.037 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:41:06.037 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:41:06.038 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.042 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 08:41:06.043 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:41:06.059 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:41:06.067 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.068 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:41:06.069 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:41:06.069 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.070 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 08:41:06.071 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:41:06.076 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:41:06.083 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.084 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:41:06.085 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:41:06.085 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.086 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 08:41:06.087 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:41:06.090 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:41:06.093 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.093 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:41:06.094 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:41:06.094 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.094 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 08:41:06.095 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:41:06.097 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:41:06.100 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:41:06.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:41:06.101 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.101 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 08:41:06.102 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:41:06.104 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:41:06.107 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:41:06.108 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:41:06.108 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.109 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 08:41:06.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:41:06.111 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:41:06.114 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.115 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:41:06.115 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:41:06.116 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.116 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 08:41:06.117 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:41:06.119 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:41:06.120 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.121 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:41:06.121 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:41:06.121 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.122 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 08:41:06.122 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:41:06.124 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:41:06.126 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.126 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:41:06.126 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:41:06.127 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.127 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 08:41:06.127 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:41:06.129 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:41:06.132 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.132 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:41:06.132 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:41:06.132 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.133 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 08:41:06.133 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:41:06.135 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:41:06.137 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.137 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:41:06.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:41:06.138 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.138 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 08:41:06.139 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:41:06.142 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:41:06.145 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.145 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:41:06.146 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:41:06.147 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.148 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 08:41:06.149 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:41:06.152 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:41:06.155 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.155 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:41:06.156 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:41:06.156 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.156 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 08:41:06.157 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:41:06.160 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:41:06.163 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.163 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:41:06.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:41:06.164 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.164 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 08:41:06.165 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:41:06.168 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:41:06.170 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.171 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:41:06.171 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:41:06.171 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.172 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 08:41:06.172 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:41:06.174 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:41:06.176 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.176 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:41:06.177 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:41:06.177 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.177 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 08:41:06.178 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:41:06.180 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:41:06.182 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.183 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:41:06.183 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:41:06.183 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.183 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 08:41:06.184 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:41:06.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:41:06.188 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.188 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:41:06.188 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:41:06.188 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.189 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 08:41:06.189 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:41:06.191 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:41:06.193 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:41:06.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:41:06.193 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.194 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 08:41:06.194 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:41:06.196 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:41:06.199 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.199 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:41:06.200 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:41:06.200 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.200 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 08:41:06.201 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:41:06.202 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:41:06.204 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.205 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:41:06.205 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:41:06.205 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.206 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 08:41:06.206 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:41:06.208 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:41:06.210 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.211 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:41:06.211 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:41:06.211 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.212 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 08:41:06.212 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:41:06.214 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:41:06.217 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.217 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:41:06.217 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:41:06.217 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.218 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 08:41:06.218 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:41:06.220 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:41:06.222 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.222 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:41:06.223 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:41:06.223 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.223 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 08:41:06.224 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:41:06.226 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:41:06.228 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.228 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:41:06.228 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:41:06.229 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.229 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 08:41:06.229 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:41:06.232 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:41:06.234 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.235 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:41:06.235 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:41:06.235 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.236 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 08:41:06.236 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:41:06.238 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:41:06.240 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.241 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:41:06.241 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:41:06.241 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.242 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 08:41:06.242 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:41:06.244 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:41:06.246 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:41:06.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:41:06.247 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.248 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 08:41:06.248 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:41:06.251 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:41:06.253 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.253 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:41:06.253 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:41:06.254 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.254 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 08:41:06.254 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:41:06.257 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:41:06.259 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.259 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:41:06.260 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:41:06.260 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.260 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 08:41:06.261 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:41:06.263 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:41:06.265 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.266 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:41:06.266 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:41:06.266 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.267 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 08:41:06.267 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:41:06.269 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:41:06.271 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.271 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:41:06.272 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:41:06.272 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.272 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 08:41:06.273 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:41:06.274 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:41:06.276 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:41:06.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:41:06.277 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.277 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 08:41:06.278 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:41:06.280 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:41:06.283 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.283 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:41:06.283 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:41:06.283 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.284 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 08:41:06.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:41:06.286 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:41:06.288 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.289 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:41:06.289 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:41:06.290 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.290 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 08:41:06.291 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:41:06.295 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:41:06.298 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.299 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:41:06.299 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:41:06.299 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.300 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 08:41:06.300 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:41:06.303 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:41:06.305 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.306 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:41:06.307 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:41:06.308 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.309 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 08:41:06.309 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:41:06.312 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:41:06.316 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.317 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:41:06.317 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:41:06.317 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.318 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 08:41:06.318 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:41:06.321 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:41:06.323 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.323 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:41:06.323 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:41:06.324 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.324 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 08:41:06.325 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:41:06.327 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:41:06.329 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:41:06.330 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:41:06.330 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.330 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 08:41:06.331 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:41:06.334 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:41:06.336 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:41:06.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:41:06.337 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.337 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 08:41:06.338 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:41:06.340 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:41:06.342 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.343 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:41:06.343 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:41:06.343 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.344 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 08:41:06.344 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:41:06.346 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:41:06.348 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.349 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:41:06.349 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:41:06.349 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.350 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 08:41:06.350 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:41:06.353 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:41:06.356 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.357 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:41:06.357 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:41:06.358 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.358 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 08:41:06.359 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:41:06.362 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:41:06.365 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.366 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:41:06.366 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:41:06.366 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.367 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 08:41:06.367 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:41:06.370 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:41:06.373 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:41:06.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:41:06.374 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.374 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 08:41:06.375 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:41:06.377 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:41:06.380 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.380 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:41:06.381 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:41:06.381 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.382 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 08:41:06.382 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:41:06.384 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:41:06.386 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.387 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:41:06.387 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:41:06.387 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.388 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 08:41:06.388 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:41:06.390 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:41:06.392 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.392 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:41:06.393 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:41:06.393 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.394 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 08:41:06.394 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:41:06.396 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:41:06.399 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.400 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:41:06.400 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:41:06.400 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.401 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 08:41:06.401 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:41:06.403 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:41:06.405 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.405 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:41:06.405 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:41:06.405 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.406 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 08:41:06.406 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:41:06.408 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:41:06.410 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.410 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:41:06.411 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:41:06.411 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.411 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 08:41:06.412 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:41:06.414 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:41:06.416 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.417 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:41:06.417 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:41:06.417 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.418 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 08:41:06.418 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:41:06.420 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:41:06.422 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.422 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:41:06.422 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:41:06.422 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.423 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 08:41:06.423 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:41:06.425 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:41:06.427 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.427 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:41:06.428 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:41:06.428 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.428 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 08:41:06.429 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:41:06.431 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:41:06.434 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.434 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:41:06.434 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:41:06.435 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.435 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 08:41:06.436 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:41:06.438 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:41:06.440 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.440 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:41:06.441 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:41:06.441 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.441 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 08:41:06.442 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:41:06.444 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:41:06.446 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.446 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:41:06.447 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:41:06.447 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.451 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 08:41:06.459 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:41:06.466 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:41:06.470 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:41:06.471 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:41:06.472 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.472 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 08:41:06.473 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:41:06.476 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:41:06.479 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.480 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:41:06.480 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:41:06.481 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.481 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 08:41:06.482 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:41:06.484 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:41:06.486 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.486 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:41:06.487 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:41:06.487 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.487 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 08:41:06.488 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:41:06.489 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:41:06.491 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.492 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:41:06.492 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:41:06.492 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.493 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 08:41:06.493 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:41:06.495 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:41:06.497 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.497 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:41:06.498 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:41:06.498 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.498 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 08:41:06.499 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:41:06.501 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:41:06.503 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.503 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:41:06.503 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:41:06.503 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.504 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 08:41:06.504 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:41:06.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:41:06.508 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.508 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:41:06.509 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:41:06.509 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.509 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 08:41:06.510 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:41:06.511 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:41:06.513 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.514 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:41:06.514 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:41:06.514 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.515 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 08:41:06.516 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:41:06.518 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:41:06.519 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.520 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:41:06.520 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:41:06.520 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.521 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 08:41:06.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:41:06.523 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:41:06.525 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.526 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:41:06.526 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:41:06.526 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.527 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 08:41:06.527 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:41:06.529 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:41:06.531 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.532 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:41:06.532 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:41:06.532 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.532 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 08:41:06.533 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:41:06.535 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:41:06.537 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:41:06.537 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:41:06.538 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.538 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 08:41:06.538 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:41:06.540 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:41:06.542 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.543 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:41:06.543 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:41:06.543 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.544 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 08:41:06.544 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:41:06.546 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:41:06.548 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.549 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:41:06.549 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:41:06.549 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.550 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 08:41:06.550 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:41:06.552 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:41:06.554 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.554 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:41:06.555 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:41:06.555 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.555 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 08:41:06.556 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:41:06.558 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:41:06.560 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.560 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:41:06.560 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:41:06.560 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.561 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 08:41:06.561 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:41:06.563 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:41:06.566 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.567 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:41:06.567 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:41:06.567 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.568 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 08:41:06.568 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:41:06.570 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:41:06.572 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.572 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:41:06.573 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:41:06.573 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.573 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 08:41:06.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:41:06.576 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:41:06.577 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.578 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:41:06.578 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:41:06.578 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.579 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 08:41:06.579 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:41:06.582 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:41:06.584 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.584 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:41:06.585 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:41:06.585 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.585 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 08:41:06.586 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:41:06.588 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:41:06.591 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.591 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:41:06.592 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:41:06.592 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.593 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 08:41:06.593 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:41:06.595 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:41:06.597 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.598 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:41:06.598 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:41:06.598 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.599 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 08:41:06.599 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:41:06.601 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:41:06.603 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.603 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:41:06.603 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:41:06.603 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.604 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 08:41:06.604 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:41:06.606 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:41:06.609 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.610 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:41:06.610 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:41:06.610 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.610 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 08:41:06.611 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:41:06.614 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:41:06.617 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.617 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:41:06.618 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:41:06.618 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.619 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 08:41:06.620 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:41:06.623 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:41:06.625 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.625 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:41:06.626 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:41:06.626 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.626 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 08:41:06.627 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:41:06.629 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:41:06.632 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.632 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:41:06.632 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:41:06.633 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.633 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 08:41:06.633 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:41:06.636 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:41:06.638 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.638 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:41:06.638 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:41:06.639 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.639 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 08:41:06.640 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:41:06.642 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:41:06.644 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.644 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:41:06.644 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:41:06.645 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.645 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 08:41:06.646 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:41:06.649 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:41:06.652 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.652 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:41:06.653 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:41:06.653 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.653 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 08:41:06.654 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:41:06.656 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:41:06.659 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.660 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:41:06.660 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:41:06.660 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.661 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 08:41:06.661 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:41:06.663 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:41:06.666 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.666 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:41:06.667 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:41:06.667 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.667 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 08:41:06.668 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:41:06.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:41:06.672 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.672 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:41:06.672 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:41:06.673 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.673 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 08:41:06.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:41:06.676 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:41:06.678 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.679 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:41:06.679 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:41:06.679 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.680 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 08:41:06.680 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:41:06.683 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:41:06.685 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.685 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:41:06.686 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:41:06.686 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.686 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 08:41:06.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:41:06.688 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:41:06.691 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.692 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:41:06.692 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:41:06.692 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.693 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 08:41:06.694 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:41:06.696 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:41:06.699 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.700 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:41:06.700 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:41:06.700 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.701 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 08:41:06.701 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:41:06.703 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:41:06.705 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.705 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:41:06.705 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:41:06.706 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.706 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 08:41:06.707 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:41:06.709 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:41:06.711 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:41:06.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:41:06.711 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.712 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 08:41:06.712 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:41:06.715 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:41:06.717 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.718 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:41:06.718 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:41:06.718 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.719 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 08:41:06.719 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:41:06.721 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:41:06.723 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:41:06.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:41:06.723 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.724 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 08:41:06.724 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:41:06.726 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:41:06.728 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.728 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:41:06.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:41:06.729 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.729 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 08:41:06.730 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:41:06.733 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:41:06.735 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.735 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:41:06.736 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:41:06.736 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.736 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 08:41:06.737 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:41:06.738 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:41:06.740 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.741 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:41:06.741 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:41:06.741 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.742 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 08:41:06.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:41:06.745 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:41:06.747 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.748 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:41:06.748 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:41:06.749 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.749 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 08:41:06.750 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:41:06.752 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:41:06.755 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.756 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:41:06.756 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:41:06.760 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.761 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 08:41:06.762 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:41:06.766 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:41:06.769 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.769 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:41:06.770 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:41:06.770 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.770 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 08:41:06.771 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:41:06.773 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:41:06.775 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.775 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:41:06.776 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:41:06.776 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.776 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 08:41:06.777 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:41:06.778 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:41:06.780 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.781 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:41:06.781 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:41:06.781 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.782 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 08:41:06.783 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:41:06.785 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:41:06.786 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.787 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:41:06.787 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:41:06.787 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.788 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 08:41:06.788 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:41:06.790 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:41:06.792 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.792 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:41:06.792 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:41:06.792 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.793 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 08:41:06.793 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:41:06.795 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:41:06.797 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.798 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:41:06.798 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:41:06.798 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.799 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 08:41:06.799 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:41:06.801 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:41:06.804 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.804 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:41:06.804 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:41:06.804 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.805 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 08:41:06.805 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:41:06.807 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:41:06.809 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.810 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:41:06.810 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:41:06.810 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.810 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 08:41:06.811 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:41:06.813 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:41:06.816 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.816 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:41:06.816 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:41:06.816 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.817 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 08:41:06.818 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:41:06.820 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:41:06.822 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.823 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:41:06.823 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:41:06.823 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.823 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 08:41:06.824 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:41:06.826 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:41:06.828 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.828 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:41:06.829 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:41:06.829 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.829 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 08:41:06.830 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:41:06.832 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:41:06.835 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.835 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:41:06.835 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:41:06.835 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.836 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 08:41:06.836 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:41:06.838 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:41:06.840 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.841 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:41:06.841 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:41:06.841 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.842 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 08:41:06.842 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:41:06.844 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:41:06.846 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.846 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:41:06.846 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:41:06.847 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.847 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 08:41:06.848 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:41:06.851 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:41:06.852 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.853 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:41:06.853 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:41:06.854 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.854 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 08:41:06.855 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:41:06.857 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:41:06.859 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.860 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:41:06.860 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:41:06.860 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.861 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 08:41:06.861 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:41:06.863 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:41:06.866 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.866 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:41:06.867 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:41:06.867 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.867 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 08:41:06.868 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:41:06.870 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:41:06.872 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:41:06.872 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:41:06.872 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.873 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 08:41:06.873 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:41:06.875 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:41:06.878 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.878 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:41:06.878 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:41:06.878 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.879 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 08:41:06.879 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:41:06.883 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:41:06.885 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.886 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:41:06.886 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:41:06.886 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.887 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 08:41:06.887 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:41:06.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:41:06.892 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.892 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:41:06.893 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:41:06.893 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.894 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 08:41:06.894 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:41:06.896 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:41:06.899 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.899 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:41:06.900 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:41:06.900 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.900 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 08:41:06.901 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:41:06.903 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:41:06.905 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.905 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:41:06.905 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:41:06.905 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.906 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 08:41:06.906 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:41:06.908 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:41:06.910 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.911 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:41:06.911 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:41:06.911 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.911 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 08:41:06.912 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:41:06.914 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:41:06.916 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.917 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:41:06.917 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:41:06.917 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1069, '2022-11-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.918 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (217,1,7,false),(217,2,28,false),(217,3,62,false),(217,4,63,false),(217,5,64,false),(217,6,10,true)
	        
2025-04-19 08:41:06.918 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:41:06.923 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:41:06.926 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:41:06.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:41:06.927 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1070, '2022-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.927 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (218,1,1,false),(218,2,6,false),(218,3,40,false),(218,4,51,false),(218,5,67,false),(218,6,2,true)
	        
2025-04-19 08:41:06.927 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:41:06.932 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:41:06.934 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.934 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:41:06.935 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:41:06.935 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1071, '2023-11-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.935 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (219,1,1,false),(219,2,2,false),(219,3,31,false),(219,4,39,false),(219,5,66,false),(219,6,25,true)
	        
2025-04-19 08:41:06.936 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:41:06.938 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:41:06.941 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.942 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:41:06.942 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:41:06.942 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1072, '2022-11-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.942 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (220,1,15,false),(220,2,30,false),(220,3,47,false),(220,4,50,false),(220,5,51,false),(220,6,3,true)
	        
2025-04-19 08:41:06.943 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:41:06.945 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:41:06.948 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.949 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:41:06.949 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:41:06.949 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1073, '2022-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.950 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (221,1,29,false),(221,2,30,false),(221,3,32,false),(221,4,48,false),(221,5,50,false),(221,6,20,true)
	        
2025-04-19 08:41:06.950 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:41:06.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:41:06.957 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.957 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:41:06.957 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:41:06.958 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1074, '2022-11-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.958 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (222,1,4,false),(222,2,19,false),(222,3,24,false),(222,4,47,false),(222,5,66,false),(222,6,10,true)
	        
2025-04-19 08:41:06.959 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:41:06.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:41:06.963 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.964 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:41:06.964 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:41:06.965 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1075, '2022-12-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.965 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (223,1,6,false),(223,2,13,false),(223,3,33,false),(223,4,36,false),(223,5,37,false),(223,6,7,true)
	        
2025-04-19 08:41:06.966 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:41:06.968 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:41:06.971 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:41:06.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:41:06.972 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1076, '2022-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.972 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (224,1,35,false),(224,2,45,false),(224,3,47,false),(224,4,54,false),(224,5,55,false),(224,6,14,true)
	        
2025-04-19 08:41:06.972 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:41:06.975 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:41:06.977 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.978 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:41:06.978 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:41:06.978 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1077, '2022-12-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.978 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (225,1,6,false),(225,2,28,false),(225,3,44,false),(225,4,59,false),(225,5,61,false),(225,6,21,true)
	        
2025-04-19 08:41:06.979 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:41:06.982 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:41:06.984 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.985 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:41:06.985 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:41:06.985 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1078, '2022-12-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.985 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (226,1,9,false),(226,2,23,false),(226,3,47,false),(226,4,59,false),(226,5,61,false),(226,6,21,true)
	        
2025-04-19 08:41:06.986 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:41:06.989 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:41:06.991 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.992 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:41:06.992 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:41:06.992 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1079, '2022-12-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.993 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (227,1,16,false),(227,2,31,false),(227,3,50,false),(227,4,55,false),(227,5,61,false),(227,6,9,true)
	        
2025-04-19 08:41:06.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:41:06.996 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:41:06.997 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:06.998 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:41:06.998 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:41:06.999 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1080, '2022-12-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:06.999 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (228,1,36,false),(228,2,51,false),(228,3,59,false),(228,4,66,false),(228,5,68,false),(228,6,25,true)
	        
2025-04-19 08:41:07.000 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:41:07.002 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:41:07.004 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.004 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:41:07.005 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:41:07.005 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1081, '2022-12-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.005 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (229,1,33,false),(229,2,56,false),(229,3,64,false),(229,4,66,false),(229,5,68,false),(229,6,12,true)
	        
2025-04-19 08:41:07.006 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:41:07.008 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:41:07.010 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.011 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:41:07.011 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:41:07.011 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1082, '2022-12-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.011 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (230,1,7,false),(230,2,37,false),(230,3,55,false),(230,4,65,false),(230,5,67,false),(230,6,12,true)
	        
2025-04-19 08:41:07.012 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:41:07.015 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:41:07.017 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.018 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:41:07.018 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:41:07.018 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1083, '2022-12-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.019 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (231,1,12,false),(231,2,15,false),(231,3,24,false),(231,4,34,false),(231,5,59,false),(231,6,14,true)
	        
2025-04-19 08:41:07.019 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:41:07.023 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:41:07.025 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.025 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:41:07.026 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:41:07.026 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1084, '2022-12-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.026 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (232,1,17,false),(232,2,37,false),(232,3,46,false),(232,4,54,false),(232,5,67,false),(232,6,8,true)
	        
2025-04-19 08:41:07.027 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:41:07.029 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:41:07.032 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.033 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:41:07.033 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:41:07.033 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1085, '2022-12-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.034 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (233,1,17,false),(233,2,41,false),(233,3,47,false),(233,4,60,false),(233,5,61,false),(233,6,17,true)
	        
2025-04-19 08:41:07.034 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:41:07.037 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:41:07.039 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.039 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:41:07.040 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:41:07.040 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1086, '2022-12-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.040 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (234,1,26,false),(234,2,32,false),(234,3,38,false),(234,4,45,false),(234,5,56,false),(234,6,1,true)
	        
2025-04-19 08:41:07.041 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:41:07.043 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:41:07.045 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.046 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:41:07.046 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:41:07.046 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1087, '2022-12-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.047 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (235,1,18,false),(235,2,37,false),(235,3,44,false),(235,4,50,false),(235,5,64,false),(235,6,11,true)
	        
2025-04-19 08:41:07.047 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:41:07.051 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:41:07.053 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.053 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:41:07.053 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:41:07.053 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1088, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.054 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (236,1,7,false),(236,2,9,false),(236,3,12,false),(236,4,31,false),(236,5,62,false),(236,6,22,true)
	        
2025-04-19 08:41:07.055 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:41:07.057 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:41:07.059 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.060 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:41:07.060 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:41:07.060 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1089, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.061 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (237,1,12,false),(237,2,32,false),(237,3,56,false),(237,4,67,false),(237,5,68,false),(237,6,26,true)
	        
2025-04-19 08:41:07.061 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:41:07.064 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:41:07.067 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.067 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:41:07.068 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:41:07.068 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1090, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.068 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (238,1,35,false),(238,2,36,false),(238,3,44,false),(238,4,45,false),(238,5,67,false),(238,6,14,true)
	        
2025-04-19 08:41:07.069 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:41:07.071 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:41:07.073 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.074 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:41:07.074 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:41:07.074 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1091, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.075 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (239,1,18,false),(239,2,43,false),(239,3,48,false),(239,4,60,false),(239,5,69,false),(239,6,14,true)
	        
2025-04-19 08:41:07.075 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:41:07.078 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:41:07.080 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.081 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:41:07.081 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:41:07.081 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1092, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.082 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (240,1,4,false),(240,2,8,false),(240,3,46,false),(240,4,47,false),(240,5,48,false),(240,6,5,true)
	        
2025-04-19 08:41:07.082 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:41:07.085 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:41:07.087 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.087 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:41:07.088 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:41:07.088 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1093, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.088 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (241,1,24,false),(241,2,26,false),(241,3,39,false),(241,4,47,false),(241,5,57,false),(241,6,23,true)
	        
2025-04-19 08:41:07.089 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:41:07.092 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:41:07.094 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.094 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:41:07.094 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:41:07.095 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1094, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.095 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (242,1,4,false),(242,2,14,false),(242,3,33,false),(242,4,39,false),(242,5,61,false),(242,6,3,true)
	        
2025-04-19 08:41:07.095 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:41:07.100 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:41:07.102 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.102 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:41:07.102 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:41:07.103 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1095, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.103 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (243,1,6,false),(243,2,15,false),(243,3,22,false),(243,4,42,false),(243,5,47,false),(243,6,26,true)
	        
2025-04-19 08:41:07.103 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:41:07.106 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:41:07.108 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:41:07.109 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:41:07.109 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1096, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.110 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (244,1,5,false),(244,2,14,false),(244,3,19,false),(244,4,46,false),(244,5,64,false),(244,6,22,true)
	        
2025-04-19 08:41:07.110 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:41:07.115 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:41:07.118 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.118 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:41:07.119 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:41:07.119 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1097, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.119 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (245,1,12,false),(245,2,31,false),(245,3,47,false),(245,4,58,false),(245,5,60,false),(245,6,23,true)
	        
2025-04-19 08:41:07.120 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:41:07.123 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:41:07.125 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.125 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:41:07.126 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:41:07.126 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1098, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.126 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (246,1,9,false),(246,2,17,false),(246,3,20,false),(246,4,38,false),(246,5,40,false),(246,6,18,true)
	        
2025-04-19 08:41:07.127 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:41:07.129 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:41:07.132 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.132 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:41:07.132 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:41:07.133 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1099, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.133 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (247,1,2,false),(247,2,18,false),(247,3,23,false),(247,4,27,false),(247,5,47,false),(247,6,15,true)
	        
2025-04-19 08:41:07.133 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:41:07.136 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:41:07.138 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:41:07.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:41:07.138 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1100, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.139 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (248,1,1,false),(248,2,4,false),(248,3,12,false),(248,4,36,false),(248,5,49,false),(248,6,5,true)
	        
2025-04-19 08:41:07.139 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:41:07.142 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:41:07.144 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:41:07.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:41:07.145 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1101, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.145 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (249,1,31,false),(249,2,43,false),(249,3,58,false),(249,4,59,false),(249,5,66,false),(249,6,9,true)
	        
2025-04-19 08:41:07.145 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:41:07.149 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:41:07.151 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.151 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:41:07.152 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:41:07.152 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1102, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.152 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (250,1,2,false),(250,2,8,false),(250,3,15,false),(250,4,19,false),(250,5,58,false),(250,6,10,true)
	        
2025-04-19 08:41:07.153 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:41:07.156 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:41:07.160 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.160 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:41:07.161 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:41:07.161 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1103, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.161 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (251,1,5,false),(251,2,11,false),(251,3,22,false),(251,4,23,false),(251,5,69,false),(251,6,7,true)
	        
2025-04-19 08:41:07.162 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:41:07.167 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:41:07.169 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.170 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:41:07.170 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:41:07.170 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1104, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.171 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (252,1,52,false),(252,2,58,false),(252,3,59,false),(252,4,64,false),(252,5,66,false),(252,6,9,true)
	        
2025-04-19 08:41:07.171 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:41:07.176 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:41:07.179 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.179 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:41:07.180 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:41:07.180 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1105, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.181 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (253,1,10,false),(253,2,23,false),(253,3,30,false),(253,4,54,false),(253,5,65,false),(253,6,11,true)
	        
2025-04-19 08:41:07.182 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:41:07.185 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:41:07.188 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.188 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:41:07.188 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:41:07.189 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1106, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.189 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (254,1,17,false),(254,2,26,false),(254,3,37,false),(254,4,61,false),(254,5,65,false),(254,6,2,true)
	        
2025-04-19 08:41:07.189 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:41:07.193 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:41:07.195 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.196 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:41:07.196 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:41:07.196 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1107, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.198 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (255,1,31,false),(255,2,32,false),(255,3,54,false),(255,4,60,false),(255,5,63,false),(255,6,12,true)
	        
2025-04-19 08:41:07.199 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:41:07.206 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:41:07.209 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.210 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:41:07.210 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:41:07.210 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1108, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.211 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (256,1,8,false),(256,2,21,false),(256,3,31,false),(256,4,32,false),(256,5,37,false),(256,6,23,true)
	        
2025-04-19 08:41:07.212 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:41:07.219 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:41:07.222 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.223 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:41:07.223 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:41:07.223 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1109, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.224 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (257,1,3,false),(257,2,17,false),(257,3,26,false),(257,4,38,false),(257,5,54,false),(257,6,15,true)
	        
2025-04-19 08:41:07.224 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:41:07.227 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:41:07.228 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.229 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:41:07.229 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:41:07.229 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1110, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.230 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (258,1,11,false),(258,2,18,false),(258,3,39,false),(258,4,44,false),(258,5,65,false),(258,6,7,true)
	        
2025-04-19 08:41:07.231 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:41:07.233 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:41:07.235 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.236 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:41:07.236 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:41:07.236 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1111, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.236 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (259,1,11,false),(259,2,24,false),(259,3,58,false),(259,4,66,false),(259,5,67,false),(259,6,26,true)
	        
2025-04-19 08:41:07.237 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:41:07.239 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:41:07.241 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.242 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:41:07.242 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:41:07.242 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1112, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.242 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (260,1,16,false),(260,2,28,false),(260,3,49,false),(260,4,51,false),(260,5,55,false),(260,6,23,true)
	        
2025-04-19 08:41:07.243 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:41:07.246 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:41:07.249 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.249 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:41:07.250 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:41:07.250 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1113, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.251 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (261,1,2,false),(261,2,9,false),(261,3,28,false),(261,4,36,false),(261,5,53,false),(261,6,4,true)
	        
2025-04-19 08:41:07.251 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:41:07.254 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:41:07.257 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:41:07.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:41:07.258 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1114, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.259 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (262,1,10,false),(262,2,16,false),(262,3,18,false),(262,4,40,false),(262,5,66,false),(262,6,16,true)
	        
2025-04-19 08:41:07.260 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:41:07.268 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:41:07.272 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.273 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:41:07.273 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:41:07.273 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1115, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.274 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (263,1,2,false),(263,2,13,false),(263,3,29,false),(263,4,58,false),(263,5,69,false),(263,6,4,true)
	        
2025-04-19 08:41:07.274 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:41:07.278 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:41:07.281 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.281 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:41:07.282 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:41:07.282 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1116, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.283 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (264,1,26,false),(264,2,27,false),(264,3,43,false),(264,4,61,false),(264,5,69,false),(264,6,4,true)
	        
2025-04-19 08:41:07.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:41:07.287 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:41:07.289 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.290 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:41:07.290 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:41:07.290 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1117, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.290 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (265,1,11,false),(265,2,20,false),(265,3,33,false),(265,4,43,false),(265,5,58,false),(265,6,24,true)
	        
2025-04-19 08:41:07.291 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:41:07.293 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:41:07.295 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.295 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:41:07.296 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:41:07.296 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1118, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.296 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (266,1,3,false),(266,2,10,false),(266,3,24,false),(266,4,46,false),(266,5,63,false),(266,6,4,true)
	        
2025-04-19 08:41:07.297 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:41:07.300 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:41:07.302 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.302 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:41:07.302 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:41:07.302 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1119, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.303 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (267,1,16,false),(267,2,18,false),(267,3,33,false),(267,4,37,false),(267,5,50,false),(267,6,8,true)
	        
2025-04-19 08:41:07.303 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:41:07.306 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:41:07.308 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.309 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:41:07.309 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:41:07.309 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1120, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.310 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (268,1,14,false),(268,2,29,false),(268,3,30,false),(268,4,54,false),(268,5,69,false),(268,6,11,true)
	        
2025-04-19 08:41:07.310 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:41:07.313 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:41:07.316 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.316 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:41:07.317 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:41:07.317 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1121, '2023-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.317 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (269,1,1,false),(269,2,27,false),(269,3,32,false),(269,4,47,false),(269,5,67,false),(269,6,14,true)
	        
2025-04-19 08:41:07.318 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:41:07.320 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:41:07.322 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.322 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:41:07.323 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:41:07.323 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1122, '2023-03-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.323 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (270,1,27,false),(270,2,28,false),(270,3,37,false),(270,4,50,false),(270,5,57,false),(270,6,5,true)
	        
2025-04-19 08:41:07.324 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:41:07.327 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:41:07.329 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:41:07.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:41:07.329 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1123, '2023-03-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.330 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (271,1,15,false),(271,2,17,false),(271,3,18,false),(271,4,47,false),(271,5,57,false),(271,6,19,true)
	        
2025-04-19 08:41:07.330 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:41:07.334 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:41:07.336 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:41:07.336 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:41:07.337 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1124, '2023-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.337 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (272,1,19,false),(272,2,26,false),(272,3,36,false),(272,4,43,false),(272,5,58,false),(272,6,14,true)
	        
2025-04-19 08:41:07.338 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:41:07.340 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:41:07.342 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.343 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:41:07.343 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:41:07.343 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1125, '2023-03-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.344 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (273,1,4,false),(273,2,9,false),(273,3,24,false),(273,4,46,false),(273,5,66,false),(273,6,7,true)
	        
2025-04-19 08:41:07.344 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:41:07.347 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:41:07.349 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.350 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:41:07.350 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:41:07.350 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1126, '2023-04-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.351 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (274,1,11,false),(274,2,19,false),(274,3,21,false),(274,4,29,false),(274,5,52,false),(274,6,17,true)
	        
2025-04-19 08:41:07.351 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:41:07.356 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:41:07.360 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.360 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:41:07.360 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:41:07.361 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1127, '2023-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.361 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (275,1,16,false),(275,2,30,false),(275,3,31,false),(275,4,54,false),(275,5,68,false),(275,6,1,true)
	        
2025-04-19 08:41:07.361 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:41:07.365 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:41:07.368 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.369 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:41:07.369 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:41:07.369 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1128, '2023-04-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.370 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (276,1,3,false),(276,2,5,false),(276,3,9,false),(276,4,42,false),(276,5,52,false),(276,6,11,true)
	        
2025-04-19 08:41:07.370 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:41:07.374 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:41:07.376 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.376 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:41:07.377 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:41:07.377 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1129, '2023-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.377 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (277,1,11,false),(277,2,22,false),(277,3,24,false),(277,4,51,false),(277,5,60,false),(277,6,18,true)
	        
2025-04-19 08:41:07.378 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:41:07.381 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:41:07.383 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.384 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:41:07.384 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:41:07.385 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1130, '2023-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.385 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (278,1,9,false),(278,2,10,false),(278,3,36,false),(278,4,46,false),(278,5,52,false),(278,6,14,true)
	        
2025-04-19 08:41:07.385 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:41:07.388 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:41:07.390 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.390 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:41:07.391 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:41:07.391 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1131, '2023-04-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.391 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (279,1,9,false),(279,2,36,false),(279,3,41,false),(279,4,44,false),(279,5,59,false),(279,6,4,true)
	        
2025-04-19 08:41:07.392 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:41:07.394 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:41:07.396 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.397 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:41:07.397 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:41:07.398 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1132, '2023-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.398 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (280,1,1,false),(280,2,33,false),(280,3,34,false),(280,4,56,false),(280,5,59,false),(280,6,18,true)
	        
2025-04-19 08:41:07.398 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:41:07.401 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:41:07.403 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.403 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:41:07.403 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:41:07.404 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1133, '2023-04-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.404 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (281,1,23,false),(281,2,25,false),(281,3,35,false),(281,4,63,false),(281,5,64,false),(281,6,25,true)
	        
2025-04-19 08:41:07.405 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:41:07.407 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:41:07.409 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.410 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:41:07.410 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:41:07.411 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1134, '2023-04-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.411 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (282,1,4,false),(282,2,11,false),(282,3,21,false),(282,4,38,false),(282,5,64,false),(282,6,11,true)
	        
2025-04-19 08:41:07.411 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:41:07.414 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:41:07.417 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.417 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:41:07.417 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:41:07.418 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1135, '2023-04-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.418 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (283,1,17,false),(283,2,36,false),(283,3,47,false),(283,4,63,false),(283,5,68,false),(283,6,25,true)
	        
2025-04-19 08:41:07.418 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:41:07.421 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:41:07.423 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.423 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:41:07.424 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:41:07.424 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1136, '2023-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.424 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (284,1,19,false),(284,2,21,false),(284,3,55,false),(284,4,66,false),(284,5,68,false),(284,6,3,true)
	        
2025-04-19 08:41:07.425 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:41:07.427 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:41:07.429 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.430 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:41:07.430 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:41:07.430 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1137, '2023-04-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.431 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (285,1,2,false),(285,2,15,false),(285,3,30,false),(285,4,35,false),(285,5,49,false),(285,6,6,true)
	        
2025-04-19 08:41:07.431 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:41:07.434 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:41:07.436 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.437 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:41:07.437 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:41:07.438 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1138, '2023-04-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.438 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (286,1,16,false),(286,2,53,false),(286,3,54,false),(286,4,57,false),(286,5,65,false),(286,6,8,true)
	        
2025-04-19 08:41:07.439 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:41:07.441 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:41:07.444 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.445 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:41:07.445 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:41:07.445 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1139, '2023-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.446 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (287,1,3,false),(287,2,38,false),(287,3,55,false),(287,4,61,false),(287,5,66,false),(287,6,1,true)
	        
2025-04-19 08:41:07.447 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:41:07.450 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:41:07.452 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.452 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:41:07.453 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:41:07.453 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1140, '2023-05-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.453 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (288,1,21,false),(288,2,26,false),(288,3,30,false),(288,4,45,false),(288,5,47,false),(288,6,23,true)
	        
2025-04-19 08:41:07.454 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:41:07.456 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:41:07.458 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.458 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:41:07.459 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:41:07.459 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1141, '2023-05-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.459 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (289,1,31,false),(289,2,39,false),(289,3,47,false),(289,4,51,false),(289,5,53,false),(289,6,6,true)
	        
2025-04-19 08:41:07.460 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:41:07.462 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:41:07.465 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.465 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:41:07.466 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:41:07.466 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1142, '2023-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.466 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (290,1,15,false),(290,2,20,false),(290,3,33,false),(290,4,36,false),(290,5,43,false),(290,6,12,true)
	        
2025-04-19 08:41:07.467 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:41:07.469 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:41:07.471 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.472 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:41:07.472 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:41:07.472 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1143, '2023-05-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.473 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (291,1,21,false),(291,2,24,false),(291,3,33,false),(291,4,55,false),(291,5,69,false),(291,6,3,true)
	        
2025-04-19 08:41:07.473 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:41:07.476 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:41:07.478 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.478 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:41:07.479 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:41:07.479 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1144, '2023-05-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.479 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (292,1,3,false),(292,2,15,false),(292,3,20,false),(292,4,23,false),(292,5,46,false),(292,6,11,true)
	        
2025-04-19 08:41:07.480 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:41:07.483 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:41:07.485 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.485 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:41:07.485 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:41:07.486 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1145, '2023-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.486 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (293,1,1,false),(293,2,26,false),(293,3,28,false),(293,4,55,false),(293,5,58,false),(293,6,25,true)
	        
2025-04-19 08:41:07.487 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:41:07.489 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:41:07.491 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.492 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:41:07.492 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:41:07.492 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1146, '2023-05-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.493 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (294,1,18,false),(294,2,34,false),(294,3,37,false),(294,4,45,false),(294,5,51,false),(294,6,14,true)
	        
2025-04-19 08:41:07.493 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:41:07.495 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:41:07.499 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.499 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:41:07.499 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:41:07.499 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1147, '2023-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.500 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (295,1,17,false),(295,2,23,false),(295,3,32,false),(295,4,38,false),(295,5,63,false),(295,6,23,true)
	        
2025-04-19 08:41:07.500 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:41:07.503 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:41:07.506 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.506 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:41:07.507 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:41:07.507 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1148, '2023-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.508 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (296,1,9,false),(296,2,38,false),(296,3,48,false),(296,4,52,false),(296,5,68,false),(296,6,25,true)
	        
2025-04-19 08:41:07.508 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:41:07.511 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:41:07.512 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.513 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:41:07.513 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:41:07.513 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1149, '2023-05-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.514 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (297,1,12,false),(297,2,21,false),(297,3,44,false),(297,4,50,false),(297,5,58,false),(297,6,26,true)
	        
2025-04-19 08:41:07.515 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:41:07.518 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:41:07.520 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:41:07.521 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:41:07.521 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1150, '2023-05-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.522 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (298,1,24,false),(298,2,38,false),(298,3,39,false),(298,4,48,false),(298,5,56,false),(298,6,4,true)
	        
2025-04-19 08:41:07.522 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:41:07.525 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:41:07.527 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.527 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:41:07.527 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:41:07.527 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1151, '2023-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.528 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (299,1,21,false),(299,2,33,false),(299,3,35,false),(299,4,62,false),(299,5,64,false),(299,6,24,true)
	        
2025-04-19 08:41:07.528 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:41:07.532 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:41:07.534 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.534 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:41:07.535 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:41:07.535 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1152, '2023-05-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.535 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (300,1,2,false),(300,2,4,false),(300,3,54,false),(300,4,61,false),(300,5,62,false),(300,6,14,true)
	        
2025-04-19 08:41:07.536 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:41:07.538 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:41:07.540 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.541 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:41:07.541 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:41:07.541 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1153, '2023-06-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.542 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (301,1,15,false),(301,2,45,false),(301,3,64,false),(301,4,67,false),(301,5,68,false),(301,6,18,true)
	        
2025-04-19 08:41:07.542 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:41:07.544 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:41:07.546 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.547 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:41:07.547 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:41:07.548 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1154, '2023-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.548 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (302,1,2,false),(302,2,31,false),(302,3,45,false),(302,4,46,false),(302,5,49,false),(302,6,20,true)
	        
2025-04-19 08:41:07.548 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:41:07.551 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:41:07.553 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.553 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:41:07.554 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:41:07.554 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1155, '2023-06-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.554 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (303,1,16,false),(303,2,21,false),(303,3,29,false),(303,4,53,false),(303,5,66,false),(303,6,2,true)
	        
2025-04-19 08:41:07.555 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:41:07.557 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:41:07.559 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.560 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:41:07.560 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:41:07.560 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1156, '2023-06-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.561 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (304,1,21,false),(304,2,32,false),(304,3,42,false),(304,4,46,false),(304,5,50,false),(304,6,4,true)
	        
2025-04-19 08:41:07.561 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:41:07.564 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:41:07.566 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.567 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:41:07.567 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:41:07.567 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1157, '2023-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.568 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (305,1,2,false),(305,2,3,false),(305,3,16,false),(305,4,23,false),(305,5,68,false),(305,6,7,true)
	        
2025-04-19 08:41:07.568 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:41:07.571 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:41:07.573 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.573 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:41:07.574 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:41:07.574 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1158, '2023-06-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.574 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (306,1,3,false),(306,2,20,false),(306,3,36,false),(306,4,42,false),(306,5,64,false),(306,6,4,true)
	        
2025-04-19 08:41:07.575 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:41:07.577 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:41:07.579 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.580 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:41:07.580 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:41:07.581 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1159, '2023-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.581 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (307,1,2,false),(307,2,12,false),(307,3,45,false),(307,4,61,false),(307,5,64,false),(307,6,26,true)
	        
2025-04-19 08:41:07.583 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:41:07.586 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:41:07.590 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.591 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:41:07.591 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:41:07.592 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1160, '2023-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.592 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (308,1,36,false),(308,2,39,false),(308,3,52,false),(308,4,57,false),(308,5,69,false),(308,6,1,true)
	        
2025-04-19 08:41:07.593 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:41:07.596 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:41:07.600 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.600 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:41:07.601 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:41:07.601 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1161, '2023-06-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.602 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (309,1,5,false),(309,2,11,false),(309,3,33,false),(309,4,35,false),(309,5,63,false),(309,6,14,true)
	        
2025-04-19 08:41:07.602 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:41:07.605 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:41:07.607 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.608 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:41:07.608 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:41:07.608 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1162, '2023-06-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.609 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (310,1,2,false),(310,2,38,false),(310,3,44,false),(310,4,50,false),(310,5,62,false),(310,6,19,true)
	        
2025-04-19 08:41:07.610 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:41:07.614 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:41:07.617 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.617 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:41:07.617 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:41:07.618 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1163, '2023-06-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.618 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (311,1,6,false),(311,2,28,false),(311,3,39,false),(311,4,43,false),(311,5,54,false),(311,6,12,true)
	        
2025-04-19 08:41:07.618 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:41:07.621 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:41:07.623 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.624 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:41:07.624 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:41:07.624 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1164, '2023-06-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.624 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (312,1,19,false),(312,2,25,false),(312,3,34,false),(312,4,57,false),(312,5,68,false),(312,6,4,true)
	        
2025-04-19 08:41:07.625 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:41:07.628 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:41:07.629 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.630 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:41:07.630 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:41:07.631 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1165, '2023-07-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.631 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (313,1,4,false),(313,2,17,false),(313,3,35,false),(313,4,49,false),(313,5,61,false),(313,6,8,true)
	        
2025-04-19 08:41:07.632 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:41:07.634 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:41:07.636 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.636 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:41:07.637 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:41:07.637 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1166, '2023-07-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.637 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (314,1,15,false),(314,2,26,false),(314,3,31,false),(314,4,38,false),(314,5,61,false),(314,6,3,true)
	        
2025-04-19 08:41:07.638 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:41:07.640 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:41:07.642 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.642 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:41:07.643 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:41:07.643 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1167, '2023-07-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.643 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (315,1,17,false),(315,2,24,false),(315,3,48,false),(315,4,62,false),(315,5,68,false),(315,6,23,true)
	        
2025-04-19 08:41:07.644 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:41:07.647 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:41:07.650 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.650 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:41:07.650 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:41:07.651 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1168, '2023-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.651 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (316,1,7,false),(316,2,23,false),(316,3,24,false),(316,4,32,false),(316,5,43,false),(316,6,18,true)
	        
2025-04-19 08:41:07.651 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:41:07.654 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:41:07.656 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.656 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:41:07.656 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:41:07.657 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1169, '2023-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.657 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (317,1,2,false),(317,2,24,false),(317,3,34,false),(317,4,53,false),(317,5,58,false),(317,6,13,true)
	        
2025-04-19 08:41:07.658 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:41:07.660 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:41:07.662 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.663 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:41:07.663 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:41:07.663 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1170, '2023-07-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.664 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (318,1,23,false),(318,2,35,false),(318,3,45,false),(318,4,66,false),(318,5,67,false),(318,6,20,true)
	        
2025-04-19 08:41:07.665 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:41:07.668 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:41:07.670 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:41:07.670 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:41:07.670 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1171, '2023-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.671 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (319,1,2,false),(319,2,9,false),(319,3,43,false),(319,4,55,false),(319,5,57,false),(319,6,18,true)
	        
2025-04-19 08:41:07.671 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:41:07.674 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:41:07.676 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.676 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:41:07.677 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:41:07.677 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1172, '2023-07-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.677 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (320,1,5,false),(320,2,8,false),(320,3,9,false),(320,4,17,false),(320,5,41,false),(320,6,21,true)
	        
2025-04-19 08:41:07.678 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:41:07.681 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:41:07.683 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.683 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:41:07.684 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:41:07.684 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1173, '2023-07-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.684 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (321,1,7,false),(321,2,10,false),(321,3,11,false),(321,4,13,false),(321,5,24,false),(321,6,24,true)
	        
2025-04-19 08:41:07.685 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:41:07.687 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:41:07.689 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.690 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:41:07.690 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:41:07.690 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1174, '2023-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.690 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (322,1,25,false),(322,2,27,false),(322,3,36,false),(322,4,37,false),(322,5,63,false),(322,6,7,true)
	        
2025-04-19 08:41:07.691 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:41:07.693 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:41:07.695 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.696 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:41:07.696 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:41:07.696 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1175, '2023-07-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.697 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (323,1,3,false),(323,2,4,false),(323,3,12,false),(323,4,28,false),(323,5,49,false),(323,6,25,true)
	        
2025-04-19 08:41:07.697 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:41:07.701 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:41:07.703 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.703 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:41:07.704 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:41:07.704 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1176, '2023-07-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.704 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (324,1,3,false),(324,2,16,false),(324,3,40,false),(324,4,48,false),(324,5,60,false),(324,6,14,true)
	        
2025-04-19 08:41:07.705 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:41:07.707 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:41:07.709 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.710 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:41:07.710 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:41:07.710 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1177, '2023-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.711 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (325,1,10,false),(325,2,25,false),(325,3,27,false),(325,4,34,false),(325,5,38,false),(325,6,2,true)
	        
2025-04-19 08:41:07.711 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:41:07.713 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:41:07.716 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.716 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:41:07.717 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:41:07.717 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1178, '2023-08-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.717 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (326,1,2,false),(326,2,11,false),(326,3,48,false),(326,4,58,false),(326,5,65,false),(326,6,13,true)
	        
2025-04-19 08:41:07.718 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:41:07.720 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:41:07.722 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:41:07.723 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:41:07.723 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1179, '2023-08-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.723 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (327,1,23,false),(327,2,24,false),(327,3,33,false),(327,4,51,false),(327,5,64,false),(327,6,5,true)
	        
2025-04-19 08:41:07.724 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:41:07.726 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:41:07.728 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:41:07.729 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:41:07.729 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1180, '2023-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.730 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (328,1,18,false),(328,2,42,false),(328,3,44,false),(328,4,62,false),(328,5,65,false),(328,6,23,true)
	        
2025-04-19 08:41:07.731 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:41:07.734 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:41:07.735 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.736 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:41:07.736 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:41:07.736 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1181, '2023-08-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.737 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (329,1,6,false),(329,2,13,false),(329,3,20,false),(329,4,35,false),(329,5,54,false),(329,6,22,true)
	        
2025-04-19 08:41:07.737 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:41:07.740 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:41:07.742 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:41:07.742 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:41:07.742 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1182, '2023-08-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.743 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (330,1,10,false),(330,2,15,false),(330,3,21,false),(330,4,67,false),(330,5,69,false),(330,6,3,true)
	        
2025-04-19 08:41:07.743 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:41:07.747 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:41:07.749 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.750 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:41:07.750 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:41:07.750 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1183, '2023-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.751 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (331,1,19,false),(331,2,21,false),(331,3,37,false),(331,4,50,false),(331,5,65,false),(331,6,26,true)
	        
2025-04-19 08:41:07.751 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:41:07.754 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:41:07.756 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.757 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:41:07.757 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:41:07.757 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1184, '2023-08-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.758 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (332,1,32,false),(332,2,34,false),(332,3,37,false),(332,4,39,false),(332,5,47,false),(332,6,3,true)
	        
2025-04-19 08:41:07.758 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:41:07.761 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:41:07.763 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.763 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:41:07.763 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:41:07.764 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1186, '2023-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.764 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (333,1,1,false),(333,2,25,false),(333,3,27,false),(333,4,38,false),(333,5,62,false),(333,6,13,true)
	        
2025-04-19 08:41:07.765 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:41:07.768 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:41:07.770 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.770 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:41:07.771 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:41:07.771 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1187, '2023-08-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.771 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (334,1,3,false),(334,2,4,false),(334,3,12,false),(334,4,22,false),(334,5,28,false),(334,6,16,true)
	        
2025-04-19 08:41:07.772 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:41:07.775 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:41:07.778 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.778 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:41:07.779 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:41:07.779 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1188, '2023-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.779 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (335,1,25,false),(335,2,30,false),(335,3,32,false),(335,4,33,false),(335,5,55,false),(335,6,20,true)
	        
2025-04-19 08:41:07.780 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:41:07.783 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:41:07.785 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.786 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:41:07.786 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:41:07.786 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1189, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.787 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (336,1,20,false),(336,2,22,false),(336,3,26,false),(336,4,28,false),(336,5,63,false),(336,6,5,true)
	        
2025-04-19 08:41:07.787 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:41:07.790 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:41:07.792 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.792 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:41:07.793 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:41:07.793 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1190, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.793 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (337,1,4,false),(337,2,6,false),(337,3,25,false),(337,4,55,false),(337,5,68,false),(337,6,26,true)
	        
2025-04-19 08:41:07.794 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:41:07.796 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:41:07.799 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.799 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:41:07.799 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:41:07.799 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1191, '2023-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.800 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (338,1,4,false),(338,2,13,false),(338,3,35,false),(338,4,61,false),(338,5,69,false),(338,6,4,true)
	        
2025-04-19 08:41:07.800 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:41:07.803 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:41:07.805 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.805 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:41:07.806 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:41:07.806 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1192, '2023-09-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.806 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (339,1,25,false),(339,2,38,false),(339,3,42,false),(339,4,66,false),(339,5,67,false),(339,6,19,true)
	        
2025-04-19 08:41:07.807 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:41:07.809 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:41:07.811 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.811 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:41:07.812 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:41:07.812 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1193, '2023-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.812 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (340,1,1,false),(340,2,26,false),(340,3,32,false),(340,4,46,false),(340,5,51,false),(340,6,13,true)
	        
2025-04-19 08:41:07.813 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:41:07.816 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:41:07.818 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.819 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:41:07.819 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:41:07.819 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1194, '2023-09-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.819 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (341,1,9,false),(341,2,14,false),(341,3,20,false),(341,4,23,false),(341,5,63,false),(341,6,1,true)
	        
2025-04-19 08:41:07.820 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:41:07.823 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:41:07.825 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:41:07.825 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:41:07.825 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1195, '2023-09-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.826 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (342,1,11,false),(342,2,19,false),(342,3,29,false),(342,4,63,false),(342,5,68,false),(342,6,25,true)
	        
2025-04-19 08:41:07.826 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:41:07.829 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:41:07.831 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.832 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:41:07.832 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:41:07.832 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1196, '2023-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.833 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (343,1,9,false),(343,2,25,false),(343,3,27,false),(343,4,53,false),(343,5,66,false),(343,6,5,true)
	        
2025-04-19 08:41:07.834 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:41:07.837 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:41:07.839 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.839 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:41:07.839 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:41:07.840 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1197, '2023-09-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.840 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (344,1,22,false),(344,2,30,false),(344,3,37,false),(344,4,44,false),(344,5,45,false),(344,6,18,true)
	        
2025-04-19 08:41:07.840 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:41:07.843 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:41:07.845 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.845 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:41:07.846 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:41:07.846 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1198, '2023-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.846 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (345,1,8,false),(345,2,11,false),(345,3,19,false),(345,4,24,false),(345,5,46,false),(345,6,5,true)
	        
2025-04-19 08:41:07.847 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:41:07.850 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:41:07.852 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.853 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:41:07.853 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:41:07.853 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1199, '2023-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.854 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (346,1,2,false),(346,2,21,false),(346,3,26,false),(346,4,40,false),(346,5,42,false),(346,6,9,true)
	        
2025-04-19 08:41:07.854 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:41:07.857 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:41:07.859 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.860 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:41:07.860 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:41:07.860 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1200, '2023-09-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.860 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (347,1,16,false),(347,2,27,false),(347,3,59,false),(347,4,62,false),(347,5,63,false),(347,6,23,true)
	        
2025-04-19 08:41:07.861 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:41:07.864 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:41:07.866 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.867 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:41:07.867 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:41:07.867 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1201, '2023-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.868 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (348,1,1,false),(348,2,12,false),(348,3,20,false),(348,4,33,false),(348,5,66,false),(348,6,21,true)
	        
2025-04-19 08:41:07.868 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:41:07.871 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:41:07.873 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.874 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:41:07.874 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:41:07.874 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1202, '2023-09-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.875 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (349,1,10,false),(349,2,12,false),(349,3,22,false),(349,4,36,false),(349,5,50,false),(349,6,4,true)
	        
2025-04-19 08:41:07.876 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:41:07.878 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:41:07.882 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.882 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:41:07.882 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:41:07.883 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1203, '2023-09-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.883 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (350,1,1,false),(350,2,7,false),(350,3,46,false),(350,4,47,false),(350,5,63,false),(350,6,7,true)
	        
2025-04-19 08:41:07.883 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:41:07.886 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:41:07.888 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.889 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:41:07.889 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:41:07.889 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1204, '2023-09-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.890 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (351,1,19,false),(351,2,30,false),(351,3,37,false),(351,4,44,false),(351,5,46,false),(351,6,22,true)
	        
2025-04-19 08:41:07.890 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:41:07.893 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:41:07.895 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.895 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:41:07.895 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:41:07.896 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1205, '2023-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.896 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (352,1,12,false),(352,2,26,false),(352,3,27,false),(352,4,43,false),(352,5,47,false),(352,6,5,true)
	        
2025-04-19 08:41:07.897 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:41:07.900 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:41:07.903 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.903 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:41:07.904 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:41:07.904 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1206, '2023-10-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.904 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (353,1,9,false),(353,2,35,false),(353,3,54,false),(353,4,63,false),(353,5,64,false),(353,6,1,true)
	        
2025-04-19 08:41:07.905 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:41:07.908 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:41:07.910 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.911 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:41:07.911 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:41:07.911 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1207, '2023-10-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.912 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (354,1,47,false),(354,2,54,false),(354,3,57,false),(354,4,60,false),(354,5,65,false),(354,6,19,true)
	        
2025-04-19 08:41:07.912 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:41:07.916 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:41:07.918 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.918 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:41:07.919 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:41:07.919 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1208, '2023-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.919 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (355,1,16,false),(355,2,34,false),(355,3,46,false),(355,4,55,false),(355,5,67,false),(355,6,14,true)
	        
2025-04-19 08:41:07.920 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:41:07.922 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:41:07.924 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.925 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:41:07.925 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:41:07.925 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1209, '2023-10-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.926 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (356,1,22,false),(356,2,24,false),(356,3,40,false),(356,4,52,false),(356,5,64,false),(356,6,10,true)
	        
2025-04-19 08:41:07.926 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:41:07.929 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:41:07.932 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.932 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:41:07.933 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:41:07.933 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1210, '2023-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.933 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (357,1,14,false),(357,2,16,false),(357,3,42,false),(357,4,48,false),(357,5,64,false),(357,6,14,true)
	        
2025-04-19 08:41:07.934 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:41:07.936 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:41:07.939 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.939 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:41:07.939 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:41:07.939 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1211, '2023-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.940 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (358,1,2,false),(358,2,27,false),(358,3,31,false),(358,4,44,false),(358,5,64,false),(358,6,18,true)
	        
2025-04-19 08:41:07.940 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:41:07.943 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:41:07.945 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.946 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:41:07.946 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:41:07.946 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1212, '2023-10-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.947 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (359,1,1,false),(359,2,4,false),(359,3,13,false),(359,4,35,false),(359,5,58,false),(359,6,24,true)
	        
2025-04-19 08:41:07.948 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:41:07.951 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:41:07.953 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.954 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:41:07.954 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:41:07.954 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1213, '2023-10-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.955 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (360,1,6,false),(360,2,15,false),(360,3,24,false),(360,4,67,false),(360,5,68,false),(360,6,11,true)
	        
2025-04-19 08:41:07.955 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:41:07.958 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:41:07.960 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:41:07.961 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:41:07.961 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1214, '2023-10-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.962 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (361,1,18,false),(361,2,21,false),(361,3,25,false),(361,4,46,false),(361,5,64,false),(361,6,21,true)
	        
2025-04-19 08:41:07.963 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:41:07.967 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:41:07.970 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:41:07.971 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:41:07.971 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1215, '2023-10-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.972 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (362,1,24,false),(362,2,27,false),(362,3,41,false),(362,4,53,false),(362,5,68,false),(362,6,2,true)
	        
2025-04-19 08:41:07.972 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:41:07.975 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:41:07.978 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.978 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:41:07.978 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:41:07.978 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1216, '2023-10-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.979 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (363,1,14,false),(363,2,24,false),(363,3,50,false),(363,4,59,false),(363,5,64,false),(363,6,2,true)
	        
2025-04-19 08:41:07.979 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:41:07.984 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:41:07.986 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.986 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:41:07.986 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:41:07.987 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1217, '2023-10-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.987 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (364,1,19,false),(364,2,22,false),(364,3,34,false),(364,4,66,false),(364,5,69,false),(364,6,5,true)
	        
2025-04-19 08:41:07.987 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:41:07.990 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:41:07.992 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:07.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:41:07.993 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:41:07.993 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1218, '2023-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:07.994 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (365,1,22,false),(365,2,26,false),(365,3,39,false),(365,4,47,false),(365,5,63,false),(365,6,12,true)
	        
2025-04-19 08:41:07.994 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:41:07.998 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:41:08.000 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.001 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:41:08.001 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:41:08.002 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1219, '2023-11-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.002 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (366,1,1,false),(366,2,28,false),(366,3,30,false),(366,4,34,false),(366,5,52,false),(366,6,6,true)
	        
2025-04-19 08:41:08.003 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:41:08.006 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:41:08.008 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.008 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:41:08.008 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:41:08.009 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1220, '2023-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.009 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (367,1,12,false),(367,2,25,false),(367,3,40,false),(367,4,59,false),(367,5,61,false),(367,6,26,true)
	        
2025-04-19 08:41:08.010 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:41:08.012 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:41:08.015 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.015 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:41:08.016 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:41:08.016 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1221, '2023-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.016 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (368,1,14,false),(368,2,21,false),(368,3,33,false),(368,4,39,false),(368,5,62,false),(368,6,20,true)
	        
2025-04-19 08:41:08.017 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:41:08.019 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:41:08.021 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.022 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:41:08.022 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:41:08.022 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1222, '2023-11-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.023 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (369,1,1,false),(369,2,12,false),(369,3,14,false),(369,4,24,false),(369,5,57,false),(369,6,7,true)
	        
2025-04-19 08:41:08.023 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:41:08.026 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:41:08.028 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.029 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:41:08.029 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:41:08.030 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1223, '2023-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.030 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (370,1,24,false),(370,2,33,false),(370,3,35,false),(370,4,37,false),(370,5,42,false),(370,6,21,true)
	        
2025-04-19 08:41:08.031 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:41:08.034 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:41:08.036 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.036 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:41:08.036 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:41:08.037 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1224, '2023-11-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.037 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (371,1,3,false),(371,2,4,false),(371,3,51,false),(371,4,53,false),(371,5,60,false),(371,6,6,true)
	        
2025-04-19 08:41:08.037 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:41:08.041 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:41:08.043 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.043 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:41:08.043 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:41:08.043 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1225, '2023-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.044 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (372,1,34,false),(372,2,50,false),(372,3,51,false),(372,4,61,false),(372,5,67,false),(372,6,20,true)
	        
2025-04-19 08:41:08.044 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:41:08.047 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:41:08.050 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.050 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:41:08.051 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:41:08.051 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1226, '2023-11-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.051 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (373,1,19,false),(373,2,26,false),(373,3,30,false),(373,4,39,false),(373,5,63,false),(373,6,13,true)
	        
2025-04-19 08:41:08.052 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:41:08.054 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:41:08.056 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.057 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:41:08.057 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:41:08.057 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1227, '2023-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.057 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (374,1,20,false),(374,2,24,false),(374,3,33,false),(374,4,39,false),(374,5,42,false),(374,6,21,true)
	        
2025-04-19 08:41:08.058 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:41:08.061 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:41:08.062 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.063 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:41:08.063 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:41:08.063 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1228, '2023-11-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.064 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (375,1,27,false),(375,2,33,false),(375,3,63,false),(375,4,66,false),(375,5,68,false),(375,6,9,true)
	        
2025-04-19 08:41:08.064 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:41:08.074 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:41:08.078 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.078 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:41:08.079 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:41:08.079 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1229, '2023-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.079 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (376,1,2,false),(376,2,21,false),(376,3,38,false),(376,4,61,false),(376,5,66,false),(376,6,12,true)
	        
2025-04-19 08:41:08.080 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:41:08.083 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:41:08.085 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.086 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:41:08.086 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:41:08.086 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1230, '2023-11-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.087 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (377,1,6,false),(377,2,47,false),(377,3,50,false),(377,4,61,false),(377,5,68,false),(377,6,4,true)
	        
2025-04-19 08:41:08.088 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:41:08.093 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:41:08.096 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.096 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:41:08.097 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:41:08.097 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1231, '2023-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.098 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (378,1,28,false),(378,2,35,false),(378,3,41,false),(378,4,47,false),(378,5,60,false),(378,6,3,true)
	        
2025-04-19 08:41:08.098 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:41:08.101 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:41:08.103 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.104 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:41:08.104 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:41:08.104 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1232, '2023-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.104 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (379,1,18,false),(379,2,19,false),(379,3,27,false),(379,4,28,false),(379,5,45,false),(379,6,9,true)
	        
2025-04-19 08:41:08.105 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:41:08.107 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:41:08.109 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.110 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:41:08.110 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:41:08.110 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1233, '2023-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.110 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (380,1,2,false),(380,2,12,false),(380,3,37,false),(380,4,56,false),(380,5,65,false),(380,6,21,true)
	        
2025-04-19 08:41:08.111 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:41:08.114 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:41:08.117 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.118 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:41:08.118 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:41:08.118 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1234, '2023-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.119 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (381,1,5,false),(381,2,25,false),(381,3,26,false),(381,4,40,false),(381,5,60,false),(381,6,1,true)
	        
2025-04-19 08:41:08.119 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:41:08.123 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:41:08.125 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.126 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:41:08.128 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:41:08.128 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1235, '2023-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.131 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (382,1,1,false),(382,2,24,false),(382,3,27,false),(382,4,31,false),(382,5,62,false),(382,6,20,true)
	        
2025-04-19 08:41:08.133 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:41:08.138 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:41:08.142 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.142 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:41:08.142 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:41:08.143 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1236, '2023-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.143 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (383,1,3,false),(383,2,8,false),(383,3,41,false),(383,4,56,false),(383,5,64,false),(383,6,18,true)
	        
2025-04-19 08:41:08.144 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:41:08.149 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:41:08.151 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.152 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:41:08.152 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:41:08.152 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1237, '2023-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.152 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (384,1,3,false),(384,2,9,false),(384,3,10,false),(384,4,20,false),(384,5,62,false),(384,6,25,true)
	        
2025-04-19 08:41:08.153 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:41:08.155 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:41:08.157 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.158 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:41:08.158 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:41:08.158 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1238, '2023-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.159 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (385,1,5,false),(385,2,8,false),(385,3,19,false),(385,4,34,false),(385,5,39,false),(385,6,26,true)
	        
2025-04-19 08:41:08.159 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:41:08.162 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:41:08.163 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:41:08.164 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:41:08.165 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1239, '2023-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.165 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (386,1,27,false),(386,2,35,false),(386,3,41,false),(386,4,56,false),(386,5,60,false),(386,6,16,true)
	        
2025-04-19 08:41:08.165 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:41:08.168 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:41:08.171 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.172 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:41:08.173 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:41:08.173 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1240, '2023-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.174 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (387,1,9,false),(387,2,14,false),(387,3,17,false),(387,4,18,false),(387,5,53,false),(387,6,6,true)
	        
2025-04-19 08:41:08.175 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:41:08.182 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:41:08.185 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:41:08.186 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:41:08.187 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1241, '2023-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.188 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (388,1,5,false),(388,2,12,false),(388,3,20,false),(388,4,24,false),(388,5,29,false),(388,6,4,true)
	        
2025-04-19 08:41:08.189 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:41:08.192 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:41:08.194 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.194 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:41:08.195 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:41:08.195 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1242, '2023-12-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.195 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (389,1,4,false),(389,2,11,false),(389,3,38,false),(389,4,51,false),(389,5,68,false),(389,6,5,true)
	        
2025-04-19 08:41:08.196 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:41:08.199 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:41:08.201 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.202 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:41:08.202 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:41:08.202 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1243, '2023-12-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.202 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (390,1,10,false),(390,2,11,false),(390,3,26,false),(390,4,27,false),(390,5,34,false),(390,6,7,true)
	        
2025-04-19 08:41:08.203 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:41:08.205 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:41:08.207 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.208 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:41:08.208 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:41:08.208 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1244, '2024-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.209 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (391,1,12,false),(391,2,21,false),(391,3,42,false),(391,4,44,false),(391,5,49,false),(391,6,1,true)
	        
2025-04-19 08:41:08.209 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:41:08.211 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:41:08.213 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.213 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:41:08.214 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:41:08.214 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1245, '2024-01-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.214 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (392,1,30,false),(392,2,31,false),(392,3,38,false),(392,4,48,false),(392,5,68,false),(392,6,8,true)
	        
2025-04-19 08:41:08.215 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:41:08.218 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:41:08.219 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.220 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:41:08.220 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:41:08.220 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1246, '2024-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.221 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (393,1,4,false),(393,2,31,false),(393,3,34,false),(393,4,38,false),(393,5,61,false),(393,6,13,true)
	        
2025-04-19 08:41:08.221 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:41:08.223 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:41:08.228 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.232 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:41:08.234 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:41:08.235 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1247, '2024-01-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.236 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (394,1,7,false),(394,2,17,false),(394,3,28,false),(394,4,40,false),(394,5,45,false),(394,6,2,true)
	        
2025-04-19 08:41:08.236 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:41:08.241 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:41:08.243 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.244 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:41:08.244 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:41:08.244 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1248, '2024-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.245 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (395,1,25,false),(395,2,40,false),(395,3,43,false),(395,4,48,false),(395,5,50,false),(395,6,11,true)
	        
2025-04-19 08:41:08.245 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:41:08.250 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:41:08.253 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.254 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:41:08.254 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:41:08.254 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1249, '2024-01-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.255 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (396,1,12,false),(396,2,31,false),(396,3,33,false),(396,4,51,false),(396,5,58,false),(396,6,15,true)
	        
2025-04-19 08:41:08.255 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:41:08.258 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:41:08.260 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.260 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:41:08.260 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:41:08.260 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1250, '2024-01-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.261 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (397,1,13,false),(397,2,30,false),(397,3,35,false),(397,4,49,false),(397,5,59,false),(397,6,4,true)
	        
2025-04-19 08:41:08.261 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:41:08.264 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:41:08.267 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.267 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:41:08.267 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:41:08.268 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1251, '2024-01-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.268 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (398,1,18,false),(398,2,22,false),(398,3,43,false),(398,4,61,false),(398,5,65,false),(398,6,2,true)
	        
2025-04-19 08:41:08.268 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:41:08.271 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:41:08.273 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.273 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:41:08.273 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:41:08.273 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1252, '2024-01-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.274 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (399,1,16,false),(399,2,31,false),(399,3,34,false),(399,4,47,false),(399,5,65,false),(399,6,10,true)
	        
2025-04-19 08:41:08.275 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:41:08.277 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:41:08.279 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.279 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:41:08.280 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:41:08.280 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1253, '2024-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.280 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (400,1,24,false),(400,2,25,false),(400,3,43,false),(400,4,52,false),(400,5,63,false),(400,6,21,true)
	        
2025-04-19 08:41:08.281 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:41:08.284 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:41:08.286 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.286 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:41:08.286 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:41:08.286 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1254, '2024-01-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.287 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (401,1,1,false),(401,2,5,false),(401,3,32,false),(401,4,50,false),(401,5,64,false),(401,6,8,true)
	        
2025-04-19 08:41:08.287 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:41:08.289 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:41:08.291 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.292 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:41:08.292 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:41:08.292 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1255, '2024-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.293 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (402,1,7,false),(402,2,38,false),(402,3,65,false),(402,4,66,false),(402,5,68,false),(402,6,21,true)
	        
2025-04-19 08:41:08.293 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:41:08.297 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:41:08.299 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.300 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:41:08.300 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:41:08.300 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1256, '2024-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.300 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (403,1,39,false),(403,2,41,false),(403,3,43,false),(403,4,49,false),(403,5,64,false),(403,6,4,true)
	        
2025-04-19 08:41:08.301 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:41:08.303 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:41:08.305 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.305 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:41:08.306 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:41:08.306 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1257, '2024-01-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.306 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (404,1,15,false),(404,2,18,false),(404,3,19,false),(404,4,41,false),(404,5,43,false),(404,6,14,true)
	        
2025-04-19 08:41:08.307 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:41:08.309 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:41:08.311 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.311 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:41:08.312 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:41:08.312 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1258, '2024-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.312 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (405,1,9,false),(405,2,11,false),(405,3,27,false),(405,4,59,false),(405,5,66,false),(405,6,19,true)
	        
2025-04-19 08:41:08.313 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:41:08.316 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:41:08.318 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.319 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:41:08.319 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:41:08.319 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1259, '2024-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.320 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (406,1,1,false),(406,2,2,false),(406,3,27,false),(406,4,30,false),(406,5,67,false),(406,6,9,true)
	        
2025-04-19 08:41:08.320 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:41:08.322 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:41:08.324 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.325 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:41:08.325 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:41:08.325 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1260, '2024-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.326 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (407,1,12,false),(407,2,21,false),(407,3,62,false),(407,4,67,false),(407,5,69,false),(407,6,17,true)
	        
2025-04-19 08:41:08.326 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:41:08.329 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:41:08.331 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.332 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:41:08.332 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:41:08.332 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1261, '2024-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.334 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (408,1,27,false),(408,2,28,false),(408,3,34,false),(408,4,37,false),(408,5,44,false),(408,6,8,true)
	        
2025-04-19 08:41:08.334 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:41:08.337 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:41:08.338 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.339 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:41:08.339 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:41:08.339 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1262, '2024-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.340 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (409,1,17,false),(409,2,36,false),(409,3,43,false),(409,4,53,false),(409,5,67,false),(409,6,14,true)
	        
2025-04-19 08:41:08.340 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:41:08.343 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:41:08.345 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.346 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:41:08.346 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:41:08.346 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1263, '2024-02-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.347 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (410,1,1,false),(410,2,4,false),(410,3,45,false),(410,4,47,false),(410,5,67,false),(410,6,18,true)
	        
2025-04-19 08:41:08.348 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:41:08.351 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:41:08.352 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.353 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:41:08.353 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:41:08.353 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1264, '2024-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.354 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (411,1,6,false),(411,2,28,false),(411,3,59,false),(411,4,62,false),(411,5,69,false),(411,6,21,true)
	        
2025-04-19 08:41:08.354 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:41:08.357 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:41:08.359 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.359 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:41:08.359 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:41:08.359 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1265, '2024-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.360 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (412,1,4,false),(412,2,23,false),(412,3,45,false),(412,4,50,false),(412,5,53,false),(412,6,17,true)
	        
2025-04-19 08:41:08.360 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:41:08.363 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:41:08.366 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.366 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:41:08.367 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:41:08.367 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1266, '2024-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.367 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (413,1,4,false),(413,2,27,false),(413,3,33,false),(413,4,41,false),(413,5,42,false),(413,6,14,true)
	        
2025-04-19 08:41:08.368 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:41:08.370 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:41:08.372 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:41:08.373 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:41:08.373 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1267, '2024-02-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.373 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (414,1,3,false),(414,2,8,false),(414,3,40,false),(414,4,53,false),(414,5,58,false),(414,6,3,true)
	        
2025-04-19 08:41:08.374 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:41:08.376 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:41:08.379 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.379 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:41:08.379 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:41:08.380 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1268, '2024-02-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.380 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (415,1,24,false),(415,2,29,false),(415,3,42,false),(415,4,51,false),(415,5,54,false),(415,6,16,true)
	        
2025-04-19 08:41:08.381 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:41:08.385 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:41:08.387 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.387 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:41:08.387 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:41:08.387 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1269, '2024-02-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.388 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (416,1,16,false),(416,2,26,false),(416,3,29,false),(416,4,38,false),(416,5,50,false),(416,6,6,true)
	        
2025-04-19 08:41:08.388 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:41:08.391 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:41:08.392 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.393 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:41:08.393 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:41:08.393 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1270, '2024-03-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.394 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (417,1,3,false),(417,2,18,false),(417,3,27,false),(417,4,36,false),(417,5,53,false),(417,6,12,true)
	        
2025-04-19 08:41:08.394 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:41:08.397 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:41:08.399 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.399 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:41:08.400 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:41:08.400 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1271, '2024-03-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.400 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (418,1,36,false),(418,2,42,false),(418,3,50,false),(418,4,52,false),(418,5,67,false),(418,6,26,true)
	        
2025-04-19 08:41:08.401 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:41:08.403 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:41:08.405 UTC [158] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:41:08.405 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:41:08.406 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:41:08.406 UTC [158] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1272, '2024-03-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:41:08.406 UTC [158] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (419,1,6,false),(419,2,19,false),(419,3,28,false),(419,4,44,false),(419,5,60,false),(419,6,10,true)
	        
2025-04-19 08:41:08.407 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:41:08.409 UTC [158] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:41:11.535 UTC [158] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:13.115 UTC [158] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:17.901 UTC [158] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:41:18.202 UTC [158] DEBUG:  unexpected EOF on client connection
2025-04-19 08:41:20.274 UTC [166] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:20.285 UTC [166] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:20.290 UTC [166] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:20.290 UTC [166] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:20.295 UTC [166] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:20.298 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:20.304 UTC [166] DEBUG:  building index "pg_toast_19011_index" on table "pg_toast_19011" serially
2025-04-19 08:41:20.316 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:20.316 UTC [166] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:20.316 UTC [166] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:20.318 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:20.318 UTC [166] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:20.318 UTC [166] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:20.319 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:20.319 UTC [166] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:20.319 UTC [166] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:20.320 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:20.321 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:20.322 UTC [166] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:20.322 UTC [166] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:20.323 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:20.323 UTC [166] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:20.323 UTC [166] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:20.324 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:20.325 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:20.325 UTC [166] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:20.325 UTC [166] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:20.326 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:20.326 UTC [166] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:20.326 UTC [166] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:20.327 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:20.328 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:20.329 UTC [166] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:20.329 UTC [166] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:20.330 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:20.332 UTC [166] DEBUG:  building index "pg_toast_19072_index" on table "pg_toast_19072" serially
2025-04-19 08:41:20.332 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:20.333 UTC [166] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:20.333 UTC [166] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:20.334 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:20.335 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:20.335 UTC [166] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:20.335 UTC [166] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:20.336 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:20.336 UTC [166] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:20.336 UTC [166] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:20.338 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:20.339 UTC [166] DEBUG:  building index "pg_toast_19105_index" on table "pg_toast_19105" serially
2025-04-19 08:41:20.339 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:20.340 UTC [166] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:20.340 UTC [166] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:20.340 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:20.341 UTC [166] DEBUG:  building index "pg_toast_19116_index" on table "pg_toast_19116" serially
2025-04-19 08:41:20.342 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:20.342 UTC [166] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:20.342 UTC [166] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:20.343 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:20.344 UTC [166] DEBUG:  building index "pg_toast_19139_index" on table "pg_toast_19139" serially
2025-04-19 08:41:20.345 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:20.345 UTC [166] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:20.345 UTC [166] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:20.346 UTC [166] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:20.346 UTC [166] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:20.347 UTC [166] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:20.347 UTC [166] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:20.348 UTC [166] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:20.348 UTC [166] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:20.349 UTC [166] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:20.349 UTC [166] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:20.350 UTC [166] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:20.350 UTC [166] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:20.352 UTC [166] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:20.352 UTC [166] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:20.354 UTC [166] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:20.354 UTC [166] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:20.356 UTC [166] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:20.356 UTC [166] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:20.357 UTC [166] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:20.357 UTC [166] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:20.358 UTC [166] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:20.358 UTC [166] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:20.361 UTC [166] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:20.361 UTC [166] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:20.380 UTC [166] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:20.649 UTC [166] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$wD7r06MfkorGeorkrHsIWeRYg6ICKldWPw/SprCz0Ibp5LUx/RXmC')
	                RETURNING id, username, email
	                
2025-04-19 08:41:20.650 UTC [166] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:20.651 UTC [166] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:20.651 UTC [166] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:41:20.660 UTC [166] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:20.661 UTC [166] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:20.664 UTC [166] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:20.668 UTC [166] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:20.668 UTC [166] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:20.671 UTC [166] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:20.673 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:20.674 UTC [166] DEBUG:  building index "pg_toast_19175_index" on table "pg_toast_19175" serially
2025-04-19 08:41:20.675 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:20.676 UTC [166] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:20.676 UTC [166] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:20.676 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:20.677 UTC [166] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:20.677 UTC [166] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:20.677 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:20.678 UTC [166] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:20.678 UTC [166] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:20.678 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:20.679 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:20.680 UTC [166] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:20.680 UTC [166] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:20.681 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:20.681 UTC [166] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:20.681 UTC [166] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:20.681 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:20.682 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:20.682 UTC [166] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:20.682 UTC [166] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:20.683 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:20.683 UTC [166] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:20.683 UTC [166] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:20.685 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:20.685 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:20.686 UTC [166] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:20.686 UTC [166] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:20.687 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:20.688 UTC [166] DEBUG:  building index "pg_toast_19236_index" on table "pg_toast_19236" serially
2025-04-19 08:41:20.689 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:20.689 UTC [166] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:20.689 UTC [166] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:20.690 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:20.691 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:20.691 UTC [166] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:20.691 UTC [166] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:20.692 UTC [166] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:20.692 UTC [166] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:20.692 UTC [166] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:20.693 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:20.694 UTC [166] DEBUG:  building index "pg_toast_19269_index" on table "pg_toast_19269" serially
2025-04-19 08:41:20.695 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:20.695 UTC [166] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:20.695 UTC [166] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:20.696 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:20.697 UTC [166] DEBUG:  building index "pg_toast_19280_index" on table "pg_toast_19280" serially
2025-04-19 08:41:20.697 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:20.698 UTC [166] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:20.698 UTC [166] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:20.699 UTC [166] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:20.700 UTC [166] DEBUG:  building index "pg_toast_19303_index" on table "pg_toast_19303" serially
2025-04-19 08:41:20.700 UTC [166] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:20.701 UTC [166] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:20.701 UTC [166] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:20.701 UTC [166] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:20.701 UTC [166] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:20.703 UTC [166] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:20.703 UTC [166] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:20.704 UTC [166] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:20.704 UTC [166] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:20.705 UTC [166] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:20.705 UTC [166] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:20.706 UTC [166] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:20.706 UTC [166] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:20.707 UTC [166] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:20.707 UTC [166] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:20.709 UTC [166] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:20.709 UTC [166] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:20.710 UTC [166] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:20.710 UTC [166] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:20.711 UTC [166] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:20.711 UTC [166] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:20.712 UTC [166] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:20.712 UTC [166] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:20.713 UTC [166] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:20.713 UTC [166] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:20.720 UTC [166] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:20.966 UTC [166] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8ZFnM463Swkh6dO3o2fbOeZ.tx/aZ/Y5dHYaLzV2W8rFyNxh2Lyby')
	                RETURNING id, username, email
	                
2025-04-19 08:41:20.967 UTC [166] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:20.968 UTC [166] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:30.658 UTC [166] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:31.214 UTC [174] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:41:32.171 UTC [166] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:33.002 UTC [166] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:33.203 UTC [166] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:33.560 UTC [166] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:33.909 UTC [166] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:41:34.198 UTC [166] DEBUG:  unexpected EOF on client connection
2025-04-19 08:41:36.107 UTC [182] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:36.112 UTC [182] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:36.118 UTC [182] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:36.118 UTC [182] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:36.121 UTC [182] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:36.124 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:36.130 UTC [182] DEBUG:  building index "pg_toast_19339_index" on table "pg_toast_19339" serially
2025-04-19 08:41:36.133 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:36.134 UTC [182] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:36.134 UTC [182] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:36.135 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:36.136 UTC [182] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:36.136 UTC [182] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:36.137 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:36.138 UTC [182] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:36.138 UTC [182] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:36.139 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:36.141 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:36.142 UTC [182] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:36.142 UTC [182] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:36.143 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:36.143 UTC [182] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:36.143 UTC [182] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:36.144 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:36.146 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:36.146 UTC [182] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:36.147 UTC [182] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:36.148 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:36.148 UTC [182] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:36.148 UTC [182] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:36.151 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:36.153 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:36.153 UTC [182] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:36.153 UTC [182] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:36.154 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:36.156 UTC [182] DEBUG:  building index "pg_toast_19400_index" on table "pg_toast_19400" serially
2025-04-19 08:41:36.157 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:36.157 UTC [182] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:36.157 UTC [182] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:36.158 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:36.159 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:36.159 UTC [182] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:36.159 UTC [182] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:36.160 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:36.160 UTC [182] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:36.160 UTC [182] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:36.161 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:36.162 UTC [182] DEBUG:  building index "pg_toast_19433_index" on table "pg_toast_19433" serially
2025-04-19 08:41:36.163 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:36.163 UTC [182] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:36.163 UTC [182] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:36.164 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:36.164 UTC [182] DEBUG:  building index "pg_toast_19444_index" on table "pg_toast_19444" serially
2025-04-19 08:41:36.165 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:36.165 UTC [182] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:36.165 UTC [182] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:36.167 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:36.168 UTC [182] DEBUG:  building index "pg_toast_19467_index" on table "pg_toast_19467" serially
2025-04-19 08:41:36.169 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:36.169 UTC [182] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:36.169 UTC [182] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:36.170 UTC [182] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:36.170 UTC [182] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:36.170 UTC [182] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:36.170 UTC [182] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:36.171 UTC [182] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:36.171 UTC [182] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:36.172 UTC [182] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:36.172 UTC [182] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:36.173 UTC [182] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:36.173 UTC [182] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:36.174 UTC [182] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:36.174 UTC [182] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:36.174 UTC [182] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:36.174 UTC [182] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:36.175 UTC [182] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:36.175 UTC [182] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:36.176 UTC [182] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:36.176 UTC [182] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:36.177 UTC [182] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:36.177 UTC [182] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:36.178 UTC [182] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:36.178 UTC [182] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:36.220 UTC [182] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:36.504 UTC [182] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$SDFJQ6EaY4b0OjGE7jJO3Ot7MLH4NMiobnxQIBI3AV4y3/gVv4cF2')
	                RETURNING id, username, email
	                
2025-04-19 08:41:36.505 UTC [182] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:36.506 UTC [182] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:36.507 UTC [182] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:41:36.525 UTC [182] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:36.528 UTC [182] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:36.532 UTC [182] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:36.536 UTC [182] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:36.536 UTC [182] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:36.539 UTC [182] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:36.546 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:36.548 UTC [182] DEBUG:  building index "pg_toast_19503_index" on table "pg_toast_19503" serially
2025-04-19 08:41:36.550 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:36.550 UTC [182] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:36.550 UTC [182] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:36.551 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:36.551 UTC [182] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:36.551 UTC [182] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:36.552 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:36.552 UTC [182] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:36.552 UTC [182] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:36.553 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:36.554 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:36.554 UTC [182] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:36.554 UTC [182] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:36.555 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:36.555 UTC [182] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:36.555 UTC [182] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:36.556 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:36.557 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:36.557 UTC [182] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:36.557 UTC [182] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:36.558 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:36.559 UTC [182] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:36.559 UTC [182] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:36.560 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:36.560 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:36.561 UTC [182] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:36.561 UTC [182] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:36.562 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:36.564 UTC [182] DEBUG:  building index "pg_toast_19564_index" on table "pg_toast_19564" serially
2025-04-19 08:41:36.567 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:36.567 UTC [182] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:36.567 UTC [182] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:36.569 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:36.570 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:36.571 UTC [182] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:36.571 UTC [182] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:36.571 UTC [182] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:36.572 UTC [182] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:36.572 UTC [182] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:36.573 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:36.576 UTC [182] DEBUG:  building index "pg_toast_19597_index" on table "pg_toast_19597" serially
2025-04-19 08:41:36.577 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:36.578 UTC [182] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:36.578 UTC [182] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:36.579 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:36.580 UTC [182] DEBUG:  building index "pg_toast_19608_index" on table "pg_toast_19608" serially
2025-04-19 08:41:36.581 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:36.582 UTC [182] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:36.582 UTC [182] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:36.585 UTC [182] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:36.588 UTC [182] DEBUG:  building index "pg_toast_19631_index" on table "pg_toast_19631" serially
2025-04-19 08:41:36.589 UTC [182] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:36.589 UTC [182] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:36.589 UTC [182] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:36.591 UTC [182] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:36.591 UTC [182] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:36.594 UTC [182] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:36.594 UTC [182] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:36.596 UTC [182] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:36.596 UTC [182] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:36.597 UTC [182] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:36.597 UTC [182] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:36.599 UTC [182] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:36.599 UTC [182] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:36.601 UTC [182] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:36.601 UTC [182] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:36.603 UTC [182] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:36.603 UTC [182] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:36.605 UTC [182] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:36.605 UTC [182] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:36.606 UTC [182] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:36.606 UTC [182] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:36.607 UTC [182] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:36.607 UTC [182] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:36.609 UTC [182] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:36.609 UTC [182] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:36.621 UTC [182] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:36.880 UTC [182] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$DVhCg8yZFQYsph6wIkWWE.rMKROX7KpfVTAufzHX4tXHJwrW1RvEi')
	                RETURNING id, username, email
	                
2025-04-19 08:41:36.882 UTC [182] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:36.882 UTC [182] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:49.824 UTC [182] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:41:50.118 UTC [182] DEBUG:  unexpected EOF on client connection
2025-04-19 08:41:51.941 UTC [197] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:51.945 UTC [197] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:51.952 UTC [197] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:51.952 UTC [197] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:51.958 UTC [197] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:51.961 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:51.963 UTC [197] DEBUG:  building index "pg_toast_19667_index" on table "pg_toast_19667" serially
2025-04-19 08:41:51.965 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:51.965 UTC [197] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:51.966 UTC [197] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:51.967 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:51.967 UTC [197] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:51.967 UTC [197] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:51.968 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:51.968 UTC [197] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:51.968 UTC [197] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:51.969 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:51.969 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:51.970 UTC [197] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:51.970 UTC [197] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:51.971 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:51.971 UTC [197] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:51.971 UTC [197] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:51.972 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:51.973 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:51.973 UTC [197] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:51.973 UTC [197] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:51.974 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:51.974 UTC [197] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:51.974 UTC [197] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:51.975 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:51.976 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:51.976 UTC [197] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:51.976 UTC [197] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:51.978 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:51.981 UTC [197] DEBUG:  building index "pg_toast_19728_index" on table "pg_toast_19728" serially
2025-04-19 08:41:51.983 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:51.983 UTC [197] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:51.983 UTC [197] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:51.985 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:51.987 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:51.987 UTC [197] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:51.987 UTC [197] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:51.988 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:51.988 UTC [197] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:51.989 UTC [197] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:51.992 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:51.994 UTC [197] DEBUG:  building index "pg_toast_19761_index" on table "pg_toast_19761" serially
2025-04-19 08:41:51.998 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:51.998 UTC [197] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:51.998 UTC [197] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:52.000 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:52.003 UTC [197] DEBUG:  building index "pg_toast_19772_index" on table "pg_toast_19772" serially
2025-04-19 08:41:52.005 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:52.005 UTC [197] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:52.005 UTC [197] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:52.008 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:52.009 UTC [197] DEBUG:  building index "pg_toast_19795_index" on table "pg_toast_19795" serially
2025-04-19 08:41:52.010 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:52.011 UTC [197] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:52.011 UTC [197] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:52.011 UTC [197] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:52.011 UTC [197] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:52.012 UTC [197] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:52.012 UTC [197] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:52.013 UTC [197] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:52.013 UTC [197] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:52.014 UTC [197] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:52.014 UTC [197] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:52.015 UTC [197] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:52.015 UTC [197] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:52.016 UTC [197] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:52.016 UTC [197] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:52.016 UTC [197] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:52.016 UTC [197] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:52.017 UTC [197] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:52.017 UTC [197] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:52.018 UTC [197] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:52.018 UTC [197] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:52.019 UTC [197] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:52.019 UTC [197] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:52.020 UTC [197] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:52.020 UTC [197] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:52.029 UTC [197] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:52.304 UTC [197] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$US2da9XbW.SDSZK9yNQwpuCA1ncrge7ckzmHULCeJAHtCo2pBVeg2')
	                RETURNING id, username, email
	                
2025-04-19 08:41:52.305 UTC [197] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:52.306 UTC [197] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:52.306 UTC [197] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:41:52.326 UTC [197] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:52.327 UTC [197] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:41:52.330 UTC [197] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:41:52.334 UTC [197] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:41:52.334 UTC [197] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:41:52.337 UTC [197] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:41:52.340 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:41:52.341 UTC [197] DEBUG:  building index "pg_toast_19831_index" on table "pg_toast_19831" serially
2025-04-19 08:41:52.342 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:41:52.342 UTC [197] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:41:52.342 UTC [197] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:41:52.343 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:41:52.343 UTC [197] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:41:52.343 UTC [197] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:41:52.344 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:41:52.344 UTC [197] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:41:52.344 UTC [197] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:41:52.345 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:41:52.345 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:41:52.346 UTC [197] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:41:52.346 UTC [197] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:41:52.346 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:41:52.347 UTC [197] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:41:52.347 UTC [197] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:41:52.347 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:41:52.348 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:41:52.349 UTC [197] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:41:52.349 UTC [197] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:41:52.349 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:41:52.349 UTC [197] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:41:52.349 UTC [197] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:41:52.351 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:41:52.351 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:41:52.352 UTC [197] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:41:52.352 UTC [197] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:41:52.353 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:41:52.354 UTC [197] DEBUG:  building index "pg_toast_19892_index" on table "pg_toast_19892" serially
2025-04-19 08:41:52.354 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:41:52.355 UTC [197] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:41:52.355 UTC [197] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:41:52.356 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:41:52.357 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:41:52.357 UTC [197] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:41:52.357 UTC [197] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:41:52.358 UTC [197] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:41:52.358 UTC [197] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:41:52.358 UTC [197] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:41:52.359 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:41:52.360 UTC [197] DEBUG:  building index "pg_toast_19925_index" on table "pg_toast_19925" serially
2025-04-19 08:41:52.361 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:41:52.361 UTC [197] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:41:52.361 UTC [197] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:41:52.362 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:41:52.363 UTC [197] DEBUG:  building index "pg_toast_19936_index" on table "pg_toast_19936" serially
2025-04-19 08:41:52.363 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:41:52.364 UTC [197] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:41:52.364 UTC [197] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:41:52.367 UTC [197] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:41:52.368 UTC [197] DEBUG:  building index "pg_toast_19959_index" on table "pg_toast_19959" serially
2025-04-19 08:41:52.369 UTC [197] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:41:52.370 UTC [197] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:41:52.370 UTC [197] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:41:52.371 UTC [197] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:41:52.371 UTC [197] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:41:52.372 UTC [197] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:41:52.372 UTC [197] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:41:52.373 UTC [197] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:41:52.373 UTC [197] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:41:52.373 UTC [197] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:41:52.373 UTC [197] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:41:52.374 UTC [197] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:41:52.374 UTC [197] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:41:52.375 UTC [197] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:41:52.375 UTC [197] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:41:52.376 UTC [197] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:41:52.376 UTC [197] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:41:52.376 UTC [197] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:41:52.376 UTC [197] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:41:52.377 UTC [197] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:41:52.377 UTC [197] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:41:52.378 UTC [197] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:41:52.378 UTC [197] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:41:52.380 UTC [197] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:41:52.380 UTC [197] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:41:52.394 UTC [197] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:41:52.656 UTC [197] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$hfHrKgbOZ2tO1e30LKRB5.4vuyh6xhx7FfXHS5RXLyc/Ien/2MmLO')
	                RETURNING id, username, email
	                
2025-04-19 08:41:52.657 UTC [197] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:41:52.657 UTC [197] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:41:52.787 UTC [197] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:55.281 UTC [197] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:56.135 UTC [197] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:56.564 UTC [197] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:41:56.800 UTC [197] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:42:01.215 UTC [198] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:42:01.272 UTC [197] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:42:01.477 UTC [198] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:42:05.841 UTC [197] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:42:06.305 UTC [197] DEBUG:  unexpected EOF on client connection
2025-04-19 08:42:08.687 UTC [206] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:42:08.694 UTC [206] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:42:08.701 UTC [206] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:42:08.701 UTC [206] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:42:08.706 UTC [206] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:42:08.714 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:42:08.721 UTC [206] DEBUG:  building index "pg_toast_19996_index" on table "pg_toast_19996" serially
2025-04-19 08:42:08.724 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:42:08.724 UTC [206] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:42:08.724 UTC [206] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:42:08.725 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:42:08.725 UTC [206] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:42:08.726 UTC [206] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:42:08.726 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:42:08.726 UTC [206] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:42:08.726 UTC [206] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:42:08.727 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:42:08.728 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:42:08.728 UTC [206] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:42:08.728 UTC [206] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:42:08.729 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:42:08.729 UTC [206] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:42:08.729 UTC [206] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:42:08.730 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:42:08.731 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:42:08.731 UTC [206] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:42:08.731 UTC [206] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:42:08.732 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:42:08.732 UTC [206] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:42:08.732 UTC [206] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:42:08.733 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:42:08.734 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:42:08.735 UTC [206] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:42:08.735 UTC [206] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:42:08.736 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:42:08.737 UTC [206] DEBUG:  building index "pg_toast_20057_index" on table "pg_toast_20057" serially
2025-04-19 08:42:08.738 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:42:08.738 UTC [206] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:42:08.738 UTC [206] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:42:08.739 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:42:08.740 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:42:08.741 UTC [206] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:42:08.741 UTC [206] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:42:08.742 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:42:08.742 UTC [206] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:42:08.742 UTC [206] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:42:08.743 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:42:08.744 UTC [206] DEBUG:  building index "pg_toast_20090_index" on table "pg_toast_20090" serially
2025-04-19 08:42:08.745 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:42:08.745 UTC [206] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:42:08.745 UTC [206] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:42:08.746 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:42:08.747 UTC [206] DEBUG:  building index "pg_toast_20101_index" on table "pg_toast_20101" serially
2025-04-19 08:42:08.748 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:42:08.748 UTC [206] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:42:08.748 UTC [206] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:42:08.751 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:42:08.753 UTC [206] DEBUG:  building index "pg_toast_20124_index" on table "pg_toast_20124" serially
2025-04-19 08:42:08.754 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:42:08.755 UTC [206] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:42:08.755 UTC [206] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:42:08.757 UTC [206] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:42:08.757 UTC [206] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:42:08.758 UTC [206] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:42:08.758 UTC [206] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:42:08.759 UTC [206] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:42:08.759 UTC [206] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:42:08.761 UTC [206] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:42:08.761 UTC [206] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:42:08.762 UTC [206] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:42:08.762 UTC [206] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:42:08.763 UTC [206] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:42:08.763 UTC [206] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:42:08.764 UTC [206] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:42:08.764 UTC [206] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:42:08.765 UTC [206] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:42:08.765 UTC [206] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:42:08.766 UTC [206] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:42:08.766 UTC [206] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:42:08.767 UTC [206] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:42:08.767 UTC [206] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:42:08.769 UTC [206] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:42:08.769 UTC [206] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:42:08.792 UTC [206] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:09.070 UTC [206] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$41URaXcJYRMxqPw0hwPbw.vatb.o/IKBdWEMdkky6DNwUvktu34Gm')
	                RETURNING id, username, email
	                
2025-04-19 08:42:09.071 UTC [206] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:42:09.071 UTC [206] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:42:09.072 UTC [206] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:42:09.084 UTC [206] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:09.085 UTC [206] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:42:09.088 UTC [206] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:42:09.092 UTC [206] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:42:09.092 UTC [206] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:42:09.095 UTC [206] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:42:09.098 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:42:09.099 UTC [206] DEBUG:  building index "pg_toast_20160_index" on table "pg_toast_20160" serially
2025-04-19 08:42:09.100 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:42:09.100 UTC [206] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:42:09.100 UTC [206] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:42:09.101 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:42:09.101 UTC [206] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:42:09.101 UTC [206] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:42:09.102 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:42:09.102 UTC [206] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:42:09.102 UTC [206] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:42:09.103 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:42:09.104 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:42:09.104 UTC [206] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:42:09.104 UTC [206] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:42:09.105 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:42:09.105 UTC [206] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:42:09.105 UTC [206] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:42:09.106 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:42:09.106 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:42:09.107 UTC [206] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:42:09.107 UTC [206] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:42:09.107 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:42:09.107 UTC [206] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:42:09.108 UTC [206] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:42:09.108 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:42:09.109 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:42:09.109 UTC [206] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:42:09.109 UTC [206] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:42:09.111 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:42:09.111 UTC [206] DEBUG:  building index "pg_toast_20221_index" on table "pg_toast_20221" serially
2025-04-19 08:42:09.112 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:42:09.112 UTC [206] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:42:09.112 UTC [206] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:42:09.114 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:42:09.114 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:42:09.115 UTC [206] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:42:09.115 UTC [206] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:42:09.115 UTC [206] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:42:09.116 UTC [206] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:42:09.116 UTC [206] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:42:09.118 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:42:09.120 UTC [206] DEBUG:  building index "pg_toast_20254_index" on table "pg_toast_20254" serially
2025-04-19 08:42:09.123 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:42:09.123 UTC [206] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:42:09.123 UTC [206] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:42:09.125 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:42:09.130 UTC [206] DEBUG:  building index "pg_toast_20265_index" on table "pg_toast_20265" serially
2025-04-19 08:42:09.131 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:42:09.131 UTC [206] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:42:09.131 UTC [206] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:42:09.133 UTC [206] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:42:09.134 UTC [206] DEBUG:  building index "pg_toast_20288_index" on table "pg_toast_20288" serially
2025-04-19 08:42:09.136 UTC [206] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:42:09.136 UTC [206] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:42:09.136 UTC [206] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:42:09.138 UTC [206] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:42:09.138 UTC [206] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:42:09.139 UTC [206] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:42:09.139 UTC [206] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:42:09.140 UTC [206] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:42:09.140 UTC [206] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:42:09.141 UTC [206] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:42:09.141 UTC [206] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:42:09.142 UTC [206] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:42:09.142 UTC [206] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:42:09.143 UTC [206] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:42:09.143 UTC [206] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:42:09.144 UTC [206] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:42:09.144 UTC [206] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:42:09.145 UTC [206] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:42:09.145 UTC [206] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:42:09.146 UTC [206] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:42:09.146 UTC [206] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:42:09.147 UTC [206] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:42:09.147 UTC [206] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:42:09.148 UTC [206] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:42:09.148 UTC [206] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:42:09.154 UTC [206] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:09.409 UTC [206] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$itWsI7a7aSEh7V1SP5ffZeWLdrBOo9qlZzUvVssxm4AQ9QJ4NIUmu')
	                RETURNING id, username, email
	                
2025-04-19 08:42:09.410 UTC [206] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:42:09.410 UTC [206] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:42:10.202 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.204 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:42:10.206 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:42:10.206 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.210 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 08:42:10.213 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:42:10.218 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:42:10.221 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.222 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:42:10.222 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:42:10.223 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.224 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 08:42:10.224 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:42:10.227 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:42:10.230 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.231 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:42:10.231 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:42:10.231 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.232 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 08:42:10.232 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:42:10.235 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:42:10.237 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.238 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:42:10.238 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:42:10.238 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.239 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 08:42:10.239 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:42:10.242 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:42:10.244 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.245 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:42:10.245 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:42:10.245 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.246 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 08:42:10.246 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:42:10.252 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:42:10.257 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.259 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:42:10.259 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:42:10.260 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.261 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 08:42:10.262 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:42:10.265 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:42:10.268 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.269 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:42:10.269 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:42:10.269 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.270 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 08:42:10.270 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:42:10.273 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:42:10.275 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.276 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:42:10.276 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:42:10.276 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.277 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 08:42:10.277 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:42:10.279 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:42:10.282 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.283 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:42:10.283 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:42:10.283 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.284 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 08:42:10.284 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:42:10.286 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:42:10.289 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.289 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:42:10.289 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:42:10.289 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.290 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 08:42:10.290 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:42:10.293 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:42:10.295 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.295 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:42:10.295 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:42:10.295 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.296 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 08:42:10.296 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:42:10.299 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:42:10.301 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.302 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:42:10.302 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:42:10.302 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.302 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 08:42:10.303 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:42:10.305 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:42:10.307 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.308 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:42:10.308 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:42:10.308 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.309 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 08:42:10.309 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:42:10.314 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:42:10.318 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.319 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:42:10.319 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:42:10.319 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.320 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 08:42:10.320 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:42:10.323 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:42:10.326 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.326 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:42:10.326 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:42:10.327 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.327 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 08:42:10.327 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:42:10.330 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:42:10.333 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.334 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:42:10.334 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:42:10.334 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.335 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 08:42:10.335 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:42:10.337 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:42:10.339 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.340 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:42:10.340 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:42:10.340 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.340 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 08:42:10.341 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:42:10.343 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:42:10.345 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.345 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:42:10.345 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:42:10.346 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.346 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 08:42:10.347 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:42:10.350 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:42:10.352 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.352 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:42:10.352 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:42:10.353 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.353 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 08:42:10.353 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:42:10.355 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:42:10.357 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.358 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:42:10.358 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:42:10.358 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.359 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 08:42:10.359 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:42:10.361 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:42:10.363 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.364 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:42:10.365 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:42:10.365 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.365 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 08:42:10.366 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:42:10.368 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:42:10.370 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.371 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:42:10.371 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:42:10.371 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.371 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 08:42:10.372 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:42:10.374 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:42:10.376 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.377 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:42:10.377 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:42:10.377 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.378 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 08:42:10.378 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:42:10.380 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:42:10.383 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.384 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:42:10.384 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:42:10.384 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.385 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 08:42:10.385 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:42:10.388 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:42:10.390 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.390 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:42:10.391 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:42:10.391 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.391 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 08:42:10.392 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:42:10.394 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:42:10.396 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.396 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:42:10.397 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:42:10.397 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.398 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 08:42:10.398 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:42:10.401 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:42:10.403 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.403 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:42:10.403 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:42:10.403 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.404 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 08:42:10.405 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:42:10.407 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:42:10.409 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.409 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:42:10.410 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:42:10.410 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.410 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 08:42:10.411 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:42:10.412 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:42:10.416 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.416 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:42:10.416 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:42:10.417 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.417 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 08:42:10.417 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:42:10.420 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:42:10.422 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.423 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:42:10.423 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:42:10.423 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.423 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 08:42:10.424 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:42:10.426 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:42:10.428 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.429 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:42:10.429 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:42:10.429 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.430 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 08:42:10.430 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:42:10.433 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:42:10.435 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.436 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:42:10.436 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:42:10.436 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.437 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 08:42:10.437 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:42:10.439 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:42:10.441 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.442 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:42:10.442 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:42:10.442 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.442 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 08:42:10.443 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:42:10.445 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:42:10.449 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.450 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:42:10.452 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:42:10.453 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.455 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 08:42:10.456 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:42:10.461 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:42:10.466 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.467 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:42:10.467 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:42:10.468 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.469 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 08:42:10.469 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:42:10.472 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:42:10.475 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.476 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:42:10.476 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:42:10.476 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.477 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 08:42:10.477 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:42:10.480 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:42:10.484 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.484 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:42:10.484 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:42:10.485 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.485 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 08:42:10.486 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:42:10.488 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:42:10.491 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.491 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:42:10.492 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:42:10.492 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.492 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 08:42:10.493 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:42:10.495 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:42:10.500 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.501 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:42:10.502 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:42:10.502 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.503 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 08:42:10.504 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:42:10.508 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:42:10.514 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.516 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:42:10.516 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:42:10.517 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.519 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 08:42:10.521 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:42:10.524 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:42:10.527 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:42:10.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:42:10.528 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.528 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 08:42:10.529 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:42:10.531 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:42:10.534 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.534 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:42:10.534 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:42:10.534 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.535 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 08:42:10.535 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:42:10.537 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:42:10.539 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.540 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:42:10.540 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:42:10.540 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.541 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 08:42:10.541 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:42:10.543 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:42:10.545 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.546 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:42:10.546 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:42:10.546 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.546 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 08:42:10.547 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:42:10.550 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:42:10.553 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.555 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:42:10.557 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:42:10.557 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.558 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 08:42:10.559 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:42:10.561 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:42:10.563 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.564 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:42:10.564 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:42:10.564 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.565 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 08:42:10.565 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:42:10.567 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:42:10.569 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.570 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:42:10.570 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:42:10.570 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.571 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 08:42:10.571 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:42:10.573 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:42:10.575 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.576 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:42:10.576 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:42:10.576 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.577 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 08:42:10.577 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:42:10.579 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:42:10.582 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.583 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:42:10.583 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:42:10.583 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.584 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 08:42:10.584 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:42:10.586 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:42:10.588 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.589 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:42:10.589 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:42:10.589 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.590 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 08:42:10.590 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:42:10.593 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:42:10.595 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.596 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:42:10.597 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:42:10.597 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.598 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 08:42:10.598 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:42:10.600 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:42:10.602 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.603 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:42:10.603 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:42:10.603 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.604 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 08:42:10.604 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:42:10.606 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:42:10.609 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.610 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:42:10.610 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:42:10.610 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.612 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 08:42:10.614 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:42:10.618 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:42:10.621 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.621 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:42:10.622 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:42:10.622 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.623 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 08:42:10.623 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:42:10.626 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:42:10.629 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.630 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:42:10.631 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:42:10.631 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.632 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 08:42:10.632 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:42:10.635 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:42:10.638 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.639 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:42:10.639 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:42:10.639 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.639 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 08:42:10.640 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:42:10.642 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:42:10.645 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.645 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:42:10.645 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:42:10.646 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.646 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 08:42:10.647 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:42:10.649 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:42:10.651 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.651 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:42:10.652 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:42:10.652 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.652 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 08:42:10.653 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:42:10.655 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:42:10.657 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.657 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:42:10.658 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:42:10.658 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.658 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 08:42:10.659 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:42:10.661 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:42:10.663 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.663 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:42:10.663 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:42:10.663 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.664 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 08:42:10.664 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:42:10.667 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:42:10.669 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.670 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:42:10.670 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:42:10.670 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.670 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 08:42:10.671 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:42:10.673 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:42:10.675 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.676 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:42:10.676 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:42:10.676 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.677 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 08:42:10.677 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:42:10.679 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:42:10.682 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.682 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:42:10.683 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:42:10.683 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.683 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 08:42:10.684 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:42:10.686 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:42:10.688 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.688 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:42:10.688 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:42:10.689 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.689 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 08:42:10.690 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:42:10.694 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:42:10.697 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.698 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:42:10.699 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:42:10.699 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.699 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 08:42:10.700 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:42:10.702 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:42:10.705 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.705 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:42:10.706 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:42:10.706 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.707 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 08:42:10.707 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:42:10.710 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:42:10.712 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.713 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:42:10.713 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:42:10.713 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.714 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 08:42:10.714 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:42:10.717 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:42:10.719 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.720 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:42:10.720 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:42:10.720 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.721 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 08:42:10.721 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:42:10.724 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:42:10.726 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.726 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:42:10.727 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:42:10.727 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.727 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 08:42:10.728 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:42:10.730 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:42:10.733 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.733 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:42:10.734 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:42:10.734 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.734 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 08:42:10.735 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:42:10.737 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:42:10.739 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.739 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:42:10.740 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:42:10.740 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.740 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 08:42:10.741 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:42:10.743 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:42:10.745 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.745 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:42:10.746 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:42:10.746 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.746 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 08:42:10.747 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:42:10.749 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:42:10.752 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.752 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:42:10.752 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:42:10.752 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.753 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 08:42:10.753 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:42:10.756 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:42:10.758 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.759 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:42:10.759 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:42:10.759 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.760 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 08:42:10.760 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:42:10.763 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:42:10.767 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.768 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:42:10.769 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:42:10.769 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.770 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 08:42:10.771 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:42:10.775 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:42:10.779 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.780 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:42:10.782 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:42:10.782 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.783 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 08:42:10.783 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:42:10.786 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:42:10.789 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.789 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:42:10.790 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:42:10.790 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.791 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 08:42:10.791 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:42:10.793 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:42:10.795 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.795 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:42:10.796 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:42:10.796 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.797 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 08:42:10.797 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:42:10.799 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:42:10.801 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.802 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:42:10.802 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:42:10.802 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.803 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 08:42:10.803 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:42:10.805 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:42:10.807 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.807 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:42:10.807 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:42:10.808 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.808 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 08:42:10.808 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:42:10.810 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:42:10.812 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.813 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:42:10.813 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:42:10.813 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.814 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 08:42:10.814 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:42:10.817 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:42:10.820 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.821 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:42:10.822 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:42:10.822 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.822 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 08:42:10.823 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:42:10.825 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:42:10.827 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.828 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:42:10.828 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:42:10.828 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.829 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 08:42:10.829 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:42:10.831 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:42:10.834 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.834 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:42:10.834 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:42:10.835 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.835 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 08:42:10.835 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:42:10.837 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:42:10.839 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.840 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:42:10.840 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:42:10.840 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.841 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 08:42:10.841 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:42:10.843 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:42:10.845 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.846 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:42:10.846 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:42:10.847 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.847 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 08:42:10.848 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:42:10.850 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:42:10.853 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.853 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:42:10.853 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:42:10.853 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.854 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 08:42:10.854 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:42:10.856 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:42:10.859 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.859 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:42:10.859 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:42:10.859 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.860 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 08:42:10.860 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:42:10.862 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:42:10.865 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.865 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:42:10.866 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:42:10.866 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.866 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 08:42:10.867 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:42:10.869 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:42:10.870 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.871 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:42:10.871 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:42:10.871 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.872 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 08:42:10.873 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:42:10.876 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:42:10.878 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.878 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:42:10.879 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:42:10.879 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.879 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 08:42:10.880 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:42:10.882 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:42:10.885 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.885 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:42:10.885 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:42:10.885 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.886 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 08:42:10.886 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:42:10.889 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:42:10.891 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.891 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:42:10.891 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:42:10.891 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.892 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 08:42:10.892 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:42:10.895 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:42:10.899 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.900 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:42:10.901 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:42:10.906 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.941 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 08:42:10.957 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:42:10.970 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:42:10.978 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.979 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:42:10.981 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:42:10.982 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:10.983 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 08:42:10.984 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:42:10.989 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:42:10.994 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:10.996 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:42:11.000 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:42:11.001 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.003 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 08:42:11.006 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:42:11.012 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:42:11.073 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.077 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:42:11.079 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:42:11.079 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.083 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 08:42:11.086 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:42:11.094 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:42:11.099 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.100 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:42:11.101 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:42:11.101 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.103 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 08:42:11.103 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:42:11.107 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:42:11.111 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.112 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:42:11.112 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:42:11.112 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.114 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 08:42:11.115 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:42:11.119 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:42:11.122 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.123 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:42:11.124 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:42:11.125 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.126 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 08:42:11.127 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:42:11.135 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:42:11.139 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.141 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:42:11.143 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:42:11.145 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.150 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 08:42:11.157 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:42:11.164 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:42:11.179 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.182 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:42:11.184 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:42:11.189 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.193 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 08:42:11.196 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:42:11.204 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:42:11.214 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.215 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:42:11.217 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:42:11.217 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.218 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 08:42:11.220 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:42:11.229 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:42:11.234 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.235 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:42:11.237 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:42:11.239 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.242 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 08:42:11.248 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:42:11.257 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:42:11.295 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.300 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:42:11.304 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:42:11.305 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.309 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 08:42:11.312 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:42:11.319 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:42:11.324 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.325 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:42:11.325 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:42:11.326 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.327 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 08:42:11.328 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:42:11.331 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:42:11.335 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.336 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:42:11.336 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:42:11.337 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.337 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 08:42:11.338 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:42:11.344 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:42:11.350 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.350 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:42:11.351 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:42:11.351 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.352 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 08:42:11.352 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:42:11.355 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:42:11.359 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.359 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:42:11.359 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:42:11.360 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.360 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 08:42:11.361 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:42:11.363 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:42:11.366 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.367 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:42:11.367 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:42:11.367 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.368 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 08:42:11.368 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:42:11.371 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:42:11.373 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.374 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:42:11.374 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:42:11.374 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.375 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 08:42:11.375 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:42:11.378 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:42:11.380 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.381 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:42:11.381 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:42:11.382 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.382 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 08:42:11.383 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:42:11.386 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:42:11.390 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.391 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:42:11.391 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:42:11.392 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.393 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 08:42:11.393 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:42:11.396 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:42:11.400 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.401 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:42:11.401 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:42:11.402 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.403 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 08:42:11.404 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:42:11.410 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:42:11.416 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.416 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:42:11.417 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:42:11.418 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.418 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 08:42:11.419 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:42:11.422 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:42:11.426 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.426 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:42:11.426 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:42:11.427 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.428 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 08:42:11.428 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:42:11.432 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:42:11.436 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.437 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:42:11.437 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:42:11.437 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.438 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 08:42:11.438 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:42:11.441 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:42:11.445 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.447 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:42:11.450 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:42:11.451 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.452 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 08:42:11.453 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:42:11.457 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:42:11.460 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.461 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:42:11.461 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:42:11.462 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.463 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 08:42:11.463 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:42:11.472 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:42:11.476 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.477 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:42:11.477 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:42:11.478 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.480 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 08:42:11.482 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:42:11.488 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:42:11.493 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.494 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:42:11.495 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:42:11.496 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.497 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 08:42:11.499 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:42:11.502 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:42:11.506 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.507 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:42:11.507 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:42:11.507 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.508 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 08:42:11.508 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:42:11.511 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:42:11.513 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.514 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:42:11.514 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:42:11.514 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.515 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 08:42:11.516 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:42:11.518 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:42:11.520 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.520 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:42:11.521 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:42:11.521 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.522 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 08:42:11.523 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:42:11.525 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:42:11.527 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:42:11.528 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:42:11.528 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.528 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 08:42:11.529 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:42:11.532 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:42:11.538 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.543 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:42:11.544 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:42:11.545 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.547 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 08:42:11.550 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:42:11.555 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:42:11.560 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.561 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:42:11.562 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:42:11.562 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.563 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 08:42:11.566 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:42:11.573 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:42:11.577 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.577 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:42:11.578 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:42:11.578 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.579 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 08:42:11.580 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:42:11.583 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:42:11.586 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.587 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:42:11.587 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:42:11.588 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.589 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 08:42:11.590 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:42:11.594 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:42:11.597 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.599 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:42:11.599 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:42:11.600 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.601 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 08:42:11.603 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:42:11.609 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:42:11.614 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.616 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:42:11.616 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:42:11.617 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.618 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 08:42:11.619 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:42:11.622 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:42:11.626 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.626 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:42:11.627 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:42:11.627 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.628 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 08:42:11.628 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:42:11.631 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:42:11.634 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.635 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:42:11.635 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:42:11.636 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.637 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 08:42:11.637 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:42:11.641 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:42:11.644 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.644 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:42:11.647 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:42:11.650 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.650 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 08:42:11.651 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:42:11.654 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:42:11.659 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.660 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:42:11.661 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:42:11.662 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.663 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 08:42:11.665 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:42:11.669 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:42:11.672 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.673 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:42:11.673 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:42:11.674 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.675 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 08:42:11.676 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:42:11.678 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:42:11.682 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.683 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:42:11.684 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:42:11.684 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.686 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 08:42:11.687 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:42:11.691 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:42:11.694 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.695 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:42:11.695 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:42:11.696 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.697 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 08:42:11.698 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:42:11.702 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:42:11.704 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.705 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:42:11.705 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:42:11.705 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.706 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 08:42:11.707 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:42:11.709 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:42:11.711 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.712 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:42:11.712 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:42:11.712 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.713 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 08:42:11.713 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:42:11.716 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:42:11.718 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.719 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:42:11.719 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:42:11.719 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.720 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 08:42:11.720 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:42:11.722 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:42:11.725 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.725 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:42:11.725 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:42:11.726 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.726 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 08:42:11.727 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:42:11.729 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:42:11.733 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.733 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:42:11.733 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:42:11.734 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.734 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 08:42:11.735 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:42:11.737 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:42:11.740 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.740 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:42:11.741 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:42:11.741 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.742 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 08:42:11.742 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:42:11.744 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:42:11.747 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.747 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:42:11.748 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:42:11.748 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.748 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 08:42:11.749 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:42:11.751 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:42:11.753 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.753 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:42:11.754 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:42:11.754 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.754 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 08:42:11.755 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:42:11.760 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:42:11.764 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.764 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:42:11.765 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:42:11.765 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.766 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 08:42:11.766 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:42:11.769 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:42:11.772 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.772 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:42:11.773 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:42:11.773 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.774 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 08:42:11.775 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:42:11.777 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:42:11.779 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.780 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:42:11.780 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:42:11.780 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.781 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 08:42:11.782 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:42:11.784 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:42:11.786 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.787 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:42:11.787 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:42:11.787 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.788 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 08:42:11.788 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:42:11.791 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:42:11.793 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.793 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:42:11.794 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:42:11.795 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.796 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 08:42:11.797 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:42:11.800 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:42:11.802 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.802 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:42:11.803 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:42:11.803 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.804 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 08:42:11.804 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:42:11.807 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:42:11.809 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.810 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:42:11.810 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:42:11.811 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.811 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 08:42:11.812 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:42:11.815 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:42:11.817 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.818 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:42:11.818 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:42:11.819 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.819 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 08:42:11.820 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:42:11.822 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:42:11.825 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.825 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:42:11.825 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:42:11.826 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.828 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 08:42:11.829 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:42:11.834 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:42:11.836 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.837 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:42:11.837 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:42:11.838 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.838 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 08:42:11.839 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:42:11.843 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:42:11.846 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.847 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:42:11.847 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:42:11.848 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.849 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 08:42:11.849 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:42:11.853 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:42:11.855 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.856 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:42:11.856 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:42:11.857 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.858 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 08:42:11.858 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:42:11.861 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:42:11.863 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.864 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:42:11.865 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:42:11.865 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.866 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 08:42:11.867 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:42:11.870 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:42:11.872 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.873 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:42:11.873 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:42:11.873 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.874 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 08:42:11.875 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:42:11.877 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:42:11.880 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.881 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:42:11.881 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:42:11.882 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.882 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 08:42:11.883 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:42:11.886 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:42:11.888 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.888 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:42:11.889 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:42:11.889 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.890 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 08:42:11.890 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:42:11.893 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:42:11.895 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.896 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:42:11.896 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:42:11.897 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.898 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 08:42:11.898 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:42:11.902 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:42:11.904 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.905 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:42:11.905 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:42:11.905 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.906 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 08:42:11.906 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:42:11.909 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:42:11.911 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.912 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:42:11.912 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:42:11.913 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.914 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 08:42:11.914 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:42:11.917 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:42:11.920 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.921 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:42:11.921 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:42:11.921 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.922 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 08:42:11.922 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:42:11.925 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:42:11.928 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.942 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:42:11.945 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:42:11.946 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.950 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 08:42:11.951 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:42:11.954 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:42:11.957 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.958 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:42:11.958 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:42:11.958 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.959 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 08:42:11.959 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:42:11.962 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:42:11.965 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.965 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:42:11.966 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:42:11.966 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.967 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 08:42:11.968 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:42:11.970 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:42:11.973 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.973 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:42:11.974 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:42:11.974 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.974 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 08:42:11.975 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:42:11.978 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:42:11.980 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.980 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:42:11.981 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:42:11.982 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.983 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 08:42:11.983 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:42:11.986 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:42:11.989 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.989 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:42:11.989 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:42:11.990 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.990 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 08:42:11.991 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:42:11.993 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:42:11.996 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:11.996 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:42:11.997 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:42:11.998 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:11.999 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 08:42:11.999 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:42:12.002 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:42:12.005 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.005 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:42:12.005 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:42:12.006 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.007 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 08:42:12.007 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:42:12.009 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:42:12.012 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.012 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:42:12.013 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:42:12.013 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.015 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 08:42:12.015 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:42:12.020 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:42:12.023 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.023 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:42:12.024 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:42:12.024 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.025 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 08:42:12.026 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:42:12.028 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:42:12.031 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.032 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:42:12.032 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:42:12.033 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.034 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 08:42:12.034 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:42:12.037 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:42:12.040 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.040 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:42:12.040 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:42:12.041 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.041 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 08:42:12.042 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:42:12.044 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:42:12.047 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.048 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:42:12.048 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:42:12.048 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.049 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 08:42:12.049 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:42:12.053 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:42:12.055 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.055 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:42:12.055 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:42:12.056 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.057 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 08:42:12.057 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:42:12.059 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:42:12.062 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.062 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:42:12.063 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:42:12.063 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.064 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 08:42:12.065 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:42:12.068 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:42:12.071 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.072 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:42:12.072 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:42:12.073 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.073 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 08:42:12.074 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:42:12.076 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:42:12.079 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.079 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:42:12.079 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:42:12.080 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.081 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 08:42:12.081 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:42:12.085 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:42:12.088 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.088 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:42:12.088 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:42:12.089 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.089 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 08:42:12.090 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:42:12.093 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:42:12.095 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.096 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:42:12.097 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:42:12.097 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.099 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 08:42:12.099 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:42:12.104 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:42:12.108 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.108 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:42:12.109 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:42:12.109 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.110 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 08:42:12.110 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:42:12.113 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:42:12.116 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.117 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:42:12.117 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:42:12.118 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.119 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 08:42:12.119 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:42:12.122 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:42:12.125 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.125 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:42:12.126 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:42:12.126 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.127 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 08:42:12.127 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:42:12.129 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:42:12.133 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.133 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:42:12.134 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:42:12.134 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.135 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 08:42:12.135 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:42:12.138 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:42:12.141 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.142 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:42:12.142 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:42:12.142 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.143 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 08:42:12.144 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:42:12.146 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:42:12.150 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.150 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:42:12.151 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:42:12.151 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.152 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 08:42:12.152 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:42:12.154 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:42:12.156 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.157 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:42:12.157 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:42:12.157 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.158 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 08:42:12.159 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:42:12.161 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:42:12.163 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.163 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:42:12.163 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:42:12.164 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.165 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 08:42:12.166 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:42:12.169 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:42:12.171 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.172 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:42:12.172 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:42:12.172 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.173 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 08:42:12.173 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:42:12.175 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:42:12.178 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.178 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:42:12.178 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:42:12.179 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.179 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 08:42:12.180 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:42:12.182 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:42:12.185 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.185 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:42:12.186 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:42:12.186 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.187 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 08:42:12.187 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:42:12.190 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:42:12.192 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.193 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:42:12.193 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:42:12.193 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.194 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 08:42:12.195 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:42:12.197 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:42:12.202 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.203 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:42:12.203 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:42:12.204 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.204 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 08:42:12.205 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:42:12.208 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:42:12.210 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.211 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:42:12.211 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:42:12.211 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.212 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 08:42:12.212 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:42:12.216 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:42:12.219 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.219 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:42:12.220 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:42:12.220 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.221 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 08:42:12.222 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:42:12.225 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:42:12.230 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.231 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:42:12.231 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:42:12.231 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.232 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 08:42:12.232 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:42:12.235 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:42:12.238 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.239 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:42:12.239 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:42:12.239 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.240 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 08:42:12.241 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:42:12.243 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:42:12.246 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.246 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:42:12.247 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:42:12.248 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.248 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 08:42:12.249 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:42:12.252 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:42:12.256 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.257 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:42:12.257 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:42:12.257 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.258 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 08:42:12.259 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:42:12.261 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:42:12.264 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.264 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:42:12.265 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:42:12.265 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.265 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 08:42:12.266 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:42:12.268 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:42:12.271 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.271 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:42:12.271 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:42:12.272 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.272 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 08:42:12.273 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:42:12.275 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:42:12.278 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.278 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:42:12.278 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:42:12.279 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.279 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 08:42:12.280 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:42:12.283 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:42:12.286 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.286 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:42:12.287 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:42:12.287 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.288 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 08:42:12.288 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:42:12.291 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:42:12.293 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.294 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:42:12.294 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:42:12.294 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.295 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 08:42:12.295 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:42:12.298 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:42:12.301 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.302 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:42:12.302 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:42:12.302 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.303 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 08:42:12.303 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:42:12.306 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:42:12.310 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.310 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:42:12.311 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:42:12.311 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.312 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 08:42:12.312 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:42:12.315 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:42:12.317 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.318 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:42:12.318 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:42:12.319 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.319 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 08:42:12.320 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:42:12.323 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:42:12.326 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.327 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:42:12.327 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:42:12.327 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.328 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 08:42:12.328 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:42:12.331 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:42:12.334 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.334 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:42:12.334 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:42:12.335 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.336 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 08:42:12.336 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:42:12.339 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:42:12.342 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.342 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:42:12.342 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:42:12.343 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.343 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 08:42:12.344 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:42:12.346 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:42:12.348 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.349 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:42:12.349 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:42:12.350 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.351 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 08:42:12.351 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:42:12.354 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:42:12.356 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.357 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:42:12.357 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:42:12.358 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1069, '2022-11-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.359 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (217,1,7,false),(217,2,28,false),(217,3,62,false),(217,4,63,false),(217,5,64,false),(217,6,10,true)
	        
2025-04-19 08:42:12.359 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:42:12.362 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:42:12.364 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.364 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:42:12.365 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:42:12.365 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1070, '2022-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.365 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (218,1,1,false),(218,2,6,false),(218,3,40,false),(218,4,51,false),(218,5,67,false),(218,6,2,true)
	        
2025-04-19 08:42:12.366 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:42:12.369 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:42:12.371 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.372 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:42:12.372 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:42:12.372 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1071, '2023-11-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.373 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (219,1,1,false),(219,2,2,false),(219,3,31,false),(219,4,39,false),(219,5,66,false),(219,6,25,true)
	        
2025-04-19 08:42:12.374 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:42:12.376 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:42:12.379 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.379 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:42:12.380 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:42:12.380 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1072, '2022-11-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.381 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (220,1,15,false),(220,2,30,false),(220,3,47,false),(220,4,50,false),(220,5,51,false),(220,6,3,true)
	        
2025-04-19 08:42:12.381 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:42:12.385 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:42:12.387 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.388 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:42:12.388 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:42:12.388 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1073, '2022-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.389 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (221,1,29,false),(221,2,30,false),(221,3,32,false),(221,4,48,false),(221,5,50,false),(221,6,20,true)
	        
2025-04-19 08:42:12.389 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:42:12.392 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:42:12.394 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.395 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:42:12.396 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:42:12.396 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1074, '2022-11-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.397 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (222,1,4,false),(222,2,19,false),(222,3,24,false),(222,4,47,false),(222,5,66,false),(222,6,10,true)
	        
2025-04-19 08:42:12.398 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:42:12.400 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:42:12.403 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.404 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:42:12.404 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:42:12.404 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1075, '2022-12-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.405 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (223,1,6,false),(223,2,13,false),(223,3,33,false),(223,4,36,false),(223,5,37,false),(223,6,7,true)
	        
2025-04-19 08:42:12.406 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:42:12.408 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:42:12.410 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.410 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:42:12.411 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:42:12.411 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1076, '2022-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.412 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (224,1,35,false),(224,2,45,false),(224,3,47,false),(224,4,54,false),(224,5,55,false),(224,6,14,true)
	        
2025-04-19 08:42:12.412 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:42:12.414 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:42:12.416 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.417 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:42:12.417 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:42:12.417 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1077, '2022-12-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.418 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (225,1,6,false),(225,2,28,false),(225,3,44,false),(225,4,59,false),(225,5,61,false),(225,6,21,true)
	        
2025-04-19 08:42:12.419 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:42:12.421 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:42:12.423 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.423 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:42:12.424 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:42:12.424 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1078, '2022-12-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.424 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (226,1,9,false),(226,2,23,false),(226,3,47,false),(226,4,59,false),(226,5,61,false),(226,6,21,true)
	        
2025-04-19 08:42:12.425 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:42:12.427 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:42:12.429 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.429 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:42:12.430 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:42:12.430 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1079, '2022-12-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.430 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (227,1,16,false),(227,2,31,false),(227,3,50,false),(227,4,55,false),(227,5,61,false),(227,6,9,true)
	        
2025-04-19 08:42:12.431 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:42:12.433 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:42:12.435 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.436 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:42:12.436 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:42:12.437 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1080, '2022-12-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.438 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (228,1,36,false),(228,2,51,false),(228,3,59,false),(228,4,66,false),(228,5,68,false),(228,6,25,true)
	        
2025-04-19 08:42:12.438 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:42:12.441 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:42:12.443 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.443 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:42:12.444 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:42:12.444 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1081, '2022-12-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.445 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (229,1,33,false),(229,2,56,false),(229,3,64,false),(229,4,66,false),(229,5,68,false),(229,6,12,true)
	        
2025-04-19 08:42:12.446 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:42:12.448 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:42:12.450 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.451 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:42:12.451 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:42:12.451 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1082, '2022-12-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.452 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (230,1,7,false),(230,2,37,false),(230,3,55,false),(230,4,65,false),(230,5,67,false),(230,6,12,true)
	        
2025-04-19 08:42:12.452 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:42:12.455 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:42:12.457 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.457 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:42:12.458 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:42:12.458 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1083, '2022-12-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.459 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (231,1,12,false),(231,2,15,false),(231,3,24,false),(231,4,34,false),(231,5,59,false),(231,6,14,true)
	        
2025-04-19 08:42:12.459 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:42:12.462 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:42:12.465 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.466 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:42:12.466 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:42:12.466 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1084, '2022-12-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.467 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (232,1,17,false),(232,2,37,false),(232,3,46,false),(232,4,54,false),(232,5,67,false),(232,6,8,true)
	        
2025-04-19 08:42:12.467 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:42:12.469 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:42:12.472 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.473 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:42:12.474 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:42:12.475 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1085, '2022-12-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.476 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (233,1,17,false),(233,2,41,false),(233,3,47,false),(233,4,60,false),(233,5,61,false),(233,6,17,true)
	        
2025-04-19 08:42:12.477 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:42:12.481 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:42:12.484 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.485 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:42:12.485 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:42:12.485 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1086, '2022-12-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.486 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (234,1,26,false),(234,2,32,false),(234,3,38,false),(234,4,45,false),(234,5,56,false),(234,6,1,true)
	        
2025-04-19 08:42:12.487 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:42:12.489 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:42:12.491 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.491 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:42:12.492 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:42:12.492 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1087, '2022-12-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.492 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (235,1,18,false),(235,2,37,false),(235,3,44,false),(235,4,50,false),(235,5,64,false),(235,6,11,true)
	        
2025-04-19 08:42:12.493 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:42:12.495 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:42:12.497 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.497 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:42:12.498 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:42:12.498 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1088, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.499 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (236,1,7,false),(236,2,9,false),(236,3,12,false),(236,4,31,false),(236,5,62,false),(236,6,22,true)
	        
2025-04-19 08:42:12.499 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:42:12.501 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:42:12.503 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.504 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:42:12.504 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:42:12.504 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1089, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.505 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (237,1,12,false),(237,2,32,false),(237,3,56,false),(237,4,67,false),(237,5,68,false),(237,6,26,true)
	        
2025-04-19 08:42:12.506 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:42:12.509 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:42:12.512 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.512 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:42:12.513 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:42:12.513 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1090, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.514 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (238,1,35,false),(238,2,36,false),(238,3,44,false),(238,4,45,false),(238,5,67,false),(238,6,14,true)
	        
2025-04-19 08:42:12.515 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:42:12.517 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:42:12.520 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.520 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:42:12.521 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:42:12.521 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1091, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.522 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (239,1,18,false),(239,2,43,false),(239,3,48,false),(239,4,60,false),(239,5,69,false),(239,6,14,true)
	        
2025-04-19 08:42:12.522 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:42:12.524 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:42:12.527 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:42:12.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:42:12.528 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1092, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.529 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (240,1,4,false),(240,2,8,false),(240,3,46,false),(240,4,47,false),(240,5,48,false),(240,6,5,true)
	        
2025-04-19 08:42:12.529 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:42:12.533 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:42:12.536 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.536 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:42:12.537 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:42:12.537 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1093, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.538 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (241,1,24,false),(241,2,26,false),(241,3,39,false),(241,4,47,false),(241,5,57,false),(241,6,23,true)
	        
2025-04-19 08:42:12.538 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:42:12.541 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:42:12.543 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.544 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:42:12.544 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:42:12.544 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1094, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.545 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (242,1,4,false),(242,2,14,false),(242,3,33,false),(242,4,39,false),(242,5,61,false),(242,6,3,true)
	        
2025-04-19 08:42:12.545 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:42:12.547 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:42:12.549 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.550 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:42:12.550 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:42:12.550 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1095, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.551 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (243,1,6,false),(243,2,15,false),(243,3,22,false),(243,4,42,false),(243,5,47,false),(243,6,26,true)
	        
2025-04-19 08:42:12.551 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:42:12.553 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:42:12.556 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.556 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:42:12.556 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:42:12.557 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1096, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.557 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (244,1,5,false),(244,2,14,false),(244,3,19,false),(244,4,46,false),(244,5,64,false),(244,6,22,true)
	        
2025-04-19 08:42:12.558 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:42:12.560 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:42:12.562 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.562 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:42:12.563 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:42:12.563 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1097, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.563 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (245,1,12,false),(245,2,31,false),(245,3,47,false),(245,4,58,false),(245,5,60,false),(245,6,23,true)
	        
2025-04-19 08:42:12.564 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:42:12.566 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:42:12.568 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.568 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:42:12.568 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:42:12.569 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1098, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.569 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (246,1,9,false),(246,2,17,false),(246,3,20,false),(246,4,38,false),(246,5,40,false),(246,6,18,true)
	        
2025-04-19 08:42:12.570 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:42:12.572 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:42:12.575 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.576 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:42:12.576 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:42:12.577 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1099, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.578 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (247,1,2,false),(247,2,18,false),(247,3,23,false),(247,4,27,false),(247,5,47,false),(247,6,15,true)
	        
2025-04-19 08:42:12.578 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:42:12.581 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:42:12.584 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.585 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:42:12.585 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:42:12.585 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1100, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.586 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (248,1,1,false),(248,2,4,false),(248,3,12,false),(248,4,36,false),(248,5,49,false),(248,6,5,true)
	        
2025-04-19 08:42:12.586 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:42:12.589 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:42:12.591 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.592 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:42:12.593 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:42:12.593 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1101, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.594 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (249,1,31,false),(249,2,43,false),(249,3,58,false),(249,4,59,false),(249,5,66,false),(249,6,9,true)
	        
2025-04-19 08:42:12.595 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:42:12.598 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:42:12.600 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.600 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:42:12.601 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:42:12.601 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1102, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.601 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (250,1,2,false),(250,2,8,false),(250,3,15,false),(250,4,19,false),(250,5,58,false),(250,6,10,true)
	        
2025-04-19 08:42:12.602 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:42:12.604 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:42:12.606 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.607 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:42:12.608 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:42:12.609 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1103, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.614 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (251,1,5,false),(251,2,11,false),(251,3,22,false),(251,4,23,false),(251,5,69,false),(251,6,7,true)
	        
2025-04-19 08:42:12.617 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:42:12.621 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:42:12.626 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.627 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:42:12.629 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:42:12.629 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1104, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.630 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (252,1,52,false),(252,2,58,false),(252,3,59,false),(252,4,64,false),(252,5,66,false),(252,6,9,true)
	        
2025-04-19 08:42:12.630 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:42:12.633 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:42:12.636 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.637 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:42:12.637 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:42:12.637 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1105, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.638 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (253,1,10,false),(253,2,23,false),(253,3,30,false),(253,4,54,false),(253,5,65,false),(253,6,11,true)
	        
2025-04-19 08:42:12.639 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:42:12.642 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:42:12.645 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.646 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:42:12.646 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:42:12.646 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1106, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.647 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (254,1,17,false),(254,2,26,false),(254,3,37,false),(254,4,61,false),(254,5,65,false),(254,6,2,true)
	        
2025-04-19 08:42:12.648 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:42:12.652 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:42:12.655 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.656 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:42:12.656 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:42:12.656 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1107, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.657 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (255,1,31,false),(255,2,32,false),(255,3,54,false),(255,4,60,false),(255,5,63,false),(255,6,12,true)
	        
2025-04-19 08:42:12.658 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:42:12.662 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:42:12.665 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.666 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:42:12.666 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:42:12.666 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1108, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.667 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (256,1,8,false),(256,2,21,false),(256,3,31,false),(256,4,32,false),(256,5,37,false),(256,6,23,true)
	        
2025-04-19 08:42:12.667 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:42:12.670 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:42:12.673 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.673 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:42:12.674 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:42:12.675 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1109, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.676 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (257,1,3,false),(257,2,17,false),(257,3,26,false),(257,4,38,false),(257,5,54,false),(257,6,15,true)
	        
2025-04-19 08:42:12.676 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:42:12.679 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:42:12.681 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.682 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:42:12.682 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:42:12.683 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1110, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.683 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (258,1,11,false),(258,2,18,false),(258,3,39,false),(258,4,44,false),(258,5,65,false),(258,6,7,true)
	        
2025-04-19 08:42:12.684 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:42:12.688 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:42:12.709 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.711 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:42:12.711 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:42:12.712 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1111, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.713 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (259,1,11,false),(259,2,24,false),(259,3,58,false),(259,4,66,false),(259,5,67,false),(259,6,26,true)
	        
2025-04-19 08:42:12.714 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:42:12.716 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:42:12.719 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.719 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:42:12.719 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:42:12.720 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1112, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.720 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (260,1,16,false),(260,2,28,false),(260,3,49,false),(260,4,51,false),(260,5,55,false),(260,6,23,true)
	        
2025-04-19 08:42:12.721 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:42:12.723 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:42:12.726 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.726 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:42:12.727 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:42:12.727 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1113, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.727 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (261,1,2,false),(261,2,9,false),(261,3,28,false),(261,4,36,false),(261,5,53,false),(261,6,4,true)
	        
2025-04-19 08:42:12.728 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:42:12.730 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:42:12.732 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.732 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:42:12.733 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:42:12.733 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1114, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.734 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (262,1,10,false),(262,2,16,false),(262,3,18,false),(262,4,40,false),(262,5,66,false),(262,6,16,true)
	        
2025-04-19 08:42:12.734 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:42:12.736 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:42:12.738 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.738 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:42:12.739 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:42:12.739 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1115, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.740 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (263,1,2,false),(263,2,13,false),(263,3,29,false),(263,4,58,false),(263,5,69,false),(263,6,4,true)
	        
2025-04-19 08:42:12.740 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:42:12.743 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:42:12.745 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.745 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:42:12.745 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:42:12.746 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1116, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.746 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (264,1,26,false),(264,2,27,false),(264,3,43,false),(264,4,61,false),(264,5,69,false),(264,6,4,true)
	        
2025-04-19 08:42:12.747 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:42:12.750 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:42:12.752 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.752 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:42:12.753 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:42:12.753 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1117, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.753 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (265,1,11,false),(265,2,20,false),(265,3,33,false),(265,4,43,false),(265,5,58,false),(265,6,24,true)
	        
2025-04-19 08:42:12.754 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:42:12.756 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:42:12.758 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.758 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:42:12.759 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:42:12.759 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1118, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.759 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (266,1,3,false),(266,2,10,false),(266,3,24,false),(266,4,46,false),(266,5,63,false),(266,6,4,true)
	        
2025-04-19 08:42:12.760 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:42:12.762 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:42:12.764 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.764 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:42:12.765 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:42:12.765 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1119, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.766 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (267,1,16,false),(267,2,18,false),(267,3,33,false),(267,4,37,false),(267,5,50,false),(267,6,8,true)
	        
2025-04-19 08:42:12.766 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:42:12.768 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:42:12.770 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.770 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:42:12.771 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:42:12.771 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1120, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.772 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (268,1,14,false),(268,2,29,false),(268,3,30,false),(268,4,54,false),(268,5,69,false),(268,6,11,true)
	        
2025-04-19 08:42:12.772 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:42:12.774 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:42:12.776 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.777 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:42:12.777 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:42:12.778 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1121, '2023-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.778 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (269,1,1,false),(269,2,27,false),(269,3,32,false),(269,4,47,false),(269,5,67,false),(269,6,14,true)
	        
2025-04-19 08:42:12.779 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:42:12.782 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:42:12.785 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.786 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:42:12.787 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:42:12.787 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1122, '2023-03-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.788 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (270,1,27,false),(270,2,28,false),(270,3,37,false),(270,4,50,false),(270,5,57,false),(270,6,5,true)
	        
2025-04-19 08:42:12.789 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:42:12.792 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:42:12.795 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.796 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:42:12.796 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:42:12.797 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1123, '2023-03-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.798 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (271,1,15,false),(271,2,17,false),(271,3,18,false),(271,4,47,false),(271,5,57,false),(271,6,19,true)
	        
2025-04-19 08:42:12.798 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:42:12.803 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:42:12.805 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.806 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:42:12.806 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:42:12.806 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1124, '2023-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.807 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (272,1,19,false),(272,2,26,false),(272,3,36,false),(272,4,43,false),(272,5,58,false),(272,6,14,true)
	        
2025-04-19 08:42:12.808 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:42:12.810 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:42:12.812 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.813 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:42:12.813 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:42:12.813 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1125, '2023-03-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.814 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (273,1,4,false),(273,2,9,false),(273,3,24,false),(273,4,46,false),(273,5,66,false),(273,6,7,true)
	        
2025-04-19 08:42:12.814 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:42:12.818 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:42:12.820 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.820 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:42:12.820 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:42:12.821 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1126, '2023-04-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.822 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (274,1,11,false),(274,2,19,false),(274,3,21,false),(274,4,29,false),(274,5,52,false),(274,6,17,true)
	        
2025-04-19 08:42:12.822 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:42:12.824 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:42:12.827 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.827 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:42:12.827 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:42:12.828 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1127, '2023-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.828 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (275,1,16,false),(275,2,30,false),(275,3,31,false),(275,4,54,false),(275,5,68,false),(275,6,1,true)
	        
2025-04-19 08:42:12.829 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:42:12.831 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:42:12.833 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.833 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:42:12.834 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:42:12.834 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1128, '2023-04-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.834 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (276,1,3,false),(276,2,5,false),(276,3,9,false),(276,4,42,false),(276,5,52,false),(276,6,11,true)
	        
2025-04-19 08:42:12.835 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:42:12.837 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:42:12.839 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.839 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:42:12.840 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:42:12.840 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1129, '2023-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.841 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (277,1,11,false),(277,2,22,false),(277,3,24,false),(277,4,51,false),(277,5,60,false),(277,6,18,true)
	        
2025-04-19 08:42:12.841 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:42:12.843 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:42:12.846 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.846 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:42:12.847 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:42:12.847 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1130, '2023-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.848 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (278,1,9,false),(278,2,10,false),(278,3,36,false),(278,4,46,false),(278,5,52,false),(278,6,14,true)
	        
2025-04-19 08:42:12.848 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:42:12.850 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:42:12.853 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.853 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:42:12.854 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:42:12.854 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1131, '2023-04-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.855 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (279,1,9,false),(279,2,36,false),(279,3,41,false),(279,4,44,false),(279,5,59,false),(279,6,4,true)
	        
2025-04-19 08:42:12.855 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:42:12.858 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:42:12.860 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.861 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:42:12.861 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:42:12.861 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1132, '2023-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.862 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (280,1,1,false),(280,2,33,false),(280,3,34,false),(280,4,56,false),(280,5,59,false),(280,6,18,true)
	        
2025-04-19 08:42:12.862 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:42:12.864 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:42:12.866 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.867 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:42:12.867 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:42:12.867 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1133, '2023-04-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.868 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (281,1,23,false),(281,2,25,false),(281,3,35,false),(281,4,63,false),(281,5,64,false),(281,6,25,true)
	        
2025-04-19 08:42:12.868 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:42:12.870 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:42:12.873 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.873 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:42:12.874 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:42:12.874 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1134, '2023-04-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.874 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (282,1,4,false),(282,2,11,false),(282,3,21,false),(282,4,38,false),(282,5,64,false),(282,6,11,true)
	        
2025-04-19 08:42:12.875 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:42:12.877 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:42:12.879 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.880 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:42:12.880 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:42:12.880 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1135, '2023-04-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.881 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (283,1,17,false),(283,2,36,false),(283,3,47,false),(283,4,63,false),(283,5,68,false),(283,6,25,true)
	        
2025-04-19 08:42:12.881 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:42:12.883 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:42:12.886 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.886 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:42:12.887 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:42:12.887 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1136, '2023-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.888 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (284,1,19,false),(284,2,21,false),(284,3,55,false),(284,4,66,false),(284,5,68,false),(284,6,3,true)
	        
2025-04-19 08:42:12.888 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:42:12.891 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:42:12.893 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.894 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:42:12.894 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:42:12.894 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1137, '2023-04-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.895 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (285,1,2,false),(285,2,15,false),(285,3,30,false),(285,4,35,false),(285,5,49,false),(285,6,6,true)
	        
2025-04-19 08:42:12.895 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:42:12.897 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:42:12.899 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.900 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:42:12.900 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:42:12.901 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1138, '2023-04-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.901 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (286,1,16,false),(286,2,53,false),(286,3,54,false),(286,4,57,false),(286,5,65,false),(286,6,8,true)
	        
2025-04-19 08:42:12.902 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:42:12.904 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:42:12.907 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.907 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:42:12.907 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:42:12.908 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1139, '2023-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.909 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (287,1,3,false),(287,2,38,false),(287,3,55,false),(287,4,61,false),(287,5,66,false),(287,6,1,true)
	        
2025-04-19 08:42:12.909 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:42:12.914 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:42:12.917 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.917 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:42:12.918 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:42:12.919 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1140, '2023-05-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.919 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (288,1,21,false),(288,2,26,false),(288,3,30,false),(288,4,45,false),(288,5,47,false),(288,6,23,true)
	        
2025-04-19 08:42:12.920 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:42:12.923 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:42:12.926 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.927 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:42:12.927 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:42:12.927 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1141, '2023-05-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.928 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (289,1,31,false),(289,2,39,false),(289,3,47,false),(289,4,51,false),(289,5,53,false),(289,6,6,true)
	        
2025-04-19 08:42:12.928 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:42:12.931 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:42:12.933 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.933 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:42:12.934 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:42:12.934 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1142, '2023-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.934 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (290,1,15,false),(290,2,20,false),(290,3,33,false),(290,4,36,false),(290,5,43,false),(290,6,12,true)
	        
2025-04-19 08:42:12.935 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:42:12.937 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:42:12.939 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.940 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:42:12.940 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:42:12.940 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1143, '2023-05-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.941 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (291,1,21,false),(291,2,24,false),(291,3,33,false),(291,4,55,false),(291,5,69,false),(291,6,3,true)
	        
2025-04-19 08:42:12.941 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:42:12.943 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:42:12.945 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.946 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:42:12.946 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:42:12.946 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1144, '2023-05-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.947 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (292,1,3,false),(292,2,15,false),(292,3,20,false),(292,4,23,false),(292,5,46,false),(292,6,11,true)
	        
2025-04-19 08:42:12.948 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:42:12.950 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:42:12.952 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.952 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:42:12.952 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:42:12.952 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1145, '2023-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.953 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (293,1,1,false),(293,2,26,false),(293,3,28,false),(293,4,55,false),(293,5,58,false),(293,6,25,true)
	        
2025-04-19 08:42:12.954 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:42:12.956 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:42:12.959 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.959 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:42:12.960 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:42:12.960 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1146, '2023-05-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.961 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (294,1,18,false),(294,2,34,false),(294,3,37,false),(294,4,45,false),(294,5,51,false),(294,6,14,true)
	        
2025-04-19 08:42:12.961 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:42:12.963 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:42:12.966 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.966 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:42:12.967 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:42:12.967 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1147, '2023-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.967 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (295,1,17,false),(295,2,23,false),(295,3,32,false),(295,4,38,false),(295,5,63,false),(295,6,23,true)
	        
2025-04-19 08:42:12.968 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:42:12.970 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:42:12.973 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.973 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:42:12.974 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:42:12.974 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1148, '2023-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.975 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (296,1,9,false),(296,2,38,false),(296,3,48,false),(296,4,52,false),(296,5,68,false),(296,6,25,true)
	        
2025-04-19 08:42:12.975 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:42:12.978 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:42:12.981 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.981 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:42:12.981 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:42:12.982 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1149, '2023-05-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.982 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (297,1,12,false),(297,2,21,false),(297,3,44,false),(297,4,50,false),(297,5,58,false),(297,6,26,true)
	        
2025-04-19 08:42:12.983 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:42:12.985 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:42:12.988 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.988 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:42:12.989 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:42:12.990 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1150, '2023-05-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:12.991 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (298,1,24,false),(298,2,38,false),(298,3,39,false),(298,4,48,false),(298,5,56,false),(298,6,4,true)
	        
2025-04-19 08:42:12.991 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:42:12.995 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:42:12.999 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:12.999 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:42:13.000 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:42:13.000 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1151, '2023-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.001 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (299,1,21,false),(299,2,33,false),(299,3,35,false),(299,4,62,false),(299,5,64,false),(299,6,24,true)
	        
2025-04-19 08:42:13.002 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:42:13.005 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:42:13.007 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.008 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:42:13.008 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:42:13.008 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1152, '2023-05-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.009 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (300,1,2,false),(300,2,4,false),(300,3,54,false),(300,4,61,false),(300,5,62,false),(300,6,14,true)
	        
2025-04-19 08:42:13.010 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:42:13.013 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:42:13.016 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.016 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:42:13.017 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:42:13.018 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1153, '2023-06-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.019 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (301,1,15,false),(301,2,45,false),(301,3,64,false),(301,4,67,false),(301,5,68,false),(301,6,18,true)
	        
2025-04-19 08:42:13.019 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:42:13.022 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:42:13.026 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.026 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:42:13.026 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:42:13.027 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1154, '2023-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.027 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (302,1,2,false),(302,2,31,false),(302,3,45,false),(302,4,46,false),(302,5,49,false),(302,6,20,true)
	        
2025-04-19 08:42:13.028 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:42:13.030 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:42:13.032 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.033 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:42:13.033 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:42:13.033 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1155, '2023-06-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.034 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (303,1,16,false),(303,2,21,false),(303,3,29,false),(303,4,53,false),(303,5,66,false),(303,6,2,true)
	        
2025-04-19 08:42:13.034 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:42:13.036 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:42:13.038 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.039 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:42:13.039 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:42:13.039 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1156, '2023-06-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.040 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (304,1,21,false),(304,2,32,false),(304,3,42,false),(304,4,46,false),(304,5,50,false),(304,6,4,true)
	        
2025-04-19 08:42:13.040 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:42:13.043 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:42:13.045 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.046 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:42:13.046 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:42:13.047 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1157, '2023-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.047 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (305,1,2,false),(305,2,3,false),(305,3,16,false),(305,4,23,false),(305,5,68,false),(305,6,7,true)
	        
2025-04-19 08:42:13.048 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:42:13.050 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:42:13.052 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.052 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:42:13.053 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:42:13.053 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1158, '2023-06-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.054 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (306,1,3,false),(306,2,20,false),(306,3,36,false),(306,4,42,false),(306,5,64,false),(306,6,4,true)
	        
2025-04-19 08:42:13.055 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:42:13.057 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:42:13.059 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.060 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:42:13.060 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:42:13.060 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1159, '2023-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.061 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (307,1,2,false),(307,2,12,false),(307,3,45,false),(307,4,61,false),(307,5,64,false),(307,6,26,true)
	        
2025-04-19 08:42:13.061 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:42:13.064 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:42:13.066 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.066 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:42:13.067 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:42:13.067 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1160, '2023-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.068 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (308,1,36,false),(308,2,39,false),(308,3,52,false),(308,4,57,false),(308,5,69,false),(308,6,1,true)
	        
2025-04-19 08:42:13.068 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:42:13.071 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:42:13.073 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.074 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:42:13.074 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:42:13.074 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1161, '2023-06-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.075 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (309,1,5,false),(309,2,11,false),(309,3,33,false),(309,4,35,false),(309,5,63,false),(309,6,14,true)
	        
2025-04-19 08:42:13.076 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:42:13.078 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:42:13.080 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.081 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:42:13.081 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:42:13.081 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1162, '2023-06-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.082 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (310,1,2,false),(310,2,38,false),(310,3,44,false),(310,4,50,false),(310,5,62,false),(310,6,19,true)
	        
2025-04-19 08:42:13.082 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:42:13.084 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:42:13.087 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.088 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:42:13.088 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:42:13.088 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1163, '2023-06-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.089 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (311,1,6,false),(311,2,28,false),(311,3,39,false),(311,4,43,false),(311,5,54,false),(311,6,12,true)
	        
2025-04-19 08:42:13.089 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:42:13.092 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:42:13.094 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.094 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:42:13.095 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:42:13.095 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1164, '2023-06-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.095 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (312,1,19,false),(312,2,25,false),(312,3,34,false),(312,4,57,false),(312,5,68,false),(312,6,4,true)
	        
2025-04-19 08:42:13.096 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:42:13.099 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:42:13.102 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.102 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:42:13.103 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:42:13.103 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1165, '2023-07-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.103 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (313,1,4,false),(313,2,17,false),(313,3,35,false),(313,4,49,false),(313,5,61,false),(313,6,8,true)
	        
2025-04-19 08:42:13.104 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:42:13.109 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:42:13.111 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.112 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:42:13.112 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:42:13.113 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1166, '2023-07-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.113 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (314,1,15,false),(314,2,26,false),(314,3,31,false),(314,4,38,false),(314,5,61,false),(314,6,3,true)
	        
2025-04-19 08:42:13.114 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:42:13.116 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:42:13.118 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.119 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:42:13.119 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:42:13.119 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1167, '2023-07-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.120 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (315,1,17,false),(315,2,24,false),(315,3,48,false),(315,4,62,false),(315,5,68,false),(315,6,23,true)
	        
2025-04-19 08:42:13.121 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:42:13.123 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:42:13.126 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.127 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:42:13.127 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:42:13.127 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1168, '2023-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.128 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (316,1,7,false),(316,2,23,false),(316,3,24,false),(316,4,32,false),(316,5,43,false),(316,6,18,true)
	        
2025-04-19 08:42:13.128 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:42:13.131 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:42:13.134 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.134 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:42:13.134 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:42:13.135 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1169, '2023-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.135 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (317,1,2,false),(317,2,24,false),(317,3,34,false),(317,4,53,false),(317,5,58,false),(317,6,13,true)
	        
2025-04-19 08:42:13.136 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:42:13.139 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:42:13.141 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.142 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:42:13.142 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:42:13.142 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1170, '2023-07-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.143 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (318,1,23,false),(318,2,35,false),(318,3,45,false),(318,4,66,false),(318,5,67,false),(318,6,20,true)
	        
2025-04-19 08:42:13.143 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:42:13.146 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:42:13.148 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.148 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:42:13.149 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:42:13.149 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1171, '2023-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.150 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (319,1,2,false),(319,2,9,false),(319,3,43,false),(319,4,55,false),(319,5,57,false),(319,6,18,true)
	        
2025-04-19 08:42:13.150 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:42:13.152 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:42:13.154 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.155 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:42:13.155 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:42:13.156 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1172, '2023-07-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.156 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (320,1,5,false),(320,2,8,false),(320,3,9,false),(320,4,17,false),(320,5,41,false),(320,6,21,true)
	        
2025-04-19 08:42:13.156 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:42:13.160 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:42:13.162 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.162 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:42:13.162 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:42:13.163 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1173, '2023-07-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.163 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (321,1,7,false),(321,2,10,false),(321,3,11,false),(321,4,13,false),(321,5,24,false),(321,6,24,true)
	        
2025-04-19 08:42:13.164 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:42:13.166 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:42:13.169 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.169 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:42:13.170 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:42:13.170 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1174, '2023-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.171 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (322,1,25,false),(322,2,27,false),(322,3,36,false),(322,4,37,false),(322,5,63,false),(322,6,7,true)
	        
2025-04-19 08:42:13.171 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:42:13.174 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:42:13.177 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.177 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:42:13.177 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:42:13.178 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1175, '2023-07-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.178 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (323,1,3,false),(323,2,4,false),(323,3,12,false),(323,4,28,false),(323,5,49,false),(323,6,25,true)
	        
2025-04-19 08:42:13.179 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:42:13.182 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:42:13.185 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.185 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:42:13.186 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:42:13.186 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1176, '2023-07-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.187 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (324,1,3,false),(324,2,16,false),(324,3,40,false),(324,4,48,false),(324,5,60,false),(324,6,14,true)
	        
2025-04-19 08:42:13.187 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:42:13.190 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:42:13.193 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.193 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:42:13.193 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:42:13.193 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1177, '2023-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.194 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (325,1,10,false),(325,2,25,false),(325,3,27,false),(325,4,34,false),(325,5,38,false),(325,6,2,true)
	        
2025-04-19 08:42:13.194 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:42:13.197 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:42:13.199 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.199 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:42:13.200 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:42:13.200 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1178, '2023-08-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.201 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (326,1,2,false),(326,2,11,false),(326,3,48,false),(326,4,58,false),(326,5,65,false),(326,6,13,true)
	        
2025-04-19 08:42:13.201 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:42:13.204 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:42:13.206 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.206 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:42:13.207 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:42:13.207 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1179, '2023-08-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.208 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (327,1,23,false),(327,2,24,false),(327,3,33,false),(327,4,51,false),(327,5,64,false),(327,6,5,true)
	        
2025-04-19 08:42:13.208 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:42:13.211 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:42:13.213 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.213 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:42:13.214 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:42:13.214 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1180, '2023-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.215 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (328,1,18,false),(328,2,42,false),(328,3,44,false),(328,4,62,false),(328,5,65,false),(328,6,23,true)
	        
2025-04-19 08:42:13.215 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:42:13.218 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:42:13.222 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.222 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:42:13.223 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:42:13.223 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1181, '2023-08-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.224 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (329,1,6,false),(329,2,13,false),(329,3,20,false),(329,4,35,false),(329,5,54,false),(329,6,22,true)
	        
2025-04-19 08:42:13.224 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:42:13.227 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:42:13.231 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.231 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:42:13.232 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:42:13.232 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1182, '2023-08-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.233 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (330,1,10,false),(330,2,15,false),(330,3,21,false),(330,4,67,false),(330,5,69,false),(330,6,3,true)
	        
2025-04-19 08:42:13.234 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:42:13.237 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:42:13.240 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.241 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:42:13.241 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:42:13.241 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1183, '2023-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.242 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (331,1,19,false),(331,2,21,false),(331,3,37,false),(331,4,50,false),(331,5,65,false),(331,6,26,true)
	        
2025-04-19 08:42:13.243 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:42:13.245 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:42:13.248 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.248 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:42:13.249 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:42:13.250 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1184, '2023-08-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.250 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (332,1,32,false),(332,2,34,false),(332,3,37,false),(332,4,39,false),(332,5,47,false),(332,6,3,true)
	        
2025-04-19 08:42:13.251 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:42:13.254 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:42:13.256 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.257 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:42:13.257 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:42:13.257 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1186, '2023-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.258 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (333,1,1,false),(333,2,25,false),(333,3,27,false),(333,4,38,false),(333,5,62,false),(333,6,13,true)
	        
2025-04-19 08:42:13.259 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:42:13.261 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:42:13.264 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.265 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:42:13.266 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:42:13.266 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1187, '2023-08-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.267 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (334,1,3,false),(334,2,4,false),(334,3,12,false),(334,4,22,false),(334,5,28,false),(334,6,16,true)
	        
2025-04-19 08:42:13.267 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:42:13.271 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:42:13.275 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.275 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:42:13.276 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:42:13.276 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1188, '2023-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.277 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (335,1,25,false),(335,2,30,false),(335,3,32,false),(335,4,33,false),(335,5,55,false),(335,6,20,true)
	        
2025-04-19 08:42:13.278 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:42:13.280 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:42:13.283 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.284 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:42:13.285 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:42:13.285 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1189, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.286 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (336,1,20,false),(336,2,22,false),(336,3,26,false),(336,4,28,false),(336,5,63,false),(336,6,5,true)
	        
2025-04-19 08:42:13.286 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:42:13.289 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:42:13.291 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.292 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:42:13.292 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:42:13.293 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1190, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.293 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (337,1,4,false),(337,2,6,false),(337,3,25,false),(337,4,55,false),(337,5,68,false),(337,6,26,true)
	        
2025-04-19 08:42:13.294 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:42:13.296 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:42:13.298 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.298 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:42:13.299 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:42:13.299 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1191, '2023-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.300 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (338,1,4,false),(338,2,13,false),(338,3,35,false),(338,4,61,false),(338,5,69,false),(338,6,4,true)
	        
2025-04-19 08:42:13.300 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:42:13.302 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:42:13.304 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.304 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:42:13.305 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:42:13.305 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1192, '2023-09-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.306 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (339,1,25,false),(339,2,38,false),(339,3,42,false),(339,4,66,false),(339,5,67,false),(339,6,19,true)
	        
2025-04-19 08:42:13.306 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:42:13.310 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:42:13.312 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.313 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:42:13.313 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:42:13.314 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1193, '2023-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.314 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (340,1,1,false),(340,2,26,false),(340,3,32,false),(340,4,46,false),(340,5,51,false),(340,6,13,true)
	        
2025-04-19 08:42:13.315 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:42:13.318 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:42:13.321 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.321 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:42:13.321 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:42:13.322 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1194, '2023-09-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.322 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (341,1,9,false),(341,2,14,false),(341,3,20,false),(341,4,23,false),(341,5,63,false),(341,6,1,true)
	        
2025-04-19 08:42:13.323 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:42:13.325 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:42:13.328 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.328 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:42:13.328 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:42:13.328 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1195, '2023-09-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.329 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (342,1,11,false),(342,2,19,false),(342,3,29,false),(342,4,63,false),(342,5,68,false),(342,6,25,true)
	        
2025-04-19 08:42:13.329 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:42:13.331 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:42:13.334 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.334 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:42:13.334 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:42:13.335 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1196, '2023-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.335 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (343,1,9,false),(343,2,25,false),(343,3,27,false),(343,4,53,false),(343,5,66,false),(343,6,5,true)
	        
2025-04-19 08:42:13.336 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:42:13.339 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:42:13.341 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.342 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:42:13.342 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:42:13.343 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1197, '2023-09-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.343 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (344,1,22,false),(344,2,30,false),(344,3,37,false),(344,4,44,false),(344,5,45,false),(344,6,18,true)
	        
2025-04-19 08:42:13.344 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:42:13.346 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:42:13.348 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.348 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:42:13.349 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:42:13.349 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1198, '2023-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.350 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (345,1,8,false),(345,2,11,false),(345,3,19,false),(345,4,24,false),(345,5,46,false),(345,6,5,true)
	        
2025-04-19 08:42:13.350 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:42:13.353 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:42:13.355 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.356 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:42:13.356 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:42:13.356 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1199, '2023-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.357 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (346,1,2,false),(346,2,21,false),(346,3,26,false),(346,4,40,false),(346,5,42,false),(346,6,9,true)
	        
2025-04-19 08:42:13.357 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:42:13.360 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:42:13.362 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.362 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:42:13.363 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:42:13.363 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1200, '2023-09-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.364 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (347,1,16,false),(347,2,27,false),(347,3,59,false),(347,4,62,false),(347,5,63,false),(347,6,23,true)
	        
2025-04-19 08:42:13.364 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:42:13.371 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:42:13.374 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.374 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:42:13.375 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:42:13.375 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1201, '2023-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.376 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (348,1,1,false),(348,2,12,false),(348,3,20,false),(348,4,33,false),(348,5,66,false),(348,6,21,true)
	        
2025-04-19 08:42:13.376 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:42:13.379 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:42:13.381 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.382 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:42:13.382 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:42:13.383 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1202, '2023-09-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.384 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (349,1,10,false),(349,2,12,false),(349,3,22,false),(349,4,36,false),(349,5,50,false),(349,6,4,true)
	        
2025-04-19 08:42:13.384 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:42:13.387 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:42:13.389 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.390 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:42:13.390 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:42:13.390 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1203, '2023-09-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.391 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (350,1,1,false),(350,2,7,false),(350,3,46,false),(350,4,47,false),(350,5,63,false),(350,6,7,true)
	        
2025-04-19 08:42:13.391 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:42:13.394 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:42:13.396 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.396 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:42:13.397 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:42:13.397 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1204, '2023-09-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.397 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (351,1,19,false),(351,2,30,false),(351,3,37,false),(351,4,44,false),(351,5,46,false),(351,6,22,true)
	        
2025-04-19 08:42:13.398 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:42:13.400 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:42:13.402 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.403 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:42:13.403 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:42:13.403 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1205, '2023-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.404 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (352,1,12,false),(352,2,26,false),(352,3,27,false),(352,4,43,false),(352,5,47,false),(352,6,5,true)
	        
2025-04-19 08:42:13.404 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:42:13.406 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:42:13.408 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.409 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:42:13.409 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:42:13.409 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1206, '2023-10-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.410 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (353,1,9,false),(353,2,35,false),(353,3,54,false),(353,4,63,false),(353,5,64,false),(353,6,1,true)
	        
2025-04-19 08:42:13.410 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:42:13.413 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:42:13.416 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.416 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:42:13.416 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:42:13.417 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1207, '2023-10-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.417 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (354,1,47,false),(354,2,54,false),(354,3,57,false),(354,4,60,false),(354,5,65,false),(354,6,19,true)
	        
2025-04-19 08:42:13.418 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:42:13.421 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:42:13.423 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.424 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:42:13.424 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:42:13.424 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1208, '2023-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.425 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (355,1,16,false),(355,2,34,false),(355,3,46,false),(355,4,55,false),(355,5,67,false),(355,6,14,true)
	        
2025-04-19 08:42:13.425 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:42:13.427 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:42:13.430 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.430 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:42:13.430 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:42:13.430 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1209, '2023-10-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.431 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (356,1,22,false),(356,2,24,false),(356,3,40,false),(356,4,52,false),(356,5,64,false),(356,6,10,true)
	        
2025-04-19 08:42:13.432 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:42:13.435 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:42:13.439 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.440 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:42:13.440 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:42:13.440 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1210, '2023-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.441 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (357,1,14,false),(357,2,16,false),(357,3,42,false),(357,4,48,false),(357,5,64,false),(357,6,14,true)
	        
2025-04-19 08:42:13.442 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:42:13.444 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:42:13.447 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.447 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:42:13.447 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:42:13.448 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1211, '2023-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.448 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (358,1,2,false),(358,2,27,false),(358,3,31,false),(358,4,44,false),(358,5,64,false),(358,6,18,true)
	        
2025-04-19 08:42:13.449 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:42:13.451 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:42:13.454 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.454 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:42:13.454 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:42:13.455 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1212, '2023-10-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.455 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (359,1,1,false),(359,2,4,false),(359,3,13,false),(359,4,35,false),(359,5,58,false),(359,6,24,true)
	        
2025-04-19 08:42:13.456 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:42:13.458 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:42:13.460 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.461 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:42:13.461 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:42:13.461 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1213, '2023-10-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.462 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (360,1,6,false),(360,2,15,false),(360,3,24,false),(360,4,67,false),(360,5,68,false),(360,6,11,true)
	        
2025-04-19 08:42:13.463 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:42:13.465 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:42:13.468 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.468 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:42:13.469 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:42:13.469 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1214, '2023-10-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.470 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (361,1,18,false),(361,2,21,false),(361,3,25,false),(361,4,46,false),(361,5,64,false),(361,6,21,true)
	        
2025-04-19 08:42:13.470 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:42:13.472 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:42:13.474 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.475 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:42:13.475 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:42:13.475 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1215, '2023-10-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.476 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (362,1,24,false),(362,2,27,false),(362,3,41,false),(362,4,53,false),(362,5,68,false),(362,6,2,true)
	        
2025-04-19 08:42:13.476 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:42:13.478 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:42:13.481 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.481 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:42:13.481 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:42:13.481 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1216, '2023-10-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.482 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (363,1,14,false),(363,2,24,false),(363,3,50,false),(363,4,59,false),(363,5,64,false),(363,6,2,true)
	        
2025-04-19 08:42:13.483 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:42:13.485 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:42:13.487 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.487 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:42:13.488 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:42:13.488 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1217, '2023-10-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.488 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (364,1,19,false),(364,2,22,false),(364,3,34,false),(364,4,66,false),(364,5,69,false),(364,6,5,true)
	        
2025-04-19 08:42:13.489 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:42:13.492 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:42:13.494 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.495 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:42:13.495 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:42:13.495 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1218, '2023-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.496 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (365,1,22,false),(365,2,26,false),(365,3,39,false),(365,4,47,false),(365,5,63,false),(365,6,12,true)
	        
2025-04-19 08:42:13.496 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:42:13.498 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:42:13.501 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.501 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:42:13.501 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:42:13.502 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1219, '2023-11-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.502 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (366,1,1,false),(366,2,28,false),(366,3,30,false),(366,4,34,false),(366,5,52,false),(366,6,6,true)
	        
2025-04-19 08:42:13.503 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:42:13.505 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:42:13.508 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.508 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:42:13.508 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:42:13.509 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1220, '2023-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.509 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (367,1,12,false),(367,2,25,false),(367,3,40,false),(367,4,59,false),(367,5,61,false),(367,6,26,true)
	        
2025-04-19 08:42:13.510 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:42:13.513 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:42:13.518 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.518 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:42:13.519 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:42:13.519 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1221, '2023-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.520 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (368,1,14,false),(368,2,21,false),(368,3,33,false),(368,4,39,false),(368,5,62,false),(368,6,20,true)
	        
2025-04-19 08:42:13.521 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:42:13.524 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:42:13.527 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:42:13.527 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:42:13.527 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1222, '2023-11-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.528 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (369,1,1,false),(369,2,12,false),(369,3,14,false),(369,4,24,false),(369,5,57,false),(369,6,7,true)
	        
2025-04-19 08:42:13.528 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:42:13.531 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:42:13.533 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.534 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:42:13.534 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:42:13.534 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1223, '2023-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.535 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (370,1,24,false),(370,2,33,false),(370,3,35,false),(370,4,37,false),(370,5,42,false),(370,6,21,true)
	        
2025-04-19 08:42:13.535 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:42:13.537 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:42:13.540 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.540 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:42:13.540 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:42:13.541 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1224, '2023-11-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.541 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (371,1,3,false),(371,2,4,false),(371,3,51,false),(371,4,53,false),(371,5,60,false),(371,6,6,true)
	        
2025-04-19 08:42:13.542 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:42:13.544 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:42:13.546 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.546 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:42:13.546 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:42:13.546 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1225, '2023-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.547 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (372,1,34,false),(372,2,50,false),(372,3,51,false),(372,4,61,false),(372,5,67,false),(372,6,20,true)
	        
2025-04-19 08:42:13.547 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:42:13.550 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:42:13.553 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.553 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:42:13.553 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:42:13.554 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1226, '2023-11-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.555 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (373,1,19,false),(373,2,26,false),(373,3,30,false),(373,4,39,false),(373,5,63,false),(373,6,13,true)
	        
2025-04-19 08:42:13.556 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:42:13.560 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:42:13.563 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.563 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:42:13.563 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:42:13.564 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1227, '2023-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.564 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (374,1,20,false),(374,2,24,false),(374,3,33,false),(374,4,39,false),(374,5,42,false),(374,6,21,true)
	        
2025-04-19 08:42:13.564 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:42:13.567 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:42:13.570 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.570 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:42:13.570 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:42:13.571 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1228, '2023-11-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.571 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (375,1,27,false),(375,2,33,false),(375,3,63,false),(375,4,66,false),(375,5,68,false),(375,6,9,true)
	        
2025-04-19 08:42:13.572 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:42:13.574 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:42:13.576 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.576 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:42:13.577 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:42:13.577 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1229, '2023-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.578 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (376,1,2,false),(376,2,21,false),(376,3,38,false),(376,4,61,false),(376,5,66,false),(376,6,12,true)
	        
2025-04-19 08:42:13.578 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:42:13.582 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:42:13.584 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.584 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:42:13.584 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:42:13.585 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1230, '2023-11-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.585 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (377,1,6,false),(377,2,47,false),(377,3,50,false),(377,4,61,false),(377,5,68,false),(377,6,4,true)
	        
2025-04-19 08:42:13.586 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:42:13.588 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:42:13.591 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.592 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:42:13.592 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:42:13.592 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1231, '2023-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.593 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (378,1,28,false),(378,2,35,false),(378,3,41,false),(378,4,47,false),(378,5,60,false),(378,6,3,true)
	        
2025-04-19 08:42:13.594 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:42:13.596 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:42:13.598 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.599 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:42:13.599 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:42:13.599 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1232, '2023-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.600 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (379,1,18,false),(379,2,19,false),(379,3,27,false),(379,4,28,false),(379,5,45,false),(379,6,9,true)
	        
2025-04-19 08:42:13.601 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:42:13.603 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:42:13.605 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.605 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:42:13.606 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:42:13.606 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1233, '2023-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.607 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (380,1,2,false),(380,2,12,false),(380,3,37,false),(380,4,56,false),(380,5,65,false),(380,6,21,true)
	        
2025-04-19 08:42:13.607 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:42:13.609 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:42:13.611 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.612 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:42:13.612 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:42:13.612 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1234, '2023-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.613 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (381,1,5,false),(381,2,25,false),(381,3,26,false),(381,4,40,false),(381,5,60,false),(381,6,1,true)
	        
2025-04-19 08:42:13.613 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:42:13.615 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:42:13.618 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.618 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:42:13.618 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:42:13.619 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1235, '2023-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.619 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (382,1,1,false),(382,2,24,false),(382,3,27,false),(382,4,31,false),(382,5,62,false),(382,6,20,true)
	        
2025-04-19 08:42:13.620 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:42:13.623 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:42:13.625 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.626 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:42:13.626 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:42:13.626 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1236, '2023-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.627 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (383,1,3,false),(383,2,8,false),(383,3,41,false),(383,4,56,false),(383,5,64,false),(383,6,18,true)
	        
2025-04-19 08:42:13.627 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:42:13.629 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:42:13.632 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.632 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:42:13.632 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:42:13.633 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1237, '2023-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.633 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (384,1,3,false),(384,2,9,false),(384,3,10,false),(384,4,20,false),(384,5,62,false),(384,6,25,true)
	        
2025-04-19 08:42:13.634 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:42:13.636 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:42:13.639 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.639 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:42:13.640 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:42:13.640 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1238, '2023-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.641 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (385,1,5,false),(385,2,8,false),(385,3,19,false),(385,4,34,false),(385,5,39,false),(385,6,26,true)
	        
2025-04-19 08:42:13.641 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:42:13.643 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:42:13.646 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.647 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:42:13.647 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:42:13.647 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1239, '2023-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.648 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (386,1,27,false),(386,2,35,false),(386,3,41,false),(386,4,56,false),(386,5,60,false),(386,6,16,true)
	        
2025-04-19 08:42:13.648 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:42:13.651 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:42:13.653 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.653 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:42:13.653 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:42:13.654 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1240, '2023-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.654 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (387,1,9,false),(387,2,14,false),(387,3,17,false),(387,4,18,false),(387,5,53,false),(387,6,6,true)
	        
2025-04-19 08:42:13.655 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:42:13.657 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:42:13.660 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.660 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:42:13.660 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:42:13.660 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1241, '2023-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.661 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (388,1,5,false),(388,2,12,false),(388,3,20,false),(388,4,24,false),(388,5,29,false),(388,6,4,true)
	        
2025-04-19 08:42:13.662 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:42:13.664 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:42:13.666 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.666 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:42:13.666 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:42:13.666 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1242, '2023-12-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.667 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (389,1,4,false),(389,2,11,false),(389,3,38,false),(389,4,51,false),(389,5,68,false),(389,6,5,true)
	        
2025-04-19 08:42:13.668 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:42:13.671 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:42:13.673 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.673 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:42:13.673 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:42:13.674 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1243, '2023-12-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.674 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (390,1,10,false),(390,2,11,false),(390,3,26,false),(390,4,27,false),(390,5,34,false),(390,6,7,true)
	        
2025-04-19 08:42:13.675 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:42:13.677 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:42:13.679 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.679 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:42:13.679 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:42:13.680 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1244, '2024-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.680 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (391,1,12,false),(391,2,21,false),(391,3,42,false),(391,4,44,false),(391,5,49,false),(391,6,1,true)
	        
2025-04-19 08:42:13.681 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:42:13.683 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:42:13.685 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.685 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:42:13.686 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:42:13.686 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1245, '2024-01-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.687 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (392,1,30,false),(392,2,31,false),(392,3,38,false),(392,4,48,false),(392,5,68,false),(392,6,8,true)
	        
2025-04-19 08:42:13.687 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:42:13.690 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:42:13.692 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.693 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:42:13.693 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:42:13.693 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1246, '2024-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.694 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (393,1,4,false),(393,2,31,false),(393,3,34,false),(393,4,38,false),(393,5,61,false),(393,6,13,true)
	        
2025-04-19 08:42:13.695 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:42:13.697 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:42:13.699 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.700 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:42:13.700 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:42:13.700 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1247, '2024-01-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.701 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (394,1,7,false),(394,2,17,false),(394,3,28,false),(394,4,40,false),(394,5,45,false),(394,6,2,true)
	        
2025-04-19 08:42:13.701 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:42:13.704 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:42:13.706 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.706 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:42:13.707 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:42:13.707 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1248, '2024-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.708 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (395,1,25,false),(395,2,40,false),(395,3,43,false),(395,4,48,false),(395,5,50,false),(395,6,11,true)
	        
2025-04-19 08:42:13.708 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:42:13.711 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:42:13.713 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.714 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:42:13.714 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:42:13.715 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1249, '2024-01-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.715 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (396,1,12,false),(396,2,31,false),(396,3,33,false),(396,4,51,false),(396,5,58,false),(396,6,15,true)
	        
2025-04-19 08:42:13.716 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:42:13.718 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:42:13.721 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.722 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:42:13.722 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:42:13.722 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1250, '2024-01-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.723 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (397,1,13,false),(397,2,30,false),(397,3,35,false),(397,4,49,false),(397,5,59,false),(397,6,4,true)
	        
2025-04-19 08:42:13.723 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:42:13.726 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:42:13.729 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.729 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:42:13.729 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:42:13.730 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1251, '2024-01-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.730 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (398,1,18,false),(398,2,22,false),(398,3,43,false),(398,4,61,false),(398,5,65,false),(398,6,2,true)
	        
2025-04-19 08:42:13.731 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:42:13.733 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:42:13.736 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.736 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:42:13.737 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:42:13.737 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1252, '2024-01-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.737 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (399,1,16,false),(399,2,31,false),(399,3,34,false),(399,4,47,false),(399,5,65,false),(399,6,10,true)
	        
2025-04-19 08:42:13.738 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:42:13.741 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:42:13.743 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.743 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:42:13.743 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:42:13.744 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1253, '2024-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.744 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (400,1,24,false),(400,2,25,false),(400,3,43,false),(400,4,52,false),(400,5,63,false),(400,6,21,true)
	        
2025-04-19 08:42:13.745 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:42:13.747 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:42:13.749 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.749 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:42:13.750 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:42:13.750 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1254, '2024-01-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.751 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (401,1,1,false),(401,2,5,false),(401,3,32,false),(401,4,50,false),(401,5,64,false),(401,6,8,true)
	        
2025-04-19 08:42:13.751 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:42:13.753 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:42:13.755 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.756 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:42:13.756 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:42:13.756 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1255, '2024-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.757 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (402,1,7,false),(402,2,38,false),(402,3,65,false),(402,4,66,false),(402,5,68,false),(402,6,21,true)
	        
2025-04-19 08:42:13.757 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:42:13.760 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:42:13.762 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.762 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:42:13.763 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:42:13.763 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1256, '2024-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.764 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (403,1,39,false),(403,2,41,false),(403,3,43,false),(403,4,49,false),(403,5,64,false),(403,6,4,true)
	        
2025-04-19 08:42:13.764 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:42:13.767 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:42:13.769 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.769 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:42:13.770 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:42:13.770 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1257, '2024-01-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.771 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (404,1,15,false),(404,2,18,false),(404,3,19,false),(404,4,41,false),(404,5,43,false),(404,6,14,true)
	        
2025-04-19 08:42:13.771 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:42:13.774 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:42:13.776 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.777 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:42:13.777 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:42:13.777 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1258, '2024-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.778 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (405,1,9,false),(405,2,11,false),(405,3,27,false),(405,4,59,false),(405,5,66,false),(405,6,19,true)
	        
2025-04-19 08:42:13.779 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:42:13.781 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:42:13.783 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.783 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:42:13.784 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:42:13.784 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1259, '2024-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.785 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (406,1,1,false),(406,2,2,false),(406,3,27,false),(406,4,30,false),(406,5,67,false),(406,6,9,true)
	        
2025-04-19 08:42:13.785 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:42:13.788 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:42:13.790 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.790 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:42:13.791 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:42:13.791 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1260, '2024-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.792 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (407,1,12,false),(407,2,21,false),(407,3,62,false),(407,4,67,false),(407,5,69,false),(407,6,17,true)
	        
2025-04-19 08:42:13.792 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:42:13.795 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:42:13.797 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.798 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:42:13.798 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:42:13.798 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1261, '2024-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.799 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (408,1,27,false),(408,2,28,false),(408,3,34,false),(408,4,37,false),(408,5,44,false),(408,6,8,true)
	        
2025-04-19 08:42:13.799 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:42:13.801 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:42:13.804 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.804 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:42:13.804 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:42:13.805 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1262, '2024-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.805 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (409,1,17,false),(409,2,36,false),(409,3,43,false),(409,4,53,false),(409,5,67,false),(409,6,14,true)
	        
2025-04-19 08:42:13.806 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:42:13.808 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:42:13.810 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.811 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:42:13.811 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:42:13.811 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1263, '2024-02-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.812 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (410,1,1,false),(410,2,4,false),(410,3,45,false),(410,4,47,false),(410,5,67,false),(410,6,18,true)
	        
2025-04-19 08:42:13.812 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:42:13.815 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:42:13.817 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.817 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:42:13.817 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:42:13.817 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1264, '2024-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.818 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (411,1,6,false),(411,2,28,false),(411,3,59,false),(411,4,62,false),(411,5,69,false),(411,6,21,true)
	        
2025-04-19 08:42:13.819 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:42:13.821 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:42:13.823 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.823 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:42:13.824 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:42:13.824 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1265, '2024-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.824 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (412,1,4,false),(412,2,23,false),(412,3,45,false),(412,4,50,false),(412,5,53,false),(412,6,17,true)
	        
2025-04-19 08:42:13.825 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:42:13.827 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:42:13.831 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.831 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:42:13.831 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:42:13.832 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1266, '2024-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.833 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (413,1,4,false),(413,2,27,false),(413,3,33,false),(413,4,41,false),(413,5,42,false),(413,6,14,true)
	        
2025-04-19 08:42:13.833 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:42:13.835 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:42:13.839 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.840 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:42:13.840 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:42:13.840 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1267, '2024-02-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.841 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (414,1,3,false),(414,2,8,false),(414,3,40,false),(414,4,53,false),(414,5,58,false),(414,6,3,true)
	        
2025-04-19 08:42:13.842 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:42:13.844 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:42:13.847 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.847 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:42:13.848 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:42:13.848 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1268, '2024-02-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.849 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (415,1,24,false),(415,2,29,false),(415,3,42,false),(415,4,51,false),(415,5,54,false),(415,6,16,true)
	        
2025-04-19 08:42:13.849 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:42:13.852 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:42:13.856 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.857 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:42:13.857 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:42:13.858 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1269, '2024-02-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.858 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (416,1,16,false),(416,2,26,false),(416,3,29,false),(416,4,38,false),(416,5,50,false),(416,6,6,true)
	        
2025-04-19 08:42:13.859 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:42:13.862 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:42:13.864 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.864 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:42:13.865 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:42:13.865 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1270, '2024-03-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.866 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (417,1,3,false),(417,2,18,false),(417,3,27,false),(417,4,36,false),(417,5,53,false),(417,6,12,true)
	        
2025-04-19 08:42:13.866 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:42:13.868 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:42:13.871 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.871 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:42:13.871 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:42:13.872 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1271, '2024-03-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.873 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (418,1,36,false),(418,2,42,false),(418,3,50,false),(418,4,52,false),(418,5,67,false),(418,6,26,true)
	        
2025-04-19 08:42:13.873 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:42:13.876 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:42:13.879 UTC [206] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:42:13.879 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:42:13.879 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:42:13.880 UTC [206] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1272, '2024-03-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:42:13.881 UTC [206] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (419,1,6,false),(419,2,19,false),(419,3,28,false),(419,4,44,false),(419,5,60,false),(419,6,10,true)
	        
2025-04-19 08:42:13.881 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:42:13.885 UTC [206] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:42:17.592 UTC [206] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:42:22.031 UTC [206] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:42:22.284 UTC [206] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:42:22.318 UTC [206] DEBUG:  unexpected EOF on client connection
2025-04-19 08:42:24.107 UTC [221] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:42:24.114 UTC [221] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:42:24.121 UTC [221] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:42:24.121 UTC [221] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:42:24.127 UTC [221] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:42:24.131 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:42:24.134 UTC [221] DEBUG:  building index "pg_toast_20324_index" on table "pg_toast_20324" serially
2025-04-19 08:42:24.135 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:42:24.135 UTC [221] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:42:24.135 UTC [221] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:42:24.137 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:42:24.137 UTC [221] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:42:24.137 UTC [221] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:42:24.139 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:42:24.140 UTC [221] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:42:24.140 UTC [221] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:42:24.141 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:42:24.143 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:42:24.143 UTC [221] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:42:24.143 UTC [221] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:42:24.144 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:42:24.144 UTC [221] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:42:24.144 UTC [221] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:42:24.145 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:42:24.146 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:42:24.146 UTC [221] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:42:24.146 UTC [221] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:42:24.147 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:42:24.147 UTC [221] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:42:24.147 UTC [221] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:42:24.149 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:42:24.149 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:42:24.150 UTC [221] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:42:24.150 UTC [221] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:42:24.151 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:42:24.153 UTC [221] DEBUG:  building index "pg_toast_20385_index" on table "pg_toast_20385" serially
2025-04-19 08:42:24.154 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:42:24.155 UTC [221] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:42:24.155 UTC [221] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:42:24.156 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:42:24.157 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:42:24.157 UTC [221] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:42:24.157 UTC [221] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:42:24.158 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:42:24.158 UTC [221] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:42:24.158 UTC [221] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:42:24.160 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:42:24.161 UTC [221] DEBUG:  building index "pg_toast_20418_index" on table "pg_toast_20418" serially
2025-04-19 08:42:24.162 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:42:24.162 UTC [221] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:42:24.162 UTC [221] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:42:24.163 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:42:24.164 UTC [221] DEBUG:  building index "pg_toast_20429_index" on table "pg_toast_20429" serially
2025-04-19 08:42:24.165 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:42:24.165 UTC [221] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:42:24.165 UTC [221] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:42:24.166 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:42:24.167 UTC [221] DEBUG:  building index "pg_toast_20452_index" on table "pg_toast_20452" serially
2025-04-19 08:42:24.168 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:42:24.168 UTC [221] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:42:24.168 UTC [221] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:42:24.169 UTC [221] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:42:24.169 UTC [221] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:42:24.170 UTC [221] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:42:24.170 UTC [221] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:42:24.171 UTC [221] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:42:24.171 UTC [221] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:42:24.172 UTC [221] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:42:24.172 UTC [221] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:42:24.173 UTC [221] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:42:24.173 UTC [221] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:42:24.174 UTC [221] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:42:24.174 UTC [221] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:42:24.174 UTC [221] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:42:24.174 UTC [221] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:42:24.175 UTC [221] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:42:24.175 UTC [221] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:42:24.176 UTC [221] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:42:24.176 UTC [221] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:42:24.177 UTC [221] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:42:24.177 UTC [221] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:42:24.177 UTC [221] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:42:24.177 UTC [221] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:42:24.186 UTC [221] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:24.451 UTC [221] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bwlx1ezj52bFA7BW.NlEYOIvJQS.jHvFtV7NT/qKRzWZTrJ9Js2eq')
	                RETURNING id, username, email
	                
2025-04-19 08:42:24.452 UTC [221] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:42:24.452 UTC [221] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:42:24.453 UTC [221] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:42:24.460 UTC [221] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:24.461 UTC [221] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:42:24.464 UTC [221] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:42:24.469 UTC [221] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:42:24.469 UTC [221] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:42:24.472 UTC [221] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:42:24.475 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:42:24.476 UTC [221] DEBUG:  building index "pg_toast_20488_index" on table "pg_toast_20488" serially
2025-04-19 08:42:24.477 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:42:24.477 UTC [221] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:42:24.477 UTC [221] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:42:24.478 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:42:24.478 UTC [221] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:42:24.478 UTC [221] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:42:24.479 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:42:24.479 UTC [221] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:42:24.479 UTC [221] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:42:24.479 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:42:24.480 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:42:24.480 UTC [221] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:42:24.480 UTC [221] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:42:24.481 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:42:24.481 UTC [221] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:42:24.481 UTC [221] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:42:24.482 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:42:24.483 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:42:24.483 UTC [221] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:42:24.483 UTC [221] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:42:24.484 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:42:24.484 UTC [221] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:42:24.484 UTC [221] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:42:24.485 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:42:24.486 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:42:24.486 UTC [221] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:42:24.486 UTC [221] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:42:24.487 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:42:24.488 UTC [221] DEBUG:  building index "pg_toast_20549_index" on table "pg_toast_20549" serially
2025-04-19 08:42:24.488 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:42:24.489 UTC [221] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:42:24.489 UTC [221] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:42:24.490 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:42:24.490 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:42:24.491 UTC [221] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:42:24.491 UTC [221] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:42:24.491 UTC [221] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:42:24.492 UTC [221] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:42:24.492 UTC [221] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:42:24.493 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:42:24.494 UTC [221] DEBUG:  building index "pg_toast_20582_index" on table "pg_toast_20582" serially
2025-04-19 08:42:24.495 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:42:24.495 UTC [221] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:42:24.495 UTC [221] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:42:24.496 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:42:24.497 UTC [221] DEBUG:  building index "pg_toast_20593_index" on table "pg_toast_20593" serially
2025-04-19 08:42:24.498 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:42:24.498 UTC [221] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:42:24.498 UTC [221] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:42:24.501 UTC [221] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:42:24.503 UTC [221] DEBUG:  building index "pg_toast_20616_index" on table "pg_toast_20616" serially
2025-04-19 08:42:24.504 UTC [221] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:42:24.504 UTC [221] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:42:24.504 UTC [221] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:42:24.505 UTC [221] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:42:24.505 UTC [221] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:42:24.506 UTC [221] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:42:24.506 UTC [221] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:42:24.506 UTC [221] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:42:24.506 UTC [221] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:42:24.507 UTC [221] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:42:24.507 UTC [221] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:42:24.508 UTC [221] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:42:24.508 UTC [221] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:42:24.509 UTC [221] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:42:24.509 UTC [221] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:42:24.510 UTC [221] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:42:24.510 UTC [221] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:42:24.510 UTC [221] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:42:24.510 UTC [221] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:42:24.511 UTC [221] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:42:24.511 UTC [221] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:42:24.512 UTC [221] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:42:24.512 UTC [221] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:42:24.513 UTC [221] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:42:24.513 UTC [221] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:42:24.525 UTC [221] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:24.771 UTC [221] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$WAy95lQjpQPLjV6WoS3mwuk/BYXV.uzefBMSphklAV0kC3cfkFEQS')
	                RETURNING id, username, email
	                
2025-04-19 08:42:24.772 UTC [221] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:42:24.772 UTC [221] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:42:25.820 UTC [221] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:42:28.508 UTC [221] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:42:31.221 UTC [222] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:42:37.879 UTC [221] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:42:38.157 UTC [221] DEBUG:  unexpected EOF on client connection
2025-04-19 08:42:39.864 UTC [230] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:42:39.874 UTC [230] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:42:39.879 UTC [230] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:42:39.879 UTC [230] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:42:39.883 UTC [230] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:42:39.887 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:42:39.890 UTC [230] DEBUG:  building index "pg_toast_20652_index" on table "pg_toast_20652" serially
2025-04-19 08:42:39.891 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:42:39.891 UTC [230] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:42:39.891 UTC [230] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:42:39.892 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:42:39.892 UTC [230] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:42:39.892 UTC [230] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:42:39.893 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:42:39.893 UTC [230] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:42:39.893 UTC [230] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:42:39.894 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:42:39.895 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:42:39.896 UTC [230] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:42:39.896 UTC [230] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:42:39.897 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:42:39.897 UTC [230] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:42:39.897 UTC [230] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:42:39.898 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:42:39.899 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:42:39.899 UTC [230] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:42:39.899 UTC [230] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:42:39.900 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:42:39.900 UTC [230] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:42:39.900 UTC [230] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:42:39.902 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:42:39.903 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:42:39.903 UTC [230] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:42:39.903 UTC [230] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:42:39.904 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:42:39.906 UTC [230] DEBUG:  building index "pg_toast_20713_index" on table "pg_toast_20713" serially
2025-04-19 08:42:39.907 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:42:39.907 UTC [230] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:42:39.907 UTC [230] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:42:39.908 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:42:39.909 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:42:39.909 UTC [230] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:42:39.909 UTC [230] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:42:39.909 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:42:39.910 UTC [230] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:42:39.910 UTC [230] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:42:39.911 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:42:39.912 UTC [230] DEBUG:  building index "pg_toast_20746_index" on table "pg_toast_20746" serially
2025-04-19 08:42:39.912 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:42:39.912 UTC [230] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:42:39.912 UTC [230] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:42:39.913 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:42:39.914 UTC [230] DEBUG:  building index "pg_toast_20757_index" on table "pg_toast_20757" serially
2025-04-19 08:42:39.915 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:42:39.915 UTC [230] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:42:39.915 UTC [230] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:42:39.917 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:42:39.917 UTC [230] DEBUG:  building index "pg_toast_20780_index" on table "pg_toast_20780" serially
2025-04-19 08:42:39.918 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:42:39.918 UTC [230] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:42:39.918 UTC [230] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:42:39.919 UTC [230] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:42:39.919 UTC [230] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:42:39.920 UTC [230] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:42:39.920 UTC [230] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:42:39.921 UTC [230] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:42:39.921 UTC [230] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:42:39.921 UTC [230] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:42:39.922 UTC [230] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:42:39.923 UTC [230] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:42:39.923 UTC [230] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:42:39.923 UTC [230] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:42:39.923 UTC [230] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:42:39.924 UTC [230] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:42:39.924 UTC [230] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:42:39.925 UTC [230] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:42:39.925 UTC [230] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:42:39.926 UTC [230] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:42:39.926 UTC [230] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:42:39.927 UTC [230] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:42:39.927 UTC [230] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:42:39.928 UTC [230] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:42:39.928 UTC [230] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:42:39.938 UTC [230] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:40.215 UTC [230] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$esySiGfuOvIu8SOdW8U8dOtux/LHypqOF.U0rFJLiilu/5UtaJmD.')
	                RETURNING id, username, email
	                
2025-04-19 08:42:40.217 UTC [230] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:42:40.217 UTC [230] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:42:40.218 UTC [230] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:42:40.226 UTC [230] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:40.228 UTC [230] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:42:40.232 UTC [230] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:42:40.237 UTC [230] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:42:40.237 UTC [230] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:42:40.240 UTC [230] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:42:40.243 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:42:40.244 UTC [230] DEBUG:  building index "pg_toast_20816_index" on table "pg_toast_20816" serially
2025-04-19 08:42:40.245 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:42:40.245 UTC [230] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:42:40.245 UTC [230] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:42:40.246 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:42:40.246 UTC [230] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:42:40.246 UTC [230] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:42:40.247 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:42:40.247 UTC [230] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:42:40.247 UTC [230] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:42:40.247 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:42:40.248 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:42:40.248 UTC [230] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:42:40.248 UTC [230] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:42:40.249 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:42:40.249 UTC [230] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:42:40.250 UTC [230] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:42:40.250 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:42:40.251 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:42:40.251 UTC [230] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:42:40.251 UTC [230] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:42:40.253 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:42:40.253 UTC [230] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:42:40.253 UTC [230] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:42:40.254 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:42:40.255 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:42:40.255 UTC [230] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:42:40.255 UTC [230] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:42:40.256 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:42:40.257 UTC [230] DEBUG:  building index "pg_toast_20877_index" on table "pg_toast_20877" serially
2025-04-19 08:42:40.258 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:42:40.258 UTC [230] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:42:40.258 UTC [230] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:42:40.259 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:42:40.260 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:42:40.261 UTC [230] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:42:40.261 UTC [230] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:42:40.261 UTC [230] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:42:40.262 UTC [230] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:42:40.262 UTC [230] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:42:40.263 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:42:40.264 UTC [230] DEBUG:  building index "pg_toast_20910_index" on table "pg_toast_20910" serially
2025-04-19 08:42:40.264 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:42:40.264 UTC [230] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:42:40.264 UTC [230] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:42:40.265 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:42:40.267 UTC [230] DEBUG:  building index "pg_toast_20921_index" on table "pg_toast_20921" serially
2025-04-19 08:42:40.267 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:42:40.268 UTC [230] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:42:40.268 UTC [230] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:42:40.269 UTC [230] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:42:40.270 UTC [230] DEBUG:  building index "pg_toast_20944_index" on table "pg_toast_20944" serially
2025-04-19 08:42:40.270 UTC [230] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:42:40.271 UTC [230] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:42:40.271 UTC [230] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:42:40.272 UTC [230] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:42:40.272 UTC [230] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:42:40.273 UTC [230] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:42:40.273 UTC [230] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:42:40.273 UTC [230] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:42:40.273 UTC [230] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:42:40.274 UTC [230] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:42:40.274 UTC [230] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:42:40.275 UTC [230] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:42:40.275 UTC [230] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:42:40.276 UTC [230] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:42:40.276 UTC [230] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:42:40.277 UTC [230] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:42:40.277 UTC [230] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:42:40.277 UTC [230] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:42:40.277 UTC [230] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:42:40.279 UTC [230] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:42:40.279 UTC [230] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:42:40.279 UTC [230] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:42:40.279 UTC [230] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:42:40.280 UTC [230] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:42:40.280 UTC [230] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:42:40.286 UTC [230] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:42:40.530 UTC [230] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$M3RQQlzuK1xwMYPhbTabP.Jt3XRyOwCTffVqRao8QFDVpIG7p2BoK')
	                RETURNING id, username, email
	                
2025-04-19 08:42:40.531 UTC [230] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:42:40.532 UTC [230] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:58:19.013 UTC [230] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:58:19.374 UTC [230] DEBUG:  unexpected EOF on client connection
2025-04-19 08:58:21.452 UTC [245] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:58:21.479 UTC [245] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:58:21.492 UTC [245] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:58:21.492 UTC [245] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:58:21.497 UTC [245] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:58:21.502 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:58:21.505 UTC [245] DEBUG:  building index "pg_toast_20980_index" on table "pg_toast_20980" serially
2025-04-19 08:58:21.508 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:58:21.509 UTC [245] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:58:21.509 UTC [245] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:58:21.510 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:58:21.510 UTC [245] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:58:21.510 UTC [245] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:58:21.511 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:58:21.511 UTC [245] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:58:21.511 UTC [245] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:58:21.512 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:58:21.513 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:58:21.514 UTC [245] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:58:21.514 UTC [245] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:58:21.515 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:58:21.515 UTC [245] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:58:21.515 UTC [245] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:58:21.516 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:58:21.518 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:58:21.518 UTC [245] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:58:21.518 UTC [245] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:58:21.519 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:58:21.519 UTC [245] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:58:21.519 UTC [245] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:58:21.521 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:58:21.522 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 08:58:21.523 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:58:21.525 UTC [245] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:58:21.525 UTC [245] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:58:21.531 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:58:21.534 UTC [245] DEBUG:  building index "pg_toast_21041_index" on table "pg_toast_21041" serially
2025-04-19 08:58:21.535 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:58:21.536 UTC [245] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:58:21.536 UTC [245] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:58:21.538 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:58:21.539 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:58:21.540 UTC [245] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:58:21.540 UTC [245] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:58:21.541 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:58:21.542 UTC [245] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:58:21.542 UTC [245] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:58:21.543 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:58:21.544 UTC [245] DEBUG:  building index "pg_toast_21074_index" on table "pg_toast_21074" serially
2025-04-19 08:58:21.545 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:58:21.545 UTC [245] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:58:21.545 UTC [245] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:58:21.546 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:58:21.548 UTC [245] DEBUG:  building index "pg_toast_21085_index" on table "pg_toast_21085" serially
2025-04-19 08:58:21.549 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:58:21.549 UTC [245] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:58:21.549 UTC [245] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:58:21.551 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:58:21.552 UTC [245] DEBUG:  building index "pg_toast_21108_index" on table "pg_toast_21108" serially
2025-04-19 08:58:21.553 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:58:21.553 UTC [245] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:58:21.553 UTC [245] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:58:21.554 UTC [245] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:58:21.554 UTC [245] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:58:21.555 UTC [245] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:58:21.555 UTC [245] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:58:21.556 UTC [245] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:58:21.556 UTC [245] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:58:21.556 UTC [245] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:58:21.556 UTC [245] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:58:21.557 UTC [245] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:58:21.557 UTC [245] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:58:21.559 UTC [245] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:58:21.559 UTC [245] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:58:21.560 UTC [245] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:58:21.560 UTC [245] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:58:21.561 UTC [245] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:58:21.561 UTC [245] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:58:21.561 UTC [245] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:58:21.561 UTC [245] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:58:21.562 UTC [245] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:58:21.562 UTC [245] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:58:21.563 UTC [245] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:58:21.563 UTC [245] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:58:21.572 UTC [245] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:58:21.584 UTC [246] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:58:21.804 UTC [246] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:58:21.870 UTC [245] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$o0aLpTAYU3SqxpLWC1Bsfuzw.dhbSDAzIFHWpIpixdIVDWWDXODN6')
	                RETURNING id, username, email
	                
2025-04-19 08:58:21.870 UTC [245] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:58:21.871 UTC [245] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:58:21.872 UTC [245] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:58:21.882 UTC [245] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:58:21.885 UTC [245] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:58:21.888 UTC [245] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:58:21.892 UTC [245] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:58:21.892 UTC [245] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:58:21.896 UTC [245] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:58:21.899 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:58:21.901 UTC [245] DEBUG:  building index "pg_toast_21145_index" on table "pg_toast_21145" serially
2025-04-19 08:58:21.902 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:58:21.902 UTC [245] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:58:21.902 UTC [245] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:58:21.904 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:58:21.905 UTC [245] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:58:21.905 UTC [245] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:58:21.906 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:58:21.906 UTC [245] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:58:21.906 UTC [245] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:58:21.907 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:58:21.907 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:58:21.908 UTC [245] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:58:21.908 UTC [245] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:58:21.908 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:58:21.909 UTC [245] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:58:21.909 UTC [245] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:58:21.909 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:58:21.910 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:58:21.910 UTC [245] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:58:21.910 UTC [245] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:58:21.911 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:58:21.911 UTC [245] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:58:21.911 UTC [245] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:58:21.913 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:58:21.916 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:58:21.916 UTC [245] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:58:21.916 UTC [245] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:58:21.918 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:58:21.919 UTC [245] DEBUG:  building index "pg_toast_21206_index" on table "pg_toast_21206" serially
2025-04-19 08:58:21.920 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:58:21.921 UTC [245] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:58:21.921 UTC [245] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:58:21.923 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:58:21.925 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:58:21.925 UTC [245] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:58:21.925 UTC [245] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:58:21.926 UTC [245] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:58:21.926 UTC [245] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:58:21.926 UTC [245] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:58:21.927 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:58:21.928 UTC [245] DEBUG:  building index "pg_toast_21239_index" on table "pg_toast_21239" serially
2025-04-19 08:58:21.929 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:58:21.929 UTC [245] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:58:21.929 UTC [245] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:58:21.930 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:58:21.931 UTC [245] DEBUG:  building index "pg_toast_21250_index" on table "pg_toast_21250" serially
2025-04-19 08:58:21.932 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:58:21.932 UTC [245] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:58:21.932 UTC [245] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:58:21.933 UTC [245] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:58:21.934 UTC [245] DEBUG:  building index "pg_toast_21273_index" on table "pg_toast_21273" serially
2025-04-19 08:58:21.935 UTC [245] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:58:21.936 UTC [245] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:58:21.936 UTC [245] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:58:21.938 UTC [245] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:58:21.938 UTC [245] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:58:21.938 UTC [245] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:58:21.938 UTC [245] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:58:21.940 UTC [245] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:58:21.940 UTC [245] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:58:21.941 UTC [245] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:58:21.941 UTC [245] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:58:21.941 UTC [245] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:58:21.941 UTC [245] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:58:21.942 UTC [245] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:58:21.942 UTC [245] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:58:21.943 UTC [245] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:58:21.943 UTC [245] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:58:21.944 UTC [245] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:58:21.944 UTC [245] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:58:21.944 UTC [245] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:58:21.944 UTC [245] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:58:21.945 UTC [245] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:58:21.945 UTC [245] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:58:21.946 UTC [245] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:58:21.946 UTC [245] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:58:21.952 UTC [245] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:58:22.205 UTC [245] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$iJ/Eq8sc0Bek95yxAO2Yr.Yg/V/4oULXKMg8nj0Mycnoyh1H.qA/C')
	                RETURNING id, username, email
	                
2025-04-19 08:58:22.206 UTC [245] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:58:22.206 UTC [245] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:58:35.081 UTC [245] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:58:36.474 UTC [245] DEBUG:  unexpected EOF on client connection
2025-04-19 08:58:39.383 UTC [261] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:58:39.391 UTC [261] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:58:39.401 UTC [261] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:58:39.401 UTC [261] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:58:39.413 UTC [261] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:58:39.417 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:58:39.426 UTC [261] DEBUG:  building index "pg_toast_21309_index" on table "pg_toast_21309" serially
2025-04-19 08:58:39.429 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:58:39.430 UTC [261] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:58:39.430 UTC [261] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:58:39.432 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:58:39.432 UTC [261] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:58:39.432 UTC [261] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:58:39.433 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:58:39.433 UTC [261] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:58:39.433 UTC [261] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:58:39.434 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:58:39.436 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:58:39.436 UTC [261] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:58:39.436 UTC [261] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:58:39.437 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:58:39.437 UTC [261] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:58:39.437 UTC [261] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:58:39.438 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:58:39.439 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:58:39.440 UTC [261] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:58:39.440 UTC [261] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:58:39.440 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:58:39.441 UTC [261] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:58:39.441 UTC [261] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:58:39.442 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:58:39.443 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:58:39.443 UTC [261] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:58:39.443 UTC [261] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:58:39.444 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:58:39.446 UTC [261] DEBUG:  building index "pg_toast_21370_index" on table "pg_toast_21370" serially
2025-04-19 08:58:39.446 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:58:39.447 UTC [261] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:58:39.447 UTC [261] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:58:39.448 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:58:39.449 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:58:39.449 UTC [261] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:58:39.449 UTC [261] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:58:39.450 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:58:39.450 UTC [261] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:58:39.450 UTC [261] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:58:39.451 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:58:39.452 UTC [261] DEBUG:  building index "pg_toast_21403_index" on table "pg_toast_21403" serially
2025-04-19 08:58:39.453 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:58:39.453 UTC [261] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:58:39.453 UTC [261] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:58:39.454 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:58:39.455 UTC [261] DEBUG:  building index "pg_toast_21414_index" on table "pg_toast_21414" serially
2025-04-19 08:58:39.456 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:58:39.456 UTC [261] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:58:39.456 UTC [261] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:58:39.458 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:58:39.459 UTC [261] DEBUG:  building index "pg_toast_21437_index" on table "pg_toast_21437" serially
2025-04-19 08:58:39.461 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:58:39.464 UTC [261] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:58:39.464 UTC [261] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:58:39.465 UTC [261] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:58:39.465 UTC [261] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:58:39.465 UTC [261] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:58:39.466 UTC [261] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:58:39.467 UTC [261] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:58:39.467 UTC [261] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:58:39.468 UTC [261] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:58:39.468 UTC [261] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:58:39.469 UTC [261] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:58:39.469 UTC [261] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:58:39.471 UTC [261] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:58:39.471 UTC [261] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:58:39.472 UTC [261] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:58:39.472 UTC [261] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:58:39.473 UTC [261] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:58:39.473 UTC [261] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:58:39.474 UTC [261] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:58:39.474 UTC [261] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:58:39.475 UTC [261] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:58:39.475 UTC [261] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:58:39.476 UTC [261] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:58:39.476 UTC [261] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:58:39.490 UTC [261] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:58:39.766 UTC [261] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$9/t/xHHG./6zDwOTvrL03ub9e2/WXVlvjf8TqOJf.N.XuPctZjyqG')
	                RETURNING id, username, email
	                
2025-04-19 08:58:39.768 UTC [261] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:58:39.768 UTC [261] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:58:39.770 UTC [261] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:58:39.782 UTC [261] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:58:39.783 UTC [261] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:58:39.786 UTC [261] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:58:39.791 UTC [261] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:58:39.791 UTC [261] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:58:39.795 UTC [261] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:58:39.799 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:58:39.800 UTC [261] DEBUG:  building index "pg_toast_21473_index" on table "pg_toast_21473" serially
2025-04-19 08:58:39.801 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:58:39.801 UTC [261] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:58:39.801 UTC [261] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:58:39.802 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:58:39.803 UTC [261] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:58:39.803 UTC [261] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:58:39.803 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:58:39.804 UTC [261] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:58:39.804 UTC [261] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:58:39.804 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:58:39.805 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:58:39.805 UTC [261] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:58:39.805 UTC [261] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:58:39.806 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:58:39.807 UTC [261] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:58:39.807 UTC [261] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:58:39.807 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:58:39.808 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:58:39.808 UTC [261] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:58:39.808 UTC [261] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:58:39.809 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:58:39.809 UTC [261] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:58:39.809 UTC [261] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:58:39.811 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:58:39.811 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:58:39.812 UTC [261] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:58:39.812 UTC [261] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:58:39.814 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:58:39.817 UTC [261] DEBUG:  building index "pg_toast_21534_index" on table "pg_toast_21534" serially
2025-04-19 08:58:39.818 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:58:39.818 UTC [261] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:58:39.818 UTC [261] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:58:39.820 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:58:39.822 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:58:39.823 UTC [261] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:58:39.823 UTC [261] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:58:39.824 UTC [261] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:58:39.824 UTC [261] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:58:39.824 UTC [261] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:58:39.826 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:58:39.827 UTC [261] DEBUG:  building index "pg_toast_21567_index" on table "pg_toast_21567" serially
2025-04-19 08:58:39.827 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:58:39.828 UTC [261] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:58:39.828 UTC [261] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:58:39.829 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:58:39.830 UTC [261] DEBUG:  building index "pg_toast_21578_index" on table "pg_toast_21578" serially
2025-04-19 08:58:39.831 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:58:39.831 UTC [261] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:58:39.831 UTC [261] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:58:39.833 UTC [261] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:58:39.834 UTC [261] DEBUG:  building index "pg_toast_21601_index" on table "pg_toast_21601" serially
2025-04-19 08:58:39.835 UTC [261] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:58:39.835 UTC [261] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:58:39.835 UTC [261] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:58:39.836 UTC [261] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:58:39.836 UTC [261] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:58:39.837 UTC [261] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:58:39.837 UTC [261] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:58:39.838 UTC [261] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:58:39.838 UTC [261] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:58:39.839 UTC [261] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:58:39.839 UTC [261] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:58:39.840 UTC [261] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:58:39.840 UTC [261] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:58:39.841 UTC [261] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:58:39.841 UTC [261] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:58:39.842 UTC [261] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:58:39.842 UTC [261] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:58:39.843 UTC [261] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:58:39.843 UTC [261] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:58:39.844 UTC [261] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:58:39.844 UTC [261] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:58:39.845 UTC [261] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:58:39.845 UTC [261] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:58:39.845 UTC [261] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:58:39.845 UTC [261] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:58:39.853 UTC [261] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:58:40.102 UTC [261] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1YkYfrYFzZ75V/xIFvLdkOVN/lMPY3Xq.sen0ir4RBYRvou1MiFJO')
	                RETURNING id, username, email
	                
2025-04-19 08:58:40.103 UTC [261] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:58:40.103 UTC [261] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 09:49:02.888 UTC [59] DEBUG:  checkpoint skipped because system is idle
2025-04-19 09:49:06.871 UTC [269] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 09:49:07.654 UTC [261] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 09:49:08.304 UTC [261] DEBUG:  unexpected EOF on client connection
2025-04-19 09:49:10.987 UTC [270] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 09:49:11.017 UTC [270] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 09:49:11.034 UTC [270] NOTICE:  drop cascades to 2 other objects
2025-04-19 09:49:11.034 UTC [270] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 09:49:11.041 UTC [270] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 09:49:11.045 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 09:49:11.056 UTC [270] DEBUG:  building index "pg_toast_21637_index" on table "pg_toast_21637" serially
2025-04-19 09:49:11.058 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 09:49:11.059 UTC [270] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 09:49:11.059 UTC [270] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 09:49:11.061 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 09:49:11.062 UTC [270] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 09:49:11.062 UTC [270] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 09:49:11.063 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 09:49:11.063 UTC [270] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 09:49:11.063 UTC [270] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 09:49:11.064 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 09:49:11.067 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 09:49:11.067 UTC [270] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 09:49:11.067 UTC [270] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 09:49:11.068 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 09:49:11.069 UTC [270] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 09:49:11.069 UTC [270] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 09:49:11.070 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 09:49:11.072 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 09:49:11.072 UTC [270] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 09:49:11.072 UTC [270] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 09:49:11.073 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 09:49:11.073 UTC [270] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 09:49:11.073 UTC [270] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 09:49:11.075 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 09:49:11.076 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 09:49:11.076 UTC [270] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 09:49:11.076 UTC [270] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 09:49:11.078 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 09:49:11.080 UTC [270] DEBUG:  building index "pg_toast_21698_index" on table "pg_toast_21698" serially
2025-04-19 09:49:11.081 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 09:49:11.081 UTC [270] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 09:49:11.081 UTC [270] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 09:49:11.082 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 09:49:11.083 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 09:49:11.084 UTC [270] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 09:49:11.084 UTC [270] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 09:49:11.084 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 09:49:11.084 UTC [270] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 09:49:11.085 UTC [270] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 09:49:11.086 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 09:49:11.091 UTC [270] DEBUG:  building index "pg_toast_21731_index" on table "pg_toast_21731" serially
2025-04-19 09:49:11.092 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 09:49:11.092 UTC [270] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 09:49:11.092 UTC [270] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 09:49:11.093 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 09:49:11.094 UTC [270] DEBUG:  building index "pg_toast_21742_index" on table "pg_toast_21742" serially
2025-04-19 09:49:11.095 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 09:49:11.095 UTC [270] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 09:49:11.095 UTC [270] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 09:49:11.098 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 09:49:11.100 UTC [270] DEBUG:  building index "pg_toast_21765_index" on table "pg_toast_21765" serially
2025-04-19 09:49:11.102 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 09:49:11.102 UTC [270] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 09:49:11.102 UTC [270] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 09:49:11.104 UTC [270] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 09:49:11.104 UTC [270] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 09:49:11.105 UTC [270] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 09:49:11.105 UTC [270] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 09:49:11.106 UTC [270] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 09:49:11.106 UTC [270] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 09:49:11.107 UTC [270] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 09:49:11.107 UTC [270] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 09:49:11.108 UTC [270] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 09:49:11.108 UTC [270] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 09:49:11.108 UTC [270] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 09:49:11.108 UTC [270] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 09:49:11.109 UTC [270] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 09:49:11.109 UTC [270] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 09:49:11.110 UTC [270] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 09:49:11.110 UTC [270] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 09:49:11.111 UTC [270] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 09:49:11.111 UTC [270] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 09:49:11.112 UTC [270] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 09:49:11.112 UTC [270] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 09:49:11.113 UTC [270] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 09:49:11.113 UTC [270] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 09:49:11.136 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 09:49:11.447 UTC [270] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$eb1JhyjJ8iFxzy2BvfmpmObIbw6XQA75gRryycgDbhKevPXQbqa52')
	                RETURNING id, username, email
	                
2025-04-19 09:49:11.451 UTC [270] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 09:49:11.452 UTC [270] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 09:49:11.454 UTC [270] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 09:49:11.471 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 09:49:11.477 UTC [270] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 09:49:11.480 UTC [270] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 09:49:11.486 UTC [270] NOTICE:  drop cascades to 2 other objects
2025-04-19 09:49:11.486 UTC [270] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 09:49:11.490 UTC [270] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 09:49:11.494 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 09:49:11.496 UTC [270] DEBUG:  building index "pg_toast_21801_index" on table "pg_toast_21801" serially
2025-04-19 09:49:11.500 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 09:49:11.500 UTC [270] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 09:49:11.500 UTC [270] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 09:49:11.501 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 09:49:11.501 UTC [270] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 09:49:11.501 UTC [270] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 09:49:11.502 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 09:49:11.503 UTC [270] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 09:49:11.503 UTC [270] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 09:49:11.503 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 09:49:11.504 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 09:49:11.505 UTC [270] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 09:49:11.505 UTC [270] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 09:49:11.505 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 09:49:11.505 UTC [270] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 09:49:11.505 UTC [270] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 09:49:11.506 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 09:49:11.507 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 09:49:11.507 UTC [270] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 09:49:11.507 UTC [270] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 09:49:11.508 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 09:49:11.509 UTC [270] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 09:49:11.509 UTC [270] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 09:49:11.510 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 09:49:11.512 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 09:49:11.513 UTC [270] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 09:49:11.513 UTC [270] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 09:49:11.515 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 09:49:11.517 UTC [270] DEBUG:  building index "pg_toast_21862_index" on table "pg_toast_21862" serially
2025-04-19 09:49:11.518 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 09:49:11.518 UTC [270] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 09:49:11.518 UTC [270] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 09:49:11.521 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 09:49:11.522 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 09:49:11.522 UTC [270] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 09:49:11.522 UTC [270] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 09:49:11.524 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 09:49:11.525 UTC [270] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 09:49:11.525 UTC [270] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 09:49:11.526 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 09:49:11.527 UTC [270] DEBUG:  building index "pg_toast_21895_index" on table "pg_toast_21895" serially
2025-04-19 09:49:11.528 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 09:49:11.528 UTC [270] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 09:49:11.528 UTC [270] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 09:49:11.529 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 09:49:11.530 UTC [270] DEBUG:  building index "pg_toast_21906_index" on table "pg_toast_21906" serially
2025-04-19 09:49:11.531 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 09:49:11.531 UTC [270] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 09:49:11.531 UTC [270] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 09:49:11.532 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 09:49:11.534 UTC [270] DEBUG:  building index "pg_toast_21929_index" on table "pg_toast_21929" serially
2025-04-19 09:49:11.534 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 09:49:11.535 UTC [270] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 09:49:11.535 UTC [270] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 09:49:11.536 UTC [270] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 09:49:11.536 UTC [270] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 09:49:11.536 UTC [270] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 09:49:11.536 UTC [270] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 09:49:11.538 UTC [270] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 09:49:11.538 UTC [270] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 09:49:11.539 UTC [270] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 09:49:11.539 UTC [270] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 09:49:11.539 UTC [270] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 09:49:11.539 UTC [270] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 09:49:11.540 UTC [270] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 09:49:11.540 UTC [270] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 09:49:11.541 UTC [270] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 09:49:11.541 UTC [270] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 09:49:11.542 UTC [270] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 09:49:11.542 UTC [270] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 09:49:11.543 UTC [270] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 09:49:11.543 UTC [270] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 09:49:11.544 UTC [270] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 09:49:11.544 UTC [270] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 09:49:11.544 UTC [270] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 09:49:11.544 UTC [270] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 09:49:11.552 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 09:49:11.835 UTC [270] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$viXlFboRg/H8gufp6QNZeufjPfNqhJ9m4Gj38fx9.fsI/BSCO2rxm')
	                RETURNING id, username, email
	                
2025-04-19 09:49:11.837 UTC [270] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 09:49:11.837 UTC [270] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 09:49:24.354 UTC [270] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 09:49:24.837 UTC [270] DEBUG:  unexpected EOF on client connection
2025-04-19 09:49:27.139 UTC [284] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 09:49:27.145 UTC [284] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 09:49:27.160 UTC [284] NOTICE:  drop cascades to 2 other objects
2025-04-19 09:49:27.160 UTC [284] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 09:49:27.166 UTC [284] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 09:49:27.170 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 09:49:27.172 UTC [284] DEBUG:  building index "pg_toast_21965_index" on table "pg_toast_21965" serially
2025-04-19 09:49:27.174 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 09:49:27.174 UTC [284] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 09:49:27.174 UTC [284] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 09:49:27.175 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 09:49:27.175 UTC [284] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 09:49:27.175 UTC [284] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 09:49:27.176 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 09:49:27.176 UTC [284] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 09:49:27.176 UTC [284] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 09:49:27.177 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 09:49:27.178 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 09:49:27.178 UTC [284] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 09:49:27.178 UTC [284] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 09:49:27.179 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 09:49:27.179 UTC [284] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 09:49:27.179 UTC [284] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 09:49:27.180 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 09:49:27.181 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 09:49:27.181 UTC [284] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 09:49:27.181 UTC [284] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 09:49:27.182 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 09:49:27.182 UTC [284] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 09:49:27.182 UTC [284] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 09:49:27.183 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 09:49:27.184 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 09:49:27.184 UTC [284] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 09:49:27.184 UTC [284] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 09:49:27.185 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 09:49:27.187 UTC [284] DEBUG:  building index "pg_toast_22026_index" on table "pg_toast_22026" serially
2025-04-19 09:49:27.188 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 09:49:27.188 UTC [284] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 09:49:27.188 UTC [284] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 09:49:27.190 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 09:49:27.190 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 09:49:27.191 UTC [284] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 09:49:27.191 UTC [284] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 09:49:27.192 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 09:49:27.192 UTC [284] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 09:49:27.192 UTC [284] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 09:49:27.194 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 09:49:27.195 UTC [284] DEBUG:  building index "pg_toast_22059_index" on table "pg_toast_22059" serially
2025-04-19 09:49:27.195 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 09:49:27.196 UTC [284] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 09:49:27.196 UTC [284] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 09:49:27.197 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 09:49:27.198 UTC [284] DEBUG:  building index "pg_toast_22070_index" on table "pg_toast_22070" serially
2025-04-19 09:49:27.199 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 09:49:27.199 UTC [284] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 09:49:27.199 UTC [284] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 09:49:27.201 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 09:49:27.203 UTC [284] DEBUG:  building index "pg_toast_22093_index" on table "pg_toast_22093" serially
2025-04-19 09:49:27.204 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 09:49:27.204 UTC [284] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 09:49:27.204 UTC [284] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 09:49:27.205 UTC [284] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 09:49:27.205 UTC [284] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 09:49:27.206 UTC [284] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 09:49:27.206 UTC [284] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 09:49:27.207 UTC [284] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 09:49:27.207 UTC [284] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 09:49:27.208 UTC [284] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 09:49:27.208 UTC [284] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 09:49:27.209 UTC [284] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 09:49:27.209 UTC [284] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 09:49:27.209 UTC [284] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 09:49:27.209 UTC [284] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 09:49:27.210 UTC [284] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 09:49:27.210 UTC [284] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 09:49:27.211 UTC [284] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 09:49:27.211 UTC [284] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 09:49:27.212 UTC [284] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 09:49:27.212 UTC [284] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 09:49:27.213 UTC [284] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 09:49:27.213 UTC [284] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 09:49:27.213 UTC [284] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 09:49:27.213 UTC [284] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 09:49:27.241 UTC [284] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 09:49:27.513 UTC [284] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1UjIfb3aP5Y0i1D2tifUMee6gcWFUGePl9SvqGC.WHZxmnPVStLTe')
	                RETURNING id, username, email
	                
2025-04-19 09:49:27.514 UTC [284] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 09:49:27.514 UTC [284] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 09:49:27.515 UTC [284] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 09:49:27.522 UTC [284] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 09:49:27.523 UTC [284] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 09:49:27.526 UTC [284] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 09:49:27.529 UTC [284] NOTICE:  drop cascades to 2 other objects
2025-04-19 09:49:27.529 UTC [284] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 09:49:27.533 UTC [284] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 09:49:27.539 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 09:49:27.540 UTC [284] DEBUG:  building index "pg_toast_22129_index" on table "pg_toast_22129" serially
2025-04-19 09:49:27.541 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 09:49:27.542 UTC [284] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 09:49:27.542 UTC [284] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 09:49:27.543 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 09:49:27.543 UTC [284] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 09:49:27.543 UTC [284] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 09:49:27.543 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 09:49:27.544 UTC [284] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 09:49:27.544 UTC [284] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 09:49:27.544 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 09:49:27.546 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 09:49:27.546 UTC [284] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 09:49:27.546 UTC [284] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 09:49:27.547 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 09:49:27.547 UTC [284] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 09:49:27.547 UTC [284] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 09:49:27.548 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 09:49:27.549 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 09:49:27.550 UTC [284] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 09:49:27.550 UTC [284] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 09:49:27.551 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 09:49:27.552 UTC [284] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 09:49:27.552 UTC [284] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 09:49:27.553 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 09:49:27.555 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 09:49:27.556 UTC [284] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 09:49:27.556 UTC [284] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 09:49:27.558 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 09:49:27.561 UTC [284] DEBUG:  building index "pg_toast_22190_index" on table "pg_toast_22190" serially
2025-04-19 09:49:27.563 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 09:49:27.566 UTC [284] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 09:49:27.566 UTC [284] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 09:49:27.569 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 09:49:27.571 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 09:49:27.571 UTC [284] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 09:49:27.571 UTC [284] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 09:49:27.573 UTC [284] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 09:49:27.574 UTC [284] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 09:49:27.574 UTC [284] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 09:49:27.576 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 09:49:27.579 UTC [284] DEBUG:  building index "pg_toast_22223_index" on table "pg_toast_22223" serially
2025-04-19 09:49:27.580 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 09:49:27.581 UTC [284] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 09:49:27.581 UTC [284] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 09:49:27.582 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 09:49:27.583 UTC [284] DEBUG:  building index "pg_toast_22234_index" on table "pg_toast_22234" serially
2025-04-19 09:49:27.584 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 09:49:27.584 UTC [284] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 09:49:27.584 UTC [284] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 09:49:27.586 UTC [284] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 09:49:27.587 UTC [284] DEBUG:  building index "pg_toast_22257_index" on table "pg_toast_22257" serially
2025-04-19 09:49:27.588 UTC [284] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 09:49:27.589 UTC [284] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 09:49:27.589 UTC [284] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 09:49:27.590 UTC [284] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 09:49:27.590 UTC [284] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 09:49:27.591 UTC [284] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 09:49:27.591 UTC [284] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 09:49:27.591 UTC [284] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 09:49:27.592 UTC [284] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 09:49:27.592 UTC [284] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 09:49:27.592 UTC [284] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 09:49:27.593 UTC [284] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 09:49:27.593 UTC [284] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 09:49:27.594 UTC [284] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 09:49:27.594 UTC [284] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 09:49:27.595 UTC [284] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 09:49:27.595 UTC [284] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 09:49:27.595 UTC [284] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 09:49:27.595 UTC [284] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 09:49:27.597 UTC [284] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 09:49:27.597 UTC [284] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 09:49:27.598 UTC [284] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 09:49:27.598 UTC [284] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 09:49:27.599 UTC [284] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 09:49:27.599 UTC [284] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 09:49:27.605 UTC [284] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 09:49:27.863 UTC [284] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$iJOIbL0Q6aySorvignOg2eEc8Qhjs7DfS1z4H4GY3FRrA14AtYkti')
	                RETURNING id, username, email
	                
2025-04-19 09:49:27.864 UTC [284] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 09:49:27.864 UTC [284] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 10:59:28.845 UTC [291] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 10:59:29.107 UTC [291] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 10:59:32.625 UTC [284] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 10:59:32.942 UTC [284] DEBUG:  unexpected EOF on client connection
2025-04-19 10:59:35.846 UTC [292] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 10:59:35.874 UTC [292] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 10:59:35.894 UTC [292] NOTICE:  drop cascades to 2 other objects
2025-04-19 10:59:35.894 UTC [292] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 10:59:35.901 UTC [292] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 10:59:35.908 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 10:59:35.912 UTC [292] DEBUG:  building index "pg_toast_22294_index" on table "pg_toast_22294" serially
2025-04-19 10:59:35.916 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 10:59:35.917 UTC [292] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 10:59:35.917 UTC [292] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 10:59:35.918 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 10:59:35.918 UTC [292] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 10:59:35.919 UTC [292] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 10:59:35.919 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 10:59:35.920 UTC [292] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 10:59:35.920 UTC [292] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 10:59:35.921 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 10:59:35.922 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 10:59:35.922 UTC [292] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 10:59:35.922 UTC [292] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 10:59:35.923 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 10:59:35.923 UTC [292] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 10:59:35.923 UTC [292] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 10:59:35.924 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 10:59:35.926 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 10:59:35.926 UTC [292] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 10:59:35.926 UTC [292] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 10:59:35.927 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 10:59:35.928 UTC [292] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 10:59:35.928 UTC [292] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 10:59:35.933 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 10:59:35.934 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 10:59:35.934 UTC [292] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 10:59:35.934 UTC [292] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 10:59:35.937 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 10:59:35.939 UTC [292] DEBUG:  building index "pg_toast_22355_index" on table "pg_toast_22355" serially
2025-04-19 10:59:35.940 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 10:59:35.941 UTC [292] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 10:59:35.941 UTC [292] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 10:59:35.943 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 10:59:35.945 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 10:59:35.945 UTC [292] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 10:59:35.945 UTC [292] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 10:59:35.947 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 10:59:35.947 UTC [292] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 10:59:35.947 UTC [292] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 10:59:35.948 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 10:59:35.950 UTC [292] DEBUG:  building index "pg_toast_22388_index" on table "pg_toast_22388" serially
2025-04-19 10:59:35.950 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 10:59:35.951 UTC [292] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 10:59:35.951 UTC [292] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 10:59:35.952 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 10:59:35.953 UTC [292] DEBUG:  building index "pg_toast_22399_index" on table "pg_toast_22399" serially
2025-04-19 10:59:35.953 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 10:59:35.953 UTC [292] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 10:59:35.953 UTC [292] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 10:59:35.955 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 10:59:35.956 UTC [292] DEBUG:  building index "pg_toast_22422_index" on table "pg_toast_22422" serially
2025-04-19 10:59:35.957 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 10:59:35.958 UTC [292] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 10:59:35.958 UTC [292] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 10:59:35.959 UTC [292] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 10:59:35.959 UTC [292] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 10:59:35.960 UTC [292] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 10:59:35.960 UTC [292] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 10:59:35.961 UTC [292] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 10:59:35.961 UTC [292] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 10:59:35.962 UTC [292] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 10:59:35.962 UTC [292] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 10:59:35.963 UTC [292] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 10:59:35.963 UTC [292] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 10:59:35.965 UTC [292] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 10:59:35.965 UTC [292] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 10:59:35.967 UTC [292] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 10:59:35.967 UTC [292] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 10:59:35.968 UTC [292] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 10:59:35.968 UTC [292] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 10:59:35.968 UTC [292] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 10:59:35.969 UTC [292] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 10:59:35.969 UTC [292] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 10:59:35.970 UTC [292] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 10:59:35.970 UTC [292] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 10:59:35.971 UTC [292] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 10:59:35.971 UTC [292] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 10:59:35.984 UTC [292] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 10:59:36.627 UTC [292] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$w6IHzxjCO1n9hErELVKIce2ebpqLu5FfGAoeAT1XMS/lKdpP5ARBy')
	                RETURNING id, username, email
	                
2025-04-19 10:59:36.634 UTC [292] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 10:59:36.639 UTC [292] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 10:59:36.650 UTC [292] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 10:59:36.675 UTC [292] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 10:59:36.675 UTC [292] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 10:59:36.727 UTC [292] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 10:59:36.744 UTC [292] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 10:59:36.768 UTC [292] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 10:59:36.799 UTC [292] NOTICE:  drop cascades to 2 other objects
2025-04-19 10:59:36.799 UTC [292] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 10:59:36.823 UTC [292] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 10:59:36.847 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 10:59:36.854 UTC [292] DEBUG:  building index "pg_toast_22458_index" on table "pg_toast_22458" serially
2025-04-19 10:59:36.862 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 10:59:36.865 UTC [292] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 10:59:36.865 UTC [292] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 10:59:36.872 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 10:59:36.876 UTC [292] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 10:59:36.876 UTC [292] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 10:59:36.883 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 10:59:36.884 UTC [292] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 10:59:36.884 UTC [292] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 10:59:36.895 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 10:59:36.901 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 10:59:36.902 UTC [292] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 10:59:36.902 UTC [292] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 10:59:36.928 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 10:59:36.928 UTC [292] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 10:59:36.928 UTC [292] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 10:59:36.939 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 10:59:36.947 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 10:59:36.947 UTC [292] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 10:59:36.947 UTC [292] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 10:59:36.950 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 10:59:36.950 UTC [292] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 10:59:36.951 UTC [292] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 10:59:36.958 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 10:59:36.960 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 10:59:36.960 UTC [292] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 10:59:36.960 UTC [292] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 10:59:36.962 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 10:59:36.964 UTC [292] DEBUG:  building index "pg_toast_22519_index" on table "pg_toast_22519" serially
2025-04-19 10:59:36.965 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 10:59:36.966 UTC [292] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 10:59:36.966 UTC [292] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 10:59:36.971 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 10:59:36.973 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 10:59:36.974 UTC [292] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 10:59:36.974 UTC [292] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 10:59:36.975 UTC [292] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 10:59:36.976 UTC [292] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 10:59:36.976 UTC [292] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 10:59:36.978 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 10:59:36.985 UTC [292] DEBUG:  building index "pg_toast_22552_index" on table "pg_toast_22552" serially
2025-04-19 10:59:36.987 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 10:59:36.988 UTC [292] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 10:59:36.988 UTC [292] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 10:59:36.989 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 10:59:36.991 UTC [292] DEBUG:  building index "pg_toast_22563_index" on table "pg_toast_22563" serially
2025-04-19 10:59:36.992 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 10:59:36.993 UTC [292] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 10:59:36.993 UTC [292] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 10:59:36.995 UTC [292] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 10:59:36.998 UTC [292] DEBUG:  building index "pg_toast_22586_index" on table "pg_toast_22586" serially
2025-04-19 10:59:37.003 UTC [292] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 10:59:37.004 UTC [292] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 10:59:37.004 UTC [292] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 10:59:37.007 UTC [292] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 10:59:37.008 UTC [292] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 10:59:37.010 UTC [292] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 10:59:37.010 UTC [292] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 10:59:37.013 UTC [292] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 10:59:37.013 UTC [292] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 10:59:37.014 UTC [292] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 10:59:37.014 UTC [292] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 10:59:37.016 UTC [292] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 10:59:37.016 UTC [292] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 10:59:37.017 UTC [292] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 10:59:37.017 UTC [292] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 10:59:37.019 UTC [292] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 10:59:37.019 UTC [292] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 10:59:37.020 UTC [292] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 10:59:37.020 UTC [292] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 10:59:37.023 UTC [292] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 10:59:37.023 UTC [292] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 10:59:37.025 UTC [292] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 10:59:37.025 UTC [292] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 10:59:37.027 UTC [292] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 10:59:37.027 UTC [292] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 10:59:37.048 UTC [292] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 10:59:37.318 UTC [292] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$afdA9fjPakvrP7A0.E3rKONxbpNVV8te3mVnNy9jwA7kbl6Z9D/Sa')
	                RETURNING id, username, email
	                
2025-04-19 10:59:37.320 UTC [292] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 10:59:37.320 UTC [292] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 10:59:48.563 UTC [292] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 10:59:49.125 UTC [292] DEBUG:  unexpected EOF on client connection
2025-04-19 10:59:51.554 UTC [306] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 10:59:51.571 UTC [306] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 10:59:51.584 UTC [306] NOTICE:  drop cascades to 2 other objects
2025-04-19 10:59:51.584 UTC [306] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 10:59:51.588 UTC [306] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 10:59:51.592 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 10:59:51.595 UTC [306] DEBUG:  building index "pg_toast_22622_index" on table "pg_toast_22622" serially
2025-04-19 10:59:51.597 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 10:59:51.597 UTC [306] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 10:59:51.597 UTC [306] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 10:59:51.598 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 10:59:51.599 UTC [306] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 10:59:51.599 UTC [306] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 10:59:51.599 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 10:59:51.600 UTC [306] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 10:59:51.600 UTC [306] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 10:59:51.601 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 10:59:51.601 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 10:59:51.602 UTC [306] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 10:59:51.602 UTC [306] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 10:59:51.602 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 10:59:51.603 UTC [306] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 10:59:51.603 UTC [306] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 10:59:51.604 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 10:59:51.605 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 10:59:51.605 UTC [306] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 10:59:51.605 UTC [306] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 10:59:51.606 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 10:59:51.606 UTC [306] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 10:59:51.606 UTC [306] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 10:59:51.607 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 10:59:51.608 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 10:59:51.609 UTC [306] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 10:59:51.609 UTC [306] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 10:59:51.610 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 10:59:51.611 UTC [306] DEBUG:  building index "pg_toast_22683_index" on table "pg_toast_22683" serially
2025-04-19 10:59:51.612 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 10:59:51.612 UTC [306] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 10:59:51.612 UTC [306] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 10:59:51.614 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 10:59:51.615 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 10:59:51.615 UTC [306] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 10:59:51.615 UTC [306] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 10:59:51.616 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 10:59:51.616 UTC [306] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 10:59:51.616 UTC [306] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 10:59:51.617 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 10:59:51.619 UTC [306] DEBUG:  building index "pg_toast_22716_index" on table "pg_toast_22716" serially
2025-04-19 10:59:51.620 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 10:59:51.620 UTC [306] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 10:59:51.620 UTC [306] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 10:59:51.622 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 10:59:51.625 UTC [306] DEBUG:  building index "pg_toast_22727_index" on table "pg_toast_22727" serially
2025-04-19 10:59:51.627 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 10:59:51.628 UTC [306] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 10:59:51.628 UTC [306] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 10:59:51.633 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 10:59:51.636 UTC [306] DEBUG:  building index "pg_toast_22750_index" on table "pg_toast_22750" serially
2025-04-19 10:59:51.637 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 10:59:51.637 UTC [306] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 10:59:51.637 UTC [306] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 10:59:51.638 UTC [306] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 10:59:51.638 UTC [306] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 10:59:51.639 UTC [306] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 10:59:51.639 UTC [306] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 10:59:51.640 UTC [306] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 10:59:51.640 UTC [306] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 10:59:51.641 UTC [306] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 10:59:51.641 UTC [306] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 10:59:51.642 UTC [306] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 10:59:51.642 UTC [306] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 10:59:51.643 UTC [306] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 10:59:51.643 UTC [306] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 10:59:51.644 UTC [306] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 10:59:51.644 UTC [306] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 10:59:51.645 UTC [306] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 10:59:51.645 UTC [306] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 10:59:51.645 UTC [306] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 10:59:51.646 UTC [306] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 10:59:51.647 UTC [306] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 10:59:51.647 UTC [306] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 10:59:51.647 UTC [306] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 10:59:51.647 UTC [306] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 10:59:51.658 UTC [306] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 10:59:51.928 UTC [306] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$oAn7bYlAo8fvFqEI9sJG1eugIQVSrF6EXKzSCrOhKiBqSL79AjF7K')
	                RETURNING id, username, email
	                
2025-04-19 10:59:51.929 UTC [306] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 10:59:51.929 UTC [306] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 10:59:51.930 UTC [306] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 10:59:51.950 UTC [306] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 10:59:51.953 UTC [306] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 10:59:51.957 UTC [306] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 10:59:51.962 UTC [306] NOTICE:  drop cascades to 2 other objects
2025-04-19 10:59:51.962 UTC [306] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 10:59:51.971 UTC [306] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 10:59:51.975 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 10:59:51.976 UTC [306] DEBUG:  building index "pg_toast_22786_index" on table "pg_toast_22786" serially
2025-04-19 10:59:51.977 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 10:59:51.978 UTC [306] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 10:59:51.978 UTC [306] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 10:59:51.978 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 10:59:51.979 UTC [306] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 10:59:51.979 UTC [306] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 10:59:51.980 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 10:59:51.980 UTC [306] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 10:59:51.980 UTC [306] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 10:59:51.980 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 10:59:51.982 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 10:59:51.982 UTC [306] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 10:59:51.982 UTC [306] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 10:59:51.983 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 10:59:51.983 UTC [306] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 10:59:51.983 UTC [306] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 10:59:51.984 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 10:59:51.985 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 10:59:51.985 UTC [306] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 10:59:51.985 UTC [306] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 10:59:51.986 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 10:59:51.986 UTC [306] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 10:59:51.986 UTC [306] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 10:59:51.987 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 10:59:51.988 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 10:59:51.988 UTC [306] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 10:59:51.988 UTC [306] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 10:59:51.989 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 10:59:51.990 UTC [306] DEBUG:  building index "pg_toast_22847_index" on table "pg_toast_22847" serially
2025-04-19 10:59:51.991 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 10:59:51.992 UTC [306] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 10:59:51.992 UTC [306] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 10:59:51.993 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 10:59:51.994 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 10:59:51.994 UTC [306] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 10:59:51.994 UTC [306] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 10:59:51.995 UTC [306] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 10:59:51.995 UTC [306] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 10:59:51.995 UTC [306] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 10:59:51.996 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 10:59:51.997 UTC [306] DEBUG:  building index "pg_toast_22880_index" on table "pg_toast_22880" serially
2025-04-19 10:59:51.998 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 10:59:51.998 UTC [306] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 10:59:51.998 UTC [306] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 10:59:51.999 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 10:59:52.000 UTC [306] DEBUG:  building index "pg_toast_22891_index" on table "pg_toast_22891" serially
2025-04-19 10:59:52.000 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 10:59:52.000 UTC [306] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 10:59:52.000 UTC [306] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 10:59:52.002 UTC [306] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 10:59:52.003 UTC [306] DEBUG:  building index "pg_toast_22914_index" on table "pg_toast_22914" serially
2025-04-19 10:59:52.003 UTC [306] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 10:59:52.004 UTC [306] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 10:59:52.004 UTC [306] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 10:59:52.005 UTC [306] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 10:59:52.005 UTC [306] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 10:59:52.005 UTC [306] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 10:59:52.005 UTC [306] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 10:59:52.006 UTC [306] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 10:59:52.006 UTC [306] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 10:59:52.007 UTC [306] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 10:59:52.007 UTC [306] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 10:59:52.008 UTC [306] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 10:59:52.008 UTC [306] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 10:59:52.009 UTC [306] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 10:59:52.009 UTC [306] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 10:59:52.010 UTC [306] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 10:59:52.010 UTC [306] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 10:59:52.012 UTC [306] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 10:59:52.012 UTC [306] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 10:59:52.013 UTC [306] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 10:59:52.013 UTC [306] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 10:59:52.015 UTC [306] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 10:59:52.015 UTC [306] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 10:59:52.018 UTC [306] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 10:59:52.018 UTC [306] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 10:59:52.061 UTC [306] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 10:59:52.327 UTC [306] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$qfDFx0513DvYg85ue/SI7.D1oFgDFcUQ7czE9ODnzKqM5DGh2mEwm')
	                RETURNING id, username, email
	                
2025-04-19 10:59:52.327 UTC [306] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 10:59:52.328 UTC [306] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 12:11:53.142 UTC [314] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 12:11:59.775 UTC [306] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 12:12:00.278 UTC [306] DEBUG:  unexpected EOF on client connection
2025-04-19 12:12:02.632 UTC [322] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 12:12:02.646 UTC [322] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 12:12:02.659 UTC [322] NOTICE:  drop cascades to 2 other objects
2025-04-19 12:12:02.659 UTC [322] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 12:12:02.668 UTC [322] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 12:12:02.674 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 12:12:02.681 UTC [322] DEBUG:  building index "pg_toast_22950_index" on table "pg_toast_22950" serially
2025-04-19 12:12:02.683 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 12:12:02.684 UTC [322] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 12:12:02.685 UTC [322] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 12:12:02.686 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 12:12:02.686 UTC [322] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 12:12:02.687 UTC [322] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 12:12:02.688 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 12:12:02.688 UTC [322] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 12:12:02.688 UTC [322] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 12:12:02.689 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 12:12:02.691 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 12:12:02.691 UTC [322] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 12:12:02.691 UTC [322] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 12:12:02.692 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 12:12:02.695 UTC [322] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 12:12:02.695 UTC [322] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 12:12:02.706 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 12:12:02.710 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 12:12:02.710 UTC [322] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 12:12:02.710 UTC [322] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 12:12:02.715 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 12:12:02.717 UTC [322] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 12:12:02.717 UTC [322] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 12:12:02.724 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 12:12:02.730 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 12:12:02.730 UTC [322] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 12:12:02.730 UTC [322] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 12:12:02.732 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 12:12:02.737 UTC [322] DEBUG:  building index "pg_toast_23011_index" on table "pg_toast_23011" serially
2025-04-19 12:12:02.738 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 12:12:02.739 UTC [322] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 12:12:02.739 UTC [322] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 12:12:02.740 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 12:12:02.747 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 12:12:02.749 UTC [322] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 12:12:02.749 UTC [322] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 12:12:02.750 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 12:12:02.751 UTC [322] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 12:12:02.751 UTC [322] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 12:12:02.752 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 12:12:02.753 UTC [322] DEBUG:  building index "pg_toast_23044_index" on table "pg_toast_23044" serially
2025-04-19 12:12:02.754 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 12:12:02.754 UTC [322] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 12:12:02.754 UTC [322] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 12:12:02.755 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 12:12:02.756 UTC [322] DEBUG:  building index "pg_toast_23055_index" on table "pg_toast_23055" serially
2025-04-19 12:12:02.757 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 12:12:02.757 UTC [322] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 12:12:02.757 UTC [322] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 12:12:02.759 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 12:12:02.759 UTC [322] DEBUG:  building index "pg_toast_23078_index" on table "pg_toast_23078" serially
2025-04-19 12:12:02.760 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 12:12:02.760 UTC [322] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 12:12:02.760 UTC [322] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 12:12:02.761 UTC [322] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 12:12:02.761 UTC [322] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 12:12:02.762 UTC [322] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 12:12:02.762 UTC [322] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 12:12:02.763 UTC [322] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 12:12:02.763 UTC [322] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 12:12:02.764 UTC [322] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 12:12:02.764 UTC [322] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 12:12:02.765 UTC [322] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 12:12:02.765 UTC [322] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 12:12:02.766 UTC [322] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 12:12:02.766 UTC [322] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 12:12:02.767 UTC [322] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 12:12:02.767 UTC [322] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 12:12:02.770 UTC [322] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 12:12:02.770 UTC [322] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 12:12:02.772 UTC [322] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 12:12:02.772 UTC [322] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 12:12:02.773 UTC [322] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 12:12:02.773 UTC [322] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 12:12:02.774 UTC [322] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 12:12:02.774 UTC [322] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 12:12:02.788 UTC [322] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 12:12:03.062 UTC [322] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xrjOEuLceRbGeCXgkSmD.OcLIuO8p2UGq.QhaJLD7SGrmpoMGAsAm')
	                RETURNING id, username, email
	                
2025-04-19 12:12:03.063 UTC [322] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 12:12:03.063 UTC [322] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 12:12:03.064 UTC [322] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 12:12:03.072 UTC [322] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 12:12:03.074 UTC [322] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 12:12:03.076 UTC [322] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 12:12:03.080 UTC [322] NOTICE:  drop cascades to 2 other objects
2025-04-19 12:12:03.080 UTC [322] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 12:12:03.083 UTC [322] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 12:12:03.086 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 12:12:03.087 UTC [322] DEBUG:  building index "pg_toast_23114_index" on table "pg_toast_23114" serially
2025-04-19 12:12:03.088 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 12:12:03.088 UTC [322] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 12:12:03.088 UTC [322] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 12:12:03.089 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 12:12:03.089 UTC [322] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 12:12:03.089 UTC [322] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 12:12:03.090 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 12:12:03.090 UTC [322] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 12:12:03.090 UTC [322] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 12:12:03.091 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 12:12:03.092 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 12:12:03.092 UTC [322] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 12:12:03.092 UTC [322] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 12:12:03.093 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 12:12:03.093 UTC [322] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 12:12:03.093 UTC [322] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 12:12:03.094 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 12:12:03.095 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 12:12:03.096 UTC [322] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 12:12:03.096 UTC [322] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 12:12:03.097 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 12:12:03.098 UTC [322] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 12:12:03.098 UTC [322] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 12:12:03.100 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 12:12:03.102 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 12:12:03.102 UTC [322] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 12:12:03.102 UTC [322] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 12:12:03.105 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 12:12:03.109 UTC [322] DEBUG:  building index "pg_toast_23175_index" on table "pg_toast_23175" serially
2025-04-19 12:12:03.111 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 12:12:03.111 UTC [322] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 12:12:03.111 UTC [322] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 12:12:03.115 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 12:12:03.117 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 12:12:03.118 UTC [322] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 12:12:03.118 UTC [322] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 12:12:03.123 UTC [322] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 12:12:03.124 UTC [322] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 12:12:03.124 UTC [322] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 12:12:03.126 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 12:12:03.128 UTC [322] DEBUG:  building index "pg_toast_23208_index" on table "pg_toast_23208" serially
2025-04-19 12:12:03.129 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 12:12:03.130 UTC [322] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 12:12:03.130 UTC [322] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 12:12:03.131 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 12:12:03.132 UTC [322] DEBUG:  building index "pg_toast_23219_index" on table "pg_toast_23219" serially
2025-04-19 12:12:03.133 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 12:12:03.133 UTC [322] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 12:12:03.133 UTC [322] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 12:12:03.135 UTC [322] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 12:12:03.137 UTC [322] DEBUG:  building index "pg_toast_23242_index" on table "pg_toast_23242" serially
2025-04-19 12:12:03.138 UTC [322] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 12:12:03.139 UTC [322] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 12:12:03.139 UTC [322] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 12:12:03.140 UTC [322] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 12:12:03.140 UTC [322] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 12:12:03.141 UTC [322] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 12:12:03.141 UTC [322] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 12:12:03.142 UTC [322] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 12:12:03.142 UTC [322] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 12:12:03.144 UTC [322] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 12:12:03.144 UTC [322] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 12:12:03.144 UTC [322] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 12:12:03.144 UTC [322] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 12:12:03.145 UTC [322] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 12:12:03.145 UTC [322] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 12:12:03.146 UTC [322] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 12:12:03.146 UTC [322] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 12:12:03.147 UTC [322] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 12:12:03.147 UTC [322] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 12:12:03.148 UTC [322] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 12:12:03.148 UTC [322] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 12:12:03.149 UTC [322] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 12:12:03.149 UTC [322] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 12:12:03.150 UTC [322] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 12:12:03.150 UTC [322] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 12:12:03.158 UTC [322] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 12:12:03.405 UTC [322] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$q41Hjg/r2TYd9S09qvKAm.fIjmeN6rhNNBl0pO6BKwLcTxGgOcyoe')
	                RETURNING id, username, email
	                
2025-04-19 12:12:03.405 UTC [322] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 12:12:03.405 UTC [322] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 12:12:16.111 UTC [322] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 12:12:16.575 UTC [322] DEBUG:  unexpected EOF on client connection
2025-04-19 12:12:18.625 UTC [330] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 12:12:18.634 UTC [330] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 12:12:18.649 UTC [330] NOTICE:  drop cascades to 2 other objects
2025-04-19 12:12:18.649 UTC [330] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 12:12:18.656 UTC [330] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 12:12:18.659 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 12:12:18.661 UTC [330] DEBUG:  building index "pg_toast_23278_index" on table "pg_toast_23278" serially
2025-04-19 12:12:18.662 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 12:12:18.663 UTC [330] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 12:12:18.663 UTC [330] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 12:12:18.664 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 12:12:18.664 UTC [330] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 12:12:18.664 UTC [330] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 12:12:18.665 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 12:12:18.666 UTC [330] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 12:12:18.666 UTC [330] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 12:12:18.666 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 12:12:18.667 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 12:12:18.668 UTC [330] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 12:12:18.668 UTC [330] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 12:12:18.668 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 12:12:18.668 UTC [330] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 12:12:18.668 UTC [330] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 12:12:18.669 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 12:12:18.670 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 12:12:18.670 UTC [330] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 12:12:18.670 UTC [330] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 12:12:18.671 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 12:12:18.671 UTC [330] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 12:12:18.671 UTC [330] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 12:12:18.673 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 12:12:18.673 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 12:12:18.674 UTC [330] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 12:12:18.674 UTC [330] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 12:12:18.675 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 12:12:18.677 UTC [330] DEBUG:  building index "pg_toast_23339_index" on table "pg_toast_23339" serially
2025-04-19 12:12:18.678 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 12:12:18.678 UTC [330] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 12:12:18.678 UTC [330] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 12:12:18.679 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 12:12:18.680 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 12:12:18.680 UTC [330] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 12:12:18.680 UTC [330] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 12:12:18.681 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 12:12:18.681 UTC [330] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 12:12:18.681 UTC [330] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 12:12:18.682 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 12:12:18.683 UTC [330] DEBUG:  building index "pg_toast_23372_index" on table "pg_toast_23372" serially
2025-04-19 12:12:18.684 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 12:12:18.684 UTC [330] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 12:12:18.684 UTC [330] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 12:12:18.685 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 12:12:18.686 UTC [330] DEBUG:  building index "pg_toast_23383_index" on table "pg_toast_23383" serially
2025-04-19 12:12:18.687 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 12:12:18.687 UTC [330] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 12:12:18.687 UTC [330] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 12:12:18.688 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 12:12:18.689 UTC [330] DEBUG:  building index "pg_toast_23406_index" on table "pg_toast_23406" serially
2025-04-19 12:12:18.690 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 12:12:18.690 UTC [330] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 12:12:18.690 UTC [330] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 12:12:18.691 UTC [330] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 12:12:18.691 UTC [330] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 12:12:18.692 UTC [330] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 12:12:18.692 UTC [330] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 12:12:18.693 UTC [330] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 12:12:18.693 UTC [330] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 12:12:18.694 UTC [330] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 12:12:18.694 UTC [330] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 12:12:18.694 UTC [330] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 12:12:18.694 UTC [330] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 12:12:18.695 UTC [330] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 12:12:18.695 UTC [330] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 12:12:18.696 UTC [330] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 12:12:18.696 UTC [330] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 12:12:18.697 UTC [330] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 12:12:18.697 UTC [330] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 12:12:18.698 UTC [330] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 12:12:18.698 UTC [330] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 12:12:18.698 UTC [330] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 12:12:18.698 UTC [330] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 12:12:18.699 UTC [330] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 12:12:18.699 UTC [330] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 12:12:18.722 UTC [330] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 13:32:09.822 UTC [330] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$9dj575U93bNgp7MHEDA22OU7Ur4g8xwAnK.ERlI80v8s2rBD8uDeS')
	                RETURNING id, username, email
	                
2025-04-19 13:32:09.827 UTC [330] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 13:32:09.828 UTC [330] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 13:32:09.838 UTC [330] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 13:32:09.897 UTC [330] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 13:32:09.902 UTC [330] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 13:32:09.907 UTC [330] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 13:32:09.914 UTC [330] NOTICE:  drop cascades to 2 other objects
2025-04-19 13:32:09.914 UTC [330] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 13:32:09.920 UTC [330] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 13:32:09.924 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 13:32:09.927 UTC [330] DEBUG:  building index "pg_toast_23442_index" on table "pg_toast_23442" serially
2025-04-19 13:32:09.928 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 13:32:09.929 UTC [330] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 13:32:09.929 UTC [330] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 13:32:09.930 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 13:32:09.930 UTC [330] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 13:32:09.930 UTC [330] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 13:32:09.931 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 13:32:09.931 UTC [330] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 13:32:09.931 UTC [330] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 13:32:09.932 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 13:32:09.936 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 13:32:09.937 UTC [330] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 13:32:09.937 UTC [330] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 13:32:09.938 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 13:32:09.938 UTC [330] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 13:32:09.938 UTC [330] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 13:32:09.940 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 13:32:09.943 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 13:32:09.943 UTC [330] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 13:32:09.943 UTC [330] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 13:32:09.945 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 13:32:09.945 UTC [330] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 13:32:09.945 UTC [330] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 13:32:09.947 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 13:32:09.950 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 13:32:09.950 UTC [330] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 13:32:09.950 UTC [330] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 13:32:09.952 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 13:32:09.954 UTC [330] DEBUG:  building index "pg_toast_23503_index" on table "pg_toast_23503" serially
2025-04-19 13:32:09.955 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 13:32:09.955 UTC [330] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 13:32:09.955 UTC [330] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 13:32:09.957 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 13:32:09.959 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 13:32:09.959 UTC [330] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 13:32:09.959 UTC [330] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 13:32:09.961 UTC [330] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 13:32:09.961 UTC [330] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 13:32:09.961 UTC [330] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 13:32:09.962 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 13:32:09.964 UTC [330] DEBUG:  building index "pg_toast_23536_index" on table "pg_toast_23536" serially
2025-04-19 13:32:09.965 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 13:32:09.965 UTC [330] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 13:32:09.965 UTC [330] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 13:32:09.966 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 13:32:09.967 UTC [330] DEBUG:  building index "pg_toast_23547_index" on table "pg_toast_23547" serially
2025-04-19 13:32:09.968 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 13:32:09.968 UTC [330] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 13:32:09.968 UTC [330] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 13:32:09.970 UTC [330] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 13:32:09.971 UTC [330] DEBUG:  building index "pg_toast_23570_index" on table "pg_toast_23570" serially
2025-04-19 13:32:09.972 UTC [330] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 13:32:09.972 UTC [330] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 13:32:09.972 UTC [330] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 13:32:09.973 UTC [330] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 13:32:09.973 UTC [330] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 13:32:09.974 UTC [330] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 13:32:09.974 UTC [330] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 13:32:09.974 UTC [330] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 13:32:09.974 UTC [330] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 13:32:09.976 UTC [330] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 13:32:09.976 UTC [330] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 13:32:09.976 UTC [330] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 13:32:09.976 UTC [330] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 13:32:09.977 UTC [330] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 13:32:09.977 UTC [330] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 13:32:09.978 UTC [330] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 13:32:09.978 UTC [330] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 13:32:09.979 UTC [330] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 13:32:09.979 UTC [330] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 13:32:09.979 UTC [330] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 13:32:09.979 UTC [330] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 13:32:09.980 UTC [330] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 13:32:09.980 UTC [330] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 13:32:09.981 UTC [330] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 13:32:09.981 UTC [330] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 13:32:09.992 UTC [330] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 13:32:10.014 UTC [331] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 13:32:10.258 UTC [331] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 13:32:10.260 UTC [330] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$y6zl.VMvSQJV705yyFSBKuhnbD7WDUJcP21qwWZgpeG6sAd29nAcG')
	                RETURNING id, username, email
	                
2025-04-19 13:32:10.261 UTC [330] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 13:32:10.261 UTC [330] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 13:32:22.358 UTC [330] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 13:32:22.800 UTC [330] DEBUG:  unexpected EOF on client connection
2025-04-19 13:32:26.947 UTC [346] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 13:32:26.957 UTC [346] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 13:32:26.963 UTC [346] NOTICE:  drop cascades to 2 other objects
2025-04-19 13:32:26.963 UTC [346] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 13:32:26.972 UTC [346] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 13:32:26.981 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 13:32:26.989 UTC [346] DEBUG:  building index "pg_toast_23607_index" on table "pg_toast_23607" serially
2025-04-19 13:32:26.991 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 13:32:26.992 UTC [346] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 13:32:26.992 UTC [346] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 13:32:26.993 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 13:32:26.994 UTC [346] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 13:32:26.994 UTC [346] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 13:32:26.994 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 13:32:26.995 UTC [346] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 13:32:26.995 UTC [346] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 13:32:26.995 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 13:32:26.996 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 13:32:26.997 UTC [346] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 13:32:26.997 UTC [346] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 13:32:26.997 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 13:32:26.998 UTC [346] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 13:32:26.998 UTC [346] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 13:32:26.999 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 13:32:27.000 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 13:32:27.000 UTC [346] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 13:32:27.000 UTC [346] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 13:32:27.001 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 13:32:27.001 UTC [346] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 13:32:27.001 UTC [346] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 13:32:27.003 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 13:32:27.004 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 13:32:27.004 UTC [346] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 13:32:27.004 UTC [346] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 13:32:27.005 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 13:32:27.007 UTC [346] DEBUG:  building index "pg_toast_23668_index" on table "pg_toast_23668" serially
2025-04-19 13:32:27.008 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 13:32:27.008 UTC [346] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 13:32:27.008 UTC [346] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 13:32:27.010 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 13:32:27.010 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 13:32:27.011 UTC [346] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 13:32:27.011 UTC [346] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 13:32:27.012 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 13:32:27.012 UTC [346] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 13:32:27.012 UTC [346] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 13:32:27.013 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 13:32:27.014 UTC [346] DEBUG:  building index "pg_toast_23701_index" on table "pg_toast_23701" serially
2025-04-19 13:32:27.015 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 13:32:27.016 UTC [346] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 13:32:27.016 UTC [346] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 13:32:27.016 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 13:32:27.017 UTC [346] DEBUG:  building index "pg_toast_23712_index" on table "pg_toast_23712" serially
2025-04-19 13:32:27.018 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 13:32:27.019 UTC [346] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 13:32:27.019 UTC [346] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 13:32:27.020 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 13:32:27.021 UTC [346] DEBUG:  building index "pg_toast_23735_index" on table "pg_toast_23735" serially
2025-04-19 13:32:27.022 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 13:32:27.022 UTC [346] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 13:32:27.022 UTC [346] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 13:32:27.023 UTC [346] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 13:32:27.023 UTC [346] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 13:32:27.024 UTC [346] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 13:32:27.024 UTC [346] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 13:32:27.025 UTC [346] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 13:32:27.025 UTC [346] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 13:32:27.025 UTC [346] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 13:32:27.025 UTC [346] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 13:32:27.027 UTC [346] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 13:32:27.027 UTC [346] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 13:32:27.028 UTC [346] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 13:32:27.028 UTC [346] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 13:32:27.028 UTC [346] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 13:32:27.029 UTC [346] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 13:32:27.029 UTC [346] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 13:32:27.029 UTC [346] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 13:32:27.030 UTC [346] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 13:32:27.030 UTC [346] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 13:32:27.031 UTC [346] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 13:32:27.031 UTC [346] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 13:32:27.032 UTC [346] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 13:32:27.032 UTC [346] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 13:32:27.042 UTC [346] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 13:32:27.311 UTC [346] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$SKgLrEO1WyjZQcuSAPyhlOnUUwssVKNgPpl6MYaSO.XYAumL8fXIO')
	                RETURNING id, username, email
	                
2025-04-19 13:32:27.311 UTC [346] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 13:32:27.312 UTC [346] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 13:32:27.312 UTC [346] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 13:32:27.320 UTC [346] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 13:32:27.321 UTC [346] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 13:32:27.325 UTC [346] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 13:32:27.330 UTC [346] NOTICE:  drop cascades to 2 other objects
2025-04-19 13:32:27.330 UTC [346] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 13:32:27.334 UTC [346] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 13:32:27.337 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 13:32:27.338 UTC [346] DEBUG:  building index "pg_toast_23771_index" on table "pg_toast_23771" serially
2025-04-19 13:32:27.339 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 13:32:27.339 UTC [346] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 13:32:27.339 UTC [346] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 13:32:27.340 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 13:32:27.340 UTC [346] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 13:32:27.340 UTC [346] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 13:32:27.341 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 13:32:27.341 UTC [346] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 13:32:27.341 UTC [346] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 13:32:27.342 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 13:32:27.343 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 13:32:27.343 UTC [346] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 13:32:27.343 UTC [346] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 13:32:27.344 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 13:32:27.344 UTC [346] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 13:32:27.344 UTC [346] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 13:32:27.345 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 13:32:27.346 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 13:32:27.347 UTC [346] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 13:32:27.347 UTC [346] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 13:32:27.349 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 13:32:27.350 UTC [346] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 13:32:27.350 UTC [346] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 13:32:27.353 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 13:32:27.355 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 13:32:27.355 UTC [346] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 13:32:27.355 UTC [346] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 13:32:27.357 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 13:32:27.358 UTC [346] DEBUG:  building index "pg_toast_23832_index" on table "pg_toast_23832" serially
2025-04-19 13:32:27.360 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 13:32:27.361 UTC [346] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 13:32:27.361 UTC [346] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 13:32:27.363 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 13:32:27.363 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 13:32:27.364 UTC [346] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 13:32:27.364 UTC [346] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 13:32:27.364 UTC [346] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 13:32:27.365 UTC [346] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 13:32:27.365 UTC [346] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 13:32:27.366 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 13:32:27.367 UTC [346] DEBUG:  building index "pg_toast_23865_index" on table "pg_toast_23865" serially
2025-04-19 13:32:27.369 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 13:32:27.370 UTC [346] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 13:32:27.370 UTC [346] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 13:32:27.370 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 13:32:27.372 UTC [346] DEBUG:  building index "pg_toast_23876_index" on table "pg_toast_23876" serially
2025-04-19 13:32:27.373 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 13:32:27.374 UTC [346] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 13:32:27.374 UTC [346] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 13:32:27.375 UTC [346] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 13:32:27.376 UTC [346] DEBUG:  building index "pg_toast_23899_index" on table "pg_toast_23899" serially
2025-04-19 13:32:27.378 UTC [346] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 13:32:27.379 UTC [346] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 13:32:27.379 UTC [346] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 13:32:27.380 UTC [346] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 13:32:27.381 UTC [346] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 13:32:27.382 UTC [346] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 13:32:27.382 UTC [346] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 13:32:27.383 UTC [346] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 13:32:27.383 UTC [346] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 13:32:27.384 UTC [346] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 13:32:27.384 UTC [346] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 13:32:27.385 UTC [346] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 13:32:27.385 UTC [346] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 13:32:27.387 UTC [346] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 13:32:27.387 UTC [346] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 13:32:27.390 UTC [346] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 13:32:27.390 UTC [346] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 13:32:27.394 UTC [346] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 13:32:27.394 UTC [346] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 13:32:27.396 UTC [346] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 13:32:27.396 UTC [346] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 13:32:27.398 UTC [346] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 13:32:27.398 UTC [346] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 13:32:27.399 UTC [346] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 13:32:27.399 UTC [346] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 13:32:27.415 UTC [346] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 13:32:27.687 UTC [346] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$VlHeZo.3WoYgjSkIje048uJojlNYFC2MSk/uAARkwe9PIO8iOTum6')
	                RETURNING id, username, email
	                
2025-04-19 13:32:27.688 UTC [346] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 13:32:27.689 UTC [346] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 13:32:38.754 UTC [346] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 13:32:39.044 UTC [346] DEBUG:  unexpected EOF on client connection
2025-04-19 14:37:46.081 UTC [354] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 14:37:47.366 UTC [355] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 14:37:47.379 UTC [355] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 14:37:47.391 UTC [355] NOTICE:  drop cascades to 2 other objects
2025-04-19 14:37:47.391 UTC [355] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 14:37:47.398 UTC [355] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 14:37:47.403 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 14:37:47.407 UTC [355] DEBUG:  building index "pg_toast_23935_index" on table "pg_toast_23935" serially
2025-04-19 14:37:47.410 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 14:37:47.411 UTC [355] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 14:37:47.411 UTC [355] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 14:37:47.413 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 14:37:47.413 UTC [355] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 14:37:47.414 UTC [355] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 14:37:47.416 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 14:37:47.416 UTC [355] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 14:37:47.417 UTC [355] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 14:37:47.418 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 14:37:47.420 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 14:37:47.420 UTC [355] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 14:37:47.420 UTC [355] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 14:37:47.422 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 14:37:47.422 UTC [355] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 14:37:47.422 UTC [355] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 14:37:47.423 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 14:37:47.425 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 14:37:47.425 UTC [355] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 14:37:47.425 UTC [355] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 14:37:47.426 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 14:37:47.427 UTC [355] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 14:37:47.427 UTC [355] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 14:37:47.428 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 14:37:47.430 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 14:37:47.430 UTC [355] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 14:37:47.430 UTC [355] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 14:37:47.432 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 14:37:47.465 UTC [355] DEBUG:  building index "pg_toast_23996_index" on table "pg_toast_23996" serially
2025-04-19 14:37:47.473 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 14:37:47.475 UTC [355] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 14:37:47.475 UTC [355] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 14:37:47.482 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 14:37:47.485 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 14:37:47.486 UTC [355] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 14:37:47.486 UTC [355] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 14:37:47.487 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 14:37:47.488 UTC [355] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 14:37:47.488 UTC [355] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 14:37:47.492 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 14:37:47.496 UTC [355] DEBUG:  building index "pg_toast_24029_index" on table "pg_toast_24029" serially
2025-04-19 14:37:47.499 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 14:37:47.500 UTC [355] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 14:37:47.500 UTC [355] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 14:37:47.502 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 14:37:47.505 UTC [355] DEBUG:  building index "pg_toast_24040_index" on table "pg_toast_24040" serially
2025-04-19 14:37:47.509 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 14:37:47.510 UTC [355] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 14:37:47.510 UTC [355] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 14:37:47.513 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 14:37:47.515 UTC [355] DEBUG:  building index "pg_toast_24063_index" on table "pg_toast_24063" serially
2025-04-19 14:37:47.516 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 14:37:47.516 UTC [355] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 14:37:47.516 UTC [355] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 14:37:47.517 UTC [355] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 14:37:47.517 UTC [355] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 14:37:47.519 UTC [355] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 14:37:47.519 UTC [355] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 14:37:47.520 UTC [355] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 14:37:47.520 UTC [355] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 14:37:47.522 UTC [355] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 14:37:47.522 UTC [355] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 14:37:47.524 UTC [355] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 14:37:47.524 UTC [355] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 14:37:47.526 UTC [355] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 14:37:47.526 UTC [355] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 14:37:47.527 UTC [355] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 14:37:47.527 UTC [355] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 14:37:47.528 UTC [355] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 14:37:47.528 UTC [355] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 14:37:47.529 UTC [355] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 14:37:47.529 UTC [355] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 14:37:47.530 UTC [355] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 14:37:47.530 UTC [355] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 14:37:47.532 UTC [355] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 14:37:47.532 UTC [355] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 14:37:47.551 UTC [355] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 14:37:47.827 UTC [355] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$hpeHZzSKXBG8qYjQXWEhT.SpWAQ4qvZrvzJRQ10CKvHixJCPru4yK')
	                RETURNING id, username, email
	                
2025-04-19 14:37:47.828 UTC [355] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 14:37:47.828 UTC [355] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 14:37:47.829 UTC [355] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 14:37:47.837 UTC [355] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 14:37:47.844 UTC [355] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 14:37:47.847 UTC [355] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 14:37:47.853 UTC [355] NOTICE:  drop cascades to 2 other objects
2025-04-19 14:37:47.853 UTC [355] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 14:37:47.860 UTC [355] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 14:37:47.866 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 14:37:47.867 UTC [355] DEBUG:  building index "pg_toast_24099_index" on table "pg_toast_24099" serially
2025-04-19 14:37:47.869 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 14:37:47.870 UTC [355] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 14:37:47.870 UTC [355] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 14:37:47.871 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 14:37:47.871 UTC [355] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 14:37:47.871 UTC [355] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 14:37:47.872 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 14:37:47.872 UTC [355] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 14:37:47.872 UTC [355] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 14:37:47.873 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 14:37:47.874 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 14:37:47.874 UTC [355] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 14:37:47.874 UTC [355] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 14:37:47.875 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 14:37:47.875 UTC [355] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 14:37:47.875 UTC [355] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 14:37:47.876 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 14:37:47.877 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 14:37:47.877 UTC [355] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 14:37:47.877 UTC [355] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 14:37:47.878 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 14:37:47.879 UTC [355] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 14:37:47.879 UTC [355] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 14:37:47.880 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 14:37:47.881 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 14:37:47.882 UTC [355] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 14:37:47.882 UTC [355] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 14:37:47.883 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 14:37:47.885 UTC [355] DEBUG:  building index "pg_toast_24160_index" on table "pg_toast_24160" serially
2025-04-19 14:37:47.885 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 14:37:47.886 UTC [355] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 14:37:47.886 UTC [355] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 14:37:47.887 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 14:37:47.888 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 14:37:47.888 UTC [355] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 14:37:47.888 UTC [355] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 14:37:47.889 UTC [355] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 14:37:47.889 UTC [355] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 14:37:47.889 UTC [355] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 14:37:47.890 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 14:37:47.891 UTC [355] DEBUG:  building index "pg_toast_24193_index" on table "pg_toast_24193" serially
2025-04-19 14:37:47.892 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 14:37:47.892 UTC [355] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 14:37:47.892 UTC [355] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 14:37:47.893 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 14:37:47.894 UTC [355] DEBUG:  building index "pg_toast_24204_index" on table "pg_toast_24204" serially
2025-04-19 14:37:47.895 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 14:37:47.895 UTC [355] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 14:37:47.895 UTC [355] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 14:37:47.896 UTC [355] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 14:37:47.897 UTC [355] DEBUG:  building index "pg_toast_24227_index" on table "pg_toast_24227" serially
2025-04-19 14:37:47.898 UTC [355] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 14:37:47.898 UTC [355] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 14:37:47.898 UTC [355] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 14:37:47.899 UTC [355] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 14:37:47.899 UTC [355] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 14:37:47.900 UTC [355] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 14:37:47.900 UTC [355] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 14:37:47.901 UTC [355] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 14:37:47.901 UTC [355] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 14:37:47.902 UTC [355] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 14:37:47.902 UTC [355] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 14:37:47.903 UTC [355] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 14:37:47.903 UTC [355] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 14:37:47.904 UTC [355] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 14:37:47.904 UTC [355] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 14:37:47.904 UTC [355] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 14:37:47.904 UTC [355] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 14:37:47.905 UTC [355] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 14:37:47.905 UTC [355] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 14:37:47.906 UTC [355] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 14:37:47.906 UTC [355] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 14:37:47.907 UTC [355] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 14:37:47.907 UTC [355] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 14:37:47.909 UTC [355] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 14:37:47.909 UTC [355] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 14:37:47.917 UTC [355] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 14:37:48.159 UTC [355] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RHLByk9BGD8EU3zqTe9vxull.PfKVQXud1g1Oa/kbgulBl00vDILm')
	                RETURNING id, username, email
	                
2025-04-19 14:37:48.160 UTC [355] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 14:37:48.161 UTC [355] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 14:38:01.085 UTC [355] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 14:38:01.404 UTC [355] DEBUG:  unexpected EOF on client connection
2025-04-19 14:38:04.300 UTC [370] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 14:38:04.314 UTC [370] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 14:38:04.333 UTC [370] NOTICE:  drop cascades to 2 other objects
2025-04-19 14:38:04.333 UTC [370] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 14:38:04.337 UTC [370] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 14:38:04.344 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 14:38:04.347 UTC [370] DEBUG:  building index "pg_toast_24263_index" on table "pg_toast_24263" serially
2025-04-19 14:38:04.351 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 14:38:04.351 UTC [370] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 14:38:04.351 UTC [370] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 14:38:04.353 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 14:38:04.353 UTC [370] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 14:38:04.353 UTC [370] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 14:38:04.354 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 14:38:04.354 UTC [370] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 14:38:04.354 UTC [370] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 14:38:04.355 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 14:38:04.357 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 14:38:04.357 UTC [370] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 14:38:04.357 UTC [370] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 14:38:04.358 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 14:38:04.358 UTC [370] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 14:38:04.358 UTC [370] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 14:38:04.359 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 14:38:04.360 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 14:38:04.360 UTC [370] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 14:38:04.360 UTC [370] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 14:38:04.361 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 14:38:04.361 UTC [370] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 14:38:04.361 UTC [370] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 14:38:04.363 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 14:38:04.364 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 14:38:04.364 UTC [370] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 14:38:04.364 UTC [370] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 14:38:04.365 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 14:38:04.367 UTC [370] DEBUG:  building index "pg_toast_24324_index" on table "pg_toast_24324" serially
2025-04-19 14:38:04.367 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 14:38:04.368 UTC [370] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 14:38:04.368 UTC [370] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 14:38:04.371 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 14:38:04.373 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 14:38:04.373 UTC [370] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 14:38:04.373 UTC [370] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 14:38:04.374 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 14:38:04.374 UTC [370] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 14:38:04.374 UTC [370] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 14:38:04.377 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 14:38:04.380 UTC [370] DEBUG:  building index "pg_toast_24357_index" on table "pg_toast_24357" serially
2025-04-19 14:38:04.383 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 14:38:04.383 UTC [370] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 14:38:04.383 UTC [370] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 14:38:04.384 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 14:38:04.387 UTC [370] DEBUG:  building index "pg_toast_24368_index" on table "pg_toast_24368" serially
2025-04-19 14:38:04.388 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 14:38:04.388 UTC [370] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 14:38:04.388 UTC [370] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 14:38:04.390 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 14:38:04.391 UTC [370] DEBUG:  building index "pg_toast_24391_index" on table "pg_toast_24391" serially
2025-04-19 14:38:04.392 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 14:38:04.392 UTC [370] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 14:38:04.392 UTC [370] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 14:38:04.393 UTC [370] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 14:38:04.393 UTC [370] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 14:38:04.394 UTC [370] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 14:38:04.394 UTC [370] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 14:38:04.395 UTC [370] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 14:38:04.395 UTC [370] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 14:38:04.396 UTC [370] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 14:38:04.396 UTC [370] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 14:38:04.397 UTC [370] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 14:38:04.397 UTC [370] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 14:38:04.398 UTC [370] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 14:38:04.398 UTC [370] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 14:38:04.399 UTC [370] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 14:38:04.399 UTC [370] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 14:38:04.400 UTC [370] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 14:38:04.400 UTC [370] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 14:38:04.401 UTC [370] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 14:38:04.401 UTC [370] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 14:38:04.401 UTC [370] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 14:38:04.401 UTC [370] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 14:38:04.403 UTC [370] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 14:38:04.403 UTC [370] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 14:38:04.421 UTC [370] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 14:38:04.710 UTC [370] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$0qeuAHf163B2pR1jY9p8/.lT4gCkEAj6EBfnPsrlXo5/Fpqs.foZS')
	                RETURNING id, username, email
	                
2025-04-19 14:38:04.711 UTC [370] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 14:38:04.712 UTC [370] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 14:38:04.712 UTC [370] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 14:38:04.728 UTC [370] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 14:38:04.732 UTC [370] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 14:38:04.742 UTC [370] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 14:38:04.759 UTC [370] NOTICE:  drop cascades to 2 other objects
2025-04-19 14:38:04.759 UTC [370] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 14:38:04.767 UTC [370] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 14:38:04.771 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 14:38:04.775 UTC [370] DEBUG:  building index "pg_toast_24427_index" on table "pg_toast_24427" serially
2025-04-19 14:38:04.778 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 14:38:04.779 UTC [370] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 14:38:04.779 UTC [370] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 14:38:04.780 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 14:38:04.780 UTC [370] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 14:38:04.780 UTC [370] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 14:38:04.781 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 14:38:04.781 UTC [370] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 14:38:04.781 UTC [370] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 14:38:04.782 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 14:38:04.783 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 14:38:04.783 UTC [370] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 14:38:04.783 UTC [370] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 14:38:04.784 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 14:38:04.784 UTC [370] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 14:38:04.784 UTC [370] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 14:38:04.785 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 14:38:04.786 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 14:38:04.786 UTC [370] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 14:38:04.786 UTC [370] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 14:38:04.787 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 14:38:04.787 UTC [370] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 14:38:04.787 UTC [370] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 14:38:04.788 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 14:38:04.789 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 14:38:04.789 UTC [370] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 14:38:04.789 UTC [370] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 14:38:04.791 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 14:38:04.792 UTC [370] DEBUG:  building index "pg_toast_24488_index" on table "pg_toast_24488" serially
2025-04-19 14:38:04.793 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 14:38:04.794 UTC [370] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 14:38:04.794 UTC [370] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 14:38:04.795 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 14:38:04.796 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 14:38:04.797 UTC [370] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 14:38:04.797 UTC [370] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 14:38:04.797 UTC [370] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 14:38:04.798 UTC [370] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 14:38:04.798 UTC [370] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 14:38:04.799 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 14:38:04.800 UTC [370] DEBUG:  building index "pg_toast_24521_index" on table "pg_toast_24521" serially
2025-04-19 14:38:04.802 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 14:38:04.803 UTC [370] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 14:38:04.803 UTC [370] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 14:38:04.804 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 14:38:04.805 UTC [370] DEBUG:  building index "pg_toast_24532_index" on table "pg_toast_24532" serially
2025-04-19 14:38:04.806 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 14:38:04.807 UTC [370] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 14:38:04.807 UTC [370] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 14:38:04.808 UTC [370] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 14:38:04.809 UTC [370] DEBUG:  building index "pg_toast_24555_index" on table "pg_toast_24555" serially
2025-04-19 14:38:04.810 UTC [370] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 14:38:04.811 UTC [370] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 14:38:04.811 UTC [370] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 14:38:04.812 UTC [370] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 14:38:04.812 UTC [370] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 14:38:04.813 UTC [370] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 14:38:04.813 UTC [370] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 14:38:04.814 UTC [370] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 14:38:04.814 UTC [370] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 14:38:04.815 UTC [370] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 14:38:04.815 UTC [370] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 14:38:04.816 UTC [370] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 14:38:04.816 UTC [370] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 14:38:04.818 UTC [370] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 14:38:04.818 UTC [370] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 14:38:04.819 UTC [370] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 14:38:04.819 UTC [370] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 14:38:04.820 UTC [370] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 14:38:04.820 UTC [370] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 14:38:04.821 UTC [370] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 14:38:04.821 UTC [370] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 14:38:04.822 UTC [370] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 14:38:04.822 UTC [370] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 14:38:04.823 UTC [370] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 14:38:04.823 UTC [370] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 14:38:04.830 UTC [370] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 14:38:05.094 UTC [370] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$TsIWSHLpaxXRHZawwL0gU..mrSnZ45LSY/e1oeo1SU.OdamDAtAfC')
	                RETURNING id, username, email
	                
2025-04-19 14:38:05.095 UTC [370] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 14:38:05.096 UTC [370] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:05:05.167 UTC [378] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 15:05:05.442 UTC [378] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 15:05:06.288 UTC [370] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 15:05:06.600 UTC [370] DEBUG:  unexpected EOF on client connection
2025-04-19 15:05:09.035 UTC [386] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:05:09.053 UTC [386] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:05:09.065 UTC [386] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:05:09.065 UTC [386] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:05:09.070 UTC [386] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:05:09.074 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:05:09.078 UTC [386] DEBUG:  building index "pg_toast_24592_index" on table "pg_toast_24592" serially
2025-04-19 15:05:09.080 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:05:09.080 UTC [386] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:05:09.080 UTC [386] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:05:09.081 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:05:09.082 UTC [386] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:05:09.082 UTC [386] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:05:09.083 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:05:09.083 UTC [386] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:05:09.083 UTC [386] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:05:09.084 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:05:09.085 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:05:09.086 UTC [386] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:05:09.086 UTC [386] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:05:09.087 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:05:09.087 UTC [386] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:05:09.087 UTC [386] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:05:09.088 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:05:09.089 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:05:09.089 UTC [386] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:05:09.089 UTC [386] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:05:09.090 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:05:09.090 UTC [386] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:05:09.090 UTC [386] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:05:09.092 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:05:09.093 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:05:09.093 UTC [386] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:05:09.093 UTC [386] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:05:09.095 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:05:09.097 UTC [386] DEBUG:  building index "pg_toast_24653_index" on table "pg_toast_24653" serially
2025-04-19 15:05:09.098 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:05:09.098 UTC [386] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:05:09.098 UTC [386] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:05:09.100 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:05:09.101 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:05:09.101 UTC [386] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:05:09.101 UTC [386] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:05:09.102 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:05:09.102 UTC [386] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:05:09.102 UTC [386] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:05:09.103 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:05:09.105 UTC [386] DEBUG:  building index "pg_toast_24686_index" on table "pg_toast_24686" serially
2025-04-19 15:05:09.105 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:05:09.106 UTC [386] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:05:09.106 UTC [386] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:05:09.107 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:05:09.108 UTC [386] DEBUG:  building index "pg_toast_24697_index" on table "pg_toast_24697" serially
2025-04-19 15:05:09.109 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:05:09.109 UTC [386] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:05:09.109 UTC [386] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:05:09.111 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:05:09.112 UTC [386] DEBUG:  building index "pg_toast_24720_index" on table "pg_toast_24720" serially
2025-04-19 15:05:09.113 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:05:09.113 UTC [386] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:05:09.113 UTC [386] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:05:09.114 UTC [386] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:05:09.114 UTC [386] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:05:09.115 UTC [386] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:05:09.116 UTC [386] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:05:09.116 UTC [386] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:05:09.116 UTC [386] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:05:09.118 UTC [386] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:05:09.118 UTC [386] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:05:09.118 UTC [386] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:05:09.118 UTC [386] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:05:09.120 UTC [386] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:05:09.120 UTC [386] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:05:09.120 UTC [386] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:05:09.121 UTC [386] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:05:09.122 UTC [386] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:05:09.122 UTC [386] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:05:09.123 UTC [386] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:05:09.123 UTC [386] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:05:09.124 UTC [386] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:05:09.124 UTC [386] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:05:09.125 UTC [386] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:05:09.125 UTC [386] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:05:09.139 UTC [386] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:05:09.418 UTC [386] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kxTY0EwguLFga9jlxtoIDOWY8vH2tvYA35tedlDab/jN27Tnn2mpi')
	                RETURNING id, username, email
	                
2025-04-19 15:05:09.419 UTC [386] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:05:09.419 UTC [386] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:05:09.420 UTC [386] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 15:05:09.429 UTC [386] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:05:09.437 UTC [386] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:05:09.441 UTC [386] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:05:09.453 UTC [386] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:05:09.453 UTC [386] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:05:09.458 UTC [386] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:05:09.461 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:05:09.463 UTC [386] DEBUG:  building index "pg_toast_24756_index" on table "pg_toast_24756" serially
2025-04-19 15:05:09.465 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:05:09.465 UTC [386] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:05:09.465 UTC [386] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:05:09.467 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:05:09.467 UTC [386] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:05:09.467 UTC [386] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:05:09.468 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:05:09.468 UTC [386] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:05:09.468 UTC [386] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:05:09.469 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:05:09.470 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:05:09.471 UTC [386] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:05:09.471 UTC [386] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:05:09.472 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:05:09.472 UTC [386] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:05:09.472 UTC [386] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:05:09.473 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:05:09.474 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:05:09.475 UTC [386] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:05:09.475 UTC [386] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:05:09.476 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:05:09.476 UTC [386] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:05:09.476 UTC [386] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:05:09.477 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:05:09.479 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:05:09.479 UTC [386] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:05:09.479 UTC [386] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:05:09.481 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:05:09.482 UTC [386] DEBUG:  building index "pg_toast_24817_index" on table "pg_toast_24817" serially
2025-04-19 15:05:09.483 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:05:09.483 UTC [386] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:05:09.483 UTC [386] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:05:09.484 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:05:09.485 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:05:09.486 UTC [386] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:05:09.486 UTC [386] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:05:09.486 UTC [386] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:05:09.487 UTC [386] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:05:09.487 UTC [386] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:05:09.488 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:05:09.489 UTC [386] DEBUG:  building index "pg_toast_24850_index" on table "pg_toast_24850" serially
2025-04-19 15:05:09.490 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:05:09.490 UTC [386] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:05:09.490 UTC [386] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:05:09.491 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:05:09.492 UTC [386] DEBUG:  building index "pg_toast_24861_index" on table "pg_toast_24861" serially
2025-04-19 15:05:09.493 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:05:09.493 UTC [386] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:05:09.493 UTC [386] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:05:09.495 UTC [386] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:05:09.496 UTC [386] DEBUG:  building index "pg_toast_24884_index" on table "pg_toast_24884" serially
2025-04-19 15:05:09.498 UTC [386] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:05:09.498 UTC [386] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:05:09.498 UTC [386] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:05:09.500 UTC [386] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:05:09.500 UTC [386] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:05:09.501 UTC [386] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:05:09.501 UTC [386] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:05:09.504 UTC [386] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:05:09.504 UTC [386] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:05:09.505 UTC [386] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:05:09.505 UTC [386] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:05:09.505 UTC [386] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:05:09.506 UTC [386] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:05:09.507 UTC [386] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:05:09.507 UTC [386] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:05:09.507 UTC [386] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:05:09.507 UTC [386] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:05:09.508 UTC [386] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:05:09.508 UTC [386] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:05:09.509 UTC [386] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:05:09.509 UTC [386] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:05:09.510 UTC [386] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:05:09.510 UTC [386] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:05:09.511 UTC [386] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:05:09.511 UTC [386] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:05:09.518 UTC [386] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:05:09.770 UTC [386] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xY4cV3.DxmTffwjzgUphiOoGxi5QZK6ogHiHqD1cuX9vnw.T85Ow6')
	                RETURNING id, username, email
	                
2025-04-19 15:05:09.771 UTC [386] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:05:09.771 UTC [386] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:05:22.426 UTC [386] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 15:05:22.765 UTC [386] DEBUG:  unexpected EOF on client connection
2025-04-19 15:05:26.130 UTC [394] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:05:26.147 UTC [394] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:05:26.156 UTC [394] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:05:26.156 UTC [394] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:05:26.160 UTC [394] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:05:26.165 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:05:26.170 UTC [394] DEBUG:  building index "pg_toast_24920_index" on table "pg_toast_24920" serially
2025-04-19 15:05:26.173 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:05:26.174 UTC [394] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:05:26.174 UTC [394] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:05:26.175 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:05:26.175 UTC [394] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:05:26.175 UTC [394] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:05:26.176 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:05:26.176 UTC [394] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:05:26.176 UTC [394] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:05:26.177 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:05:26.179 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:05:26.179 UTC [394] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:05:26.179 UTC [394] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:05:26.181 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:05:26.181 UTC [394] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:05:26.181 UTC [394] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:05:26.182 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:05:26.184 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:05:26.184 UTC [394] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:05:26.184 UTC [394] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:05:26.185 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:05:26.185 UTC [394] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:05:26.185 UTC [394] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:05:26.187 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:05:26.187 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:05:26.188 UTC [394] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:05:26.188 UTC [394] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:05:26.189 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:05:26.191 UTC [394] DEBUG:  building index "pg_toast_24981_index" on table "pg_toast_24981" serially
2025-04-19 15:05:26.192 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:05:26.192 UTC [394] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:05:26.192 UTC [394] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:05:26.193 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:05:26.195 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:05:26.195 UTC [394] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:05:26.195 UTC [394] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:05:26.196 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:05:26.196 UTC [394] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:05:26.196 UTC [394] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:05:26.198 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:05:26.199 UTC [394] DEBUG:  building index "pg_toast_25014_index" on table "pg_toast_25014" serially
2025-04-19 15:05:26.201 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:05:26.201 UTC [394] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:05:26.201 UTC [394] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:05:26.204 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:05:26.208 UTC [394] DEBUG:  building index "pg_toast_25025_index" on table "pg_toast_25025" serially
2025-04-19 15:05:26.211 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:05:26.212 UTC [394] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:05:26.212 UTC [394] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:05:26.214 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:05:26.217 UTC [394] DEBUG:  building index "pg_toast_25048_index" on table "pg_toast_25048" serially
2025-04-19 15:05:26.218 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:05:26.218 UTC [394] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:05:26.218 UTC [394] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:05:26.219 UTC [394] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:05:26.219 UTC [394] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:05:26.220 UTC [394] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:05:26.220 UTC [394] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:05:26.221 UTC [394] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:05:26.221 UTC [394] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:05:26.222 UTC [394] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:05:26.222 UTC [394] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:05:26.223 UTC [394] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:05:26.223 UTC [394] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:05:26.225 UTC [394] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:05:26.225 UTC [394] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:05:26.225 UTC [394] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:05:26.225 UTC [394] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:05:26.226 UTC [394] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:05:26.226 UTC [394] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:05:26.227 UTC [394] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:05:26.227 UTC [394] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:05:26.230 UTC [394] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:05:26.230 UTC [394] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:05:26.231 UTC [394] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:05:26.231 UTC [394] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:05:26.248 UTC [394] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:05:26.521 UTC [394] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Zu1crvY1LwPU1LBMCZASHuYR6.iumxKAVK0a1k395mAwKRrPEq3MC')
	                RETURNING id, username, email
	                
2025-04-19 15:05:26.522 UTC [394] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:05:26.522 UTC [394] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:05:26.523 UTC [394] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 15:05:26.539 UTC [394] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:05:26.541 UTC [394] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:05:26.544 UTC [394] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:05:26.548 UTC [394] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:05:26.548 UTC [394] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:05:26.552 UTC [394] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:05:26.567 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:05:26.569 UTC [394] DEBUG:  building index "pg_toast_25084_index" on table "pg_toast_25084" serially
2025-04-19 15:05:26.571 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:05:26.571 UTC [394] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:05:26.571 UTC [394] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:05:26.574 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:05:26.574 UTC [394] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:05:26.574 UTC [394] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:05:26.576 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:05:26.577 UTC [394] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:05:26.577 UTC [394] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:05:26.579 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:05:26.582 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:05:26.582 UTC [394] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:05:26.582 UTC [394] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:05:26.587 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:05:26.588 UTC [394] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:05:26.588 UTC [394] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:05:26.589 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:05:26.591 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:05:26.591 UTC [394] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:05:26.591 UTC [394] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:05:26.593 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:05:26.593 UTC [394] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:05:26.593 UTC [394] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:05:26.594 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:05:26.595 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:05:26.595 UTC [394] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:05:26.595 UTC [394] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:05:26.597 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:05:26.598 UTC [394] DEBUG:  building index "pg_toast_25145_index" on table "pg_toast_25145" serially
2025-04-19 15:05:26.599 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:05:26.600 UTC [394] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:05:26.600 UTC [394] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:05:26.601 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:05:26.602 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:05:26.602 UTC [394] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:05:26.602 UTC [394] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:05:26.603 UTC [394] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:05:26.603 UTC [394] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:05:26.603 UTC [394] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:05:26.605 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:05:26.606 UTC [394] DEBUG:  building index "pg_toast_25178_index" on table "pg_toast_25178" serially
2025-04-19 15:05:26.607 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:05:26.607 UTC [394] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:05:26.607 UTC [394] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:05:26.607 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:05:26.608 UTC [394] DEBUG:  building index "pg_toast_25189_index" on table "pg_toast_25189" serially
2025-04-19 15:05:26.609 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:05:26.609 UTC [394] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:05:26.609 UTC [394] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:05:26.611 UTC [394] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:05:26.612 UTC [394] DEBUG:  building index "pg_toast_25212_index" on table "pg_toast_25212" serially
2025-04-19 15:05:26.612 UTC [394] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:05:26.613 UTC [394] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:05:26.613 UTC [394] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:05:26.613 UTC [394] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:05:26.613 UTC [394] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:05:26.614 UTC [394] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:05:26.614 UTC [394] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:05:26.615 UTC [394] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:05:26.615 UTC [394] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:05:26.616 UTC [394] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:05:26.616 UTC [394] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:05:26.617 UTC [394] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:05:26.617 UTC [394] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:05:26.618 UTC [394] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:05:26.618 UTC [394] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:05:26.619 UTC [394] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:05:26.619 UTC [394] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:05:26.621 UTC [394] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:05:26.621 UTC [394] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:05:26.623 UTC [394] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:05:26.623 UTC [394] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:05:26.624 UTC [394] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:05:26.624 UTC [394] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:05:26.626 UTC [394] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:05:26.626 UTC [394] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:05:26.636 UTC [394] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:05:26.887 UTC [394] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$wzwuKbC2XKs17HGP7O0Z4ulGOkCLPCZxWzbBKzusuZTt33npLg0qG')
	                RETURNING id, username, email
	                
2025-04-19 15:05:26.888 UTC [394] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:05:26.888 UTC [394] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:52:50.923 UTC [402] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 15:52:54.223 UTC [394] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 15:52:54.587 UTC [394] DEBUG:  unexpected EOF on client connection
2025-04-19 15:52:56.721 UTC [410] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:52:56.730 UTC [410] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:52:56.743 UTC [410] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:52:56.743 UTC [410] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:52:56.751 UTC [410] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:52:56.754 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:52:56.757 UTC [410] DEBUG:  building index "pg_toast_25248_index" on table "pg_toast_25248" serially
2025-04-19 15:52:56.759 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:52:56.759 UTC [410] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:52:56.759 UTC [410] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:52:56.760 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:52:56.761 UTC [410] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:52:56.761 UTC [410] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:52:56.761 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:52:56.762 UTC [410] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:52:56.762 UTC [410] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:52:56.763 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:52:56.764 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:52:56.764 UTC [410] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:52:56.764 UTC [410] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:52:56.765 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:52:56.765 UTC [410] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:52:56.765 UTC [410] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:52:56.766 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:52:56.767 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:52:56.767 UTC [410] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:52:56.767 UTC [410] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:52:56.768 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:52:56.768 UTC [410] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:52:56.768 UTC [410] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:52:56.770 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:52:56.771 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:52:56.771 UTC [410] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:52:56.771 UTC [410] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:52:56.772 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:52:56.774 UTC [410] DEBUG:  building index "pg_toast_25309_index" on table "pg_toast_25309" serially
2025-04-19 15:52:56.775 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:52:56.776 UTC [410] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:52:56.776 UTC [410] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:52:56.777 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:52:56.778 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:52:56.778 UTC [410] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:52:56.778 UTC [410] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:52:56.779 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:52:56.779 UTC [410] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:52:56.779 UTC [410] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:52:56.780 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:52:56.781 UTC [410] DEBUG:  building index "pg_toast_25342_index" on table "pg_toast_25342" serially
2025-04-19 15:52:56.782 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:52:56.782 UTC [410] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:52:56.782 UTC [410] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:52:56.783 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:52:56.784 UTC [410] DEBUG:  building index "pg_toast_25353_index" on table "pg_toast_25353" serially
2025-04-19 15:52:56.785 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:52:56.785 UTC [410] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:52:56.785 UTC [410] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:52:56.787 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:52:56.789 UTC [410] DEBUG:  building index "pg_toast_25376_index" on table "pg_toast_25376" serially
2025-04-19 15:52:56.791 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:52:56.791 UTC [410] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:52:56.791 UTC [410] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:52:56.795 UTC [410] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:52:56.795 UTC [410] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:52:56.797 UTC [410] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:52:56.797 UTC [410] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:52:56.798 UTC [410] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:52:56.798 UTC [410] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:52:56.799 UTC [410] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:52:56.799 UTC [410] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:52:56.801 UTC [410] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:52:56.801 UTC [410] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:52:56.802 UTC [410] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:52:56.802 UTC [410] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:52:56.803 UTC [410] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:52:56.803 UTC [410] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:52:56.805 UTC [410] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:52:56.805 UTC [410] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:52:56.807 UTC [410] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:52:56.807 UTC [410] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:52:56.809 UTC [410] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:52:56.809 UTC [410] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:52:56.810 UTC [410] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:52:56.810 UTC [410] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:52:56.840 UTC [410] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:52:57.136 UTC [410] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$R8f.E6ZBpXUKzm2hcEfw.Oj7lXvpe1Dv52VXlmHwc5NHppimtlvp6')
	                RETURNING id, username, email
	                
2025-04-19 15:52:57.137 UTC [410] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:52:57.138 UTC [410] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:52:57.138 UTC [410] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 15:52:57.151 UTC [410] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:52:57.153 UTC [410] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:52:57.155 UTC [410] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:52:57.159 UTC [410] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:52:57.159 UTC [410] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:52:57.165 UTC [410] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:52:57.172 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:52:57.174 UTC [410] DEBUG:  building index "pg_toast_25412_index" on table "pg_toast_25412" serially
2025-04-19 15:52:57.176 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:52:57.176 UTC [410] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:52:57.176 UTC [410] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:52:57.180 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:52:57.181 UTC [410] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:52:57.181 UTC [410] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:52:57.187 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:52:57.189 UTC [410] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:52:57.190 UTC [410] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:52:57.193 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:52:57.195 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:52:57.196 UTC [410] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:52:57.196 UTC [410] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:52:57.198 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:52:57.198 UTC [410] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:52:57.198 UTC [410] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:52:57.200 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:52:57.201 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:52:57.201 UTC [410] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:52:57.201 UTC [410] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:52:57.202 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:52:57.202 UTC [410] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:52:57.202 UTC [410] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:52:57.203 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:52:57.204 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:52:57.204 UTC [410] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:52:57.204 UTC [410] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:52:57.206 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:52:57.207 UTC [410] DEBUG:  building index "pg_toast_25473_index" on table "pg_toast_25473" serially
2025-04-19 15:52:57.208 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:52:57.208 UTC [410] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:52:57.208 UTC [410] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:52:57.209 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:52:57.210 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:52:57.210 UTC [410] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:52:57.210 UTC [410] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:52:57.211 UTC [410] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:52:57.211 UTC [410] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:52:57.211 UTC [410] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:52:57.212 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:52:57.332 UTC [410] DEBUG:  building index "pg_toast_25506_index" on table "pg_toast_25506" serially
2025-04-19 15:52:57.418 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:52:57.419 UTC [410] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:52:57.419 UTC [410] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:52:57.424 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:52:57.426 UTC [410] DEBUG:  building index "pg_toast_25517_index" on table "pg_toast_25517" serially
2025-04-19 15:52:57.429 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:52:57.429 UTC [410] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:52:57.429 UTC [410] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:52:57.436 UTC [410] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:52:57.438 UTC [410] DEBUG:  building index "pg_toast_25540_index" on table "pg_toast_25540" serially
2025-04-19 15:52:57.440 UTC [410] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:52:57.440 UTC [410] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:52:57.440 UTC [410] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:52:57.442 UTC [410] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:52:57.442 UTC [410] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:52:57.448 UTC [410] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:52:57.448 UTC [410] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:52:57.450 UTC [410] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:52:57.450 UTC [410] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:52:57.451 UTC [410] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:52:57.451 UTC [410] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:52:57.452 UTC [410] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:52:57.452 UTC [410] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:52:57.456 UTC [410] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:52:57.456 UTC [410] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:52:57.457 UTC [410] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:52:57.457 UTC [410] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:52:57.463 UTC [410] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:52:57.463 UTC [410] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:52:57.465 UTC [410] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:52:57.465 UTC [410] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:52:57.466 UTC [410] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:52:57.466 UTC [410] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:52:57.467 UTC [410] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:52:57.467 UTC [410] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:52:57.478 UTC [410] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:52:57.874 UTC [410] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8CrFUhsV6.ZjTSuQpMtdpu44OLdVMOT3WhHKVZ0/TYdsJtYo/yLKO')
	                RETURNING id, username, email
	                
2025-04-19 15:52:57.875 UTC [410] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:52:57.876 UTC [410] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:53:10.319 UTC [410] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 15:53:10.609 UTC [410] DEBUG:  unexpected EOF on client connection
2025-04-19 15:53:13.329 UTC [418] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:53:13.338 UTC [418] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:53:13.349 UTC [418] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:53:13.349 UTC [418] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:53:13.358 UTC [418] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:53:13.362 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:53:13.375 UTC [418] DEBUG:  building index "pg_toast_25576_index" on table "pg_toast_25576" serially
2025-04-19 15:53:13.379 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:53:13.380 UTC [418] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:53:13.380 UTC [418] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:53:13.382 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:53:13.382 UTC [418] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:53:13.382 UTC [418] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:53:13.383 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:53:13.383 UTC [418] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:53:13.383 UTC [418] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:53:13.384 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:53:13.386 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:53:13.386 UTC [418] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:53:13.386 UTC [418] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:53:13.387 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:53:13.388 UTC [418] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:53:13.388 UTC [418] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:53:13.388 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:53:13.390 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:53:13.390 UTC [418] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:53:13.390 UTC [418] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:53:13.391 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:53:13.391 UTC [418] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:53:13.392 UTC [418] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:53:13.395 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:53:13.397 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:53:13.397 UTC [418] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:53:13.397 UTC [418] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:53:13.399 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:53:13.401 UTC [418] DEBUG:  building index "pg_toast_25637_index" on table "pg_toast_25637" serially
2025-04-19 15:53:13.402 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:53:13.402 UTC [418] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:53:13.402 UTC [418] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:53:13.407 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:53:13.417 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:53:13.420 UTC [418] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:53:13.421 UTC [418] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:53:13.433 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:53:13.433 UTC [418] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:53:13.433 UTC [418] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:53:13.441 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:53:13.444 UTC [418] DEBUG:  building index "pg_toast_25670_index" on table "pg_toast_25670" serially
2025-04-19 15:53:13.447 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:53:13.447 UTC [418] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:53:13.448 UTC [418] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:53:13.451 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:53:13.455 UTC [418] DEBUG:  building index "pg_toast_25681_index" on table "pg_toast_25681" serially
2025-04-19 15:53:13.456 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:53:13.456 UTC [418] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:53:13.456 UTC [418] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:53:13.459 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:53:13.461 UTC [418] DEBUG:  building index "pg_toast_25704_index" on table "pg_toast_25704" serially
2025-04-19 15:53:13.463 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:53:13.463 UTC [418] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:53:13.463 UTC [418] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:53:13.465 UTC [418] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:53:13.465 UTC [418] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:53:13.466 UTC [418] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:53:13.466 UTC [418] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:53:13.467 UTC [418] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:53:13.467 UTC [418] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:53:13.468 UTC [418] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:53:13.468 UTC [418] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:53:13.469 UTC [418] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:53:13.469 UTC [418] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:53:13.470 UTC [418] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:53:13.470 UTC [418] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:53:13.471 UTC [418] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:53:13.471 UTC [418] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:53:13.472 UTC [418] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:53:13.472 UTC [418] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:53:13.473 UTC [418] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:53:13.473 UTC [418] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:53:13.475 UTC [418] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:53:13.475 UTC [418] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:53:13.476 UTC [418] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:53:13.476 UTC [418] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:53:13.487 UTC [418] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:53:13.852 UTC [418] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$F1lerkBBbqxbsE6hLFY0veMBjuIjaMCEDwzzMHU5GreU37/nWEtbO')
	                RETURNING id, username, email
	                
2025-04-19 15:53:13.854 UTC [418] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:53:13.855 UTC [418] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 15:53:13.857 UTC [418] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 15:53:13.876 UTC [418] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:53:13.881 UTC [418] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 15:53:13.885 UTC [418] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 15:53:13.903 UTC [418] NOTICE:  drop cascades to 2 other objects
2025-04-19 15:53:13.903 UTC [418] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 15:53:13.910 UTC [418] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 15:53:13.915 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 15:53:13.917 UTC [418] DEBUG:  building index "pg_toast_25740_index" on table "pg_toast_25740" serially
2025-04-19 15:53:13.919 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 15:53:13.919 UTC [418] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 15:53:13.919 UTC [418] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 15:53:13.920 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 15:53:13.920 UTC [418] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 15:53:13.920 UTC [418] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 15:53:13.921 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 15:53:13.921 UTC [418] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 15:53:13.921 UTC [418] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 15:53:13.922 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 15:53:13.923 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 15:53:13.923 UTC [418] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 15:53:13.923 UTC [418] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 15:53:13.924 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 15:53:13.924 UTC [418] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 15:53:13.924 UTC [418] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 15:53:13.925 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 15:53:13.926 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 15:53:13.926 UTC [418] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 15:53:13.927 UTC [418] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 15:53:13.927 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 15:53:13.928 UTC [418] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 15:53:13.928 UTC [418] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 15:53:13.929 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 15:53:13.930 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 15:53:13.930 UTC [418] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 15:53:13.930 UTC [418] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 15:53:13.931 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 15:53:13.933 UTC [418] DEBUG:  building index "pg_toast_25801_index" on table "pg_toast_25801" serially
2025-04-19 15:53:13.934 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 15:53:13.934 UTC [418] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 15:53:13.934 UTC [418] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 15:53:13.935 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 15:53:13.936 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 15:53:13.936 UTC [418] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 15:53:13.936 UTC [418] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 15:53:13.937 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 15:53:13.937 UTC [418] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 15:53:13.937 UTC [418] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 15:53:13.938 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 15:53:13.940 UTC [418] DEBUG:  building index "pg_toast_25834_index" on table "pg_toast_25834" serially
2025-04-19 15:53:13.940 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 15:53:13.941 UTC [418] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 15:53:13.941 UTC [418] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 15:53:13.941 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 15:53:13.942 UTC [418] DEBUG:  building index "pg_toast_25845_index" on table "pg_toast_25845" serially
2025-04-19 15:53:13.943 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 15:53:13.943 UTC [418] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 15:53:13.943 UTC [418] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 15:53:13.945 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 15:53:13.945 UTC [418] DEBUG:  building index "pg_toast_25868_index" on table "pg_toast_25868" serially
2025-04-19 15:53:13.946 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 15:53:13.946 UTC [418] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 15:53:13.946 UTC [418] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 15:53:13.947 UTC [418] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 15:53:13.947 UTC [418] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 15:53:13.948 UTC [418] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 15:53:13.948 UTC [418] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 15:53:13.950 UTC [418] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 15:53:13.950 UTC [418] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 15:53:13.951 UTC [418] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 15:53:13.951 UTC [418] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 15:53:13.951 UTC [418] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 15:53:13.951 UTC [418] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 15:53:13.952 UTC [418] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 15:53:13.952 UTC [418] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 15:53:13.953 UTC [418] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 15:53:13.953 UTC [418] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 15:53:13.954 UTC [418] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 15:53:13.954 UTC [418] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 15:53:13.955 UTC [418] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 15:53:13.955 UTC [418] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 15:53:13.956 UTC [418] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 15:53:13.956 UTC [418] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 15:53:13.957 UTC [418] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 15:53:13.957 UTC [418] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 15:53:13.965 UTC [418] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 15:53:14.216 UTC [418] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bVdxbUi.U7Hp2X9zTorXGuIVpnhtOKpRohkkd0/5UBI3mQkKerS72')
	                RETURNING id, username, email
	                
2025-04-19 15:53:14.217 UTC [418] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 15:53:14.217 UTC [418] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 16:55:46.994 UTC [426] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 16:55:47.266 UTC [426] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 16:55:52.776 UTC [418] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 16:55:53.069 UTC [418] DEBUG:  unexpected EOF on client connection
2025-04-19 16:55:55.450 UTC [434] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 16:55:55.560 UTC [434] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 16:55:55.612 UTC [434] NOTICE:  drop cascades to 2 other objects
2025-04-19 16:55:55.612 UTC [434] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 16:55:55.643 UTC [434] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 16:55:55.668 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 16:55:55.680 UTC [434] DEBUG:  building index "pg_toast_25905_index" on table "pg_toast_25905" serially
2025-04-19 16:55:55.687 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 16:55:55.688 UTC [434] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 16:55:55.688 UTC [434] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 16:55:55.696 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 16:55:55.696 UTC [434] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 16:55:55.699 UTC [434] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 16:55:55.702 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 16:55:55.702 UTC [434] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 16:55:55.703 UTC [434] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 16:55:55.705 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 16:55:55.706 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 16:55:55.706 UTC [434] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 16:55:55.706 UTC [434] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 16:55:55.707 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 16:55:55.708 UTC [434] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 16:55:55.708 UTC [434] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 16:55:55.711 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 16:55:55.712 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 16:55:55.713 UTC [434] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 16:55:55.713 UTC [434] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 16:55:55.713 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 16:55:55.714 UTC [434] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 16:55:55.714 UTC [434] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 16:55:55.716 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 16:55:55.719 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 16:55:55.720 UTC [434] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 16:55:55.720 UTC [434] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 16:55:55.722 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 16:55:55.724 UTC [434] DEBUG:  building index "pg_toast_25966_index" on table "pg_toast_25966" serially
2025-04-19 16:55:55.725 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 16:55:55.726 UTC [434] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 16:55:55.726 UTC [434] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 16:55:55.728 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 16:55:55.731 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 16:55:55.733 UTC [434] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 16:55:55.733 UTC [434] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 16:55:55.734 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 16:55:55.735 UTC [434] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 16:55:55.735 UTC [434] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 16:55:55.737 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 16:55:55.738 UTC [434] DEBUG:  building index "pg_toast_25999_index" on table "pg_toast_25999" serially
2025-04-19 16:55:55.739 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 16:55:55.740 UTC [434] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 16:55:55.740 UTC [434] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 16:55:55.741 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 16:55:55.743 UTC [434] DEBUG:  building index "pg_toast_26010_index" on table "pg_toast_26010" serially
2025-04-19 16:55:55.744 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 16:55:55.744 UTC [434] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 16:55:55.744 UTC [434] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 16:55:55.747 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 16:55:55.749 UTC [434] DEBUG:  building index "pg_toast_26033_index" on table "pg_toast_26033" serially
2025-04-19 16:55:55.750 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 16:55:55.750 UTC [434] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 16:55:55.750 UTC [434] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 16:55:55.751 UTC [434] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 16:55:55.751 UTC [434] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 16:55:55.752 UTC [434] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 16:55:55.752 UTC [434] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 16:55:55.753 UTC [434] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 16:55:55.753 UTC [434] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 16:55:55.755 UTC [434] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 16:55:55.755 UTC [434] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 16:55:55.757 UTC [434] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 16:55:55.757 UTC [434] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 16:55:55.760 UTC [434] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 16:55:55.760 UTC [434] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 16:55:55.763 UTC [434] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 16:55:55.763 UTC [434] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 16:55:55.764 UTC [434] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 16:55:55.764 UTC [434] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 16:55:55.766 UTC [434] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 16:55:55.766 UTC [434] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 16:55:55.770 UTC [434] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 16:55:55.770 UTC [434] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 16:55:55.775 UTC [434] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 16:55:55.775 UTC [434] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 16:55:55.825 UTC [434] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 16:55:56.273 UTC [434] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$btqX4.jrcax7F/CbICTK2OjdQHJEiMz6vPbjYodfImsJx5I.IKWpi')
	                RETURNING id, username, email
	                
2025-04-19 16:55:56.276 UTC [434] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 16:55:56.277 UTC [434] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 16:55:56.279 UTC [434] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 16:55:56.300 UTC [434] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 16:55:56.304 UTC [434] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 16:55:56.308 UTC [434] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 16:55:56.312 UTC [434] NOTICE:  drop cascades to 2 other objects
2025-04-19 16:55:56.312 UTC [434] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 16:55:56.316 UTC [434] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 16:55:56.319 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 16:55:56.321 UTC [434] DEBUG:  building index "pg_toast_26069_index" on table "pg_toast_26069" serially
2025-04-19 16:55:56.322 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 16:55:56.322 UTC [434] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 16:55:56.322 UTC [434] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 16:55:56.323 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 16:55:56.323 UTC [434] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 16:55:56.323 UTC [434] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 16:55:56.324 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 16:55:56.325 UTC [434] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 16:55:56.325 UTC [434] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 16:55:56.325 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 16:55:56.326 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 16:55:56.326 UTC [434] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 16:55:56.326 UTC [434] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 16:55:56.327 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 16:55:56.327 UTC [434] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 16:55:56.327 UTC [434] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 16:55:56.328 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 16:55:56.329 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 16:55:56.329 UTC [434] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 16:55:56.329 UTC [434] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 16:55:56.330 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 16:55:56.330 UTC [434] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 16:55:56.330 UTC [434] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 16:55:56.331 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 16:55:56.332 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 16:55:56.332 UTC [434] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 16:55:56.332 UTC [434] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 16:55:56.334 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 16:55:56.335 UTC [434] DEBUG:  building index "pg_toast_26130_index" on table "pg_toast_26130" serially
2025-04-19 16:55:56.335 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 16:55:56.336 UTC [434] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 16:55:56.336 UTC [434] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 16:55:56.338 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 16:55:56.340 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 16:55:56.341 UTC [434] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 16:55:56.341 UTC [434] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 16:55:56.343 UTC [434] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 16:55:56.344 UTC [434] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 16:55:56.344 UTC [434] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 16:55:56.346 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 16:55:56.347 UTC [434] DEBUG:  building index "pg_toast_26163_index" on table "pg_toast_26163" serially
2025-04-19 16:55:56.348 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 16:55:56.349 UTC [434] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 16:55:56.349 UTC [434] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 16:55:56.349 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 16:55:56.351 UTC [434] DEBUG:  building index "pg_toast_26174_index" on table "pg_toast_26174" serially
2025-04-19 16:55:56.352 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 16:55:56.352 UTC [434] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 16:55:56.352 UTC [434] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 16:55:56.354 UTC [434] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 16:55:56.355 UTC [434] DEBUG:  building index "pg_toast_26197_index" on table "pg_toast_26197" serially
2025-04-19 16:55:56.356 UTC [434] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 16:55:56.357 UTC [434] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 16:55:56.357 UTC [434] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 16:55:56.358 UTC [434] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 16:55:56.358 UTC [434] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 16:55:56.359 UTC [434] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 16:55:56.359 UTC [434] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 16:55:56.360 UTC [434] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 16:55:56.360 UTC [434] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 16:55:56.362 UTC [434] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 16:55:56.362 UTC [434] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 16:55:56.363 UTC [434] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 16:55:56.364 UTC [434] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 16:55:56.365 UTC [434] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 16:55:56.365 UTC [434] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 16:55:56.366 UTC [434] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 16:55:56.366 UTC [434] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 16:55:56.366 UTC [434] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 16:55:56.366 UTC [434] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 16:55:56.368 UTC [434] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 16:55:56.368 UTC [434] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 16:55:56.372 UTC [434] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 16:55:56.372 UTC [434] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 16:55:56.373 UTC [434] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 16:55:56.373 UTC [434] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 16:55:56.397 UTC [434] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 16:55:56.670 UTC [434] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5aMfbcO5B97PLh98wBh4nuxfzmR8Y6J81j0RPjsCRhcykZoD2J2uy')
	                RETURNING id, username, email
	                
2025-04-19 16:55:56.672 UTC [434] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 16:55:56.673 UTC [434] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 16:56:09.088 UTC [434] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 16:56:09.445 UTC [434] DEBUG:  unexpected EOF on client connection
2025-04-19 16:56:12.328 UTC [449] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 16:56:12.337 UTC [449] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 16:56:12.347 UTC [449] NOTICE:  drop cascades to 2 other objects
2025-04-19 16:56:12.347 UTC [449] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 16:56:12.351 UTC [449] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 16:56:12.356 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 16:56:12.359 UTC [449] DEBUG:  building index "pg_toast_26233_index" on table "pg_toast_26233" serially
2025-04-19 16:56:12.361 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 16:56:12.362 UTC [449] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 16:56:12.362 UTC [449] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 16:56:12.363 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 16:56:12.363 UTC [449] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 16:56:12.363 UTC [449] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 16:56:12.364 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 16:56:12.364 UTC [449] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 16:56:12.364 UTC [449] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 16:56:12.366 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 16:56:12.367 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 16:56:12.367 UTC [449] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 16:56:12.367 UTC [449] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 16:56:12.369 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 16:56:12.369 UTC [449] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 16:56:12.369 UTC [449] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 16:56:12.370 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 16:56:12.373 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 16:56:12.373 UTC [449] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 16:56:12.373 UTC [449] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 16:56:12.374 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 16:56:12.374 UTC [449] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 16:56:12.374 UTC [449] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 16:56:12.376 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 16:56:12.377 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 16:56:12.378 UTC [449] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 16:56:12.378 UTC [449] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 16:56:12.379 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 16:56:12.385 UTC [449] DEBUG:  building index "pg_toast_26294_index" on table "pg_toast_26294" serially
2025-04-19 16:56:12.386 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 16:56:12.387 UTC [449] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 16:56:12.387 UTC [449] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 16:56:12.390 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 16:56:12.391 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 16:56:12.391 UTC [449] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 16:56:12.391 UTC [449] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 16:56:12.392 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 16:56:12.392 UTC [449] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 16:56:12.392 UTC [449] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 16:56:12.394 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 16:56:12.395 UTC [449] DEBUG:  building index "pg_toast_26327_index" on table "pg_toast_26327" serially
2025-04-19 16:56:12.395 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 16:56:12.396 UTC [449] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 16:56:12.396 UTC [449] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 16:56:12.397 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 16:56:12.398 UTC [449] DEBUG:  building index "pg_toast_26338_index" on table "pg_toast_26338" serially
2025-04-19 16:56:12.398 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 16:56:12.399 UTC [449] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 16:56:12.399 UTC [449] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 16:56:12.401 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 16:56:12.403 UTC [449] DEBUG:  building index "pg_toast_26361_index" on table "pg_toast_26361" serially
2025-04-19 16:56:12.404 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 16:56:12.405 UTC [449] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 16:56:12.405 UTC [449] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 16:56:12.407 UTC [449] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 16:56:12.407 UTC [449] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 16:56:12.408 UTC [449] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 16:56:12.408 UTC [449] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 16:56:12.409 UTC [449] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 16:56:12.409 UTC [449] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 16:56:12.410 UTC [449] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 16:56:12.410 UTC [449] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 16:56:12.411 UTC [449] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 16:56:12.411 UTC [449] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 16:56:12.411 UTC [449] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 16:56:12.411 UTC [449] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 16:56:12.412 UTC [449] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 16:56:12.412 UTC [449] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 16:56:12.413 UTC [449] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 16:56:12.413 UTC [449] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 16:56:12.414 UTC [449] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 16:56:12.414 UTC [449] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 16:56:12.415 UTC [449] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 16:56:12.415 UTC [449] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 16:56:12.416 UTC [449] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 16:56:12.416 UTC [449] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 16:56:12.440 UTC [449] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 16:56:12.443 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 16:56:12.735 UTC [449] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$sBr2buJEtIWPEw3Y2f2DBuSI/7T1hum08hj/j1uXvRwa9kpwhGhO.')
	                RETURNING id, username, email
	                
2025-04-19 16:56:12.736 UTC [449] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 16:56:12.737 UTC [449] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 16:56:12.738 UTC [449] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 16:56:12.759 UTC [449] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 16:56:12.761 UTC [449] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 16:56:12.764 UTC [449] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 16:56:12.773 UTC [449] NOTICE:  drop cascades to 2 other objects
2025-04-19 16:56:12.773 UTC [449] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 16:56:12.779 UTC [449] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 16:56:12.784 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 16:56:12.786 UTC [449] DEBUG:  building index "pg_toast_26397_index" on table "pg_toast_26397" serially
2025-04-19 16:56:12.787 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 16:56:12.787 UTC [449] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 16:56:12.787 UTC [449] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 16:56:12.788 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 16:56:12.788 UTC [449] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 16:56:12.788 UTC [449] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 16:56:12.789 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 16:56:12.790 UTC [449] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 16:56:12.790 UTC [449] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 16:56:12.790 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 16:56:12.792 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 16:56:12.792 UTC [449] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 16:56:12.792 UTC [449] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 16:56:12.793 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 16:56:12.793 UTC [449] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 16:56:12.793 UTC [449] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 16:56:12.794 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 16:56:12.795 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 16:56:12.795 UTC [449] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 16:56:12.795 UTC [449] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 16:56:12.796 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 16:56:12.796 UTC [449] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 16:56:12.796 UTC [449] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 16:56:12.798 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 16:56:12.799 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 16:56:12.799 UTC [449] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 16:56:12.799 UTC [449] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 16:56:12.801 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 16:56:12.802 UTC [449] DEBUG:  building index "pg_toast_26458_index" on table "pg_toast_26458" serially
2025-04-19 16:56:12.803 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 16:56:12.803 UTC [449] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 16:56:12.803 UTC [449] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 16:56:12.805 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 16:56:12.808 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 16:56:12.808 UTC [449] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 16:56:12.808 UTC [449] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 16:56:12.809 UTC [449] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 16:56:12.809 UTC [449] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 16:56:12.809 UTC [449] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 16:56:12.811 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 16:56:12.812 UTC [449] DEBUG:  building index "pg_toast_26491_index" on table "pg_toast_26491" serially
2025-04-19 16:56:12.814 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 16:56:12.814 UTC [449] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 16:56:12.814 UTC [449] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 16:56:12.815 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 16:56:12.816 UTC [449] DEBUG:  building index "pg_toast_26502_index" on table "pg_toast_26502" serially
2025-04-19 16:56:12.817 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 16:56:12.817 UTC [449] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 16:56:12.817 UTC [449] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 16:56:12.818 UTC [449] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 16:56:12.819 UTC [449] DEBUG:  building index "pg_toast_26525_index" on table "pg_toast_26525" serially
2025-04-19 16:56:12.820 UTC [449] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 16:56:12.820 UTC [449] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 16:56:12.820 UTC [449] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 16:56:12.821 UTC [449] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 16:56:12.821 UTC [449] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 16:56:12.822 UTC [449] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 16:56:12.822 UTC [449] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 16:56:12.823 UTC [449] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 16:56:12.823 UTC [449] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 16:56:12.824 UTC [449] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 16:56:12.824 UTC [449] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 16:56:12.825 UTC [449] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 16:56:12.825 UTC [449] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 16:56:12.826 UTC [449] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 16:56:12.826 UTC [449] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 16:56:12.826 UTC [449] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 16:56:12.826 UTC [449] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 16:56:12.827 UTC [449] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 16:56:12.827 UTC [449] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 16:56:12.828 UTC [449] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 16:56:12.828 UTC [449] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 16:56:12.829 UTC [449] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 16:56:12.829 UTC [449] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 16:56:12.830 UTC [449] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 16:56:12.830 UTC [449] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 16:56:12.857 UTC [449] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 16:56:13.146 UTC [449] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$HLNCpvBqjr9KH0P/Q837UutxIz5.o..Zb0zZz5LrwtPfNcziE/.he')
	                RETURNING id, username, email
	                
2025-04-19 16:56:13.148 UTC [449] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 16:56:13.150 UTC [449] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:33:14.142 UTC [59] DEBUG:  checkpoint skipped because system is idle
2025-04-19 17:33:14.570 UTC [450] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 17:33:22.919 UTC [449] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:33:23.435 UTC [449] DEBUG:  unexpected EOF on client connection
2025-04-19 17:33:26.070 UTC [458] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:33:26.086 UTC [458] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:33:26.095 UTC [458] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:33:26.095 UTC [458] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:33:26.101 UTC [458] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:33:26.105 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:33:26.108 UTC [458] DEBUG:  building index "pg_toast_26561_index" on table "pg_toast_26561" serially
2025-04-19 17:33:26.111 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:33:26.112 UTC [458] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:33:26.112 UTC [458] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:33:26.113 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:33:26.113 UTC [458] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:33:26.113 UTC [458] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:33:26.114 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:33:26.114 UTC [458] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:33:26.114 UTC [458] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:33:26.115 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:33:26.116 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:33:26.117 UTC [458] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:33:26.117 UTC [458] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:33:26.121 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:33:26.122 UTC [458] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:33:26.122 UTC [458] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:33:26.124 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:33:26.126 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:33:26.126 UTC [458] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:33:26.126 UTC [458] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:33:26.128 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:33:26.128 UTC [458] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:33:26.128 UTC [458] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:33:26.130 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:33:26.131 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:33:26.131 UTC [458] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:33:26.131 UTC [458] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:33:26.132 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:33:26.134 UTC [458] DEBUG:  building index "pg_toast_26622_index" on table "pg_toast_26622" serially
2025-04-19 17:33:26.135 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:33:26.135 UTC [458] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:33:26.135 UTC [458] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:33:26.138 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:33:26.141 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:33:26.142 UTC [458] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:33:26.142 UTC [458] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:33:26.143 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:33:26.143 UTC [458] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:33:26.143 UTC [458] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:33:26.144 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:33:26.145 UTC [458] DEBUG:  building index "pg_toast_26655_index" on table "pg_toast_26655" serially
2025-04-19 17:33:26.146 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:33:26.147 UTC [458] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:33:26.147 UTC [458] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:33:26.147 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:33:26.148 UTC [458] DEBUG:  building index "pg_toast_26666_index" on table "pg_toast_26666" serially
2025-04-19 17:33:26.149 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:33:26.150 UTC [458] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:33:26.150 UTC [458] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:33:26.156 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:33:26.161 UTC [458] DEBUG:  building index "pg_toast_26689_index" on table "pg_toast_26689" serially
2025-04-19 17:33:26.162 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:33:26.162 UTC [458] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:33:26.162 UTC [458] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:33:26.163 UTC [458] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:33:26.163 UTC [458] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:33:26.164 UTC [458] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:33:26.164 UTC [458] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:33:26.165 UTC [458] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:33:26.165 UTC [458] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:33:26.167 UTC [458] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:33:26.167 UTC [458] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:33:26.169 UTC [458] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:33:26.169 UTC [458] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:33:26.170 UTC [458] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:33:26.170 UTC [458] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:33:26.172 UTC [458] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:33:26.172 UTC [458] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:33:26.174 UTC [458] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:33:26.174 UTC [458] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:33:26.175 UTC [458] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:33:26.175 UTC [458] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:33:26.176 UTC [458] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:33:26.176 UTC [458] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:33:26.177 UTC [458] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:33:26.177 UTC [458] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:33:26.198 UTC [458] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:33:26.485 UTC [458] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$h1wO998JER29uaGB8wcANuZabl909Q6D0OC7UoOo8aEIHW9GAZ1Nq')
	                RETURNING id, username, email
	                
2025-04-19 17:33:26.486 UTC [458] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:33:26.487 UTC [458] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:33:26.488 UTC [458] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:33:26.497 UTC [458] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:33:26.499 UTC [458] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:33:26.502 UTC [458] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:33:26.510 UTC [458] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:33:26.510 UTC [458] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:33:26.514 UTC [458] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:33:26.521 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:33:26.522 UTC [458] DEBUG:  building index "pg_toast_26725_index" on table "pg_toast_26725" serially
2025-04-19 17:33:26.524 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:33:26.524 UTC [458] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:33:26.524 UTC [458] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:33:26.526 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:33:26.526 UTC [458] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:33:26.526 UTC [458] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:33:26.527 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:33:26.527 UTC [458] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:33:26.527 UTC [458] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:33:26.528 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:33:26.529 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:33:26.529 UTC [458] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:33:26.529 UTC [458] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:33:26.530 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:33:26.531 UTC [458] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:33:26.531 UTC [458] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:33:26.531 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:33:26.532 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:33:26.533 UTC [458] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:33:26.533 UTC [458] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:33:26.533 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:33:26.534 UTC [458] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:33:26.534 UTC [458] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:33:26.535 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:33:26.536 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:33:26.536 UTC [458] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:33:26.536 UTC [458] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:33:26.537 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:33:26.538 UTC [458] DEBUG:  building index "pg_toast_26786_index" on table "pg_toast_26786" serially
2025-04-19 17:33:26.539 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:33:26.540 UTC [458] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:33:26.540 UTC [458] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:33:26.541 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:33:26.542 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:33:26.542 UTC [458] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:33:26.542 UTC [458] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:33:26.543 UTC [458] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:33:26.544 UTC [458] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:33:26.544 UTC [458] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:33:26.545 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:33:26.546 UTC [458] DEBUG:  building index "pg_toast_26819_index" on table "pg_toast_26819" serially
2025-04-19 17:33:26.546 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:33:26.547 UTC [458] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:33:26.547 UTC [458] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:33:26.547 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:33:26.548 UTC [458] DEBUG:  building index "pg_toast_26830_index" on table "pg_toast_26830" serially
2025-04-19 17:33:26.549 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:33:26.549 UTC [458] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:33:26.549 UTC [458] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:33:26.551 UTC [458] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:33:26.552 UTC [458] DEBUG:  building index "pg_toast_26853_index" on table "pg_toast_26853" serially
2025-04-19 17:33:26.553 UTC [458] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:33:26.553 UTC [458] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:33:26.553 UTC [458] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:33:26.554 UTC [458] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:33:26.554 UTC [458] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:33:26.555 UTC [458] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:33:26.555 UTC [458] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:33:26.555 UTC [458] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:33:26.555 UTC [458] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:33:26.556 UTC [458] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:33:26.556 UTC [458] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:33:26.557 UTC [458] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:33:26.557 UTC [458] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:33:26.559 UTC [458] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:33:26.559 UTC [458] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:33:26.560 UTC [458] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:33:26.560 UTC [458] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:33:26.561 UTC [458] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:33:26.561 UTC [458] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:33:26.563 UTC [458] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:33:26.563 UTC [458] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:33:26.564 UTC [458] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:33:26.564 UTC [458] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:33:26.565 UTC [458] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:33:26.565 UTC [458] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:33:26.576 UTC [458] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:33:26.827 UTC [458] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.Xc/WqRqQM0Yi1B46FT0pO3aykb1ojZD5jLo1ZquM2hjxOfszL9h.')
	                RETURNING id, username, email
	                
2025-04-19 17:33:26.828 UTC [458] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:33:26.828 UTC [458] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:33:39.132 UTC [458] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:33:39.444 UTC [458] DEBUG:  unexpected EOF on client connection
2025-04-19 17:33:42.179 UTC [473] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:33:42.200 UTC [473] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:33:42.208 UTC [473] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:33:42.208 UTC [473] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:33:42.212 UTC [473] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:33:42.218 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:33:42.222 UTC [473] DEBUG:  building index "pg_toast_26889_index" on table "pg_toast_26889" serially
2025-04-19 17:33:42.223 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:33:42.224 UTC [473] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:33:42.224 UTC [473] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:33:42.226 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:33:42.227 UTC [473] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:33:42.228 UTC [473] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:33:42.229 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:33:42.229 UTC [473] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:33:42.229 UTC [473] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:33:42.230 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:33:42.232 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:33:42.232 UTC [473] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:33:42.232 UTC [473] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:33:42.233 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:33:42.233 UTC [473] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:33:42.233 UTC [473] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:33:42.234 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:33:42.235 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:33:42.236 UTC [473] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:33:42.236 UTC [473] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:33:42.237 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:33:42.237 UTC [473] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:33:42.237 UTC [473] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:33:42.239 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:33:42.240 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:33:42.240 UTC [473] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:33:42.240 UTC [473] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:33:42.241 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:33:42.243 UTC [473] DEBUG:  building index "pg_toast_26950_index" on table "pg_toast_26950" serially
2025-04-19 17:33:42.245 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:33:42.245 UTC [473] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:33:42.245 UTC [473] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:33:42.253 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:33:42.256 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:33:42.256 UTC [473] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:33:42.256 UTC [473] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:33:42.259 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:33:42.261 UTC [473] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:33:42.261 UTC [473] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:33:42.264 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:33:42.267 UTC [473] DEBUG:  building index "pg_toast_26983_index" on table "pg_toast_26983" serially
2025-04-19 17:33:42.268 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:33:42.268 UTC [473] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:33:42.268 UTC [473] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:33:42.269 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:33:42.271 UTC [473] DEBUG:  building index "pg_toast_26994_index" on table "pg_toast_26994" serially
2025-04-19 17:33:42.272 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:33:42.272 UTC [473] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:33:42.272 UTC [473] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:33:42.275 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:33:42.277 UTC [473] DEBUG:  building index "pg_toast_27017_index" on table "pg_toast_27017" serially
2025-04-19 17:33:42.278 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:33:42.278 UTC [473] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:33:42.278 UTC [473] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:33:42.279 UTC [473] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:33:42.279 UTC [473] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:33:42.280 UTC [473] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:33:42.280 UTC [473] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:33:42.282 UTC [473] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:33:42.282 UTC [473] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:33:42.283 UTC [473] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:33:42.283 UTC [473] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:33:42.283 UTC [473] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:33:42.283 UTC [473] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:33:42.285 UTC [473] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:33:42.285 UTC [473] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:33:42.288 UTC [473] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:33:42.288 UTC [473] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:33:42.289 UTC [473] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:33:42.289 UTC [473] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:33:42.294 UTC [473] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:33:42.294 UTC [473] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:33:42.298 UTC [473] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:33:42.299 UTC [473] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:33:42.302 UTC [473] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:33:42.302 UTC [473] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:33:42.332 UTC [473] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:33:42.624 UTC [473] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xiiiMov.LHa.3t/Dfwx2..htbpOTEnXXgrA0QJzy8gau2pBidHVS6')
	                RETURNING id, username, email
	                
2025-04-19 17:33:42.626 UTC [473] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:33:42.629 UTC [473] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:33:42.633 UTC [473] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:33:42.651 UTC [473] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:33:42.658 UTC [473] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:33:42.661 UTC [473] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:33:42.667 UTC [473] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:33:42.667 UTC [473] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:33:42.672 UTC [473] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:33:42.676 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:33:42.678 UTC [473] DEBUG:  building index "pg_toast_27053_index" on table "pg_toast_27053" serially
2025-04-19 17:33:42.680 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:33:42.680 UTC [473] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:33:42.680 UTC [473] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:33:42.681 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:33:42.681 UTC [473] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:33:42.682 UTC [473] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:33:42.682 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:33:42.683 UTC [473] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:33:42.683 UTC [473] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:33:42.683 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:33:42.684 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:33:42.684 UTC [473] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:33:42.684 UTC [473] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:33:42.685 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:33:42.685 UTC [473] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:33:42.685 UTC [473] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:33:42.685 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:33:42.686 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:33:42.686 UTC [473] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:33:42.686 UTC [473] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:33:42.687 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:33:42.688 UTC [473] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:33:42.688 UTC [473] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:33:42.689 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:33:42.690 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:33:42.690 UTC [473] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:33:42.690 UTC [473] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:33:42.692 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:33:42.693 UTC [473] DEBUG:  building index "pg_toast_27114_index" on table "pg_toast_27114" serially
2025-04-19 17:33:42.694 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:33:42.694 UTC [473] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:33:42.694 UTC [473] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:33:42.695 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:33:42.696 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:33:42.696 UTC [473] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:33:42.696 UTC [473] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:33:42.696 UTC [473] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:33:42.697 UTC [473] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:33:42.697 UTC [473] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:33:42.698 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:33:42.699 UTC [473] DEBUG:  building index "pg_toast_27147_index" on table "pg_toast_27147" serially
2025-04-19 17:33:42.700 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:33:42.700 UTC [473] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:33:42.700 UTC [473] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:33:42.701 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:33:42.702 UTC [473] DEBUG:  building index "pg_toast_27158_index" on table "pg_toast_27158" serially
2025-04-19 17:33:42.703 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:33:42.703 UTC [473] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:33:42.703 UTC [473] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:33:42.706 UTC [473] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:33:42.711 UTC [473] DEBUG:  building index "pg_toast_27181_index" on table "pg_toast_27181" serially
2025-04-19 17:33:42.714 UTC [473] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:33:42.715 UTC [473] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:33:42.715 UTC [473] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:33:42.717 UTC [473] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:33:42.717 UTC [473] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:33:42.718 UTC [473] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:33:42.719 UTC [473] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:33:42.720 UTC [473] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:33:42.720 UTC [473] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:33:42.721 UTC [473] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:33:42.721 UTC [473] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:33:42.723 UTC [473] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:33:42.723 UTC [473] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:33:42.724 UTC [473] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:33:42.724 UTC [473] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:33:42.725 UTC [473] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:33:42.725 UTC [473] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:33:42.726 UTC [473] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:33:42.726 UTC [473] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:33:42.727 UTC [473] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:33:42.727 UTC [473] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:33:42.729 UTC [473] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:33:42.729 UTC [473] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:33:42.730 UTC [473] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:33:42.730 UTC [473] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:33:42.741 UTC [473] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:33:42.996 UTC [473] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$f1u9piFc8Ct3ZNEeN8wMzu4ewuWvQ1OeZOqwhtiQjMExSLF2jwX7m')
	                RETURNING id, username, email
	                
2025-04-19 17:33:42.997 UTC [473] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:33:42.997 UTC [473] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:33:55.061 UTC [474] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 17:33:55.344 UTC [474] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 17:34:06.081 UTC [473] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:34:06.475 UTC [473] DEBUG:  unexpected EOF on client connection
2025-04-19 17:34:10.046 UTC [489] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:34:10.058 UTC [489] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:34:10.069 UTC [489] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:34:10.069 UTC [489] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:34:10.078 UTC [489] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:34:10.084 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:34:10.086 UTC [489] DEBUG:  building index "pg_toast_27218_index" on table "pg_toast_27218" serially
2025-04-19 17:34:10.090 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:34:10.091 UTC [489] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:34:10.091 UTC [489] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:34:10.096 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:34:10.096 UTC [489] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:34:10.096 UTC [489] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:34:10.099 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:34:10.100 UTC [489] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:34:10.100 UTC [489] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:34:10.103 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:34:10.104 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:34:10.105 UTC [489] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:34:10.105 UTC [489] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:34:10.106 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:34:10.106 UTC [489] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:34:10.107 UTC [489] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:34:10.109 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:34:10.111 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:34:10.111 UTC [489] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:34:10.111 UTC [489] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:34:10.120 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:34:10.122 UTC [489] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:34:10.122 UTC [489] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:34:10.124 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:34:10.125 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:34:10.125 UTC [489] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:34:10.125 UTC [489] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:34:10.127 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:34:10.129 UTC [489] DEBUG:  building index "pg_toast_27279_index" on table "pg_toast_27279" serially
2025-04-19 17:34:10.132 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:34:10.132 UTC [489] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:34:10.132 UTC [489] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:34:10.137 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:34:10.138 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:34:10.139 UTC [489] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:34:10.139 UTC [489] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:34:10.141 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:34:10.141 UTC [489] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:34:10.141 UTC [489] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:34:10.145 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:34:10.148 UTC [489] DEBUG:  building index "pg_toast_27312_index" on table "pg_toast_27312" serially
2025-04-19 17:34:10.149 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:34:10.149 UTC [489] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:34:10.149 UTC [489] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:34:10.153 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:34:10.156 UTC [489] DEBUG:  building index "pg_toast_27323_index" on table "pg_toast_27323" serially
2025-04-19 17:34:10.158 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:34:10.158 UTC [489] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:34:10.158 UTC [489] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:34:10.159 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:34:10.161 UTC [489] DEBUG:  building index "pg_toast_27346_index" on table "pg_toast_27346" serially
2025-04-19 17:34:10.164 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:34:10.164 UTC [489] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:34:10.164 UTC [489] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:34:10.166 UTC [489] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:34:10.166 UTC [489] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:34:10.172 UTC [489] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:34:10.172 UTC [489] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:34:10.174 UTC [489] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:34:10.174 UTC [489] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:34:10.182 UTC [489] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:34:10.182 UTC [489] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:34:10.184 UTC [489] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:34:10.184 UTC [489] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:34:10.187 UTC [489] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:34:10.187 UTC [489] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:34:10.190 UTC [489] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:34:10.190 UTC [489] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:34:10.193 UTC [489] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:34:10.193 UTC [489] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:34:10.196 UTC [489] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:34:10.196 UTC [489] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:34:10.200 UTC [489] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:34:10.201 UTC [489] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:34:10.203 UTC [489] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:34:10.203 UTC [489] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:34:10.246 UTC [489] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:34:11.546 UTC [489] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$2r97UKUiQFLPY96XmcWWtuCzFJ6qbbK4dQ5fceOh43ISvIFwfz.km')
	                RETURNING id, username, email
	                
2025-04-19 17:34:11.548 UTC [489] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:34:11.548 UTC [489] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:34:11.557 UTC [489] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:34:11.572 UTC [489] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:34:11.584 UTC [489] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:34:11.588 UTC [489] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:34:11.603 UTC [489] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:34:11.603 UTC [489] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:34:11.607 UTC [489] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:34:11.617 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:34:11.620 UTC [489] DEBUG:  building index "pg_toast_27382_index" on table "pg_toast_27382" serially
2025-04-19 17:34:11.628 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:34:11.628 UTC [489] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:34:11.628 UTC [489] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:34:11.632 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:34:11.632 UTC [489] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:34:11.632 UTC [489] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:34:11.635 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:34:11.637 UTC [489] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:34:11.637 UTC [489] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:34:11.640 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:34:11.641 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:34:11.641 UTC [489] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:34:11.641 UTC [489] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:34:11.645 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:34:11.645 UTC [489] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:34:11.645 UTC [489] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:34:11.647 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:34:11.649 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:34:11.649 UTC [489] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:34:11.649 UTC [489] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:34:11.652 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:34:11.652 UTC [489] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:34:11.652 UTC [489] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:34:11.654 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:34:11.656 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:34:11.659 UTC [489] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:34:11.659 UTC [489] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:34:11.663 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:34:11.664 UTC [489] DEBUG:  building index "pg_toast_27443_index" on table "pg_toast_27443" serially
2025-04-19 17:34:11.670 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:34:11.670 UTC [489] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:34:11.670 UTC [489] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:34:11.672 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:34:11.673 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:34:11.674 UTC [489] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:34:11.674 UTC [489] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:34:11.675 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:34:11.675 UTC [489] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:34:11.675 UTC [489] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:34:11.677 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:34:11.678 UTC [489] DEBUG:  building index "pg_toast_27476_index" on table "pg_toast_27476" serially
2025-04-19 17:34:11.687 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:34:11.687 UTC [489] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:34:11.687 UTC [489] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:34:11.701 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:34:11.703 UTC [489] DEBUG:  building index "pg_toast_27487_index" on table "pg_toast_27487" serially
2025-04-19 17:34:11.709 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:34:11.710 UTC [489] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:34:11.710 UTC [489] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:34:11.719 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:34:11.720 UTC [489] DEBUG:  building index "pg_toast_27510_index" on table "pg_toast_27510" serially
2025-04-19 17:34:11.725 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:34:11.725 UTC [489] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:34:11.725 UTC [489] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:34:11.733 UTC [489] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:34:11.733 UTC [489] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:34:11.738 UTC [489] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:34:11.738 UTC [489] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:34:11.743 UTC [489] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:34:11.743 UTC [489] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:34:11.746 UTC [489] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:34:11.746 UTC [489] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:34:11.751 UTC [489] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:34:11.751 UTC [489] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:34:11.754 UTC [489] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:34:11.754 UTC [489] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:34:11.759 UTC [489] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:34:11.759 UTC [489] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:34:11.761 UTC [489] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:34:11.761 UTC [489] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:34:11.767 UTC [489] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:34:11.767 UTC [489] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:34:11.769 UTC [489] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:34:11.769 UTC [489] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:34:11.772 UTC [489] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:34:11.772 UTC [489] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:34:11.820 UTC [489] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:34:12.110 UTC [489] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4Q4Hd.CDCHT7W64pnHE.J.nZdYMt0bv9paeaMDWqxUlmYPZGb2GHi')
	                RETURNING id, username, email
	                
2025-04-19 17:34:12.111 UTC [489] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:34:12.112 UTC [489] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:34:14.614 UTC [490] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 17:34:22.671 UTC [489] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:34:22.960 UTC [489] DEBUG:  unexpected EOF on client connection
2025-04-19 17:35:21.092 UTC [498] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:35:21.106 UTC [498] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:35:21.114 UTC [498] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:35:21.114 UTC [498] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:35:21.118 UTC [498] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:35:21.121 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:35:21.124 UTC [498] DEBUG:  building index "pg_toast_27546_index" on table "pg_toast_27546" serially
2025-04-19 17:35:21.125 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:35:21.125 UTC [498] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:35:21.125 UTC [498] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:35:21.127 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:35:21.128 UTC [498] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:35:21.129 UTC [498] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:35:21.130 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:35:21.130 UTC [498] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:35:21.130 UTC [498] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:35:21.132 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:35:21.135 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:35:21.135 UTC [498] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:35:21.135 UTC [498] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:35:21.136 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:35:21.137 UTC [498] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:35:21.137 UTC [498] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:35:21.138 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:35:21.139 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:35:21.139 UTC [498] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:35:21.139 UTC [498] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:35:21.140 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:35:21.140 UTC [498] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:35:21.140 UTC [498] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:35:21.141 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:35:21.142 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:35:21.142 UTC [498] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:35:21.142 UTC [498] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:35:21.143 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:35:21.145 UTC [498] DEBUG:  building index "pg_toast_27607_index" on table "pg_toast_27607" serially
2025-04-19 17:35:21.146 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:35:21.147 UTC [498] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:35:21.147 UTC [498] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:35:21.148 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:35:21.149 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:35:21.149 UTC [498] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:35:21.149 UTC [498] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:35:21.150 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:35:21.150 UTC [498] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:35:21.150 UTC [498] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:35:21.151 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:35:21.152 UTC [498] DEBUG:  building index "pg_toast_27640_index" on table "pg_toast_27640" serially
2025-04-19 17:35:21.153 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:35:21.154 UTC [498] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:35:21.154 UTC [498] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:35:21.154 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:35:21.155 UTC [498] DEBUG:  building index "pg_toast_27651_index" on table "pg_toast_27651" serially
2025-04-19 17:35:21.156 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:35:21.156 UTC [498] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:35:21.156 UTC [498] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:35:21.157 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:35:21.158 UTC [498] DEBUG:  building index "pg_toast_27674_index" on table "pg_toast_27674" serially
2025-04-19 17:35:21.159 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:35:21.160 UTC [498] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:35:21.160 UTC [498] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:35:21.160 UTC [498] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:35:21.160 UTC [498] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:35:21.161 UTC [498] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:35:21.161 UTC [498] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:35:21.162 UTC [498] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:35:21.162 UTC [498] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:35:21.163 UTC [498] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:35:21.163 UTC [498] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:35:21.164 UTC [498] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:35:21.164 UTC [498] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:35:21.165 UTC [498] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:35:21.165 UTC [498] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:35:21.166 UTC [498] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:35:21.166 UTC [498] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:35:21.167 UTC [498] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:35:21.167 UTC [498] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:35:21.168 UTC [498] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:35:21.168 UTC [498] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:35:21.170 UTC [498] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:35:21.170 UTC [498] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:35:21.171 UTC [498] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:35:21.171 UTC [498] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:35:21.182 UTC [498] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:35:21.194 UTC [499] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 17:35:21.366 UTC [499] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 17:35:21.451 UTC [498] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5KBc9tbcYb2enDuGJTsFq.N9Fad74NrfBIHeXDL41hjo8p394evke')
	                RETURNING id, username, email
	                
2025-04-19 17:35:21.452 UTC [498] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:35:21.452 UTC [498] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:35:21.453 UTC [498] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:35:21.460 UTC [498] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:35:21.461 UTC [498] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:35:21.463 UTC [498] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:35:21.467 UTC [498] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:35:21.467 UTC [498] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:35:21.470 UTC [498] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:35:21.473 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:35:21.474 UTC [498] DEBUG:  building index "pg_toast_27711_index" on table "pg_toast_27711" serially
2025-04-19 17:35:21.475 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:35:21.475 UTC [498] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:35:21.475 UTC [498] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:35:21.477 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:35:21.477 UTC [498] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:35:21.477 UTC [498] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:35:21.477 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:35:21.478 UTC [498] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:35:21.478 UTC [498] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:35:21.479 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:35:21.480 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:35:21.480 UTC [498] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:35:21.480 UTC [498] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:35:21.482 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:35:21.482 UTC [498] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:35:21.482 UTC [498] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:35:21.483 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:35:21.484 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:35:21.484 UTC [498] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:35:21.484 UTC [498] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:35:21.485 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:35:21.486 UTC [498] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:35:21.486 UTC [498] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:35:21.488 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:35:21.490 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:35:21.490 UTC [498] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:35:21.490 UTC [498] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:35:21.491 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:35:21.493 UTC [498] DEBUG:  building index "pg_toast_27772_index" on table "pg_toast_27772" serially
2025-04-19 17:35:21.495 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:35:21.495 UTC [498] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:35:21.495 UTC [498] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:35:21.497 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:35:21.499 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:35:21.500 UTC [498] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:35:21.500 UTC [498] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:35:21.501 UTC [498] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:35:21.502 UTC [498] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:35:21.502 UTC [498] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:35:21.503 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:35:21.504 UTC [498] DEBUG:  building index "pg_toast_27805_index" on table "pg_toast_27805" serially
2025-04-19 17:35:21.505 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:35:21.505 UTC [498] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:35:21.505 UTC [498] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:35:21.505 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:35:21.506 UTC [498] DEBUG:  building index "pg_toast_27816_index" on table "pg_toast_27816" serially
2025-04-19 17:35:21.507 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:35:21.507 UTC [498] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:35:21.507 UTC [498] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:35:21.509 UTC [498] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:35:21.510 UTC [498] DEBUG:  building index "pg_toast_27839_index" on table "pg_toast_27839" serially
2025-04-19 17:35:21.511 UTC [498] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:35:21.511 UTC [498] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:35:21.511 UTC [498] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:35:21.512 UTC [498] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:35:21.512 UTC [498] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:35:21.513 UTC [498] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:35:21.513 UTC [498] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:35:21.514 UTC [498] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:35:21.514 UTC [498] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:35:21.515 UTC [498] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:35:21.515 UTC [498] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:35:21.515 UTC [498] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:35:21.515 UTC [498] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:35:21.516 UTC [498] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:35:21.516 UTC [498] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:35:21.518 UTC [498] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:35:21.518 UTC [498] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:35:21.518 UTC [498] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:35:21.518 UTC [498] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:35:21.519 UTC [498] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:35:21.519 UTC [498] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:35:21.520 UTC [498] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:35:21.520 UTC [498] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:35:21.521 UTC [498] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:35:21.521 UTC [498] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:35:21.532 UTC [498] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:35:21.777 UTC [498] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$eUdTq3jTtlYfrpdr2oVgVeASJAFkeLppJzqTz.V0j3Cm5zxLIzgVm')
	                RETURNING id, username, email
	                
2025-04-19 17:35:21.778 UTC [498] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:35:21.778 UTC [498] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:35:34.850 UTC [498] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:35:35.364 UTC [498] DEBUG:  unexpected EOF on client connection
2025-04-19 17:35:37.617 UTC [513] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:35:37.632 UTC [513] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:35:37.641 UTC [513] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:35:37.641 UTC [513] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:35:37.649 UTC [513] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:35:37.656 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:35:37.659 UTC [513] DEBUG:  building index "pg_toast_27875_index" on table "pg_toast_27875" serially
2025-04-19 17:35:37.661 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:35:37.661 UTC [513] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:35:37.661 UTC [513] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:35:37.662 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:35:37.663 UTC [513] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:35:37.663 UTC [513] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:35:37.664 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:35:37.664 UTC [513] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:35:37.664 UTC [513] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:35:37.665 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:35:37.666 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:35:37.666 UTC [513] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:35:37.666 UTC [513] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:35:37.666 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:35:37.667 UTC [513] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:35:37.667 UTC [513] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:35:37.668 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:35:37.669 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:35:37.669 UTC [513] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:35:37.669 UTC [513] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:35:37.669 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:35:37.670 UTC [513] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:35:37.670 UTC [513] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:35:37.671 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:35:37.672 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:35:37.672 UTC [513] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:35:37.672 UTC [513] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:35:37.673 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:35:37.675 UTC [513] DEBUG:  building index "pg_toast_27936_index" on table "pg_toast_27936" serially
2025-04-19 17:35:37.676 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:35:37.676 UTC [513] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:35:37.676 UTC [513] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:35:37.677 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:35:37.678 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:35:37.678 UTC [513] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:35:37.678 UTC [513] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:35:37.679 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:35:37.679 UTC [513] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:35:37.679 UTC [513] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:35:37.680 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:35:37.681 UTC [513] DEBUG:  building index "pg_toast_27969_index" on table "pg_toast_27969" serially
2025-04-19 17:35:37.682 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:35:37.682 UTC [513] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:35:37.682 UTC [513] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:35:37.683 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:35:37.684 UTC [513] DEBUG:  building index "pg_toast_27980_index" on table "pg_toast_27980" serially
2025-04-19 17:35:37.685 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:35:37.685 UTC [513] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:35:37.685 UTC [513] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:35:37.687 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:35:37.688 UTC [513] DEBUG:  building index "pg_toast_28003_index" on table "pg_toast_28003" serially
2025-04-19 17:35:37.688 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:35:37.688 UTC [513] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:35:37.688 UTC [513] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:35:37.689 UTC [513] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:35:37.689 UTC [513] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:35:37.690 UTC [513] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:35:37.690 UTC [513] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:35:37.691 UTC [513] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:35:37.691 UTC [513] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:35:37.692 UTC [513] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:35:37.692 UTC [513] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:35:37.694 UTC [513] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:35:37.694 UTC [513] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:35:37.695 UTC [513] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:35:37.695 UTC [513] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:35:37.696 UTC [513] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:35:37.696 UTC [513] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:35:37.697 UTC [513] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:35:37.697 UTC [513] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:35:37.698 UTC [513] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:35:37.698 UTC [513] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:35:37.699 UTC [513] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:35:37.699 UTC [513] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:35:37.700 UTC [513] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:35:37.700 UTC [513] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:35:37.711 UTC [513] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:35:37.999 UTC [513] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RLmYlJbYtu.CE2Wuvw2rauj9thnxxzUr.JK6I7SmAHz1w4209PgD2')
	                RETURNING id, username, email
	                
2025-04-19 17:35:38.003 UTC [513] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:35:38.003 UTC [513] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:35:38.006 UTC [513] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:35:38.019 UTC [513] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:35:38.021 UTC [513] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:35:38.023 UTC [513] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:35:38.027 UTC [513] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:35:38.027 UTC [513] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:35:38.030 UTC [513] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:35:38.033 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:35:38.034 UTC [513] DEBUG:  building index "pg_toast_28039_index" on table "pg_toast_28039" serially
2025-04-19 17:35:38.036 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:35:38.036 UTC [513] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:35:38.036 UTC [513] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:35:38.037 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:35:38.037 UTC [513] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:35:38.037 UTC [513] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:35:38.039 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:35:38.039 UTC [513] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:35:38.039 UTC [513] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:35:38.044 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:35:38.047 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:35:38.047 UTC [513] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:35:38.048 UTC [513] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:35:38.049 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:35:38.050 UTC [513] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:35:38.050 UTC [513] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:35:38.051 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:35:38.053 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:35:38.054 UTC [513] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:35:38.054 UTC [513] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:35:38.055 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:35:38.055 UTC [513] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:35:38.055 UTC [513] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:35:38.057 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:35:38.058 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:35:38.059 UTC [513] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:35:38.059 UTC [513] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:35:38.060 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:35:38.062 UTC [513] DEBUG:  building index "pg_toast_28100_index" on table "pg_toast_28100" serially
2025-04-19 17:35:38.063 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:35:38.064 UTC [513] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:35:38.064 UTC [513] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:35:38.067 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:35:38.068 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:35:38.068 UTC [513] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:35:38.068 UTC [513] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:35:38.070 UTC [513] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:35:38.070 UTC [513] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:35:38.070 UTC [513] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:35:38.072 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:35:38.074 UTC [513] DEBUG:  building index "pg_toast_28133_index" on table "pg_toast_28133" serially
2025-04-19 17:35:38.076 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:35:38.076 UTC [513] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:35:38.076 UTC [513] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:35:38.077 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:35:38.079 UTC [513] DEBUG:  building index "pg_toast_28144_index" on table "pg_toast_28144" serially
2025-04-19 17:35:38.080 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:35:38.080 UTC [513] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:35:38.080 UTC [513] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:35:38.081 UTC [513] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:35:38.082 UTC [513] DEBUG:  building index "pg_toast_28167_index" on table "pg_toast_28167" serially
2025-04-19 17:35:38.083 UTC [513] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:35:38.084 UTC [513] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:35:38.084 UTC [513] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:35:38.085 UTC [513] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:35:38.085 UTC [513] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:35:38.086 UTC [513] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:35:38.086 UTC [513] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:35:38.088 UTC [513] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:35:38.088 UTC [513] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:35:38.089 UTC [513] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:35:38.089 UTC [513] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:35:38.090 UTC [513] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:35:38.090 UTC [513] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:35:38.091 UTC [513] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:35:38.091 UTC [513] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:35:38.093 UTC [513] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:35:38.093 UTC [513] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:35:38.094 UTC [513] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:35:38.094 UTC [513] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:35:38.097 UTC [513] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:35:38.097 UTC [513] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:35:38.100 UTC [513] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:35:38.100 UTC [513] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:35:38.102 UTC [513] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:35:38.102 UTC [513] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:35:38.117 UTC [513] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:35:38.361 UTC [513] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cVCla7tyHHCGdD.WD/lCW.2sN8dr5MSvBIviQu1FhEklqtbVTAnMq')
	                RETURNING id, username, email
	                
2025-04-19 17:35:38.362 UTC [513] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:35:38.362 UTC [513] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:39:41.683 UTC [513] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:39:41.815 UTC [521] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 17:39:42.116 UTC [513] DEBUG:  unexpected EOF on client connection
2025-04-19 17:39:44.154 UTC [522] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:39:44.161 UTC [522] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:39:44.177 UTC [522] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:39:44.177 UTC [522] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:39:44.187 UTC [522] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:39:44.192 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:39:44.194 UTC [522] DEBUG:  building index "pg_toast_28203_index" on table "pg_toast_28203" serially
2025-04-19 17:39:44.196 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:39:44.196 UTC [522] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:39:44.196 UTC [522] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:39:44.197 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:39:44.198 UTC [522] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:39:44.198 UTC [522] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:39:44.198 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:39:44.199 UTC [522] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:39:44.199 UTC [522] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:39:44.199 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:39:44.200 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:39:44.200 UTC [522] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:39:44.200 UTC [522] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:39:44.201 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:39:44.201 UTC [522] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:39:44.201 UTC [522] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:39:44.202 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:39:44.203 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:39:44.203 UTC [522] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:39:44.203 UTC [522] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:39:44.204 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:39:44.204 UTC [522] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:39:44.204 UTC [522] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:39:44.207 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:39:44.208 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:39:44.208 UTC [522] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:39:44.208 UTC [522] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:39:44.210 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:39:44.211 UTC [522] DEBUG:  building index "pg_toast_28264_index" on table "pg_toast_28264" serially
2025-04-19 17:39:44.212 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:39:44.212 UTC [522] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:39:44.212 UTC [522] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:39:44.213 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:39:44.215 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:39:44.215 UTC [522] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:39:44.215 UTC [522] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:39:44.216 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:39:44.216 UTC [522] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:39:44.216 UTC [522] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:39:44.217 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:39:44.218 UTC [522] DEBUG:  building index "pg_toast_28297_index" on table "pg_toast_28297" serially
2025-04-19 17:39:44.219 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:39:44.219 UTC [522] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:39:44.219 UTC [522] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:39:44.220 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:39:44.221 UTC [522] DEBUG:  building index "pg_toast_28308_index" on table "pg_toast_28308" serially
2025-04-19 17:39:44.221 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:39:44.222 UTC [522] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:39:44.222 UTC [522] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:39:44.223 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:39:44.224 UTC [522] DEBUG:  building index "pg_toast_28331_index" on table "pg_toast_28331" serially
2025-04-19 17:39:44.225 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:39:44.225 UTC [522] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:39:44.225 UTC [522] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:39:44.226 UTC [522] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:39:44.226 UTC [522] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:39:44.228 UTC [522] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:39:44.228 UTC [522] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:39:44.229 UTC [522] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:39:44.229 UTC [522] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:39:44.230 UTC [522] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:39:44.230 UTC [522] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:39:44.230 UTC [522] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:39:44.230 UTC [522] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:39:44.231 UTC [522] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:39:44.231 UTC [522] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:39:44.232 UTC [522] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:39:44.232 UTC [522] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:39:44.233 UTC [522] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:39:44.233 UTC [522] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:39:44.234 UTC [522] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:39:44.234 UTC [522] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:39:44.234 UTC [522] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:39:44.234 UTC [522] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:39:44.235 UTC [522] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:39:44.235 UTC [522] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:39:44.251 UTC [522] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:39:44.523 UTC [522] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$nb1XAgEAmGhtsi.9q7qNvOV712Qb6iu7beVshFFggIq97N7lS82OG')
	                RETURNING id, username, email
	                
2025-04-19 17:39:44.524 UTC [522] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:39:44.524 UTC [522] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:39:44.525 UTC [522] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:39:44.532 UTC [522] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:39:44.533 UTC [522] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:39:44.535 UTC [522] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:39:44.539 UTC [522] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:39:44.539 UTC [522] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:39:44.542 UTC [522] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:39:44.544 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:39:44.545 UTC [522] DEBUG:  building index "pg_toast_28367_index" on table "pg_toast_28367" serially
2025-04-19 17:39:44.547 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:39:44.547 UTC [522] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:39:44.547 UTC [522] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:39:44.548 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:39:44.548 UTC [522] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:39:44.548 UTC [522] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:39:44.549 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:39:44.549 UTC [522] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:39:44.549 UTC [522] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:39:44.550 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:39:44.551 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:39:44.551 UTC [522] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:39:44.551 UTC [522] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:39:44.552 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:39:44.552 UTC [522] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:39:44.552 UTC [522] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:39:44.552 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:39:44.553 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:39:44.553 UTC [522] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:39:44.553 UTC [522] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:39:44.554 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:39:44.554 UTC [522] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:39:44.554 UTC [522] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:39:44.555 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:39:44.556 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:39:44.557 UTC [522] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:39:44.557 UTC [522] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:39:44.559 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:39:44.561 UTC [522] DEBUG:  building index "pg_toast_28428_index" on table "pg_toast_28428" serially
2025-04-19 17:39:44.562 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:39:44.562 UTC [522] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:39:44.562 UTC [522] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:39:44.564 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:39:44.565 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:39:44.565 UTC [522] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:39:44.565 UTC [522] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:39:44.566 UTC [522] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:39:44.566 UTC [522] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:39:44.566 UTC [522] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:39:44.567 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:39:44.568 UTC [522] DEBUG:  building index "pg_toast_28461_index" on table "pg_toast_28461" serially
2025-04-19 17:39:44.569 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:39:44.569 UTC [522] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:39:44.569 UTC [522] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:39:44.570 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:39:44.572 UTC [522] DEBUG:  building index "pg_toast_28472_index" on table "pg_toast_28472" serially
2025-04-19 17:39:44.572 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:39:44.572 UTC [522] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:39:44.573 UTC [522] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:39:44.574 UTC [522] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:39:44.575 UTC [522] DEBUG:  building index "pg_toast_28495_index" on table "pg_toast_28495" serially
2025-04-19 17:39:44.575 UTC [522] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:39:44.576 UTC [522] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:39:44.576 UTC [522] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:39:44.576 UTC [522] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:39:44.576 UTC [522] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:39:44.577 UTC [522] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:39:44.577 UTC [522] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:39:44.578 UTC [522] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:39:44.578 UTC [522] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:39:44.579 UTC [522] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:39:44.579 UTC [522] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:39:44.580 UTC [522] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:39:44.580 UTC [522] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:39:44.581 UTC [522] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:39:44.581 UTC [522] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:39:44.582 UTC [522] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:39:44.582 UTC [522] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:39:44.583 UTC [522] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:39:44.583 UTC [522] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:39:44.584 UTC [522] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:39:44.584 UTC [522] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:39:44.585 UTC [522] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:39:44.585 UTC [522] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:39:44.586 UTC [522] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:39:44.586 UTC [522] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:39:44.595 UTC [522] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:39:44.841 UTC [522] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bkN8oCODr6UbFwH2eh6HteZxmn/l4jwAQj13S70wHtfxRJtohrzXu')
	                RETURNING id, username, email
	                
2025-04-19 17:39:44.842 UTC [522] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:39:44.842 UTC [522] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:39:57.871 UTC [522] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:39:58.190 UTC [522] DEBUG:  unexpected EOF on client connection
2025-04-19 17:40:00.075 UTC [537] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:40:00.081 UTC [537] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:40:00.091 UTC [537] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:40:00.091 UTC [537] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:40:00.097 UTC [537] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:40:00.101 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:40:00.104 UTC [537] DEBUG:  building index "pg_toast_28531_index" on table "pg_toast_28531" serially
2025-04-19 17:40:00.105 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:40:00.106 UTC [537] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:40:00.106 UTC [537] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:40:00.107 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:40:00.107 UTC [537] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:40:00.107 UTC [537] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:40:00.108 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:40:00.108 UTC [537] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:40:00.108 UTC [537] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:40:00.108 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:40:00.109 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:40:00.109 UTC [537] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:40:00.109 UTC [537] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:40:00.110 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:40:00.110 UTC [537] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:40:00.110 UTC [537] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:40:00.111 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:40:00.112 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:40:00.112 UTC [537] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:40:00.112 UTC [537] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:40:00.113 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:40:00.113 UTC [537] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:40:00.113 UTC [537] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:40:00.115 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:40:00.116 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:40:00.116 UTC [537] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:40:00.116 UTC [537] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:40:00.117 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:40:00.118 UTC [537] DEBUG:  building index "pg_toast_28592_index" on table "pg_toast_28592" serially
2025-04-19 17:40:00.119 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:40:00.119 UTC [537] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:40:00.119 UTC [537] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:40:00.120 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:40:00.121 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:40:00.122 UTC [537] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:40:00.122 UTC [537] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:40:00.122 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:40:00.123 UTC [537] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:40:00.123 UTC [537] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:40:00.124 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:40:00.125 UTC [537] DEBUG:  building index "pg_toast_28625_index" on table "pg_toast_28625" serially
2025-04-19 17:40:00.126 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:40:00.126 UTC [537] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:40:00.126 UTC [537] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:40:00.127 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:40:00.128 UTC [537] DEBUG:  building index "pg_toast_28636_index" on table "pg_toast_28636" serially
2025-04-19 17:40:00.128 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:40:00.128 UTC [537] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:40:00.128 UTC [537] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:40:00.130 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:40:00.130 UTC [537] DEBUG:  building index "pg_toast_28659_index" on table "pg_toast_28659" serially
2025-04-19 17:40:00.131 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:40:00.131 UTC [537] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:40:00.131 UTC [537] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:40:00.132 UTC [537] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:40:00.132 UTC [537] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:40:00.133 UTC [537] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:40:00.133 UTC [537] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:40:00.133 UTC [537] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:40:00.133 UTC [537] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:40:00.134 UTC [537] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:40:00.134 UTC [537] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:40:00.135 UTC [537] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:40:00.135 UTC [537] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:40:00.136 UTC [537] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:40:00.136 UTC [537] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:40:00.136 UTC [537] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:40:00.136 UTC [537] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:40:00.137 UTC [537] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:40:00.137 UTC [537] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:40:00.138 UTC [537] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:40:00.138 UTC [537] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:40:00.139 UTC [537] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:40:00.139 UTC [537] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:40:00.139 UTC [537] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:40:00.139 UTC [537] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:40:00.150 UTC [537] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:40:00.423 UTC [537] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$HY.dlXwLMbb1myqOXidF4uDtWmMsa3FUrEPnTPYp/hH1pRktgYZme')
	                RETURNING id, username, email
	                
2025-04-19 17:40:00.424 UTC [537] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:40:00.425 UTC [537] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:40:00.425 UTC [537] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:40:00.435 UTC [537] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:40:00.436 UTC [537] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:40:00.439 UTC [537] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:40:00.444 UTC [537] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:40:00.444 UTC [537] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:40:00.448 UTC [537] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:40:00.454 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:40:00.455 UTC [537] DEBUG:  building index "pg_toast_28695_index" on table "pg_toast_28695" serially
2025-04-19 17:40:00.457 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:40:00.457 UTC [537] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:40:00.457 UTC [537] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:40:00.458 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:40:00.458 UTC [537] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:40:00.458 UTC [537] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:40:00.460 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:40:00.460 UTC [537] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:40:00.460 UTC [537] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:40:00.461 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:40:00.462 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:40:00.462 UTC [537] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:40:00.462 UTC [537] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:40:00.463 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:40:00.464 UTC [537] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:40:00.464 UTC [537] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:40:00.466 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:40:00.469 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:40:00.470 UTC [537] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:40:00.470 UTC [537] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:40:00.471 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:40:00.472 UTC [537] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:40:00.472 UTC [537] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:40:00.474 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:40:00.475 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:40:00.475 UTC [537] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:40:00.475 UTC [537] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:40:00.476 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:40:00.478 UTC [537] DEBUG:  building index "pg_toast_28756_index" on table "pg_toast_28756" serially
2025-04-19 17:40:00.479 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:40:00.479 UTC [537] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:40:00.479 UTC [537] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:40:00.481 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:40:00.482 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:40:00.482 UTC [537] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:40:00.482 UTC [537] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:40:00.483 UTC [537] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:40:00.483 UTC [537] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:40:00.483 UTC [537] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:40:00.484 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:40:00.485 UTC [537] DEBUG:  building index "pg_toast_28789_index" on table "pg_toast_28789" serially
2025-04-19 17:40:00.486 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:40:00.486 UTC [537] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:40:00.486 UTC [537] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:40:00.487 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:40:00.488 UTC [537] DEBUG:  building index "pg_toast_28800_index" on table "pg_toast_28800" serially
2025-04-19 17:40:00.488 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:40:00.488 UTC [537] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:40:00.488 UTC [537] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:40:00.490 UTC [537] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:40:00.490 UTC [537] DEBUG:  building index "pg_toast_28823_index" on table "pg_toast_28823" serially
2025-04-19 17:40:00.491 UTC [537] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:40:00.491 UTC [537] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:40:00.491 UTC [537] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:40:00.492 UTC [537] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:40:00.492 UTC [537] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:40:00.493 UTC [537] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:40:00.493 UTC [537] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:40:00.494 UTC [537] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:40:00.494 UTC [537] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:40:00.495 UTC [537] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:40:00.495 UTC [537] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:40:00.496 UTC [537] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:40:00.496 UTC [537] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:40:00.496 UTC [537] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:40:00.496 UTC [537] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:40:00.497 UTC [537] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:40:00.497 UTC [537] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:40:00.498 UTC [537] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:40:00.498 UTC [537] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:40:00.499 UTC [537] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:40:00.499 UTC [537] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:40:00.500 UTC [537] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:40:00.500 UTC [537] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:40:00.500 UTC [537] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:40:00.500 UTC [537] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:40:00.509 UTC [537] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:40:00.772 UTC [537] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$KsqywL7t3G/EKpDNF4QEzOOubcMxtcsJYkmnNImcpvNqDPZIfEGOe')
	                RETURNING id, username, email
	                
2025-04-19 17:40:00.773 UTC [537] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:40:00.773 UTC [537] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:43:32.942 UTC [545] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 17:43:33.187 UTC [545] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 17:43:34.927 UTC [537] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:43:35.233 UTC [537] DEBUG:  unexpected EOF on client connection
2025-04-19 17:43:37.293 UTC [546] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:43:37.315 UTC [546] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:43:37.334 UTC [546] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:43:37.334 UTC [546] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:43:37.340 UTC [546] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:43:37.345 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:43:37.350 UTC [546] DEBUG:  building index "pg_toast_28860_index" on table "pg_toast_28860" serially
2025-04-19 17:43:37.358 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:43:37.359 UTC [546] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:43:37.359 UTC [546] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:43:37.364 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:43:37.365 UTC [546] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:43:37.367 UTC [546] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:43:37.369 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:43:37.369 UTC [546] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:43:37.369 UTC [546] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:43:37.370 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:43:37.371 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:43:37.371 UTC [546] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:43:37.371 UTC [546] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:43:37.373 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:43:37.374 UTC [546] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:43:37.374 UTC [546] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:43:37.376 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:43:37.378 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:43:37.378 UTC [546] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:43:37.378 UTC [546] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:43:37.380 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:43:37.380 UTC [546] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:43:37.380 UTC [546] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:43:37.382 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:43:37.383 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:43:37.383 UTC [546] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:43:37.383 UTC [546] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:43:37.384 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:43:37.386 UTC [546] DEBUG:  building index "pg_toast_28921_index" on table "pg_toast_28921" serially
2025-04-19 17:43:37.387 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:43:37.388 UTC [546] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:43:37.388 UTC [546] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:43:37.389 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:43:37.390 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:43:37.390 UTC [546] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:43:37.390 UTC [546] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:43:37.391 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:43:37.392 UTC [546] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:43:37.392 UTC [546] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:43:37.393 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:43:37.394 UTC [546] DEBUG:  building index "pg_toast_28954_index" on table "pg_toast_28954" serially
2025-04-19 17:43:37.396 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:43:37.396 UTC [546] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:43:37.396 UTC [546] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:43:37.397 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:43:37.399 UTC [546] DEBUG:  building index "pg_toast_28965_index" on table "pg_toast_28965" serially
2025-04-19 17:43:37.406 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:43:37.407 UTC [546] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:43:37.407 UTC [546] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:43:37.411 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:43:37.414 UTC [546] DEBUG:  building index "pg_toast_28988_index" on table "pg_toast_28988" serially
2025-04-19 17:43:37.416 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:43:37.417 UTC [546] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:43:37.417 UTC [546] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:43:37.418 UTC [546] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:43:37.418 UTC [546] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:43:37.420 UTC [546] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:43:37.420 UTC [546] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:43:37.422 UTC [546] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:43:37.422 UTC [546] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:43:37.424 UTC [546] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:43:37.424 UTC [546] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:43:37.426 UTC [546] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:43:37.426 UTC [546] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:43:37.427 UTC [546] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:43:37.427 UTC [546] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:43:37.429 UTC [546] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:43:37.429 UTC [546] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:43:37.430 UTC [546] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 17:43:37.430 UTC [546] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:43:37.430 UTC [546] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:43:37.431 UTC [546] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:43:37.431 UTC [546] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:43:37.432 UTC [546] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:43:37.432 UTC [546] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:43:37.433 UTC [546] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:43:37.433 UTC [546] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:43:37.451 UTC [546] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:43:37.744 UTC [546] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$C4QrsRCtCwUaF6qNeKMjj.OQ8BVp96Z1wtlqZrM09TcUQE8snpiMm')
	                RETURNING id, username, email
	                
2025-04-19 17:43:37.745 UTC [546] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:43:37.746 UTC [546] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:43:37.747 UTC [546] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:43:37.750 UTC [546] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 17:43:37.750 UTC [546] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 17:43:37.755 UTC [546] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:43:37.756 UTC [546] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:43:37.759 UTC [546] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:43:37.764 UTC [546] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:43:37.764 UTC [546] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:43:37.770 UTC [546] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:43:37.776 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:43:37.777 UTC [546] DEBUG:  building index "pg_toast_29024_index" on table "pg_toast_29024" serially
2025-04-19 17:43:37.779 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:43:37.779 UTC [546] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:43:37.779 UTC [546] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:43:37.781 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:43:37.781 UTC [546] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:43:37.781 UTC [546] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:43:37.783 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:43:37.784 UTC [546] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:43:37.784 UTC [546] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:43:37.784 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:43:37.787 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:43:37.787 UTC [546] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:43:37.787 UTC [546] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:43:37.790 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:43:37.791 UTC [546] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:43:37.791 UTC [546] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:43:37.793 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:43:37.794 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:43:37.794 UTC [546] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:43:37.794 UTC [546] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:43:37.797 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:43:37.797 UTC [546] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:43:37.797 UTC [546] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:43:37.798 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:43:37.799 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:43:37.799 UTC [546] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:43:37.799 UTC [546] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:43:37.801 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:43:37.802 UTC [546] DEBUG:  building index "pg_toast_29085_index" on table "pg_toast_29085" serially
2025-04-19 17:43:37.803 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:43:37.804 UTC [546] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:43:37.804 UTC [546] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:43:37.805 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:43:37.807 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:43:37.807 UTC [546] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:43:37.807 UTC [546] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:43:37.808 UTC [546] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:43:37.808 UTC [546] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:43:37.808 UTC [546] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:43:37.809 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:43:37.811 UTC [546] DEBUG:  building index "pg_toast_29118_index" on table "pg_toast_29118" serially
2025-04-19 17:43:37.812 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:43:37.812 UTC [546] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:43:37.812 UTC [546] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:43:37.813 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:43:37.814 UTC [546] DEBUG:  building index "pg_toast_29129_index" on table "pg_toast_29129" serially
2025-04-19 17:43:37.815 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:43:37.815 UTC [546] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:43:37.815 UTC [546] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:43:37.817 UTC [546] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:43:37.818 UTC [546] DEBUG:  building index "pg_toast_29152_index" on table "pg_toast_29152" serially
2025-04-19 17:43:37.818 UTC [546] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:43:37.819 UTC [546] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:43:37.819 UTC [546] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:43:37.820 UTC [546] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:43:37.820 UTC [546] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:43:37.821 UTC [546] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:43:37.821 UTC [546] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:43:37.822 UTC [546] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:43:37.822 UTC [546] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:43:37.823 UTC [546] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:43:37.823 UTC [546] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:43:37.824 UTC [546] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:43:37.824 UTC [546] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:43:37.825 UTC [546] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:43:37.825 UTC [546] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:43:37.825 UTC [546] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:43:37.825 UTC [546] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:43:37.826 UTC [546] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:43:37.826 UTC [546] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:43:37.827 UTC [546] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:43:37.827 UTC [546] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:43:37.828 UTC [546] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:43:37.828 UTC [546] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:43:37.829 UTC [546] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:43:37.829 UTC [546] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:43:37.838 UTC [546] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:43:38.088 UTC [546] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$u/0usoB0R6KO34MiWeYkNenrGOJbave2EDXyD167.nyqHlc.Mfow2')
	                RETURNING id, username, email
	                
2025-04-19 17:43:38.089 UTC [546] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:43:38.090 UTC [546] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:43:50.868 UTC [546] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:43:51.153 UTC [546] DEBUG:  unexpected EOF on client connection
2025-04-19 17:43:52.991 UTC [561] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:43:53.015 UTC [561] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:43:53.021 UTC [561] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:43:53.021 UTC [561] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:43:53.025 UTC [561] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:43:53.028 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:43:53.030 UTC [561] DEBUG:  building index "pg_toast_29188_index" on table "pg_toast_29188" serially
2025-04-19 17:43:53.032 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:43:53.032 UTC [561] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:43:53.032 UTC [561] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:43:53.033 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:43:53.033 UTC [561] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:43:53.033 UTC [561] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:43:53.034 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:43:53.034 UTC [561] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:43:53.034 UTC [561] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:43:53.035 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:43:53.036 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:43:53.036 UTC [561] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:43:53.037 UTC [561] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:43:53.037 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:43:53.037 UTC [561] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:43:53.038 UTC [561] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:43:53.038 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:43:53.039 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:43:53.039 UTC [561] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:43:53.039 UTC [561] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:43:53.040 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:43:53.040 UTC [561] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:43:53.040 UTC [561] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:43:53.042 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:43:53.043 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:43:53.043 UTC [561] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:43:53.043 UTC [561] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:43:53.044 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:43:53.045 UTC [561] DEBUG:  building index "pg_toast_29249_index" on table "pg_toast_29249" serially
2025-04-19 17:43:53.046 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:43:53.046 UTC [561] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:43:53.046 UTC [561] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:43:53.047 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:43:53.048 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:43:53.048 UTC [561] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:43:53.048 UTC [561] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:43:53.049 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:43:53.049 UTC [561] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:43:53.049 UTC [561] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:43:53.050 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:43:53.051 UTC [561] DEBUG:  building index "pg_toast_29282_index" on table "pg_toast_29282" serially
2025-04-19 17:43:53.052 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:43:53.052 UTC [561] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:43:53.052 UTC [561] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:43:53.053 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:43:53.054 UTC [561] DEBUG:  building index "pg_toast_29293_index" on table "pg_toast_29293" serially
2025-04-19 17:43:53.055 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:43:53.055 UTC [561] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:43:53.055 UTC [561] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:43:53.056 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:43:53.057 UTC [561] DEBUG:  building index "pg_toast_29316_index" on table "pg_toast_29316" serially
2025-04-19 17:43:53.058 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:43:53.058 UTC [561] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:43:53.058 UTC [561] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:43:53.059 UTC [561] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:43:53.059 UTC [561] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:43:53.059 UTC [561] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:43:53.059 UTC [561] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:43:53.060 UTC [561] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:43:53.060 UTC [561] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:43:53.061 UTC [561] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:43:53.061 UTC [561] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:43:53.063 UTC [561] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:43:53.063 UTC [561] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:43:53.065 UTC [561] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:43:53.065 UTC [561] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:43:53.066 UTC [561] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:43:53.066 UTC [561] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:43:53.067 UTC [561] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:43:53.067 UTC [561] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:43:53.068 UTC [561] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:43:53.068 UTC [561] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:43:53.069 UTC [561] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:43:53.069 UTC [561] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:43:53.069 UTC [561] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:43:53.069 UTC [561] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:43:53.082 UTC [561] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:43:53.347 UTC [561] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$83fcosUIU8sts3mOqX/gRO4gFwTCzV5iwkL8lJ3sd0.GrchmddIq.')
	                RETURNING id, username, email
	                
2025-04-19 17:43:53.348 UTC [561] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:43:53.349 UTC [561] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:43:53.349 UTC [561] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:43:53.357 UTC [561] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:43:53.358 UTC [561] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:43:53.361 UTC [561] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:43:53.364 UTC [561] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:43:53.364 UTC [561] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:43:53.367 UTC [561] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:43:53.369 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:43:53.370 UTC [561] DEBUG:  building index "pg_toast_29352_index" on table "pg_toast_29352" serially
2025-04-19 17:43:53.371 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:43:53.372 UTC [561] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:43:53.372 UTC [561] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:43:53.373 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:43:53.374 UTC [561] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:43:53.374 UTC [561] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:43:53.374 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:43:53.375 UTC [561] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:43:53.375 UTC [561] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:43:53.376 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:43:53.377 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:43:53.377 UTC [561] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:43:53.377 UTC [561] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:43:53.378 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:43:53.379 UTC [561] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:43:53.379 UTC [561] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:43:53.379 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:43:53.380 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:43:53.380 UTC [561] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:43:53.380 UTC [561] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:43:53.381 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:43:53.381 UTC [561] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:43:53.381 UTC [561] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:43:53.383 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:43:53.385 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:43:53.385 UTC [561] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:43:53.385 UTC [561] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:43:53.388 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:43:53.390 UTC [561] DEBUG:  building index "pg_toast_29413_index" on table "pg_toast_29413" serially
2025-04-19 17:43:53.391 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:43:53.392 UTC [561] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:43:53.392 UTC [561] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:43:53.394 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:43:53.394 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:43:53.395 UTC [561] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:43:53.395 UTC [561] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:43:53.395 UTC [561] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:43:53.396 UTC [561] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:43:53.396 UTC [561] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:43:53.396 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:43:53.397 UTC [561] DEBUG:  building index "pg_toast_29446_index" on table "pg_toast_29446" serially
2025-04-19 17:43:53.398 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:43:53.399 UTC [561] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:43:53.399 UTC [561] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:43:53.399 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:43:53.400 UTC [561] DEBUG:  building index "pg_toast_29457_index" on table "pg_toast_29457" serially
2025-04-19 17:43:53.401 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:43:53.402 UTC [561] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:43:53.402 UTC [561] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:43:53.403 UTC [561] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:43:53.404 UTC [561] DEBUG:  building index "pg_toast_29480_index" on table "pg_toast_29480" serially
2025-04-19 17:43:53.405 UTC [561] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:43:53.405 UTC [561] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:43:53.405 UTC [561] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:43:53.405 UTC [561] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:43:53.405 UTC [561] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:43:53.406 UTC [561] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:43:53.406 UTC [561] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:43:53.407 UTC [561] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:43:53.407 UTC [561] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:43:53.408 UTC [561] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:43:53.408 UTC [561] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:43:53.409 UTC [561] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:43:53.409 UTC [561] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:43:53.410 UTC [561] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:43:53.410 UTC [561] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:43:53.411 UTC [561] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:43:53.411 UTC [561] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:43:53.412 UTC [561] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:43:53.412 UTC [561] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:43:53.413 UTC [561] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:43:53.413 UTC [561] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:43:53.414 UTC [561] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:43:53.414 UTC [561] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:43:53.415 UTC [561] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:43:53.415 UTC [561] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:43:53.425 UTC [561] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:43:53.669 UTC [561] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/KpZ8VkVWn5KTD/D2hKj4um12.Yk44Uc2Mnp/xbCvC74kFwztk59q')
	                RETURNING id, username, email
	                
2025-04-19 17:43:53.670 UTC [561] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:43:53.670 UTC [561] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:44:42.051 UTC [569] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 17:44:45.847 UTC [561] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:44:46.153 UTC [561] DEBUG:  unexpected EOF on client connection
2025-04-19 17:44:47.889 UTC [577] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:44:47.903 UTC [577] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:44:47.917 UTC [577] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:44:47.917 UTC [577] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:44:47.921 UTC [577] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:44:47.925 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:44:47.927 UTC [577] DEBUG:  building index "pg_toast_29516_index" on table "pg_toast_29516" serially
2025-04-19 17:44:47.929 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:44:47.930 UTC [577] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:44:47.930 UTC [577] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:44:47.931 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:44:47.931 UTC [577] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:44:47.931 UTC [577] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:44:47.932 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:44:47.932 UTC [577] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:44:47.932 UTC [577] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:44:47.933 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:44:47.934 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:44:47.934 UTC [577] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:44:47.934 UTC [577] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:44:47.935 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:44:47.935 UTC [577] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:44:47.935 UTC [577] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:44:47.936 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:44:47.937 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:44:47.937 UTC [577] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:44:47.937 UTC [577] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:44:47.938 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:44:47.938 UTC [577] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:44:47.938 UTC [577] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:44:47.939 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:44:47.940 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:44:47.940 UTC [577] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:44:47.940 UTC [577] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:44:47.942 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:44:47.943 UTC [577] DEBUG:  building index "pg_toast_29577_index" on table "pg_toast_29577" serially
2025-04-19 17:44:47.944 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:44:47.944 UTC [577] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:44:47.944 UTC [577] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:44:47.945 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:44:47.946 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:44:47.946 UTC [577] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:44:47.946 UTC [577] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:44:47.947 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:44:47.947 UTC [577] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:44:47.947 UTC [577] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:44:47.950 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:44:47.951 UTC [577] DEBUG:  building index "pg_toast_29610_index" on table "pg_toast_29610" serially
2025-04-19 17:44:47.952 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:44:47.952 UTC [577] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:44:47.952 UTC [577] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:44:47.953 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:44:47.954 UTC [577] DEBUG:  building index "pg_toast_29621_index" on table "pg_toast_29621" serially
2025-04-19 17:44:47.955 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:44:47.955 UTC [577] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:44:47.955 UTC [577] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:44:47.956 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:44:47.957 UTC [577] DEBUG:  building index "pg_toast_29644_index" on table "pg_toast_29644" serially
2025-04-19 17:44:47.958 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:44:47.958 UTC [577] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:44:47.958 UTC [577] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:44:47.959 UTC [577] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:44:47.959 UTC [577] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:44:47.960 UTC [577] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:44:47.960 UTC [577] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:44:47.961 UTC [577] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:44:47.961 UTC [577] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:44:47.963 UTC [577] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:44:47.963 UTC [577] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:44:47.964 UTC [577] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:44:47.964 UTC [577] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:44:47.965 UTC [577] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:44:47.965 UTC [577] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:44:47.966 UTC [577] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:44:47.966 UTC [577] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:44:47.967 UTC [577] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:44:47.967 UTC [577] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:44:47.968 UTC [577] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:44:47.968 UTC [577] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:44:47.968 UTC [577] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:44:47.968 UTC [577] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:44:47.969 UTC [577] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:44:47.969 UTC [577] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:44:47.981 UTC [577] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:44:48.248 UTC [577] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$s83wRXF55N4cHLkpdJWAD.NedA6TCr6mRMjRx6s0DnaoB6JT4.fxG')
	                RETURNING id, username, email
	                
2025-04-19 17:44:48.249 UTC [577] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:44:48.250 UTC [577] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:44:48.250 UTC [577] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:44:48.257 UTC [577] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:44:48.258 UTC [577] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:44:48.261 UTC [577] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:44:48.264 UTC [577] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:44:48.264 UTC [577] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:44:48.267 UTC [577] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:44:48.272 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:44:48.273 UTC [577] DEBUG:  building index "pg_toast_29680_index" on table "pg_toast_29680" serially
2025-04-19 17:44:48.274 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:44:48.275 UTC [577] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:44:48.275 UTC [577] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:44:48.275 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:44:48.276 UTC [577] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:44:48.276 UTC [577] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:44:48.276 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:44:48.277 UTC [577] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:44:48.277 UTC [577] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:44:48.278 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:44:48.280 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:44:48.280 UTC [577] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:44:48.280 UTC [577] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:44:48.282 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:44:48.282 UTC [577] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:44:48.282 UTC [577] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:44:48.284 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:44:48.286 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:44:48.287 UTC [577] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:44:48.287 UTC [577] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:44:48.288 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:44:48.289 UTC [577] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:44:48.289 UTC [577] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:44:48.292 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:44:48.295 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:44:48.295 UTC [577] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:44:48.295 UTC [577] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:44:48.297 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:44:48.299 UTC [577] DEBUG:  building index "pg_toast_29741_index" on table "pg_toast_29741" serially
2025-04-19 17:44:48.301 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:44:48.301 UTC [577] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:44:48.301 UTC [577] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:44:48.303 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:44:48.304 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:44:48.304 UTC [577] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:44:48.304 UTC [577] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:44:48.305 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:44:48.306 UTC [577] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:44:48.306 UTC [577] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:44:48.307 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:44:48.307 UTC [577] DEBUG:  building index "pg_toast_29774_index" on table "pg_toast_29774" serially
2025-04-19 17:44:48.308 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:44:48.309 UTC [577] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:44:48.309 UTC [577] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:44:48.309 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:44:48.310 UTC [577] DEBUG:  building index "pg_toast_29785_index" on table "pg_toast_29785" serially
2025-04-19 17:44:48.311 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:44:48.311 UTC [577] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:44:48.311 UTC [577] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:44:48.313 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:44:48.313 UTC [577] DEBUG:  building index "pg_toast_29808_index" on table "pg_toast_29808" serially
2025-04-19 17:44:48.314 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:44:48.314 UTC [577] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:44:48.314 UTC [577] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:44:48.315 UTC [577] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:44:48.315 UTC [577] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:44:48.316 UTC [577] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:44:48.316 UTC [577] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:44:48.317 UTC [577] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:44:48.317 UTC [577] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:44:48.318 UTC [577] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:44:48.318 UTC [577] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:44:48.319 UTC [577] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:44:48.319 UTC [577] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:44:48.321 UTC [577] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:44:48.321 UTC [577] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:44:48.321 UTC [577] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:44:48.321 UTC [577] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:44:48.322 UTC [577] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:44:48.322 UTC [577] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:44:48.323 UTC [577] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:44:48.323 UTC [577] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:44:48.324 UTC [577] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:44:48.324 UTC [577] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:44:48.325 UTC [577] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:44:48.325 UTC [577] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:44:48.333 UTC [577] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:44:48.576 UTC [577] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$UDrqBu2NCXi/UiMJOOhXpuo3jDSLvJpf.i8DngAGFjj/KMNDqT/Mq')
	                RETURNING id, username, email
	                
2025-04-19 17:44:48.577 UTC [577] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:44:48.578 UTC [577] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:45:01.771 UTC [577] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:45:02.087 UTC [577] DEBUG:  unexpected EOF on client connection
2025-04-19 17:45:03.954 UTC [585] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:45:03.963 UTC [585] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:45:03.975 UTC [585] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:45:03.975 UTC [585] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:45:03.984 UTC [585] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:45:03.992 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:45:03.999 UTC [585] DEBUG:  building index "pg_toast_29844_index" on table "pg_toast_29844" serially
2025-04-19 17:45:04.003 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:45:04.003 UTC [585] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:45:04.003 UTC [585] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:45:04.005 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:45:04.006 UTC [585] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:45:04.006 UTC [585] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:45:04.008 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:45:04.008 UTC [585] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:45:04.008 UTC [585] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:45:04.010 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:45:04.011 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:45:04.011 UTC [585] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:45:04.011 UTC [585] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:45:04.012 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:45:04.012 UTC [585] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:45:04.012 UTC [585] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:45:04.013 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:45:04.014 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:45:04.014 UTC [585] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:45:04.014 UTC [585] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:45:04.015 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:45:04.015 UTC [585] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:45:04.015 UTC [585] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:45:04.017 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:45:04.018 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:45:04.018 UTC [585] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:45:04.018 UTC [585] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:45:04.019 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:45:04.020 UTC [585] DEBUG:  building index "pg_toast_29905_index" on table "pg_toast_29905" serially
2025-04-19 17:45:04.021 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:45:04.021 UTC [585] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:45:04.021 UTC [585] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:45:04.022 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:45:04.023 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:45:04.023 UTC [585] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:45:04.023 UTC [585] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:45:04.024 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:45:04.024 UTC [585] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:45:04.024 UTC [585] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:45:04.025 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:45:04.026 UTC [585] DEBUG:  building index "pg_toast_29938_index" on table "pg_toast_29938" serially
2025-04-19 17:45:04.027 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:45:04.027 UTC [585] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:45:04.027 UTC [585] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:45:04.028 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:45:04.029 UTC [585] DEBUG:  building index "pg_toast_29949_index" on table "pg_toast_29949" serially
2025-04-19 17:45:04.030 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:45:04.030 UTC [585] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:45:04.030 UTC [585] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:45:04.032 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:45:04.032 UTC [585] DEBUG:  building index "pg_toast_29972_index" on table "pg_toast_29972" serially
2025-04-19 17:45:04.033 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:45:04.033 UTC [585] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:45:04.034 UTC [585] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:45:04.034 UTC [585] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:45:04.034 UTC [585] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:45:04.035 UTC [585] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:45:04.035 UTC [585] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:45:04.037 UTC [585] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:45:04.037 UTC [585] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:45:04.038 UTC [585] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:45:04.038 UTC [585] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:45:04.039 UTC [585] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:45:04.039 UTC [585] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:45:04.040 UTC [585] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:45:04.040 UTC [585] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:45:04.041 UTC [585] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:45:04.041 UTC [585] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:45:04.041 UTC [585] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:45:04.041 UTC [585] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:45:04.042 UTC [585] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:45:04.042 UTC [585] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:45:04.043 UTC [585] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:45:04.043 UTC [585] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:45:04.044 UTC [585] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:45:04.044 UTC [585] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:45:04.060 UTC [585] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:45:04.327 UTC [585] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jgHTmxeZx.rpLHKCPRj4ouddjtvagcVS9MbzrCnpjAyFWc9Thixv.')
	                RETURNING id, username, email
	                
2025-04-19 17:45:04.328 UTC [585] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:45:04.329 UTC [585] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:45:04.329 UTC [585] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:45:04.338 UTC [585] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:45:04.339 UTC [585] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:45:04.342 UTC [585] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:45:04.346 UTC [585] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:45:04.346 UTC [585] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:45:04.349 UTC [585] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:45:04.351 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:45:04.352 UTC [585] DEBUG:  building index "pg_toast_30008_index" on table "pg_toast_30008" serially
2025-04-19 17:45:04.353 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:45:04.353 UTC [585] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:45:04.353 UTC [585] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:45:04.354 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:45:04.354 UTC [585] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:45:04.354 UTC [585] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:45:04.355 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:45:04.355 UTC [585] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:45:04.355 UTC [585] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:45:04.356 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:45:04.357 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:45:04.357 UTC [585] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:45:04.357 UTC [585] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:45:04.358 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:45:04.358 UTC [585] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:45:04.358 UTC [585] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:45:04.359 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:45:04.360 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:45:04.360 UTC [585] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:45:04.360 UTC [585] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:45:04.361 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:45:04.361 UTC [585] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:45:04.361 UTC [585] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:45:04.364 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:45:04.368 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:45:04.368 UTC [585] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:45:04.368 UTC [585] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:45:04.370 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:45:04.372 UTC [585] DEBUG:  building index "pg_toast_30069_index" on table "pg_toast_30069" serially
2025-04-19 17:45:04.372 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:45:04.373 UTC [585] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:45:04.373 UTC [585] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:45:04.374 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:45:04.375 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:45:04.375 UTC [585] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:45:04.375 UTC [585] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:45:04.376 UTC [585] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:45:04.376 UTC [585] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:45:04.376 UTC [585] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:45:04.379 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:45:04.382 UTC [585] DEBUG:  building index "pg_toast_30102_index" on table "pg_toast_30102" serially
2025-04-19 17:45:04.384 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:45:04.384 UTC [585] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:45:04.384 UTC [585] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:45:04.386 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:45:04.389 UTC [585] DEBUG:  building index "pg_toast_30113_index" on table "pg_toast_30113" serially
2025-04-19 17:45:04.390 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:45:04.390 UTC [585] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:45:04.390 UTC [585] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:45:04.393 UTC [585] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:45:04.395 UTC [585] DEBUG:  building index "pg_toast_30136_index" on table "pg_toast_30136" serially
2025-04-19 17:45:04.395 UTC [585] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:45:04.395 UTC [585] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:45:04.395 UTC [585] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:45:04.396 UTC [585] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:45:04.396 UTC [585] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:45:04.397 UTC [585] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:45:04.397 UTC [585] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:45:04.398 UTC [585] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:45:04.398 UTC [585] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:45:04.398 UTC [585] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:45:04.398 UTC [585] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:45:04.399 UTC [585] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:45:04.399 UTC [585] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:45:04.400 UTC [585] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:45:04.400 UTC [585] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:45:04.401 UTC [585] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:45:04.401 UTC [585] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:45:04.402 UTC [585] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:45:04.402 UTC [585] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:45:04.403 UTC [585] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:45:04.403 UTC [585] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:45:04.403 UTC [585] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:45:04.403 UTC [585] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:45:04.404 UTC [585] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:45:04.404 UTC [585] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:45:04.415 UTC [585] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:45:04.663 UTC [585] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZTBFqYN4pOaAXMidBFcHe.u8ErE2YD/e7/65Dq99Yl8izmjUheQu6')
	                RETURNING id, username, email
	                
2025-04-19 17:45:04.664 UTC [585] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:45:04.664 UTC [585] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:46:25.086 UTC [593] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 17:46:25.334 UTC [593] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 17:46:30.660 UTC [585] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:46:30.946 UTC [585] DEBUG:  unexpected EOF on client connection
2025-04-19 17:46:32.638 UTC [601] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:46:32.646 UTC [601] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:46:32.656 UTC [601] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:46:32.656 UTC [601] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:46:32.661 UTC [601] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:46:32.665 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:46:32.667 UTC [601] DEBUG:  building index "pg_toast_30173_index" on table "pg_toast_30173" serially
2025-04-19 17:46:32.669 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:46:32.670 UTC [601] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:46:32.670 UTC [601] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:46:32.671 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:46:32.672 UTC [601] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:46:32.672 UTC [601] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:46:32.673 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:46:32.673 UTC [601] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:46:32.673 UTC [601] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:46:32.675 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:46:32.676 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:46:32.676 UTC [601] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:46:32.676 UTC [601] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:46:32.677 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:46:32.677 UTC [601] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:46:32.677 UTC [601] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:46:32.678 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:46:32.679 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:46:32.679 UTC [601] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:46:32.679 UTC [601] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:46:32.680 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:46:32.680 UTC [601] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:46:32.680 UTC [601] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:46:32.681 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:46:32.682 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:46:32.683 UTC [601] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:46:32.683 UTC [601] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:46:32.684 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:46:32.685 UTC [601] DEBUG:  building index "pg_toast_30234_index" on table "pg_toast_30234" serially
2025-04-19 17:46:32.686 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:46:32.686 UTC [601] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:46:32.686 UTC [601] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:46:32.687 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:46:32.688 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:46:32.688 UTC [601] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:46:32.688 UTC [601] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:46:32.689 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:46:32.689 UTC [601] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:46:32.689 UTC [601] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:46:32.690 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:46:32.691 UTC [601] DEBUG:  building index "pg_toast_30267_index" on table "pg_toast_30267" serially
2025-04-19 17:46:32.691 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:46:32.691 UTC [601] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:46:32.691 UTC [601] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:46:32.692 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:46:32.693 UTC [601] DEBUG:  building index "pg_toast_30278_index" on table "pg_toast_30278" serially
2025-04-19 17:46:32.694 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:46:32.694 UTC [601] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:46:32.694 UTC [601] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:46:32.695 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:46:32.697 UTC [601] DEBUG:  building index "pg_toast_30301_index" on table "pg_toast_30301" serially
2025-04-19 17:46:32.698 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:46:32.699 UTC [601] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:46:32.699 UTC [601] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:46:32.700 UTC [601] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:46:32.700 UTC [601] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:46:32.701 UTC [601] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:46:32.701 UTC [601] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:46:32.703 UTC [601] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:46:32.703 UTC [601] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:46:32.704 UTC [601] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:46:32.704 UTC [601] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:46:32.704 UTC [601] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:46:32.704 UTC [601] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:46:32.705 UTC [601] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:46:32.705 UTC [601] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:46:32.706 UTC [601] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:46:32.706 UTC [601] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:46:32.707 UTC [601] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:46:32.707 UTC [601] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:46:32.708 UTC [601] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:46:32.708 UTC [601] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:46:32.708 UTC [601] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:46:32.708 UTC [601] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:46:32.709 UTC [601] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:46:32.709 UTC [601] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:46:32.722 UTC [601] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:46:32.991 UTC [601] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$R9yuonBq3hOhUh0G1pdmkeb8RVnfHYuP98dKyBuDay1WSCQOMdR9O')
	                RETURNING id, username, email
	                
2025-04-19 17:46:32.992 UTC [601] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:46:32.992 UTC [601] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:46:32.993 UTC [601] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:46:33.013 UTC [601] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:46:33.014 UTC [601] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:46:33.017 UTC [601] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:46:33.021 UTC [601] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:46:33.021 UTC [601] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:46:33.024 UTC [601] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:46:33.028 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:46:33.029 UTC [601] DEBUG:  building index "pg_toast_30337_index" on table "pg_toast_30337" serially
2025-04-19 17:46:33.030 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:46:33.031 UTC [601] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:46:33.031 UTC [601] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:46:33.032 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:46:33.032 UTC [601] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:46:33.032 UTC [601] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:46:33.032 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:46:33.033 UTC [601] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:46:33.033 UTC [601] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:46:33.033 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:46:33.034 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:46:33.035 UTC [601] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:46:33.035 UTC [601] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:46:33.035 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:46:33.035 UTC [601] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:46:33.035 UTC [601] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:46:33.036 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:46:33.037 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:46:33.037 UTC [601] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:46:33.037 UTC [601] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:46:33.038 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:46:33.038 UTC [601] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:46:33.038 UTC [601] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:46:33.039 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:46:33.040 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:46:33.040 UTC [601] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:46:33.040 UTC [601] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:46:33.041 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:46:33.042 UTC [601] DEBUG:  building index "pg_toast_30398_index" on table "pg_toast_30398" serially
2025-04-19 17:46:33.043 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:46:33.043 UTC [601] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:46:33.043 UTC [601] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:46:33.045 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:46:33.047 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:46:33.047 UTC [601] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:46:33.047 UTC [601] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:46:33.048 UTC [601] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:46:33.048 UTC [601] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:46:33.048 UTC [601] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:46:33.049 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:46:33.050 UTC [601] DEBUG:  building index "pg_toast_30431_index" on table "pg_toast_30431" serially
2025-04-19 17:46:33.051 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:46:33.051 UTC [601] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:46:33.051 UTC [601] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:46:33.052 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:46:33.053 UTC [601] DEBUG:  building index "pg_toast_30442_index" on table "pg_toast_30442" serially
2025-04-19 17:46:33.054 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:46:33.054 UTC [601] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:46:33.054 UTC [601] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:46:33.056 UTC [601] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:46:33.057 UTC [601] DEBUG:  building index "pg_toast_30465_index" on table "pg_toast_30465" serially
2025-04-19 17:46:33.058 UTC [601] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:46:33.058 UTC [601] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:46:33.058 UTC [601] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:46:33.060 UTC [601] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:46:33.060 UTC [601] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:46:33.062 UTC [601] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:46:33.062 UTC [601] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:46:33.063 UTC [601] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:46:33.063 UTC [601] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:46:33.065 UTC [601] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:46:33.065 UTC [601] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:46:33.067 UTC [601] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:46:33.067 UTC [601] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:46:33.068 UTC [601] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:46:33.068 UTC [601] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:46:33.069 UTC [601] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:46:33.069 UTC [601] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:46:33.070 UTC [601] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:46:33.070 UTC [601] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:46:33.072 UTC [601] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:46:33.072 UTC [601] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:46:33.073 UTC [601] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:46:33.073 UTC [601] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:46:33.074 UTC [601] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:46:33.074 UTC [601] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:46:33.083 UTC [601] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:46:33.330 UTC [601] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$IOqR3eXW3odsjG9sqI.wpOwvy.nja3KKwzPom6gA9V2O3kvpKUixS')
	                RETURNING id, username, email
	                
2025-04-19 17:46:33.331 UTC [601] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:46:33.331 UTC [601] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:46:46.597 UTC [601] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:46:46.887 UTC [601] DEBUG:  unexpected EOF on client connection
2025-04-19 17:46:48.646 UTC [609] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:46:48.656 UTC [609] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:46:48.668 UTC [609] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:46:48.668 UTC [609] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:46:48.674 UTC [609] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:46:48.678 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:46:48.681 UTC [609] DEBUG:  building index "pg_toast_30501_index" on table "pg_toast_30501" serially
2025-04-19 17:46:48.682 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:46:48.682 UTC [609] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:46:48.683 UTC [609] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:46:48.683 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:46:48.684 UTC [609] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:46:48.684 UTC [609] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:46:48.684 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:46:48.685 UTC [609] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:46:48.685 UTC [609] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:46:48.685 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:46:48.687 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:46:48.687 UTC [609] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:46:48.687 UTC [609] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:46:48.688 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:46:48.688 UTC [609] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:46:48.688 UTC [609] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:46:48.689 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:46:48.690 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:46:48.690 UTC [609] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:46:48.690 UTC [609] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:46:48.690 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:46:48.691 UTC [609] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:46:48.691 UTC [609] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:46:48.692 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:46:48.693 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:46:48.693 UTC [609] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:46:48.693 UTC [609] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:46:48.694 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:46:48.696 UTC [609] DEBUG:  building index "pg_toast_30562_index" on table "pg_toast_30562" serially
2025-04-19 17:46:48.697 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:46:48.697 UTC [609] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:46:48.697 UTC [609] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:46:48.698 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:46:48.699 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:46:48.699 UTC [609] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:46:48.699 UTC [609] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:46:48.700 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:46:48.701 UTC [609] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:46:48.701 UTC [609] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:46:48.702 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:46:48.703 UTC [609] DEBUG:  building index "pg_toast_30595_index" on table "pg_toast_30595" serially
2025-04-19 17:46:48.704 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:46:48.705 UTC [609] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:46:48.705 UTC [609] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:46:48.705 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:46:48.706 UTC [609] DEBUG:  building index "pg_toast_30606_index" on table "pg_toast_30606" serially
2025-04-19 17:46:48.707 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:46:48.707 UTC [609] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:46:48.707 UTC [609] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:46:48.709 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:46:48.710 UTC [609] DEBUG:  building index "pg_toast_30629_index" on table "pg_toast_30629" serially
2025-04-19 17:46:48.710 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:46:48.710 UTC [609] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:46:48.711 UTC [609] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:46:48.712 UTC [609] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:46:48.712 UTC [609] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:46:48.713 UTC [609] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:46:48.713 UTC [609] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:46:48.713 UTC [609] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:46:48.714 UTC [609] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:46:48.715 UTC [609] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:46:48.715 UTC [609] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:46:48.715 UTC [609] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:46:48.715 UTC [609] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:46:48.716 UTC [609] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:46:48.716 UTC [609] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:46:48.717 UTC [609] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:46:48.717 UTC [609] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:46:48.718 UTC [609] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:46:48.718 UTC [609] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:46:48.718 UTC [609] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:46:48.718 UTC [609] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:46:48.719 UTC [609] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:46:48.719 UTC [609] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:46:48.720 UTC [609] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:46:48.720 UTC [609] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:46:48.736 UTC [609] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:46:49.000 UTC [609] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$FxduCeWVGrfgHsQv8AOdG.R3JrH6iLa9zbZLO8HR1fAtJ6vBVNuJS')
	                RETURNING id, username, email
	                
2025-04-19 17:46:49.001 UTC [609] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:46:49.001 UTC [609] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:46:49.002 UTC [609] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:46:49.011 UTC [609] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:46:49.012 UTC [609] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:46:49.015 UTC [609] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:46:49.019 UTC [609] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:46:49.019 UTC [609] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:46:49.022 UTC [609] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:46:49.024 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:46:49.025 UTC [609] DEBUG:  building index "pg_toast_30665_index" on table "pg_toast_30665" serially
2025-04-19 17:46:49.026 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:46:49.027 UTC [609] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:46:49.027 UTC [609] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:46:49.028 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:46:49.029 UTC [609] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:46:49.029 UTC [609] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:46:49.030 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:46:49.030 UTC [609] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:46:49.030 UTC [609] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:46:49.031 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:46:49.033 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:46:49.034 UTC [609] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:46:49.034 UTC [609] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:46:49.036 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:46:49.036 UTC [609] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:46:49.036 UTC [609] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:46:49.037 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:46:49.039 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:46:49.039 UTC [609] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:46:49.039 UTC [609] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:46:49.040 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:46:49.041 UTC [609] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:46:49.041 UTC [609] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:46:49.042 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:46:49.044 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:46:49.044 UTC [609] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:46:49.044 UTC [609] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:46:49.046 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:46:49.049 UTC [609] DEBUG:  building index "pg_toast_30726_index" on table "pg_toast_30726" serially
2025-04-19 17:46:49.049 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:46:49.050 UTC [609] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:46:49.050 UTC [609] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:46:49.051 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:46:49.052 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:46:49.052 UTC [609] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:46:49.052 UTC [609] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:46:49.053 UTC [609] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:46:49.053 UTC [609] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:46:49.053 UTC [609] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:46:49.055 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:46:49.057 UTC [609] DEBUG:  building index "pg_toast_30759_index" on table "pg_toast_30759" serially
2025-04-19 17:46:49.058 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:46:49.058 UTC [609] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:46:49.058 UTC [609] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:46:49.059 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:46:49.059 UTC [609] DEBUG:  building index "pg_toast_30770_index" on table "pg_toast_30770" serially
2025-04-19 17:46:49.060 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:46:49.060 UTC [609] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:46:49.060 UTC [609] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:46:49.062 UTC [609] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:46:49.065 UTC [609] DEBUG:  building index "pg_toast_30793_index" on table "pg_toast_30793" serially
2025-04-19 17:46:49.067 UTC [609] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:46:49.067 UTC [609] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:46:49.067 UTC [609] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:46:49.068 UTC [609] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:46:49.068 UTC [609] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:46:49.069 UTC [609] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:46:49.069 UTC [609] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:46:49.071 UTC [609] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:46:49.071 UTC [609] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:46:49.072 UTC [609] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:46:49.072 UTC [609] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:46:49.073 UTC [609] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:46:49.073 UTC [609] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:46:49.074 UTC [609] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:46:49.074 UTC [609] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:46:49.074 UTC [609] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:46:49.074 UTC [609] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:46:49.075 UTC [609] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:46:49.075 UTC [609] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:46:49.076 UTC [609] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:46:49.076 UTC [609] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:46:49.077 UTC [609] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:46:49.077 UTC [609] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:46:49.078 UTC [609] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:46:49.078 UTC [609] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:46:49.089 UTC [609] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:46:49.348 UTC [609] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$dq5aBU7wPClHkN5hMSHxQOvJQvMg3XW8fiq24XYX60DRxW91CRvDe')
	                RETURNING id, username, email
	                
2025-04-19 17:46:49.349 UTC [609] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:46:49.349 UTC [609] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:47:47.644 UTC [617] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 17:47:55.093 UTC [609] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:47:55.379 UTC [609] DEBUG:  unexpected EOF on client connection
2025-04-19 17:47:59.861 UTC [625] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:47:59.873 UTC [625] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:47:59.886 UTC [625] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:47:59.886 UTC [625] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:47:59.894 UTC [625] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:47:59.897 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:47:59.909 UTC [625] DEBUG:  building index "pg_toast_30829_index" on table "pg_toast_30829" serially
2025-04-19 17:47:59.919 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:47:59.920 UTC [625] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:47:59.920 UTC [625] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:47:59.922 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:47:59.922 UTC [625] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:47:59.922 UTC [625] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:47:59.923 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:47:59.924 UTC [625] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:47:59.924 UTC [625] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:47:59.925 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:47:59.926 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:47:59.927 UTC [625] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:47:59.927 UTC [625] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:47:59.928 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:47:59.928 UTC [625] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:47:59.928 UTC [625] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:47:59.929 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:47:59.930 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:47:59.931 UTC [625] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:47:59.931 UTC [625] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:47:59.932 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:47:59.932 UTC [625] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:47:59.932 UTC [625] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:47:59.935 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:47:59.937 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:47:59.937 UTC [625] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:47:59.937 UTC [625] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:47:59.939 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:47:59.941 UTC [625] DEBUG:  building index "pg_toast_30890_index" on table "pg_toast_30890" serially
2025-04-19 17:47:59.942 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:47:59.943 UTC [625] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:47:59.943 UTC [625] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:47:59.945 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:47:59.947 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:47:59.947 UTC [625] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:47:59.947 UTC [625] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:47:59.948 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:47:59.948 UTC [625] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:47:59.948 UTC [625] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:47:59.951 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:47:59.952 UTC [625] DEBUG:  building index "pg_toast_30923_index" on table "pg_toast_30923" serially
2025-04-19 17:47:59.953 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:47:59.953 UTC [625] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:47:59.953 UTC [625] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:47:59.954 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:47:59.956 UTC [625] DEBUG:  building index "pg_toast_30934_index" on table "pg_toast_30934" serially
2025-04-19 17:47:59.957 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:47:59.957 UTC [625] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:47:59.957 UTC [625] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:47:59.959 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:47:59.960 UTC [625] DEBUG:  building index "pg_toast_30957_index" on table "pg_toast_30957" serially
2025-04-19 17:47:59.961 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:47:59.961 UTC [625] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:47:59.961 UTC [625] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:47:59.962 UTC [625] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:47:59.962 UTC [625] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:47:59.963 UTC [625] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:47:59.963 UTC [625] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:47:59.964 UTC [625] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:47:59.964 UTC [625] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:47:59.966 UTC [625] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:47:59.966 UTC [625] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:47:59.969 UTC [625] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:47:59.969 UTC [625] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:47:59.971 UTC [625] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:47:59.971 UTC [625] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:47:59.972 UTC [625] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:47:59.972 UTC [625] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:47:59.974 UTC [625] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:47:59.974 UTC [625] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:47:59.975 UTC [625] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:47:59.975 UTC [625] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:47:59.976 UTC [625] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:47:59.976 UTC [625] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:47:59.977 UTC [625] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:47:59.977 UTC [625] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:48:00.002 UTC [625] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:48:00.461 UTC [625] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AYz4kg1CimLbIbQUcin2seYsLvy/oGfcaSE8Pq.BWv7bx.c6bp.Gq')
	                RETURNING id, username, email
	                
2025-04-19 17:48:00.462 UTC [625] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:48:00.463 UTC [625] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:48:00.465 UTC [625] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:48:00.481 UTC [625] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:48:00.485 UTC [625] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:48:00.488 UTC [625] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:48:00.510 UTC [625] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:48:00.510 UTC [625] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:48:00.515 UTC [625] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:48:00.522 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:48:00.530 UTC [625] DEBUG:  building index "pg_toast_30993_index" on table "pg_toast_30993" serially
2025-04-19 17:48:00.535 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:48:00.536 UTC [625] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:48:00.536 UTC [625] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:48:00.537 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:48:00.537 UTC [625] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:48:00.537 UTC [625] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:48:00.538 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:48:00.539 UTC [625] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:48:00.539 UTC [625] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:48:00.540 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:48:00.541 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:48:00.541 UTC [625] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:48:00.541 UTC [625] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:48:00.543 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:48:00.543 UTC [625] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:48:00.543 UTC [625] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:48:00.544 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:48:00.545 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:48:00.546 UTC [625] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:48:00.546 UTC [625] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:48:00.547 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:48:00.547 UTC [625] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:48:00.547 UTC [625] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:48:00.549 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:48:00.551 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:48:00.551 UTC [625] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:48:00.551 UTC [625] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:48:00.552 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:48:00.554 UTC [625] DEBUG:  building index "pg_toast_31054_index" on table "pg_toast_31054" serially
2025-04-19 17:48:00.555 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:48:00.555 UTC [625] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:48:00.555 UTC [625] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:48:00.556 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:48:00.558 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:48:00.559 UTC [625] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:48:00.559 UTC [625] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:48:00.560 UTC [625] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:48:00.561 UTC [625] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:48:00.561 UTC [625] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:48:00.565 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:48:00.570 UTC [625] DEBUG:  building index "pg_toast_31087_index" on table "pg_toast_31087" serially
2025-04-19 17:48:00.572 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:48:00.573 UTC [625] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:48:00.573 UTC [625] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:48:00.574 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:48:00.576 UTC [625] DEBUG:  building index "pg_toast_31098_index" on table "pg_toast_31098" serially
2025-04-19 17:48:00.577 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:48:00.577 UTC [625] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:48:00.577 UTC [625] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:48:00.580 UTC [625] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:48:00.581 UTC [625] DEBUG:  building index "pg_toast_31121_index" on table "pg_toast_31121" serially
2025-04-19 17:48:00.582 UTC [625] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:48:00.582 UTC [625] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:48:00.582 UTC [625] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:48:00.584 UTC [625] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:48:00.584 UTC [625] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:48:00.585 UTC [625] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:48:00.585 UTC [625] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:48:00.586 UTC [625] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:48:00.586 UTC [625] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:48:00.587 UTC [625] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:48:00.587 UTC [625] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:48:00.589 UTC [625] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:48:00.589 UTC [625] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:48:00.590 UTC [625] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:48:00.590 UTC [625] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:48:00.591 UTC [625] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:48:00.591 UTC [625] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:48:00.592 UTC [625] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:48:00.592 UTC [625] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:48:00.593 UTC [625] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:48:00.593 UTC [625] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:48:00.594 UTC [625] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:48:00.594 UTC [625] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:48:00.595 UTC [625] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:48:00.595 UTC [625] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:48:00.607 UTC [625] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:48:00.881 UTC [625] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3O88Bmn5.bxVsqw6V0zJW.bdpPa0fqgNP.LnQ2rHJbZRJU502JM8a')
	                RETURNING id, username, email
	                
2025-04-19 17:48:00.882 UTC [625] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:48:00.883 UTC [625] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:48:11.025 UTC [625] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 17:48:11.340 UTC [625] DEBUG:  unexpected EOF on client connection
2025-04-19 17:48:13.153 UTC [633] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:48:13.162 UTC [633] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:48:13.177 UTC [633] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:48:13.177 UTC [633] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:48:13.184 UTC [633] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:48:13.189 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:48:13.193 UTC [633] DEBUG:  building index "pg_toast_31157_index" on table "pg_toast_31157" serially
2025-04-19 17:48:13.195 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:48:13.195 UTC [633] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:48:13.195 UTC [633] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:48:13.196 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:48:13.197 UTC [633] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:48:13.197 UTC [633] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:48:13.197 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:48:13.198 UTC [633] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:48:13.198 UTC [633] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:48:13.199 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:48:13.199 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:48:13.200 UTC [633] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:48:13.200 UTC [633] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:48:13.200 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:48:13.200 UTC [633] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:48:13.200 UTC [633] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:48:13.201 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:48:13.202 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:48:13.202 UTC [633] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:48:13.202 UTC [633] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:48:13.203 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:48:13.203 UTC [633] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:48:13.203 UTC [633] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:48:13.206 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:48:13.208 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:48:13.208 UTC [633] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:48:13.208 UTC [633] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:48:13.210 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:48:13.212 UTC [633] DEBUG:  building index "pg_toast_31218_index" on table "pg_toast_31218" serially
2025-04-19 17:48:13.213 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:48:13.213 UTC [633] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:48:13.219 UTC [633] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:48:13.222 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:48:13.225 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:48:13.226 UTC [633] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:48:13.226 UTC [633] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:48:13.227 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:48:13.227 UTC [633] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:48:13.227 UTC [633] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:48:13.228 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:48:13.230 UTC [633] DEBUG:  building index "pg_toast_31251_index" on table "pg_toast_31251" serially
2025-04-19 17:48:13.231 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:48:13.232 UTC [633] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:48:13.232 UTC [633] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:48:13.233 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:48:13.234 UTC [633] DEBUG:  building index "pg_toast_31262_index" on table "pg_toast_31262" serially
2025-04-19 17:48:13.234 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:48:13.235 UTC [633] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:48:13.235 UTC [633] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:48:13.237 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:48:13.240 UTC [633] DEBUG:  building index "pg_toast_31285_index" on table "pg_toast_31285" serially
2025-04-19 17:48:13.241 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:48:13.241 UTC [633] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:48:13.241 UTC [633] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:48:13.242 UTC [633] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:48:13.242 UTC [633] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:48:13.243 UTC [633] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:48:13.243 UTC [633] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:48:13.244 UTC [633] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:48:13.244 UTC [633] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:48:13.245 UTC [633] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:48:13.245 UTC [633] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:48:13.246 UTC [633] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:48:13.246 UTC [633] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:48:13.247 UTC [633] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:48:13.248 UTC [633] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:48:13.250 UTC [633] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:48:13.250 UTC [633] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:48:13.251 UTC [633] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:48:13.251 UTC [633] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:48:13.251 UTC [633] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:48:13.251 UTC [633] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:48:13.252 UTC [633] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:48:13.252 UTC [633] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:48:13.253 UTC [633] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:48:13.253 UTC [633] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:48:13.270 UTC [633] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:48:13.551 UTC [633] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$nCTjwD9ptqpJlPUUCtjEo.N8BAmRcwsFy5faY3VT2BpJ1.ay9ccYK')
	                RETURNING id, username, email
	                
2025-04-19 17:48:13.552 UTC [633] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:48:13.552 UTC [633] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 17:48:13.553 UTC [633] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 17:48:13.571 UTC [633] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:48:13.573 UTC [633] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 17:48:13.576 UTC [633] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 17:48:13.581 UTC [633] NOTICE:  drop cascades to 2 other objects
2025-04-19 17:48:13.581 UTC [633] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 17:48:13.584 UTC [633] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 17:48:13.590 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 17:48:13.592 UTC [633] DEBUG:  building index "pg_toast_31321_index" on table "pg_toast_31321" serially
2025-04-19 17:48:13.594 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 17:48:13.595 UTC [633] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 17:48:13.595 UTC [633] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 17:48:13.596 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 17:48:13.596 UTC [633] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 17:48:13.596 UTC [633] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 17:48:13.597 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 17:48:13.599 UTC [633] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 17:48:13.599 UTC [633] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 17:48:13.601 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 17:48:13.601 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 17:48:13.602 UTC [633] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 17:48:13.602 UTC [633] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 17:48:13.603 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 17:48:13.604 UTC [633] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 17:48:13.604 UTC [633] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 17:48:13.604 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 17:48:13.605 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 17:48:13.606 UTC [633] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 17:48:13.606 UTC [633] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 17:48:13.606 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 17:48:13.606 UTC [633] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 17:48:13.606 UTC [633] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 17:48:13.608 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 17:48:13.608 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 17:48:13.609 UTC [633] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 17:48:13.609 UTC [633] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 17:48:13.610 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 17:48:13.611 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 17:48:13.611 UTC [633] DEBUG:  building index "pg_toast_31382_index" on table "pg_toast_31382" serially
2025-04-19 17:48:13.612 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 17:48:13.613 UTC [633] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 17:48:13.613 UTC [633] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 17:48:13.616 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 17:48:13.617 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 17:48:13.617 UTC [633] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 17:48:13.617 UTC [633] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 17:48:13.618 UTC [633] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 17:48:13.618 UTC [633] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 17:48:13.618 UTC [633] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 17:48:13.619 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 17:48:13.620 UTC [633] DEBUG:  building index "pg_toast_31415_index" on table "pg_toast_31415" serially
2025-04-19 17:48:13.621 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 17:48:13.621 UTC [633] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 17:48:13.621 UTC [633] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 17:48:13.623 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 17:48:13.624 UTC [633] DEBUG:  building index "pg_toast_31426_index" on table "pg_toast_31426" serially
2025-04-19 17:48:13.625 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 17:48:13.625 UTC [633] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 17:48:13.625 UTC [633] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 17:48:13.626 UTC [633] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 17:48:13.628 UTC [633] DEBUG:  building index "pg_toast_31449_index" on table "pg_toast_31449" serially
2025-04-19 17:48:13.629 UTC [633] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 17:48:13.629 UTC [633] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 17:48:13.629 UTC [633] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 17:48:13.630 UTC [633] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 17:48:13.630 UTC [633] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 17:48:13.631 UTC [633] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 17:48:13.631 UTC [633] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 17:48:13.631 UTC [633] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 17:48:13.631 UTC [633] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 17:48:13.632 UTC [633] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 17:48:13.632 UTC [633] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 17:48:13.633 UTC [633] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 17:48:13.633 UTC [633] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 17:48:13.634 UTC [633] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 17:48:13.634 UTC [633] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 17:48:13.635 UTC [633] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 17:48:13.635 UTC [633] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 17:48:13.636 UTC [633] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 17:48:13.636 UTC [633] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 17:48:13.636 UTC [633] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 17:48:13.636 UTC [633] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 17:48:13.637 UTC [633] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 17:48:13.637 UTC [633] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 17:48:13.638 UTC [633] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 17:48:13.638 UTC [633] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 17:48:13.651 UTC [633] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 17:48:13.901 UTC [633] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yNTvsGaqmUlwv1FTBlxcYug36M1pQ5lLQjRiJ3e5OGaHVEgyHg34.')
	                RETURNING id, username, email
	                
2025-04-19 17:48:13.902 UTC [633] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 17:48:13.902 UTC [633] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:03:28.302 UTC [59] DEBUG:  checkpoint skipped because system is idle
2025-04-19 18:03:28.674 UTC [641] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 18:03:29.043 UTC [641] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 18:03:38.013 UTC [633] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:03:38.319 UTC [633] DEBUG:  unexpected EOF on client connection
2025-04-19 18:03:40.355 UTC [649] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:03:40.367 UTC [649] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:03:40.375 UTC [649] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:03:40.375 UTC [649] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:03:40.382 UTC [649] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:03:40.388 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:03:40.390 UTC [649] DEBUG:  building index "pg_toast_31486_index" on table "pg_toast_31486" serially
2025-04-19 18:03:40.393 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:03:40.393 UTC [649] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:03:40.393 UTC [649] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:03:40.394 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:03:40.395 UTC [649] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:03:40.395 UTC [649] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:03:40.396 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:03:40.396 UTC [649] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:03:40.396 UTC [649] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:03:40.398 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:03:40.401 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:03:40.401 UTC [649] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:03:40.401 UTC [649] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:03:40.402 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:03:40.403 UTC [649] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:03:40.403 UTC [649] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:03:40.404 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:03:40.406 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:03:40.407 UTC [649] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:03:40.407 UTC [649] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:03:40.407 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:03:40.408 UTC [649] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:03:40.408 UTC [649] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:03:40.414 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:03:40.417 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:03:40.417 UTC [649] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:03:40.417 UTC [649] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:03:40.418 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:03:40.420 UTC [649] DEBUG:  building index "pg_toast_31547_index" on table "pg_toast_31547" serially
2025-04-19 18:03:40.421 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:03:40.421 UTC [649] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:03:40.421 UTC [649] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:03:40.422 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:03:40.423 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:03:40.423 UTC [649] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:03:40.423 UTC [649] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:03:40.424 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:03:40.424 UTC [649] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:03:40.424 UTC [649] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:03:40.426 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:03:40.427 UTC [649] DEBUG:  building index "pg_toast_31580_index" on table "pg_toast_31580" serially
2025-04-19 18:03:40.428 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:03:40.428 UTC [649] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:03:40.428 UTC [649] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:03:40.429 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:03:40.431 UTC [649] DEBUG:  building index "pg_toast_31591_index" on table "pg_toast_31591" serially
2025-04-19 18:03:40.432 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:03:40.432 UTC [649] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:03:40.432 UTC [649] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:03:40.434 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:03:40.435 UTC [649] DEBUG:  building index "pg_toast_31614_index" on table "pg_toast_31614" serially
2025-04-19 18:03:40.436 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:03:40.436 UTC [649] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:03:40.436 UTC [649] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:03:40.437 UTC [649] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:03:40.437 UTC [649] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:03:40.438 UTC [649] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:03:40.438 UTC [649] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:03:40.438 UTC [649] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:03:40.438 UTC [649] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:03:40.439 UTC [649] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:03:40.439 UTC [649] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:03:40.440 UTC [649] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:03:40.440 UTC [649] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:03:40.441 UTC [649] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:03:40.441 UTC [649] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:03:40.442 UTC [649] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:03:40.442 UTC [649] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:03:40.443 UTC [649] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:03:40.443 UTC [649] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:03:40.444 UTC [649] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:03:40.444 UTC [649] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:03:40.445 UTC [649] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:03:40.445 UTC [649] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:03:40.446 UTC [649] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:03:40.446 UTC [649] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:03:40.462 UTC [649] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:03:40.735 UTC [649] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$X6ObEddHEdXctemRv4rtfeoEE26O0dQVb5IwNfh2BRdoYWICUSX5K')
	                RETURNING id, username, email
	                
2025-04-19 18:03:40.735 UTC [649] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:03:40.736 UTC [649] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:03:40.737 UTC [649] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:03:40.752 UTC [649] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:03:40.754 UTC [649] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:03:40.760 UTC [649] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:03:40.764 UTC [649] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:03:40.764 UTC [649] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:03:40.772 UTC [649] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:03:40.775 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:03:40.777 UTC [649] DEBUG:  building index "pg_toast_31650_index" on table "pg_toast_31650" serially
2025-04-19 18:03:40.778 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:03:40.778 UTC [649] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:03:40.778 UTC [649] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:03:40.779 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:03:40.780 UTC [649] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:03:40.780 UTC [649] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:03:40.780 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:03:40.780 UTC [649] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:03:40.780 UTC [649] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:03:40.782 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:03:40.783 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:03:40.783 UTC [649] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:03:40.783 UTC [649] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:03:40.784 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:03:40.784 UTC [649] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:03:40.784 UTC [649] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:03:40.785 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:03:40.786 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:03:40.786 UTC [649] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:03:40.786 UTC [649] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:03:40.788 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:03:40.788 UTC [649] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:03:40.788 UTC [649] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:03:40.789 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:03:40.793 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:03:40.794 UTC [649] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:03:40.794 UTC [649] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:03:40.798 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:03:40.799 UTC [649] DEBUG:  building index "pg_toast_31711_index" on table "pg_toast_31711" serially
2025-04-19 18:03:40.800 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:03:40.800 UTC [649] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:03:40.800 UTC [649] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:03:40.801 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:03:40.802 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:03:40.803 UTC [649] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:03:40.803 UTC [649] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:03:40.804 UTC [649] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:03:40.804 UTC [649] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:03:40.804 UTC [649] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:03:40.806 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:03:40.807 UTC [649] DEBUG:  building index "pg_toast_31744_index" on table "pg_toast_31744" serially
2025-04-19 18:03:40.808 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:03:40.808 UTC [649] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:03:40.808 UTC [649] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:03:40.809 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:03:40.810 UTC [649] DEBUG:  building index "pg_toast_31755_index" on table "pg_toast_31755" serially
2025-04-19 18:03:40.811 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:03:40.811 UTC [649] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:03:40.811 UTC [649] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:03:40.812 UTC [649] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:03:40.813 UTC [649] DEBUG:  building index "pg_toast_31778_index" on table "pg_toast_31778" serially
2025-04-19 18:03:40.814 UTC [649] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:03:40.814 UTC [649] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:03:40.814 UTC [649] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:03:40.815 UTC [649] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:03:40.815 UTC [649] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:03:40.816 UTC [649] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:03:40.816 UTC [649] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:03:40.817 UTC [649] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:03:40.817 UTC [649] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:03:40.818 UTC [649] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:03:40.818 UTC [649] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:03:40.819 UTC [649] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:03:40.819 UTC [649] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:03:40.820 UTC [649] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:03:40.820 UTC [649] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:03:40.821 UTC [649] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:03:40.821 UTC [649] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:03:40.822 UTC [649] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:03:40.822 UTC [649] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:03:40.823 UTC [649] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:03:40.823 UTC [649] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:03:40.823 UTC [649] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:03:40.823 UTC [649] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:03:40.824 UTC [649] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:03:40.824 UTC [649] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:03:40.835 UTC [649] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:03:41.086 UTC [649] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Tm7WnX/gND11t6Nhn8aHGOQFP7QB/YpUtvw1rdDrq80UzMUwimU5q')
	                RETURNING id, username, email
	                
2025-04-19 18:03:41.087 UTC [649] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:03:41.087 UTC [649] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:03:53.924 UTC [649] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:03:54.240 UTC [649] DEBUG:  unexpected EOF on client connection
2025-04-19 18:03:56.873 UTC [664] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:03:56.889 UTC [664] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:03:56.904 UTC [664] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:03:56.904 UTC [664] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:03:56.910 UTC [664] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:03:56.915 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:03:56.922 UTC [664] DEBUG:  building index "pg_toast_31814_index" on table "pg_toast_31814" serially
2025-04-19 18:03:56.925 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:03:56.926 UTC [664] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:03:56.926 UTC [664] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:03:56.927 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:03:56.928 UTC [664] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:03:56.928 UTC [664] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:03:56.929 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:03:56.930 UTC [664] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:03:56.930 UTC [664] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:03:56.932 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:03:56.934 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:03:56.934 UTC [664] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:03:56.934 UTC [664] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:03:56.935 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:03:56.935 UTC [664] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:03:56.935 UTC [664] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:03:56.937 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:03:56.940 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:03:56.942 UTC [664] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:03:56.943 UTC [664] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:03:56.947 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:03:56.949 UTC [664] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:03:56.949 UTC [664] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:03:56.952 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:03:56.955 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:03:56.956 UTC [664] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:03:56.956 UTC [664] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:03:56.959 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:03:56.964 UTC [664] DEBUG:  building index "pg_toast_31875_index" on table "pg_toast_31875" serially
2025-04-19 18:03:56.965 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:03:56.965 UTC [664] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:03:56.965 UTC [664] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:03:56.967 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:03:56.969 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:03:56.969 UTC [664] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:03:56.969 UTC [664] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:03:56.972 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:03:56.973 UTC [664] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:03:56.973 UTC [664] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:03:56.975 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:03:56.977 UTC [664] DEBUG:  building index "pg_toast_31908_index" on table "pg_toast_31908" serially
2025-04-19 18:03:56.978 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:03:56.978 UTC [664] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:03:56.978 UTC [664] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:03:56.979 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:03:56.980 UTC [664] DEBUG:  building index "pg_toast_31919_index" on table "pg_toast_31919" serially
2025-04-19 18:03:56.981 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:03:56.981 UTC [664] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:03:56.981 UTC [664] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:03:56.983 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:03:56.984 UTC [664] DEBUG:  building index "pg_toast_31942_index" on table "pg_toast_31942" serially
2025-04-19 18:03:56.985 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:03:56.985 UTC [664] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:03:56.985 UTC [664] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:03:56.987 UTC [664] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:03:56.987 UTC [664] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:03:56.988 UTC [664] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:03:56.989 UTC [664] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:03:56.990 UTC [664] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:03:56.990 UTC [664] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:03:56.991 UTC [664] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:03:56.991 UTC [664] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:03:56.992 UTC [664] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:03:56.992 UTC [664] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:03:56.993 UTC [664] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:03:56.993 UTC [664] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:03:56.994 UTC [664] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:03:56.994 UTC [664] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:03:56.995 UTC [664] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:03:56.995 UTC [664] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:03:56.996 UTC [664] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:03:56.996 UTC [664] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:03:56.997 UTC [664] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:03:56.997 UTC [664] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:03:56.997 UTC [664] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:03:56.997 UTC [664] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:03:57.021 UTC [664] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:03:57.331 UTC [664] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$JtdohyODwEWWaxkIG4Aic.2qFnnsj6ct8Z5K2j5ZAlWGPXwE7oLmW')
	                RETURNING id, username, email
	                
2025-04-19 18:03:57.336 UTC [664] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:03:57.337 UTC [664] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:03:57.339 UTC [664] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:03:57.360 UTC [664] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:03:57.382 UTC [664] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:03:57.396 UTC [664] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:03:57.407 UTC [664] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:03:57.407 UTC [664] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:03:57.412 UTC [664] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:03:57.416 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:03:57.418 UTC [664] DEBUG:  building index "pg_toast_31978_index" on table "pg_toast_31978" serially
2025-04-19 18:03:57.421 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:03:57.422 UTC [664] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:03:57.422 UTC [664] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:03:57.424 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:03:57.424 UTC [664] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:03:57.424 UTC [664] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:03:57.427 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:03:57.427 UTC [664] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:03:57.427 UTC [664] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:03:57.429 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:03:57.431 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:03:57.431 UTC [664] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:03:57.431 UTC [664] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:03:57.433 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:03:57.433 UTC [664] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:03:57.433 UTC [664] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:03:57.434 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:03:57.436 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:03:57.436 UTC [664] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:03:57.436 UTC [664] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:03:57.438 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:03:57.438 UTC [664] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:03:57.438 UTC [664] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:03:57.441 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:03:57.442 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:03:57.442 UTC [664] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:03:57.442 UTC [664] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:03:57.445 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:03:57.447 UTC [664] DEBUG:  building index "pg_toast_32039_index" on table "pg_toast_32039" serially
2025-04-19 18:03:57.448 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:03:57.448 UTC [664] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:03:57.448 UTC [664] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:03:57.450 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:03:57.451 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:03:57.451 UTC [664] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:03:57.452 UTC [664] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:03:57.453 UTC [664] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:03:57.453 UTC [664] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:03:57.453 UTC [664] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:03:57.454 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:03:57.455 UTC [664] DEBUG:  building index "pg_toast_32072_index" on table "pg_toast_32072" serially
2025-04-19 18:03:57.456 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:03:57.456 UTC [664] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:03:57.456 UTC [664] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:03:57.457 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:03:57.459 UTC [664] DEBUG:  building index "pg_toast_32083_index" on table "pg_toast_32083" serially
2025-04-19 18:03:57.460 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:03:57.460 UTC [664] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:03:57.460 UTC [664] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:03:57.461 UTC [664] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:03:57.463 UTC [664] DEBUG:  building index "pg_toast_32106_index" on table "pg_toast_32106" serially
2025-04-19 18:03:57.464 UTC [664] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:03:57.464 UTC [664] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:03:57.465 UTC [664] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:03:57.467 UTC [664] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:03:57.467 UTC [664] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:03:57.468 UTC [664] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:03:57.468 UTC [664] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:03:57.470 UTC [664] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:03:57.470 UTC [664] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:03:57.473 UTC [664] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:03:57.473 UTC [664] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:03:57.477 UTC [664] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:03:57.477 UTC [664] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:03:57.478 UTC [664] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:03:57.478 UTC [664] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:03:57.479 UTC [664] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:03:57.479 UTC [664] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:03:57.480 UTC [664] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:03:57.480 UTC [664] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:03:57.483 UTC [664] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:03:57.483 UTC [664] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:03:57.484 UTC [664] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:03:57.484 UTC [664] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:03:57.486 UTC [664] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:03:57.486 UTC [664] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:03:57.500 UTC [664] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:03:57.753 UTC [664] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$F9w0vkwluxJrvfwEsz6TPeTkFtwUle0lNf5QkVIHUA4ANhOsMqjfu')
	                RETURNING id, username, email
	                
2025-04-19 18:03:57.754 UTC [664] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:03:57.754 UTC [664] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:04:40.860 UTC [665] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 18:04:52.151 UTC [664] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:04:52.520 UTC [664] DEBUG:  unexpected EOF on client connection
2025-04-19 18:04:54.975 UTC [673] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:04:54.981 UTC [673] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:04:54.989 UTC [673] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:04:54.989 UTC [673] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:04:54.994 UTC [673] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:04:54.998 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:04:55.001 UTC [673] DEBUG:  building index "pg_toast_32142_index" on table "pg_toast_32142" serially
2025-04-19 18:04:55.002 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:04:55.003 UTC [673] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:04:55.003 UTC [673] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:04:55.004 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:04:55.004 UTC [673] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:04:55.004 UTC [673] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:04:55.005 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:04:55.005 UTC [673] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:04:55.005 UTC [673] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:04:55.006 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:04:55.007 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:04:55.007 UTC [673] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:04:55.007 UTC [673] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:04:55.008 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:04:55.008 UTC [673] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:04:55.008 UTC [673] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:04:55.009 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:04:55.011 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:04:55.012 UTC [673] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:04:55.012 UTC [673] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:04:55.013 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:04:55.013 UTC [673] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:04:55.013 UTC [673] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:04:55.015 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:04:55.016 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:04:55.016 UTC [673] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:04:55.016 UTC [673] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:04:55.018 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:04:55.020 UTC [673] DEBUG:  building index "pg_toast_32203_index" on table "pg_toast_32203" serially
2025-04-19 18:04:55.020 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:04:55.021 UTC [673] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:04:55.021 UTC [673] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:04:55.022 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:04:55.023 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:04:55.023 UTC [673] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:04:55.023 UTC [673] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:04:55.024 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:04:55.024 UTC [673] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:04:55.024 UTC [673] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:04:55.025 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:04:55.026 UTC [673] DEBUG:  building index "pg_toast_32236_index" on table "pg_toast_32236" serially
2025-04-19 18:04:55.027 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:04:55.028 UTC [673] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:04:55.028 UTC [673] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:04:55.029 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:04:55.030 UTC [673] DEBUG:  building index "pg_toast_32247_index" on table "pg_toast_32247" serially
2025-04-19 18:04:55.031 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:04:55.031 UTC [673] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:04:55.031 UTC [673] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:04:55.032 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:04:55.033 UTC [673] DEBUG:  building index "pg_toast_32270_index" on table "pg_toast_32270" serially
2025-04-19 18:04:55.034 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:04:55.034 UTC [673] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:04:55.034 UTC [673] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:04:55.035 UTC [673] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:04:55.035 UTC [673] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:04:55.036 UTC [673] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:04:55.036 UTC [673] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:04:55.037 UTC [673] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:04:55.037 UTC [673] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:04:55.038 UTC [673] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:04:55.038 UTC [673] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:04:55.038 UTC [673] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:04:55.038 UTC [673] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:04:55.039 UTC [673] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:04:55.039 UTC [673] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:04:55.040 UTC [673] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:04:55.040 UTC [673] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:04:55.041 UTC [673] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:04:55.041 UTC [673] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:04:55.042 UTC [673] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:04:55.042 UTC [673] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:04:55.043 UTC [673] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:04:55.043 UTC [673] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:04:55.044 UTC [673] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:04:55.044 UTC [673] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:04:55.057 UTC [673] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:04:55.326 UTC [673] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$BnGw1EciK8v1L/bhep6qMettUGzhm2QSsbqXNHwnl32a21EZkGGGS')
	                RETURNING id, username, email
	                
2025-04-19 18:04:55.327 UTC [673] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:04:55.328 UTC [673] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:04:55.328 UTC [673] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:04:55.339 UTC [673] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:04:55.340 UTC [673] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:04:55.343 UTC [673] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:04:55.347 UTC [673] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:04:55.347 UTC [673] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:04:55.350 UTC [673] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:04:55.353 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:04:55.354 UTC [673] DEBUG:  building index "pg_toast_32306_index" on table "pg_toast_32306" serially
2025-04-19 18:04:55.355 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:04:55.355 UTC [673] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:04:55.355 UTC [673] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:04:55.356 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:04:55.356 UTC [673] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:04:55.356 UTC [673] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:04:55.358 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:04:55.358 UTC [673] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:04:55.358 UTC [673] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:04:55.359 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:04:55.359 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:04:55.359 UTC [673] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:04:55.360 UTC [673] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:04:55.361 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:04:55.362 UTC [673] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:04:55.362 UTC [673] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:04:55.363 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:04:55.364 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:04:55.364 UTC [673] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:04:55.364 UTC [673] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:04:55.366 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:04:55.366 UTC [673] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:04:55.366 UTC [673] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:04:55.368 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:04:55.370 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:04:55.370 UTC [673] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:04:55.370 UTC [673] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:04:55.372 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:04:55.373 UTC [673] DEBUG:  building index "pg_toast_32367_index" on table "pg_toast_32367" serially
2025-04-19 18:04:55.374 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:04:55.374 UTC [673] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:04:55.374 UTC [673] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:04:55.375 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:04:55.376 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:04:55.376 UTC [673] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:04:55.376 UTC [673] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:04:55.377 UTC [673] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:04:55.377 UTC [673] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:04:55.377 UTC [673] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:04:55.378 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:04:55.379 UTC [673] DEBUG:  building index "pg_toast_32400_index" on table "pg_toast_32400" serially
2025-04-19 18:04:55.380 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:04:55.380 UTC [673] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:04:55.380 UTC [673] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:04:55.381 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:04:55.382 UTC [673] DEBUG:  building index "pg_toast_32411_index" on table "pg_toast_32411" serially
2025-04-19 18:04:55.383 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:04:55.383 UTC [673] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:04:55.383 UTC [673] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:04:55.385 UTC [673] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:04:55.385 UTC [673] DEBUG:  building index "pg_toast_32434_index" on table "pg_toast_32434" serially
2025-04-19 18:04:55.386 UTC [673] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:04:55.386 UTC [673] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:04:55.386 UTC [673] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:04:55.387 UTC [673] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:04:55.387 UTC [673] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:04:55.388 UTC [673] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:04:55.388 UTC [673] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:04:55.389 UTC [673] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:04:55.389 UTC [673] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:04:55.390 UTC [673] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:04:55.390 UTC [673] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:04:55.391 UTC [673] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:04:55.391 UTC [673] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:04:55.391 UTC [673] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:04:55.391 UTC [673] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:04:55.392 UTC [673] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:04:55.392 UTC [673] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:04:55.393 UTC [673] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:04:55.393 UTC [673] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:04:55.394 UTC [673] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:04:55.394 UTC [673] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:04:55.395 UTC [673] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:04:55.395 UTC [673] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:04:55.396 UTC [673] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:04:55.396 UTC [673] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:04:55.406 UTC [673] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:04:55.667 UTC [673] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lByoWtCcF/bxKJPAYU.3VOZ5u1jTHT80JY.Zhm2mD5f30Ere3PqaK')
	                RETURNING id, username, email
	                
2025-04-19 18:04:55.668 UTC [673] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:04:55.668 UTC [673] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:05:08.202 UTC [673] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:05:08.506 UTC [673] DEBUG:  unexpected EOF on client connection
2025-04-19 18:06:13.729 UTC [688] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:06:13.739 UTC [688] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:06:13.747 UTC [688] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:06:13.747 UTC [688] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:06:13.750 UTC [688] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:06:13.754 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:06:13.756 UTC [688] DEBUG:  building index "pg_toast_32470_index" on table "pg_toast_32470" serially
2025-04-19 18:06:13.757 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:06:13.758 UTC [688] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:06:13.758 UTC [688] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:06:13.759 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:06:13.759 UTC [688] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:06:13.759 UTC [688] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:06:13.760 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:06:13.760 UTC [688] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:06:13.760 UTC [688] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:06:13.761 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:06:13.761 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:06:13.762 UTC [688] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:06:13.762 UTC [688] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:06:13.762 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:06:13.763 UTC [688] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:06:13.763 UTC [688] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:06:13.763 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:06:13.764 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:06:13.764 UTC [688] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:06:13.764 UTC [688] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:06:13.765 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:06:13.765 UTC [688] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:06:13.765 UTC [688] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:06:13.767 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:06:13.769 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:06:13.769 UTC [688] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:06:13.770 UTC [688] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:06:13.771 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:06:13.773 UTC [688] DEBUG:  building index "pg_toast_32531_index" on table "pg_toast_32531" serially
2025-04-19 18:06:13.774 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:06:13.774 UTC [688] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:06:13.774 UTC [688] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:06:13.775 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:06:13.776 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:06:13.776 UTC [688] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:06:13.776 UTC [688] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:06:13.777 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:06:13.778 UTC [688] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:06:13.778 UTC [688] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:06:13.779 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:06:13.779 UTC [688] DEBUG:  building index "pg_toast_32564_index" on table "pg_toast_32564" serially
2025-04-19 18:06:13.780 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:06:13.781 UTC [688] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:06:13.781 UTC [688] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:06:13.781 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:06:13.782 UTC [688] DEBUG:  building index "pg_toast_32575_index" on table "pg_toast_32575" serially
2025-04-19 18:06:13.783 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:06:13.783 UTC [688] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:06:13.783 UTC [688] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:06:13.785 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:06:13.785 UTC [688] DEBUG:  building index "pg_toast_32598_index" on table "pg_toast_32598" serially
2025-04-19 18:06:13.786 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:06:13.787 UTC [688] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:06:13.787 UTC [688] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:06:13.787 UTC [688] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:06:13.787 UTC [688] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:06:13.788 UTC [688] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:06:13.788 UTC [688] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:06:13.789 UTC [688] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:06:13.789 UTC [688] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:06:13.790 UTC [688] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:06:13.790 UTC [688] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:06:13.791 UTC [688] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:06:13.791 UTC [688] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:06:13.791 UTC [688] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:06:13.791 UTC [688] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:06:13.792 UTC [688] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:06:13.792 UTC [688] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:06:13.793 UTC [688] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:06:13.793 UTC [688] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:06:13.794 UTC [688] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:06:13.794 UTC [688] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:06:13.794 UTC [688] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:06:13.794 UTC [688] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:06:13.795 UTC [688] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:06:13.795 UTC [688] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:06:13.812 UTC [688] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:06:13.821 UTC [689] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 18:06:14.036 UTC [689] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 18:06:14.080 UTC [688] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$WlKPDLR/8WDTTnXEuFljn.06nHkKxzIuRwuadnBODftKKpLxQqdde')
	                RETURNING id, username, email
	                
2025-04-19 18:06:14.081 UTC [688] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:06:14.081 UTC [688] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:06:14.082 UTC [688] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:06:14.089 UTC [688] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:06:14.090 UTC [688] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:06:14.092 UTC [688] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:06:14.097 UTC [688] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:06:14.097 UTC [688] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:06:14.100 UTC [688] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:06:14.104 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:06:14.110 UTC [688] DEBUG:  building index "pg_toast_32635_index" on table "pg_toast_32635" serially
2025-04-19 18:06:14.114 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:06:14.115 UTC [688] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:06:14.115 UTC [688] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:06:14.118 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:06:14.120 UTC [688] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:06:14.120 UTC [688] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:06:14.122 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:06:14.123 UTC [688] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:06:14.123 UTC [688] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:06:14.127 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:06:14.129 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:06:14.129 UTC [688] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:06:14.129 UTC [688] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:06:14.131 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:06:14.131 UTC [688] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:06:14.131 UTC [688] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:06:14.133 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:06:14.134 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:06:14.134 UTC [688] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:06:14.134 UTC [688] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:06:14.135 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:06:14.136 UTC [688] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:06:14.136 UTC [688] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:06:14.137 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:06:14.138 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:06:14.138 UTC [688] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:06:14.138 UTC [688] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:06:14.139 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:06:14.140 UTC [688] DEBUG:  building index "pg_toast_32696_index" on table "pg_toast_32696" serially
2025-04-19 18:06:14.140 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:06:14.141 UTC [688] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:06:14.141 UTC [688] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:06:14.142 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:06:14.143 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:06:14.144 UTC [688] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:06:14.144 UTC [688] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:06:14.145 UTC [688] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:06:14.145 UTC [688] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:06:14.145 UTC [688] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:06:14.146 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:06:14.147 UTC [688] DEBUG:  building index "pg_toast_32729_index" on table "pg_toast_32729" serially
2025-04-19 18:06:14.148 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:06:14.148 UTC [688] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:06:14.148 UTC [688] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:06:14.149 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:06:14.150 UTC [688] DEBUG:  building index "pg_toast_32740_index" on table "pg_toast_32740" serially
2025-04-19 18:06:14.150 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:06:14.151 UTC [688] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:06:14.151 UTC [688] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:06:14.152 UTC [688] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:06:14.153 UTC [688] DEBUG:  building index "pg_toast_32763_index" on table "pg_toast_32763" serially
2025-04-19 18:06:14.154 UTC [688] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:06:14.154 UTC [688] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:06:14.154 UTC [688] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:06:14.155 UTC [688] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:06:14.155 UTC [688] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:06:14.156 UTC [688] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:06:14.156 UTC [688] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:06:14.157 UTC [688] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:06:14.157 UTC [688] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:06:14.158 UTC [688] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:06:14.158 UTC [688] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:06:14.159 UTC [688] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:06:14.159 UTC [688] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:06:14.159 UTC [688] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:06:14.159 UTC [688] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:06:14.160 UTC [688] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:06:14.160 UTC [688] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:06:14.161 UTC [688] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:06:14.161 UTC [688] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:06:14.162 UTC [688] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:06:14.162 UTC [688] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:06:14.163 UTC [688] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:06:14.163 UTC [688] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:06:14.164 UTC [688] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:06:14.164 UTC [688] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:06:14.172 UTC [688] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:06:14.415 UTC [688] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$v5TN697MzM2NzDseAIxSs.m2vt5GxA4/YcZwykJNbDKln/bRXINRa')
	                RETURNING id, username, email
	                
2025-04-19 18:06:14.416 UTC [688] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:06:14.416 UTC [688] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:06:27.606 UTC [688] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:06:27.924 UTC [688] DEBUG:  unexpected EOF on client connection
2025-04-19 18:06:30.063 UTC [697] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:06:30.071 UTC [697] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:06:30.076 UTC [697] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:06:30.076 UTC [697] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:06:30.079 UTC [697] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:06:30.083 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:06:30.085 UTC [697] DEBUG:  building index "pg_toast_32799_index" on table "pg_toast_32799" serially
2025-04-19 18:06:30.087 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:06:30.089 UTC [697] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:06:30.089 UTC [697] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:06:30.090 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:06:30.090 UTC [697] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:06:30.090 UTC [697] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:06:30.091 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:06:30.091 UTC [697] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:06:30.091 UTC [697] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:06:30.092 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:06:30.093 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:06:30.093 UTC [697] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:06:30.093 UTC [697] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:06:30.094 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:06:30.094 UTC [697] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:06:30.094 UTC [697] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:06:30.095 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:06:30.096 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:06:30.096 UTC [697] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:06:30.096 UTC [697] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:06:30.097 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:06:30.097 UTC [697] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:06:30.097 UTC [697] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:06:30.098 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:06:30.099 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:06:30.100 UTC [697] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:06:30.100 UTC [697] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:06:30.101 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:06:30.102 UTC [697] DEBUG:  building index "pg_toast_32860_index" on table "pg_toast_32860" serially
2025-04-19 18:06:30.103 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:06:30.104 UTC [697] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:06:30.104 UTC [697] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:06:30.105 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:06:30.106 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:06:30.106 UTC [697] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:06:30.106 UTC [697] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:06:30.107 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:06:30.107 UTC [697] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:06:30.107 UTC [697] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:06:30.108 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:06:30.109 UTC [697] DEBUG:  building index "pg_toast_32893_index" on table "pg_toast_32893" serially
2025-04-19 18:06:30.110 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:06:30.110 UTC [697] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:06:30.110 UTC [697] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:06:30.111 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:06:30.112 UTC [697] DEBUG:  building index "pg_toast_32904_index" on table "pg_toast_32904" serially
2025-04-19 18:06:30.113 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:06:30.113 UTC [697] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:06:30.113 UTC [697] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:06:30.114 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:06:30.115 UTC [697] DEBUG:  building index "pg_toast_32927_index" on table "pg_toast_32927" serially
2025-04-19 18:06:30.116 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:06:30.116 UTC [697] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:06:30.116 UTC [697] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:06:30.117 UTC [697] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:06:30.117 UTC [697] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:06:30.118 UTC [697] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:06:30.118 UTC [697] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:06:30.119 UTC [697] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:06:30.119 UTC [697] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:06:30.120 UTC [697] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:06:30.120 UTC [697] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:06:30.121 UTC [697] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:06:30.121 UTC [697] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:06:30.121 UTC [697] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:06:30.121 UTC [697] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:06:30.122 UTC [697] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:06:30.122 UTC [697] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:06:30.123 UTC [697] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:06:30.123 UTC [697] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:06:30.124 UTC [697] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:06:30.124 UTC [697] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:06:30.125 UTC [697] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:06:30.125 UTC [697] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:06:30.126 UTC [697] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:06:30.126 UTC [697] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:06:30.136 UTC [697] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:06:30.404 UTC [697] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$CLIYemNpAkxw73cAaDVCiOqflPmYrz7fO4Cq2wtMGx4CURuvlFd1i')
	                RETURNING id, username, email
	                
2025-04-19 18:06:30.404 UTC [697] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:06:30.405 UTC [697] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:06:30.405 UTC [697] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:06:30.413 UTC [697] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:06:30.414 UTC [697] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:06:30.416 UTC [697] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:06:30.420 UTC [697] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:06:30.420 UTC [697] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:06:30.423 UTC [697] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:06:30.425 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:06:30.426 UTC [697] DEBUG:  building index "pg_toast_32963_index" on table "pg_toast_32963" serially
2025-04-19 18:06:30.427 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:06:30.427 UTC [697] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:06:30.427 UTC [697] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:06:30.428 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:06:30.428 UTC [697] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:06:30.428 UTC [697] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:06:30.429 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:06:30.429 UTC [697] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:06:30.429 UTC [697] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:06:30.430 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:06:30.431 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:06:30.431 UTC [697] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:06:30.431 UTC [697] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:06:30.432 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:06:30.432 UTC [697] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:06:30.432 UTC [697] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:06:30.433 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:06:30.434 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:06:30.434 UTC [697] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:06:30.434 UTC [697] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:06:30.435 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:06:30.435 UTC [697] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:06:30.435 UTC [697] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:06:30.436 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:06:30.437 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:06:30.437 UTC [697] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:06:30.437 UTC [697] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:06:30.438 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:06:30.439 UTC [697] DEBUG:  building index "pg_toast_33024_index" on table "pg_toast_33024" serially
2025-04-19 18:06:30.439 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:06:30.440 UTC [697] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:06:30.440 UTC [697] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:06:30.441 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:06:30.441 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:06:30.442 UTC [697] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:06:30.442 UTC [697] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:06:30.443 UTC [697] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:06:30.443 UTC [697] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:06:30.443 UTC [697] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:06:30.444 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:06:30.445 UTC [697] DEBUG:  building index "pg_toast_33057_index" on table "pg_toast_33057" serially
2025-04-19 18:06:30.445 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:06:30.445 UTC [697] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:06:30.445 UTC [697] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:06:30.446 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:06:30.447 UTC [697] DEBUG:  building index "pg_toast_33068_index" on table "pg_toast_33068" serially
2025-04-19 18:06:30.448 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:06:30.448 UTC [697] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:06:30.448 UTC [697] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:06:30.449 UTC [697] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:06:30.450 UTC [697] DEBUG:  building index "pg_toast_33091_index" on table "pg_toast_33091" serially
2025-04-19 18:06:30.451 UTC [697] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:06:30.451 UTC [697] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:06:30.451 UTC [697] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:06:30.452 UTC [697] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:06:30.452 UTC [697] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:06:30.453 UTC [697] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:06:30.453 UTC [697] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:06:30.454 UTC [697] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:06:30.454 UTC [697] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:06:30.455 UTC [697] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:06:30.455 UTC [697] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:06:30.456 UTC [697] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:06:30.456 UTC [697] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:06:30.457 UTC [697] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:06:30.457 UTC [697] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:06:30.458 UTC [697] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:06:30.458 UTC [697] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:06:30.460 UTC [697] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:06:30.460 UTC [697] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:06:30.461 UTC [697] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:06:30.461 UTC [697] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:06:30.462 UTC [697] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:06:30.462 UTC [697] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:06:30.463 UTC [697] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:06:30.463 UTC [697] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:06:30.473 UTC [697] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:06:30.724 UTC [697] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$aiPDJKt1s61uTCN.x0VVoem8nt4uXpgxlcwEJ7BliyNG1MNUtH8R6')
	                RETURNING id, username, email
	                
2025-04-19 18:06:30.725 UTC [697] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:06:30.726 UTC [697] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:10:00.856 UTC [697] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:10:00.983 UTC [712] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 18:10:01.151 UTC [697] DEBUG:  unexpected EOF on client connection
2025-04-19 18:10:08.338 UTC [714] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:10:08.388 UTC [714] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:10:08.398 UTC [714] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:10:08.398 UTC [714] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:10:08.403 UTC [714] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:10:08.411 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:10:08.422 UTC [714] DEBUG:  building index "pg_toast_33127_index" on table "pg_toast_33127" serially
2025-04-19 18:10:08.426 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:10:08.428 UTC [714] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:10:08.431 UTC [714] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:10:08.437 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:10:08.442 UTC [714] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:10:08.442 UTC [714] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:10:08.446 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:10:08.448 UTC [714] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:10:08.448 UTC [714] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:10:08.454 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:10:08.462 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:10:08.463 UTC [714] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:10:08.463 UTC [714] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:10:08.472 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:10:08.477 UTC [714] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:10:08.477 UTC [714] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:10:08.485 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:10:08.492 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:10:08.493 UTC [714] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:10:08.493 UTC [714] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:10:08.499 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:10:08.500 UTC [714] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:10:08.500 UTC [714] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:10:08.514 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:10:08.517 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:10:08.518 UTC [714] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:10:08.518 UTC [714] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:10:08.521 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:10:08.524 UTC [714] DEBUG:  building index "pg_toast_33188_index" on table "pg_toast_33188" serially
2025-04-19 18:10:08.526 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:10:08.526 UTC [714] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:10:08.526 UTC [714] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:10:08.528 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:10:08.529 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:10:08.530 UTC [714] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:10:08.530 UTC [714] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:10:08.531 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:10:08.531 UTC [714] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:10:08.531 UTC [714] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:10:08.533 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:10:08.535 UTC [714] DEBUG:  building index "pg_toast_33221_index" on table "pg_toast_33221" serially
2025-04-19 18:10:08.538 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:10:08.539 UTC [714] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:10:08.539 UTC [714] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:10:08.541 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:10:08.545 UTC [714] DEBUG:  building index "pg_toast_33232_index" on table "pg_toast_33232" serially
2025-04-19 18:10:08.546 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:10:08.546 UTC [714] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:10:08.546 UTC [714] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:10:08.548 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:10:08.549 UTC [714] DEBUG:  building index "pg_toast_33255_index" on table "pg_toast_33255" serially
2025-04-19 18:10:08.550 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:10:08.550 UTC [714] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:10:08.550 UTC [714] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:10:08.552 UTC [714] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:10:08.552 UTC [714] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:10:08.553 UTC [714] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:10:08.553 UTC [714] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:10:08.555 UTC [714] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:10:08.555 UTC [714] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:10:08.556 UTC [714] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:10:08.556 UTC [714] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:10:08.558 UTC [714] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:10:08.558 UTC [714] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:10:08.559 UTC [714] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:10:08.559 UTC [714] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:10:08.563 UTC [714] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:10:08.563 UTC [714] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:10:08.564 UTC [714] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:10:08.564 UTC [714] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:10:08.565 UTC [714] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:10:08.565 UTC [714] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:10:08.566 UTC [714] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:10:08.566 UTC [714] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:10:08.568 UTC [714] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:10:08.568 UTC [714] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:10:08.595 UTC [714] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:10:08.942 UTC [714] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$EozalFb3qPPLymijPRjdkefV9S/BmhoyUqRRTTwmFyjwZeiFpCx7S')
	                RETURNING id, username, email
	                
2025-04-19 18:10:08.944 UTC [714] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:10:08.944 UTC [714] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:10:08.946 UTC [714] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:10:08.970 UTC [714] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:10:08.978 UTC [714] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:10:08.985 UTC [714] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:10:08.998 UTC [714] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:10:08.998 UTC [714] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:10:09.003 UTC [714] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:10:09.007 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:10:09.009 UTC [714] DEBUG:  building index "pg_toast_33291_index" on table "pg_toast_33291" serially
2025-04-19 18:10:09.010 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:10:09.012 UTC [714] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:10:09.012 UTC [714] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:10:09.014 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:10:09.014 UTC [714] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:10:09.014 UTC [714] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:10:09.016 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:10:09.016 UTC [714] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:10:09.016 UTC [714] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:10:09.017 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:10:09.018 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:10:09.018 UTC [714] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:10:09.018 UTC [714] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:10:09.020 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:10:09.020 UTC [714] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:10:09.020 UTC [714] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:10:09.022 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:10:09.024 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:10:09.025 UTC [714] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:10:09.025 UTC [714] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:10:09.028 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:10:09.028 UTC [714] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:10:09.028 UTC [714] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:10:09.034 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:10:09.036 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:10:09.037 UTC [714] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:10:09.037 UTC [714] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:10:09.038 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:10:09.040 UTC [714] DEBUG:  building index "pg_toast_33352_index" on table "pg_toast_33352" serially
2025-04-19 18:10:09.042 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:10:09.043 UTC [714] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:10:09.043 UTC [714] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:10:09.045 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:10:09.048 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:10:09.048 UTC [714] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:10:09.049 UTC [714] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:10:09.049 UTC [714] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:10:09.050 UTC [714] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:10:09.050 UTC [714] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:10:09.052 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:10:09.053 UTC [714] DEBUG:  building index "pg_toast_33385_index" on table "pg_toast_33385" serially
2025-04-19 18:10:09.054 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:10:09.055 UTC [714] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:10:09.055 UTC [714] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:10:09.056 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:10:09.057 UTC [714] DEBUG:  building index "pg_toast_33396_index" on table "pg_toast_33396" serially
2025-04-19 18:10:09.058 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:10:09.059 UTC [714] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:10:09.059 UTC [714] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:10:09.062 UTC [714] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:10:09.063 UTC [714] DEBUG:  building index "pg_toast_33419_index" on table "pg_toast_33419" serially
2025-04-19 18:10:09.065 UTC [714] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:10:09.066 UTC [714] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:10:09.066 UTC [714] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:10:09.067 UTC [714] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:10:09.067 UTC [714] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:10:09.068 UTC [714] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:10:09.068 UTC [714] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:10:09.071 UTC [714] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:10:09.071 UTC [714] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:10:09.072 UTC [714] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:10:09.072 UTC [714] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:10:09.074 UTC [714] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:10:09.074 UTC [714] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:10:09.075 UTC [714] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:10:09.075 UTC [714] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:10:09.076 UTC [714] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:10:09.076 UTC [714] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:10:09.077 UTC [714] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:10:09.077 UTC [714] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:10:09.079 UTC [714] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:10:09.079 UTC [714] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:10:09.081 UTC [714] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:10:09.081 UTC [714] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:10:09.082 UTC [714] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:10:09.082 UTC [714] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:10:09.103 UTC [714] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:10:09.551 UTC [714] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$HNdXbpTmIKjFTJEUKU7mGerrKZUZGOXWRJKvcZ/3xmagmwVia7RFC')
	                RETURNING id, username, email
	                
2025-04-19 18:10:09.637 UTC [714] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:10:09.647 UTC [714] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:10:16.771 UTC [714] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:10:17.084 UTC [714] DEBUG:  unexpected EOF on client connection
2025-04-19 18:10:19.088 UTC [728] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:10:19.097 UTC [728] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:10:19.103 UTC [728] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:10:19.103 UTC [728] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:10:19.106 UTC [728] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:10:19.109 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:10:19.116 UTC [728] DEBUG:  building index "pg_toast_33455_index" on table "pg_toast_33455" serially
2025-04-19 18:10:19.118 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:10:19.119 UTC [728] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:10:19.119 UTC [728] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:10:19.120 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:10:19.120 UTC [728] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:10:19.120 UTC [728] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:10:19.121 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:10:19.121 UTC [728] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:10:19.121 UTC [728] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:10:19.122 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:10:19.123 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:10:19.124 UTC [728] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:10:19.124 UTC [728] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:10:19.124 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:10:19.124 UTC [728] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:10:19.124 UTC [728] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:10:19.125 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:10:19.126 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:10:19.127 UTC [728] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:10:19.127 UTC [728] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:10:19.127 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:10:19.127 UTC [728] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:10:19.127 UTC [728] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:10:19.129 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:10:19.130 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:10:19.130 UTC [728] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:10:19.130 UTC [728] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:10:19.131 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:10:19.133 UTC [728] DEBUG:  building index "pg_toast_33516_index" on table "pg_toast_33516" serially
2025-04-19 18:10:19.133 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:10:19.133 UTC [728] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:10:19.133 UTC [728] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:10:19.135 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:10:19.136 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:10:19.136 UTC [728] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:10:19.136 UTC [728] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:10:19.137 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:10:19.137 UTC [728] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:10:19.137 UTC [728] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:10:19.138 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:10:19.139 UTC [728] DEBUG:  building index "pg_toast_33549_index" on table "pg_toast_33549" serially
2025-04-19 18:10:19.140 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:10:19.140 UTC [728] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:10:19.140 UTC [728] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:10:19.141 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:10:19.142 UTC [728] DEBUG:  building index "pg_toast_33560_index" on table "pg_toast_33560" serially
2025-04-19 18:10:19.144 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:10:19.144 UTC [728] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:10:19.144 UTC [728] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:10:19.145 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:10:19.146 UTC [728] DEBUG:  building index "pg_toast_33583_index" on table "pg_toast_33583" serially
2025-04-19 18:10:19.147 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:10:19.147 UTC [728] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:10:19.147 UTC [728] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:10:19.148 UTC [728] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:10:19.148 UTC [728] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:10:19.149 UTC [728] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:10:19.149 UTC [728] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:10:19.150 UTC [728] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:10:19.150 UTC [728] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:10:19.150 UTC [728] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:10:19.150 UTC [728] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:10:19.151 UTC [728] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:10:19.151 UTC [728] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:10:19.152 UTC [728] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:10:19.152 UTC [728] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:10:19.153 UTC [728] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:10:19.153 UTC [728] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:10:19.154 UTC [728] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:10:19.154 UTC [728] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:10:19.154 UTC [728] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:10:19.154 UTC [728] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:10:19.155 UTC [728] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:10:19.155 UTC [728] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:10:19.156 UTC [728] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:10:19.156 UTC [728] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:10:19.172 UTC [728] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:10:19.446 UTC [728] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$zs7JvEi1/JHf5rmRu3Tsdui8gsZCXqCagh5XKY9PtbmxHtS6GIUO2')
	                RETURNING id, username, email
	                
2025-04-19 18:10:19.447 UTC [728] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:10:19.447 UTC [728] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:10:19.448 UTC [728] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:10:19.457 UTC [728] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:10:19.458 UTC [728] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:10:19.462 UTC [728] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:10:19.467 UTC [728] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:10:19.467 UTC [728] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:10:19.473 UTC [728] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:10:19.477 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:10:19.478 UTC [728] DEBUG:  building index "pg_toast_33619_index" on table "pg_toast_33619" serially
2025-04-19 18:10:19.479 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:10:19.479 UTC [728] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:10:19.479 UTC [728] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:10:19.480 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:10:19.480 UTC [728] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:10:19.480 UTC [728] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:10:19.481 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:10:19.481 UTC [728] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:10:19.481 UTC [728] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:10:19.482 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:10:19.482 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:10:19.483 UTC [728] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:10:19.483 UTC [728] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:10:19.483 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:10:19.483 UTC [728] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:10:19.483 UTC [728] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:10:19.484 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:10:19.485 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:10:19.485 UTC [728] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:10:19.485 UTC [728] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:10:19.486 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:10:19.486 UTC [728] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:10:19.486 UTC [728] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:10:19.487 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:10:19.488 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:10:19.488 UTC [728] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:10:19.488 UTC [728] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:10:19.489 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:10:19.491 UTC [728] DEBUG:  building index "pg_toast_33680_index" on table "pg_toast_33680" serially
2025-04-19 18:10:19.492 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:10:19.492 UTC [728] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:10:19.492 UTC [728] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:10:19.493 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:10:19.494 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:10:19.494 UTC [728] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:10:19.494 UTC [728] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:10:19.495 UTC [728] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:10:19.495 UTC [728] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:10:19.495 UTC [728] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:10:19.496 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:10:19.498 UTC [728] DEBUG:  building index "pg_toast_33713_index" on table "pg_toast_33713" serially
2025-04-19 18:10:19.498 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:10:19.499 UTC [728] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:10:19.499 UTC [728] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:10:19.499 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:10:19.501 UTC [728] DEBUG:  building index "pg_toast_33724_index" on table "pg_toast_33724" serially
2025-04-19 18:10:19.502 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:10:19.502 UTC [728] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:10:19.502 UTC [728] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:10:19.503 UTC [728] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:10:19.504 UTC [728] DEBUG:  building index "pg_toast_33747_index" on table "pg_toast_33747" serially
2025-04-19 18:10:19.505 UTC [728] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:10:19.505 UTC [728] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:10:19.505 UTC [728] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:10:19.506 UTC [728] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:10:19.506 UTC [728] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:10:19.506 UTC [728] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:10:19.506 UTC [728] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:10:19.507 UTC [728] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:10:19.507 UTC [728] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:10:19.508 UTC [728] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:10:19.508 UTC [728] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:10:19.509 UTC [728] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:10:19.509 UTC [728] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:10:19.510 UTC [728] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:10:19.510 UTC [728] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:10:19.511 UTC [728] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:10:19.511 UTC [728] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:10:19.512 UTC [728] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:10:19.512 UTC [728] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:10:19.512 UTC [728] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:10:19.512 UTC [728] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:10:19.514 UTC [728] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:10:19.514 UTC [728] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:10:19.514 UTC [728] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:10:19.514 UTC [728] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:10:19.523 UTC [728] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:10:19.767 UTC [728] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$aqpMOvSXCfHN0KPzpj8b6Ob6Ci6rKDUWfmKdo5T67ou/2lQCJx2wm')
	                RETURNING id, username, email
	                
2025-04-19 18:10:19.767 UTC [728] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:10:19.768 UTC [728] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:10:28.796 UTC [729] LOG:  statement: set search_path to 'public';
2025-04-19 18:10:28.797 UTC [729] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 18:10:28.813 UTC [729] LOG:  statement: SHOW ALL
2025-04-19 18:10:28.816 UTC [729] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 18:10:28.836 UTC [729] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 18:10:28.837 UTC [729] LOG:  statement: SHOW ALL
2025-04-19 18:10:28.848 UTC [729] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 18:12:41.582 UTC [737] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 18:12:41.848 UTC [737] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 18:12:43.343 UTC [728] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:12:43.658 UTC [728] DEBUG:  unexpected EOF on client connection
2025-04-19 18:12:46.175 UTC [738] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:12:46.183 UTC [738] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:12:46.197 UTC [738] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:12:46.197 UTC [738] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:12:46.204 UTC [738] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:12:46.209 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:12:46.212 UTC [738] DEBUG:  building index "pg_toast_33784_index" on table "pg_toast_33784" serially
2025-04-19 18:12:46.214 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:12:46.214 UTC [738] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:12:46.214 UTC [738] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:12:46.215 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:12:46.216 UTC [738] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:12:46.216 UTC [738] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:12:46.216 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:12:46.217 UTC [738] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:12:46.217 UTC [738] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:12:46.217 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:12:46.218 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:12:46.219 UTC [738] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:12:46.219 UTC [738] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:12:46.219 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:12:46.220 UTC [738] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:12:46.220 UTC [738] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:12:46.221 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:12:46.222 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:12:46.223 UTC [738] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:12:46.223 UTC [738] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:12:46.223 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:12:46.224 UTC [738] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:12:46.224 UTC [738] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:12:46.225 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:12:46.226 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:12:46.226 UTC [738] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:12:46.226 UTC [738] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:12:46.227 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:12:46.229 UTC [738] DEBUG:  building index "pg_toast_33845_index" on table "pg_toast_33845" serially
2025-04-19 18:12:46.230 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:12:46.230 UTC [738] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:12:46.230 UTC [738] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:12:46.231 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:12:46.232 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:12:46.232 UTC [738] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:12:46.232 UTC [738] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:12:46.233 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:12:46.233 UTC [738] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:12:46.233 UTC [738] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:12:46.234 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:12:46.235 UTC [738] DEBUG:  building index "pg_toast_33878_index" on table "pg_toast_33878" serially
2025-04-19 18:12:46.236 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:12:46.236 UTC [738] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:12:46.236 UTC [738] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:12:46.237 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:12:46.238 UTC [738] DEBUG:  building index "pg_toast_33889_index" on table "pg_toast_33889" serially
2025-04-19 18:12:46.239 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:12:46.239 UTC [738] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:12:46.239 UTC [738] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:12:46.241 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:12:46.242 UTC [738] DEBUG:  building index "pg_toast_33912_index" on table "pg_toast_33912" serially
2025-04-19 18:12:46.243 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:12:46.243 UTC [738] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:12:46.243 UTC [738] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:12:46.245 UTC [738] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:12:46.245 UTC [738] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:12:46.246 UTC [738] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:12:46.246 UTC [738] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:12:46.248 UTC [738] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:12:46.248 UTC [738] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:12:46.249 UTC [738] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:12:46.249 UTC [738] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:12:46.251 UTC [738] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:12:46.251 UTC [738] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:12:46.254 UTC [738] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:12:46.254 UTC [738] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:12:46.256 UTC [738] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:12:46.256 UTC [738] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:12:46.257 UTC [738] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 18:12:46.257 UTC [738] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:12:46.257 UTC [738] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:12:46.260 UTC [738] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:12:46.260 UTC [738] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:12:46.261 UTC [738] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:12:46.261 UTC [738] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:12:46.262 UTC [738] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:12:46.262 UTC [738] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:12:46.281 UTC [738] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:12:46.577 UTC [738] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$rLtcFTtQOpyrJwF27fb.SuH8LvisbXqkxyc0OEdxqzHeYbU.XUl2y')
	                RETURNING id, username, email
	                
2025-04-19 18:12:46.578 UTC [738] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:12:46.578 UTC [738] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:12:46.579 UTC [738] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:12:46.583 UTC [738] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 18:12:46.583 UTC [738] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 18:12:46.588 UTC [738] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:12:46.596 UTC [738] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:12:46.602 UTC [738] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:12:46.609 UTC [738] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:12:46.609 UTC [738] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:12:46.630 UTC [738] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:12:46.638 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:12:46.640 UTC [738] DEBUG:  building index "pg_toast_33948_index" on table "pg_toast_33948" serially
2025-04-19 18:12:46.642 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:12:46.643 UTC [738] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:12:46.643 UTC [738] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:12:46.645 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:12:46.646 UTC [738] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:12:46.646 UTC [738] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:12:46.648 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:12:46.648 UTC [738] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:12:46.648 UTC [738] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:12:46.650 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:12:46.653 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:12:46.654 UTC [738] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:12:46.654 UTC [738] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:12:46.658 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:12:46.658 UTC [738] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:12:46.658 UTC [738] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:12:46.660 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:12:46.663 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:12:46.663 UTC [738] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:12:46.663 UTC [738] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:12:46.664 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:12:46.665 UTC [738] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:12:46.665 UTC [738] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:12:46.667 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:12:46.668 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:12:46.668 UTC [738] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:12:46.668 UTC [738] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:12:46.670 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:12:46.671 UTC [738] DEBUG:  building index "pg_toast_34009_index" on table "pg_toast_34009" serially
2025-04-19 18:12:46.672 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:12:46.672 UTC [738] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:12:46.672 UTC [738] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:12:46.673 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:12:46.675 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:12:46.675 UTC [738] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:12:46.675 UTC [738] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:12:46.676 UTC [738] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:12:46.676 UTC [738] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:12:46.676 UTC [738] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:12:46.677 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:12:46.679 UTC [738] DEBUG:  building index "pg_toast_34042_index" on table "pg_toast_34042" serially
2025-04-19 18:12:46.680 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:12:46.681 UTC [738] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:12:46.681 UTC [738] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:12:46.682 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:12:46.683 UTC [738] DEBUG:  building index "pg_toast_34053_index" on table "pg_toast_34053" serially
2025-04-19 18:12:46.684 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:12:46.684 UTC [738] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:12:46.684 UTC [738] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:12:46.685 UTC [738] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:12:46.687 UTC [738] DEBUG:  building index "pg_toast_34076_index" on table "pg_toast_34076" serially
2025-04-19 18:12:46.688 UTC [738] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:12:46.688 UTC [738] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:12:46.688 UTC [738] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:12:46.690 UTC [738] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:12:46.690 UTC [738] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:12:46.690 UTC [738] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:12:46.690 UTC [738] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:12:46.691 UTC [738] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:12:46.691 UTC [738] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:12:46.692 UTC [738] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:12:46.692 UTC [738] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:12:46.693 UTC [738] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:12:46.693 UTC [738] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:12:46.694 UTC [738] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:12:46.694 UTC [738] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:12:46.695 UTC [738] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:12:46.695 UTC [738] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:12:46.696 UTC [738] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:12:46.696 UTC [738] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:12:46.697 UTC [738] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:12:46.697 UTC [738] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:12:46.698 UTC [738] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:12:46.698 UTC [738] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:12:46.699 UTC [738] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:12:46.699 UTC [738] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:12:46.707 UTC [738] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:12:46.951 UTC [738] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Q1UvBjiDJ69.v20YG02b7eqAloxCXsfKbE6P/STCUu7JJvdUyjJQK')
	                RETURNING id, username, email
	                
2025-04-19 18:12:46.952 UTC [738] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:12:46.953 UTC [738] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:12:59.507 UTC [738] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:12:59.837 UTC [738] DEBUG:  unexpected EOF on client connection
2025-04-19 18:13:01.719 UTC [752] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:01.730 UTC [752] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:01.746 UTC [752] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:01.746 UTC [752] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:01.756 UTC [752] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:01.761 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:01.766 UTC [752] DEBUG:  building index "pg_toast_34112_index" on table "pg_toast_34112" serially
2025-04-19 18:13:01.769 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:01.769 UTC [752] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:01.769 UTC [752] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:01.770 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:01.771 UTC [752] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:01.771 UTC [752] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:01.772 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:01.772 UTC [752] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:01.772 UTC [752] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:01.773 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:01.774 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:01.774 UTC [752] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:01.774 UTC [752] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:01.775 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:01.775 UTC [752] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:01.775 UTC [752] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:01.776 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:01.777 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:01.778 UTC [752] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:01.778 UTC [752] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:01.778 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:01.778 UTC [752] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:01.779 UTC [752] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:01.780 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:01.781 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:01.781 UTC [752] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:01.781 UTC [752] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:01.782 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:01.784 UTC [752] DEBUG:  building index "pg_toast_34173_index" on table "pg_toast_34173" serially
2025-04-19 18:13:01.785 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:01.785 UTC [752] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:01.785 UTC [752] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:01.786 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:01.787 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:01.787 UTC [752] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:01.787 UTC [752] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:01.788 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:01.788 UTC [752] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:01.788 UTC [752] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:01.789 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:01.791 UTC [752] DEBUG:  building index "pg_toast_34206_index" on table "pg_toast_34206" serially
2025-04-19 18:13:01.791 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:01.791 UTC [752] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:01.791 UTC [752] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:01.792 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:01.793 UTC [752] DEBUG:  building index "pg_toast_34217_index" on table "pg_toast_34217" serially
2025-04-19 18:13:01.794 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:01.795 UTC [752] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:01.795 UTC [752] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:01.798 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:01.801 UTC [752] DEBUG:  building index "pg_toast_34240_index" on table "pg_toast_34240" serially
2025-04-19 18:13:01.802 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:01.803 UTC [752] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:01.803 UTC [752] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:01.805 UTC [752] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:01.805 UTC [752] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:01.808 UTC [752] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:01.808 UTC [752] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:01.809 UTC [752] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:01.809 UTC [752] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:01.811 UTC [752] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:01.811 UTC [752] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:01.815 UTC [752] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:01.815 UTC [752] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:01.817 UTC [752] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:01.817 UTC [752] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:01.818 UTC [752] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:01.818 UTC [752] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:01.819 UTC [752] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:01.819 UTC [752] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:01.821 UTC [752] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:01.821 UTC [752] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:01.822 UTC [752] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:01.822 UTC [752] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:01.824 UTC [752] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:01.824 UTC [752] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:01.837 UTC [752] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:02.101 UTC [752] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$en8y0ZFs2PzACDegx29VJucc9DS8z1YXl3b0s9ojAXr.1l05/nGSy')
	                RETURNING id, username, email
	                
2025-04-19 18:13:02.102 UTC [752] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:02.102 UTC [752] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:02.103 UTC [752] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:13:02.118 UTC [752] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:02.119 UTC [752] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:02.122 UTC [752] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:02.126 UTC [752] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:02.126 UTC [752] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:02.129 UTC [752] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:02.132 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:02.133 UTC [752] DEBUG:  building index "pg_toast_34276_index" on table "pg_toast_34276" serially
2025-04-19 18:13:02.134 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:02.134 UTC [752] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:02.134 UTC [752] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:02.135 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:02.135 UTC [752] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:02.135 UTC [752] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:02.136 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:02.136 UTC [752] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:02.136 UTC [752] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:02.137 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:02.138 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:02.138 UTC [752] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:02.138 UTC [752] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:02.138 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:02.139 UTC [752] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:02.139 UTC [752] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:02.139 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:02.140 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:02.140 UTC [752] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:02.140 UTC [752] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:02.141 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:02.141 UTC [752] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:02.141 UTC [752] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:02.143 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:02.144 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:02.144 UTC [752] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:02.144 UTC [752] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:02.145 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:02.146 UTC [752] DEBUG:  building index "pg_toast_34337_index" on table "pg_toast_34337" serially
2025-04-19 18:13:02.147 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:02.147 UTC [752] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:02.147 UTC [752] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:02.148 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:02.149 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:02.149 UTC [752] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:02.149 UTC [752] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:02.150 UTC [752] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:02.150 UTC [752] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:02.150 UTC [752] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:02.151 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:02.152 UTC [752] DEBUG:  building index "pg_toast_34370_index" on table "pg_toast_34370" serially
2025-04-19 18:13:02.153 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:02.153 UTC [752] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:02.153 UTC [752] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:02.154 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:02.155 UTC [752] DEBUG:  building index "pg_toast_34381_index" on table "pg_toast_34381" serially
2025-04-19 18:13:02.156 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:02.156 UTC [752] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:02.156 UTC [752] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:02.157 UTC [752] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:02.158 UTC [752] DEBUG:  building index "pg_toast_34404_index" on table "pg_toast_34404" serially
2025-04-19 18:13:02.159 UTC [752] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:02.159 UTC [752] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:02.159 UTC [752] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:02.160 UTC [752] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:02.160 UTC [752] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:02.160 UTC [752] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:02.160 UTC [752] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:02.161 UTC [752] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:02.161 UTC [752] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:02.162 UTC [752] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:02.162 UTC [752] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:02.163 UTC [752] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:02.163 UTC [752] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:02.163 UTC [752] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:02.163 UTC [752] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:02.164 UTC [752] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:02.164 UTC [752] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:02.165 UTC [752] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:02.165 UTC [752] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:02.166 UTC [752] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:02.166 UTC [752] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:02.166 UTC [752] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:02.166 UTC [752] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:02.167 UTC [752] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:02.167 UTC [752] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:02.173 UTC [752] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:02.421 UTC [752] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$OnXoqXaUQSUNK.cAVvnRmOeSDIi18QdqHxJFqpR8riwWMoeM50Z8m')
	                RETURNING id, username, email
	                
2025-04-19 18:13:02.422 UTC [752] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:02.422 UTC [752] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:11.605 UTC [760] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 18:13:15.386 UTC [752] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:13:15.674 UTC [752] DEBUG:  unexpected EOF on client connection
2025-04-19 18:13:17.391 UTC [761] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:17.399 UTC [761] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:17.406 UTC [761] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:17.406 UTC [761] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:17.410 UTC [761] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:17.413 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:17.416 UTC [761] DEBUG:  building index "pg_toast_34440_index" on table "pg_toast_34440" serially
2025-04-19 18:13:17.420 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:17.420 UTC [761] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:17.420 UTC [761] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:17.422 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:17.422 UTC [761] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:17.422 UTC [761] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:17.424 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:17.424 UTC [761] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:17.424 UTC [761] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:17.425 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:17.427 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:17.428 UTC [761] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:17.428 UTC [761] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:17.429 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:17.429 UTC [761] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:17.429 UTC [761] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:17.430 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:17.433 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:17.433 UTC [761] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:17.433 UTC [761] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:17.434 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:17.435 UTC [761] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:17.435 UTC [761] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:17.439 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:17.440 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:17.440 UTC [761] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:17.440 UTC [761] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:17.442 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:17.444 UTC [761] DEBUG:  building index "pg_toast_34501_index" on table "pg_toast_34501" serially
2025-04-19 18:13:17.445 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:17.445 UTC [761] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:17.445 UTC [761] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:17.446 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:17.447 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:17.448 UTC [761] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:17.448 UTC [761] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:17.449 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:17.449 UTC [761] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:17.449 UTC [761] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:17.450 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:17.451 UTC [761] DEBUG:  building index "pg_toast_34534_index" on table "pg_toast_34534" serially
2025-04-19 18:13:17.452 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:17.452 UTC [761] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:17.452 UTC [761] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:17.453 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:17.454 UTC [761] DEBUG:  building index "pg_toast_34545_index" on table "pg_toast_34545" serially
2025-04-19 18:13:17.454 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:17.455 UTC [761] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:17.455 UTC [761] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:17.456 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:17.457 UTC [761] DEBUG:  building index "pg_toast_34568_index" on table "pg_toast_34568" serially
2025-04-19 18:13:17.458 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:17.458 UTC [761] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:17.458 UTC [761] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:17.459 UTC [761] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:17.459 UTC [761] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:17.460 UTC [761] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:17.460 UTC [761] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:17.461 UTC [761] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:17.461 UTC [761] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:17.462 UTC [761] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:17.462 UTC [761] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:17.462 UTC [761] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:17.462 UTC [761] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:17.463 UTC [761] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:17.463 UTC [761] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:17.464 UTC [761] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:17.464 UTC [761] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:17.465 UTC [761] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:17.465 UTC [761] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:17.466 UTC [761] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:17.466 UTC [761] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:17.467 UTC [761] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:17.467 UTC [761] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:17.468 UTC [761] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:17.468 UTC [761] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:17.483 UTC [761] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:17.750 UTC [761] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1pAdZhx7Wq4mHhzdWME3JuQEKC1ks.I0w7hu8DRpgRIxUe8wdyKoS')
	                RETURNING id, username, email
	                
2025-04-19 18:13:17.751 UTC [761] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:17.751 UTC [761] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:17.752 UTC [761] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:13:17.760 UTC [761] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:17.761 UTC [761] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:17.763 UTC [761] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:17.767 UTC [761] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:17.767 UTC [761] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:17.770 UTC [761] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:17.772 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:17.773 UTC [761] DEBUG:  building index "pg_toast_34604_index" on table "pg_toast_34604" serially
2025-04-19 18:13:17.775 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:17.775 UTC [761] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:17.775 UTC [761] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:17.776 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:17.776 UTC [761] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:17.776 UTC [761] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:17.777 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:17.777 UTC [761] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:17.777 UTC [761] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:17.778 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:17.778 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:17.779 UTC [761] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:17.779 UTC [761] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:17.779 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:17.780 UTC [761] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:17.780 UTC [761] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:17.780 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:17.781 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:17.781 UTC [761] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:17.781 UTC [761] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:17.782 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:17.782 UTC [761] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:17.782 UTC [761] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:17.783 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:17.784 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:17.784 UTC [761] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:17.784 UTC [761] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:17.785 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:17.786 UTC [761] DEBUG:  building index "pg_toast_34665_index" on table "pg_toast_34665" serially
2025-04-19 18:13:17.787 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:17.787 UTC [761] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:17.787 UTC [761] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:17.788 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:17.789 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:17.789 UTC [761] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:17.789 UTC [761] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:17.791 UTC [761] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:17.791 UTC [761] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:17.791 UTC [761] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:17.795 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:17.796 UTC [761] DEBUG:  building index "pg_toast_34698_index" on table "pg_toast_34698" serially
2025-04-19 18:13:17.797 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:17.797 UTC [761] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:17.797 UTC [761] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:17.798 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:17.799 UTC [761] DEBUG:  building index "pg_toast_34709_index" on table "pg_toast_34709" serially
2025-04-19 18:13:17.800 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:17.800 UTC [761] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:17.800 UTC [761] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:17.801 UTC [761] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:17.802 UTC [761] DEBUG:  building index "pg_toast_34732_index" on table "pg_toast_34732" serially
2025-04-19 18:13:17.803 UTC [761] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:17.803 UTC [761] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:17.803 UTC [761] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:17.804 UTC [761] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:17.804 UTC [761] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:17.805 UTC [761] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:17.805 UTC [761] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:17.806 UTC [761] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:17.806 UTC [761] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:17.806 UTC [761] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:17.806 UTC [761] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:17.807 UTC [761] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:17.807 UTC [761] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:17.808 UTC [761] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:17.808 UTC [761] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:17.809 UTC [761] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:17.809 UTC [761] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:17.810 UTC [761] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:17.810 UTC [761] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:17.811 UTC [761] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:17.811 UTC [761] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:17.812 UTC [761] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:17.812 UTC [761] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:17.813 UTC [761] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:17.813 UTC [761] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:17.820 UTC [761] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:18.065 UTC [761] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RzHzglfcy6DVUr3Z0O8SE.wVJNNJAFUPw7i.MjGgH1HUsTMjIGkCS')
	                RETURNING id, username, email
	                
2025-04-19 18:13:18.065 UTC [761] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:18.066 UTC [761] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:31.282 UTC [761] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:13:31.570 UTC [761] DEBUG:  unexpected EOF on client connection
2025-04-19 18:13:33.489 UTC [776] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:33.502 UTC [776] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:33.508 UTC [776] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:33.508 UTC [776] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:33.513 UTC [776] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:33.517 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:33.523 UTC [776] DEBUG:  building index "pg_toast_34768_index" on table "pg_toast_34768" serially
2025-04-19 18:13:33.525 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:33.526 UTC [776] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:33.526 UTC [776] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:33.527 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:33.527 UTC [776] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:33.527 UTC [776] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:33.528 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:33.528 UTC [776] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:33.528 UTC [776] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:33.529 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:33.530 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:33.531 UTC [776] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:33.531 UTC [776] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:33.531 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:33.531 UTC [776] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:33.531 UTC [776] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:33.532 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:33.533 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:33.534 UTC [776] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:33.534 UTC [776] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:33.534 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:33.535 UTC [776] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:33.535 UTC [776] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:33.536 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:33.537 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:33.538 UTC [776] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:33.538 UTC [776] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:33.539 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:33.541 UTC [776] DEBUG:  building index "pg_toast_34829_index" on table "pg_toast_34829" serially
2025-04-19 18:13:33.543 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:33.543 UTC [776] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:33.543 UTC [776] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:33.545 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:33.547 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:33.547 UTC [776] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:33.547 UTC [776] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:33.548 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:33.548 UTC [776] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:33.548 UTC [776] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:33.549 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:33.551 UTC [776] DEBUG:  building index "pg_toast_34862_index" on table "pg_toast_34862" serially
2025-04-19 18:13:33.553 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:33.553 UTC [776] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:33.553 UTC [776] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:33.554 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:33.558 UTC [776] DEBUG:  building index "pg_toast_34873_index" on table "pg_toast_34873" serially
2025-04-19 18:13:33.560 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:33.561 UTC [776] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:33.561 UTC [776] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:33.566 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:33.568 UTC [776] DEBUG:  building index "pg_toast_34896_index" on table "pg_toast_34896" serially
2025-04-19 18:13:33.571 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:33.572 UTC [776] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:33.572 UTC [776] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:33.574 UTC [776] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:33.574 UTC [776] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:33.575 UTC [776] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:33.575 UTC [776] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:33.577 UTC [776] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:33.577 UTC [776] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:33.578 UTC [776] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:33.578 UTC [776] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:33.579 UTC [776] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:33.579 UTC [776] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:33.580 UTC [776] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:33.580 UTC [776] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:33.581 UTC [776] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:33.581 UTC [776] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:33.582 UTC [776] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:33.582 UTC [776] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:33.584 UTC [776] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:33.584 UTC [776] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:33.585 UTC [776] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:33.585 UTC [776] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:33.586 UTC [776] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:33.586 UTC [776] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:33.598 UTC [776] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:33.867 UTC [776] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RAa0Ywzj6Om0/8X/ci8SN.QHzHiyJpQZeb3buOvnyN1GO9qSaAIqy')
	                RETURNING id, username, email
	                
2025-04-19 18:13:33.868 UTC [776] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:33.868 UTC [776] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:33.869 UTC [776] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:13:33.879 UTC [776] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:33.880 UTC [776] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:33.883 UTC [776] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:33.889 UTC [776] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:33.889 UTC [776] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:33.895 UTC [776] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:33.898 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:33.900 UTC [776] DEBUG:  building index "pg_toast_34932_index" on table "pg_toast_34932" serially
2025-04-19 18:13:33.901 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:33.901 UTC [776] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:33.901 UTC [776] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:33.902 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:33.903 UTC [776] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:33.903 UTC [776] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:33.903 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:33.903 UTC [776] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:33.903 UTC [776] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:33.904 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:33.905 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:33.905 UTC [776] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:33.905 UTC [776] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:33.906 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:33.906 UTC [776] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:33.906 UTC [776] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:33.907 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:33.908 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:33.908 UTC [776] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:33.908 UTC [776] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:33.909 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:33.909 UTC [776] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:33.909 UTC [776] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:33.910 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:33.911 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:33.911 UTC [776] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:33.911 UTC [776] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:33.912 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:33.913 UTC [776] DEBUG:  building index "pg_toast_34993_index" on table "pg_toast_34993" serially
2025-04-19 18:13:33.914 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:33.914 UTC [776] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:33.914 UTC [776] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:33.915 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:33.916 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:33.916 UTC [776] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:33.916 UTC [776] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:33.917 UTC [776] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:33.917 UTC [776] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:33.917 UTC [776] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:33.918 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:33.919 UTC [776] DEBUG:  building index "pg_toast_35026_index" on table "pg_toast_35026" serially
2025-04-19 18:13:33.920 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:33.920 UTC [776] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:33.920 UTC [776] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:33.921 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:33.922 UTC [776] DEBUG:  building index "pg_toast_35037_index" on table "pg_toast_35037" serially
2025-04-19 18:13:33.923 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:33.923 UTC [776] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:33.923 UTC [776] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:33.925 UTC [776] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:33.926 UTC [776] DEBUG:  building index "pg_toast_35060_index" on table "pg_toast_35060" serially
2025-04-19 18:13:33.926 UTC [776] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:33.927 UTC [776] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:33.927 UTC [776] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:33.927 UTC [776] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:33.927 UTC [776] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:33.928 UTC [776] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:33.928 UTC [776] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:33.929 UTC [776] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:33.929 UTC [776] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:33.930 UTC [776] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:33.930 UTC [776] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:33.931 UTC [776] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:33.931 UTC [776] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:33.932 UTC [776] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:33.932 UTC [776] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:33.933 UTC [776] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:33.933 UTC [776] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:33.935 UTC [776] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:33.935 UTC [776] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:33.936 UTC [776] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:33.936 UTC [776] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:33.937 UTC [776] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:33.937 UTC [776] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:33.938 UTC [776] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:33.938 UTC [776] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:33.948 UTC [776] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:34.204 UTC [776] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jc2./nb0nDWHqBq2dLTEoOg7OaNYytLEo5f3pSifpDUXENRjv2QOe')
	                RETURNING id, username, email
	                
2025-04-19 18:13:34.206 UTC [776] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:34.206 UTC [776] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:41.601 UTC [784] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 18:13:41.844 UTC [784] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 18:13:47.156 UTC [776] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:13:47.445 UTC [776] DEBUG:  unexpected EOF on client connection
2025-04-19 18:13:49.144 UTC [785] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:49.152 UTC [785] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:49.158 UTC [785] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:49.158 UTC [785] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:49.162 UTC [785] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:49.165 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:49.172 UTC [785] DEBUG:  building index "pg_toast_35097_index" on table "pg_toast_35097" serially
2025-04-19 18:13:49.174 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:49.175 UTC [785] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:49.175 UTC [785] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:49.176 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:49.176 UTC [785] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:49.176 UTC [785] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:49.177 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:49.177 UTC [785] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:49.177 UTC [785] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:49.178 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:49.178 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:49.179 UTC [785] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:49.179 UTC [785] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:49.180 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:49.180 UTC [785] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:49.180 UTC [785] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:49.184 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:49.189 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:49.189 UTC [785] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:49.189 UTC [785] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:49.191 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:49.192 UTC [785] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:49.192 UTC [785] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:49.194 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:49.196 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:49.196 UTC [785] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:49.196 UTC [785] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:49.198 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:49.201 UTC [785] DEBUG:  building index "pg_toast_35158_index" on table "pg_toast_35158" serially
2025-04-19 18:13:49.203 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:49.203 UTC [785] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:49.203 UTC [785] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:49.205 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:49.207 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:49.208 UTC [785] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:49.208 UTC [785] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:49.209 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:49.210 UTC [785] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:49.210 UTC [785] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:49.211 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:49.212 UTC [785] DEBUG:  building index "pg_toast_35191_index" on table "pg_toast_35191" serially
2025-04-19 18:13:49.213 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:49.213 UTC [785] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:49.213 UTC [785] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:49.213 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:49.215 UTC [785] DEBUG:  building index "pg_toast_35202_index" on table "pg_toast_35202" serially
2025-04-19 18:13:49.216 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:49.216 UTC [785] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:49.216 UTC [785] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:49.218 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:49.218 UTC [785] DEBUG:  building index "pg_toast_35225_index" on table "pg_toast_35225" serially
2025-04-19 18:13:49.219 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:49.219 UTC [785] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:49.219 UTC [785] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:49.220 UTC [785] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:49.220 UTC [785] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:49.221 UTC [785] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:49.221 UTC [785] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:49.222 UTC [785] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:49.222 UTC [785] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:49.222 UTC [785] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:49.222 UTC [785] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:49.223 UTC [785] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:49.223 UTC [785] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:49.224 UTC [785] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:49.224 UTC [785] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:49.225 UTC [785] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:49.225 UTC [785] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:49.226 UTC [785] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 18:13:49.226 UTC [785] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:49.226 UTC [785] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:49.227 UTC [785] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:49.227 UTC [785] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:49.229 UTC [785] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:49.229 UTC [785] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:49.231 UTC [785] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:49.231 UTC [785] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:49.244 UTC [785] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:49.510 UTC [785] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cx0lGHmVrva.Sh1sxwUE6ehSQsogOD73lfQwnRxrmVcVcuarQQxNi')
	                RETURNING id, username, email
	                
2025-04-19 18:13:49.511 UTC [785] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:49.512 UTC [785] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:13:49.512 UTC [785] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:13:49.516 UTC [785] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 18:13:49.516 UTC [785] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 18:13:49.521 UTC [785] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:49.522 UTC [785] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:13:49.524 UTC [785] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:13:49.528 UTC [785] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:13:49.528 UTC [785] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:13:49.531 UTC [785] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:13:49.534 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:13:49.535 UTC [785] DEBUG:  building index "pg_toast_35261_index" on table "pg_toast_35261" serially
2025-04-19 18:13:49.536 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:13:49.536 UTC [785] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:13:49.536 UTC [785] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:13:49.537 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:13:49.537 UTC [785] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:13:49.537 UTC [785] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:13:49.538 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:13:49.538 UTC [785] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:13:49.538 UTC [785] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:13:49.538 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:13:49.539 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:13:49.539 UTC [785] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:13:49.539 UTC [785] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:13:49.540 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:13:49.540 UTC [785] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:13:49.540 UTC [785] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:13:49.541 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:13:49.542 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:13:49.542 UTC [785] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:13:49.542 UTC [785] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:13:49.543 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:13:49.543 UTC [785] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:13:49.543 UTC [785] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:13:49.544 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:13:49.545 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:13:49.545 UTC [785] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:13:49.545 UTC [785] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:13:49.546 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:13:49.547 UTC [785] DEBUG:  building index "pg_toast_35322_index" on table "pg_toast_35322" serially
2025-04-19 18:13:49.548 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:13:49.548 UTC [785] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:13:49.548 UTC [785] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:13:49.549 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:13:49.551 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:13:49.552 UTC [785] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:13:49.552 UTC [785] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:13:49.553 UTC [785] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:13:49.553 UTC [785] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:13:49.553 UTC [785] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:13:49.555 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:13:49.557 UTC [785] DEBUG:  building index "pg_toast_35355_index" on table "pg_toast_35355" serially
2025-04-19 18:13:49.558 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:13:49.558 UTC [785] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:13:49.558 UTC [785] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:13:49.559 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:13:49.560 UTC [785] DEBUG:  building index "pg_toast_35366_index" on table "pg_toast_35366" serially
2025-04-19 18:13:49.561 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:13:49.561 UTC [785] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:13:49.561 UTC [785] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:13:49.563 UTC [785] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:13:49.563 UTC [785] DEBUG:  building index "pg_toast_35389_index" on table "pg_toast_35389" serially
2025-04-19 18:13:49.564 UTC [785] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:13:49.564 UTC [785] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:13:49.564 UTC [785] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:13:49.565 UTC [785] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:13:49.565 UTC [785] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:13:49.566 UTC [785] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:13:49.566 UTC [785] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:13:49.567 UTC [785] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:13:49.567 UTC [785] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:13:49.568 UTC [785] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:13:49.568 UTC [785] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:13:49.569 UTC [785] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:13:49.569 UTC [785] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:13:49.570 UTC [785] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:13:49.570 UTC [785] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:13:49.571 UTC [785] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:13:49.571 UTC [785] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:13:49.572 UTC [785] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:13:49.572 UTC [785] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:13:49.573 UTC [785] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:13:49.573 UTC [785] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:13:49.574 UTC [785] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:13:49.574 UTC [785] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:13:49.574 UTC [785] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:13:49.574 UTC [785] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:13:49.582 UTC [785] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:13:49.826 UTC [785] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$DMs.imDx/bRufVoq0HzojOnwK9RQXekm9Ou2NlLeUWkz6oD7tiZ42')
	                RETURNING id, username, email
	                
2025-04-19 18:13:49.827 UTC [785] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:13:49.827 UTC [785] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:14:03.012 UTC [785] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:14:03.293 UTC [785] DEBUG:  unexpected EOF on client connection
2025-04-19 18:14:04.985 UTC [800] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:14:04.996 UTC [800] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:14:05.002 UTC [800] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:14:05.002 UTC [800] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:14:05.013 UTC [800] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:14:05.017 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:14:05.021 UTC [800] DEBUG:  building index "pg_toast_35425_index" on table "pg_toast_35425" serially
2025-04-19 18:14:05.023 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:14:05.025 UTC [800] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:14:05.026 UTC [800] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:14:05.029 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:14:05.030 UTC [800] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:14:05.030 UTC [800] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:14:05.033 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:14:05.033 UTC [800] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:14:05.033 UTC [800] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:14:05.036 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:14:05.037 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:14:05.038 UTC [800] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:14:05.038 UTC [800] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:14:05.039 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:14:05.039 UTC [800] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:14:05.039 UTC [800] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:14:05.040 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:14:05.041 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:14:05.041 UTC [800] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:14:05.041 UTC [800] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:14:05.042 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:14:05.042 UTC [800] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:14:05.042 UTC [800] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:14:05.044 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:14:05.045 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:14:05.045 UTC [800] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:14:05.045 UTC [800] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:14:05.047 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:14:05.050 UTC [800] DEBUG:  building index "pg_toast_35486_index" on table "pg_toast_35486" serially
2025-04-19 18:14:05.051 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:14:05.052 UTC [800] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:14:05.052 UTC [800] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:14:05.054 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:14:05.056 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:14:05.056 UTC [800] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:14:05.056 UTC [800] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:14:05.057 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:14:05.058 UTC [800] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:14:05.058 UTC [800] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:14:05.059 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:14:05.061 UTC [800] DEBUG:  building index "pg_toast_35519_index" on table "pg_toast_35519" serially
2025-04-19 18:14:05.062 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:14:05.062 UTC [800] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:14:05.062 UTC [800] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:14:05.063 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:14:05.065 UTC [800] DEBUG:  building index "pg_toast_35530_index" on table "pg_toast_35530" serially
2025-04-19 18:14:05.066 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:14:05.066 UTC [800] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:14:05.066 UTC [800] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:14:05.068 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:14:05.070 UTC [800] DEBUG:  building index "pg_toast_35553_index" on table "pg_toast_35553" serially
2025-04-19 18:14:05.072 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:14:05.072 UTC [800] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:14:05.072 UTC [800] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:14:05.073 UTC [800] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:14:05.073 UTC [800] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:14:05.075 UTC [800] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:14:05.075 UTC [800] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:14:05.076 UTC [800] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:14:05.076 UTC [800] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:14:05.077 UTC [800] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:14:05.077 UTC [800] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:14:05.078 UTC [800] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:14:05.078 UTC [800] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:14:05.080 UTC [800] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:14:05.080 UTC [800] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:14:05.081 UTC [800] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:14:05.081 UTC [800] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:14:05.083 UTC [800] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:14:05.083 UTC [800] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:14:05.084 UTC [800] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:14:05.084 UTC [800] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:14:05.085 UTC [800] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:14:05.085 UTC [800] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:14:05.090 UTC [800] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:14:05.090 UTC [800] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:14:05.110 UTC [800] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:14:05.387 UTC [800] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$hW4PF5pGVfYgT0J9xaT6ROmv.TpWH/Fpur8fgVQQhaigWjupusZ4W')
	                RETURNING id, username, email
	                
2025-04-19 18:14:05.388 UTC [800] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:14:05.388 UTC [800] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:14:05.389 UTC [800] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:14:05.396 UTC [800] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:14:05.397 UTC [800] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:14:05.399 UTC [800] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:14:05.403 UTC [800] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:14:05.403 UTC [800] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:14:05.406 UTC [800] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:14:05.409 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:14:05.410 UTC [800] DEBUG:  building index "pg_toast_35589_index" on table "pg_toast_35589" serially
2025-04-19 18:14:05.411 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:14:05.411 UTC [800] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:14:05.411 UTC [800] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:14:05.412 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:14:05.412 UTC [800] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:14:05.412 UTC [800] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:14:05.413 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:14:05.413 UTC [800] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:14:05.413 UTC [800] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:14:05.414 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:14:05.414 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:14:05.415 UTC [800] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:14:05.415 UTC [800] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:14:05.415 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:14:05.416 UTC [800] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:14:05.416 UTC [800] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:14:05.416 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:14:05.417 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:14:05.418 UTC [800] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:14:05.418 UTC [800] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:14:05.418 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:14:05.419 UTC [800] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:14:05.419 UTC [800] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:14:05.420 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:14:05.421 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:14:05.421 UTC [800] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:14:05.421 UTC [800] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:14:05.423 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:14:05.424 UTC [800] DEBUG:  building index "pg_toast_35650_index" on table "pg_toast_35650" serially
2025-04-19 18:14:05.425 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:14:05.425 UTC [800] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:14:05.425 UTC [800] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:14:05.426 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:14:05.427 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:14:05.427 UTC [800] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:14:05.427 UTC [800] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:14:05.428 UTC [800] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:14:05.428 UTC [800] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:14:05.428 UTC [800] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:14:05.429 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:14:05.430 UTC [800] DEBUG:  building index "pg_toast_35683_index" on table "pg_toast_35683" serially
2025-04-19 18:14:05.431 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:14:05.431 UTC [800] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:14:05.431 UTC [800] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:14:05.432 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:14:05.432 UTC [800] DEBUG:  building index "pg_toast_35694_index" on table "pg_toast_35694" serially
2025-04-19 18:14:05.433 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:14:05.433 UTC [800] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:14:05.433 UTC [800] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:14:05.435 UTC [800] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:14:05.436 UTC [800] DEBUG:  building index "pg_toast_35717_index" on table "pg_toast_35717" serially
2025-04-19 18:14:05.436 UTC [800] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:14:05.436 UTC [800] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:14:05.436 UTC [800] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:14:05.437 UTC [800] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:14:05.437 UTC [800] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:14:05.438 UTC [800] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:14:05.438 UTC [800] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:14:05.439 UTC [800] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:14:05.439 UTC [800] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:14:05.440 UTC [800] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:14:05.440 UTC [800] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:14:05.441 UTC [800] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:14:05.441 UTC [800] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:14:05.442 UTC [800] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:14:05.442 UTC [800] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:14:05.443 UTC [800] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:14:05.443 UTC [800] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:14:05.444 UTC [800] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:14:05.444 UTC [800] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:14:05.445 UTC [800] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:14:05.445 UTC [800] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:14:05.446 UTC [800] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:14:05.446 UTC [800] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:14:05.447 UTC [800] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:14:05.447 UTC [800] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:14:05.457 UTC [800] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:14:05.699 UTC [800] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6BAlb3IVhNSLQngxGpf1KuXyNGWcxXuI.RJrKfjF1oez6jsocR3mq')
	                RETURNING id, username, email
	                
2025-04-19 18:14:05.700 UTC [800] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:14:05.700 UTC [800] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            

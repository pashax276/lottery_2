2025-04-19 18:41:24.294 UTC [41] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 18:41:24.299 UTC [41] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 18:41:24.308 UTC [43] LOG:  database system was shut down at 2025-04-19 18:41:23 UTC
2025-04-19 18:41:24.308 UTC [43] DEBUG:  checkpoint record is at 0/17055D8
2025-04-19 18:41:24.308 UTC [43] DEBUG:  redo record is at 0/17055D8; shutdown true
2025-04-19 18:41:24.308 UTC [43] DEBUG:  next transaction ID: 734; next OID: 13824
2025-04-19 18:41:24.308 UTC [43] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 18:41:24.308 UTC [43] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 18:41:24.308 UTC [43] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 18:41:24.308 UTC [43] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 18:41:24.308 UTC [43] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 18:41:24.308 UTC [43] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:41:24.308 UTC [43] DEBUG:  starting up replication slots
2025-04-19 18:41:24.308 UTC [43] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 18:41:24.309 UTC [43] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:41:24.309 UTC [43] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 18:41:24.316 UTC [41] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 18:41:24.316 UTC [41] LOG:  database system is ready to accept connections
2025-04-19 18:41:24.316 UTC [47] DEBUG:  autovacuum launcher started
2025-04-19 18:41:24.317 UTC [49] DEBUG:  logical replication launcher started
2025-04-19 18:41:24.411 UTC [52] LOG:  statement: SELECT 1 FROM pg_database WHERE datname = 'powerball' ;
2025-04-19 18:41:24.425 UTC [54] LOG:  statement: CREATE DATABASE "powerball" ;
2025-04-19 18:41:24.426 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 18:41:24.763 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 18:41:24.800 UTC [41] LOG:  received fast shutdown request
2025-04-19 18:41:24.807 UTC [41] LOG:  aborting any active transactions
2025-04-19 18:41:24.807 UTC [49] DEBUG:  logical replication launcher shutting down
2025-04-19 18:41:24.808 UTC [47] DEBUG:  autovacuum launcher shutting down
2025-04-19 18:41:24.809 UTC [41] LOG:  background worker "logical replication launcher" (PID 49) exited with exit code 1
2025-04-19 18:41:24.810 UTC [44] LOG:  shutting down
2025-04-19 18:41:24.814 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 18:41:24.849 UTC [41] LOG:  database system is shut down
2025-04-19 18:41:24.854 UTC [42] DEBUG:  logger shutting down
2025-04-19 18:41:24.962 UTC [1] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 18:41:24.962 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2025-04-19 18:41:24.962 UTC [1] LOG:  listening on IPv6 address "::", port 5432
2025-04-19 18:41:24.983 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 18:41:25.016 UTC [58] LOG:  database system was shut down at 2025-04-19 18:41:24 UTC
2025-04-19 18:41:25.016 UTC [58] DEBUG:  checkpoint record is at 0/1705EA0
2025-04-19 18:41:25.016 UTC [58] DEBUG:  redo record is at 0/1705EA0; shutdown true
2025-04-19 18:41:25.016 UTC [58] DEBUG:  next transaction ID: 735; next OID: 16385
2025-04-19 18:41:25.016 UTC [58] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 18:41:25.016 UTC [58] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 18:41:25.016 UTC [58] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 18:41:25.016 UTC [58] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 18:41:25.016 UTC [58] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 18:41:25.016 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:41:25.016 UTC [58] DEBUG:  starting up replication slots
2025-04-19 18:41:25.016 UTC [58] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 18:41:25.016 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:41:25.016 UTC [58] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 18:41:25.033 UTC [1] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 18:41:25.033 UTC [1] LOG:  database system is ready to accept connections
2025-04-19 18:41:25.033 UTC [64] DEBUG:  logical replication launcher started
2025-04-19 18:41:25.033 UTC [62] DEBUG:  autovacuum launcher started
2025-04-19 18:41:36.196 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:41:36.198 UTC [72] DEBUG:  relation "user_checks" does not exist
2025-04-19 18:41:36.198 UTC [72] NOTICE:  table "user_checks" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "prediction_numbers" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "prediction_numbers" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "predictions" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "predictions" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "expected_combinations" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "expected_combinations" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "numbers" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "numbers" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "draws" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "draws" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "users" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "users" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "user_stats" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "user_stats" does not exist, skipping
2025-04-19 18:41:36.199 UTC [72] DEBUG:  relation "analysis_results" does not exist
2025-04-19 18:41:36.199 UTC [72] NOTICE:  table "analysis_results" does not exist, skipping
2025-04-19 18:41:36.200 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:41:36.213 UTC [72] DEBUG:  building index "pg_toast_16386_index" on table "pg_toast_16386" serially
2025-04-19 18:41:36.217 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:41:36.217 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:41:36.217 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:41:36.219 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:41:36.219 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:41:36.219 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:41:36.220 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:41:36.221 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:41:36.221 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:41:36.222 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:41:36.223 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:41:36.224 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:41:36.224 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:41:36.225 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:41:36.225 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:41:36.225 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:41:36.226 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:41:36.228 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:41:36.228 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:41:36.228 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:41:36.230 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:41:36.230 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:41:36.230 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:41:36.237 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:41:36.240 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:41:36.241 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:41:36.241 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:41:36.244 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:41:36.247 UTC [72] DEBUG:  building index "pg_toast_16447_index" on table "pg_toast_16447" serially
2025-04-19 18:41:36.248 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:41:36.248 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:41:36.248 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:41:36.250 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:41:36.254 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:41:36.255 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:41:36.255 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:41:36.257 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:41:36.258 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:41:36.258 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:41:36.260 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:41:36.261 UTC [72] DEBUG:  building index "pg_toast_16480_index" on table "pg_toast_16480" serially
2025-04-19 18:41:36.264 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:41:36.264 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:41:36.264 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:41:36.266 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:41:36.267 UTC [72] DEBUG:  building index "pg_toast_16491_index" on table "pg_toast_16491" serially
2025-04-19 18:41:36.269 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:41:36.270 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:41:36.270 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:41:36.274 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:41:36.276 UTC [72] DEBUG:  building index "pg_toast_16514_index" on table "pg_toast_16514" serially
2025-04-19 18:41:36.277 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:41:36.278 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:41:36.278 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:41:36.279 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:41:36.279 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:41:36.281 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:41:36.281 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:41:36.282 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:41:36.282 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:41:36.284 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:41:36.284 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:41:36.286 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:41:36.286 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:41:36.287 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:41:36.287 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:41:36.289 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:41:36.289 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:41:36.292 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:41:36.292 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:41:36.294 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:41:36.295 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:41:36.297 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:41:36.297 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:41:36.299 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:41:36.299 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:41:36.313 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:41:36.630 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$zT5BX29D0PedArDkjcgSY.aBC3JqoUacKfOepWtL1UA59Rqk4ihMC')
	                RETURNING id, username, email
	                
2025-04-19 18:41:36.632 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:41:36.633 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:41:36.636 UTC [72] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:41:36.671 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:41:36.681 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:41:36.693 UTC [72] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:41:36.706 UTC [72] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:41:36.706 UTC [72] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:41:36.717 UTC [72] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:41:36.723 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:41:36.727 UTC [72] DEBUG:  building index "pg_toast_16550_index" on table "pg_toast_16550" serially
2025-04-19 18:41:36.731 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:41:36.734 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:41:36.734 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:41:36.780 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:41:36.783 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:41:36.783 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:41:36.817 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:41:36.818 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:41:36.818 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:41:36.823 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:41:36.825 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:41:36.825 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:41:36.825 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:41:36.828 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:41:36.829 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:41:36.829 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:41:36.830 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:41:36.831 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:41:36.832 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:41:36.832 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:41:36.833 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:41:36.834 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:41:36.834 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:41:36.836 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:41:36.837 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:41:36.838 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:41:36.838 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:41:36.840 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:41:36.841 UTC [72] DEBUG:  building index "pg_toast_16611_index" on table "pg_toast_16611" serially
2025-04-19 18:41:36.843 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:41:36.843 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:41:36.843 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:41:36.844 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:41:36.846 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:41:36.846 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:41:36.846 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:41:36.847 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:41:36.847 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:41:36.847 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:41:36.849 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:41:36.852 UTC [72] DEBUG:  building index "pg_toast_16644_index" on table "pg_toast_16644" serially
2025-04-19 18:41:36.854 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:41:36.855 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:41:36.855 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:41:36.858 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:41:36.860 UTC [72] DEBUG:  building index "pg_toast_16655_index" on table "pg_toast_16655" serially
2025-04-19 18:41:36.862 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:41:36.862 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:41:36.862 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:41:36.865 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:41:36.867 UTC [72] DEBUG:  building index "pg_toast_16678_index" on table "pg_toast_16678" serially
2025-04-19 18:41:36.868 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:41:36.869 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:41:36.869 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:41:36.871 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:41:36.871 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:41:36.873 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:41:36.873 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:41:36.875 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:41:36.875 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:41:36.877 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:41:36.877 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:41:36.878 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:41:36.878 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:41:36.880 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:41:36.880 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:41:36.882 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:41:36.882 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:41:36.885 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:41:36.885 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:41:36.887 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:41:36.887 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:41:36.890 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:41:36.890 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:41:36.891 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:41:36.891 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:41:36.905 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:41:37.209 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lbs8fdMgegsIJ10JpEygKu3kPMjhd7CaaC8tTxMOOAN8VG2IuZvue')
	                RETURNING id, username, email
	                
2025-04-19 18:41:37.211 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:41:37.212 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:41:47.762 UTC [72] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:41:48.525 UTC [72] DEBUG:  unexpected EOF on client connection
2025-04-19 18:41:56.976 UTC [87] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:41:57.003 UTC [87] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:41:57.021 UTC [87] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:41:57.021 UTC [87] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:41:57.025 UTC [87] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:41:57.030 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:41:57.037 UTC [87] DEBUG:  building index "pg_toast_16714_index" on table "pg_toast_16714" serially
2025-04-19 18:41:57.042 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:41:57.043 UTC [87] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:41:57.043 UTC [87] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:41:57.045 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:41:57.045 UTC [87] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:41:57.046 UTC [87] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:41:57.048 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:41:57.049 UTC [87] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:41:57.049 UTC [87] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:41:57.054 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:41:57.061 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:41:57.061 UTC [87] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:41:57.061 UTC [87] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:41:57.064 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:41:57.064 UTC [87] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:41:57.064 UTC [87] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:41:57.067 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:41:57.070 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:41:57.070 UTC [87] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:41:57.070 UTC [87] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:41:57.078 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:41:57.079 UTC [87] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:41:57.079 UTC [87] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:41:57.094 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:41:57.097 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:41:57.098 UTC [87] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:41:57.098 UTC [87] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:41:57.107 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:41:57.110 UTC [87] DEBUG:  building index "pg_toast_16775_index" on table "pg_toast_16775" serially
2025-04-19 18:41:57.116 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:41:57.117 UTC [87] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:41:57.117 UTC [87] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:41:57.127 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:41:57.129 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:41:57.130 UTC [87] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:41:57.130 UTC [87] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:41:57.138 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:41:57.139 UTC [87] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:41:57.139 UTC [87] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:41:57.146 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:41:57.147 UTC [87] DEBUG:  building index "pg_toast_16808_index" on table "pg_toast_16808" serially
2025-04-19 18:41:57.151 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:41:57.151 UTC [87] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:41:57.151 UTC [87] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:41:57.157 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:41:57.160 UTC [87] DEBUG:  building index "pg_toast_16819_index" on table "pg_toast_16819" serially
2025-04-19 18:41:57.168 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:41:57.168 UTC [87] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:41:57.168 UTC [87] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:41:57.181 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:41:57.183 UTC [87] DEBUG:  building index "pg_toast_16842_index" on table "pg_toast_16842" serially
2025-04-19 18:41:57.204 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:41:57.204 UTC [87] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:41:57.204 UTC [87] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:41:57.211 UTC [87] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:41:57.211 UTC [87] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:41:57.218 UTC [87] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:41:57.218 UTC [87] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:41:57.224 UTC [87] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:41:57.224 UTC [87] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:41:57.248 UTC [87] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:41:57.248 UTC [87] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:41:57.277 UTC [87] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:41:57.277 UTC [87] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:41:57.283 UTC [87] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:41:57.283 UTC [87] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:41:57.285 UTC [87] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:41:57.285 UTC [87] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:41:57.290 UTC [87] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:41:57.291 UTC [87] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:41:57.295 UTC [87] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:41:57.295 UTC [87] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:41:57.297 UTC [87] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:41:57.297 UTC [87] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:41:57.300 UTC [87] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:41:57.301 UTC [87] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:41:57.333 UTC [87] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:41:57.693 UTC [87] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xn/MSsY0f.AlZA4.6LSjSuiZccteEyVuW1bpZmr.TvUUi.GDWbQMm')
	                RETURNING id, username, email
	                
2025-04-19 18:41:57.695 UTC [87] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:41:57.696 UTC [87] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:41:57.699 UTC [87] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:41:57.721 UTC [87] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:41:57.724 UTC [87] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:41:57.728 UTC [87] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:41:57.736 UTC [87] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:41:57.736 UTC [87] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:41:57.740 UTC [87] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:41:57.750 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:41:57.753 UTC [87] DEBUG:  building index "pg_toast_16878_index" on table "pg_toast_16878" serially
2025-04-19 18:41:57.757 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:41:57.758 UTC [87] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:41:57.758 UTC [87] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:41:57.760 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:41:57.762 UTC [87] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:41:57.762 UTC [87] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:41:57.765 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:41:57.766 UTC [87] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:41:57.766 UTC [87] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:41:57.768 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:41:57.769 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:41:57.770 UTC [87] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:41:57.770 UTC [87] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:41:57.771 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:41:57.771 UTC [87] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:41:57.771 UTC [87] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:41:57.772 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:41:57.774 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:41:57.774 UTC [87] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:41:57.774 UTC [87] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:41:57.775 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:41:57.775 UTC [87] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:41:57.775 UTC [87] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:41:57.777 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:41:57.778 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:41:57.779 UTC [87] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:41:57.779 UTC [87] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:41:57.782 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:41:57.784 UTC [87] DEBUG:  building index "pg_toast_16939_index" on table "pg_toast_16939" serially
2025-04-19 18:41:57.786 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:41:57.786 UTC [87] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:41:57.786 UTC [87] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:41:57.788 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:41:57.789 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:41:57.790 UTC [87] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:41:57.790 UTC [87] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:41:57.791 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:41:57.793 UTC [87] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:41:57.793 UTC [87] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:41:57.796 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:41:57.798 UTC [87] DEBUG:  building index "pg_toast_16972_index" on table "pg_toast_16972" serially
2025-04-19 18:41:57.799 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:41:57.799 UTC [87] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:41:57.799 UTC [87] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:41:57.800 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:41:57.802 UTC [87] DEBUG:  building index "pg_toast_16983_index" on table "pg_toast_16983" serially
2025-04-19 18:41:57.804 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:41:57.805 UTC [87] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:41:57.805 UTC [87] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:41:57.809 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:41:57.811 UTC [87] DEBUG:  building index "pg_toast_17006_index" on table "pg_toast_17006" serially
2025-04-19 18:41:57.812 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:41:57.812 UTC [87] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:41:57.813 UTC [87] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:41:57.814 UTC [87] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:41:57.814 UTC [87] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:41:57.815 UTC [87] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:41:57.815 UTC [87] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:41:57.816 UTC [87] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:41:57.816 UTC [87] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:41:57.818 UTC [87] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:41:57.818 UTC [87] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:41:57.819 UTC [87] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:41:57.819 UTC [87] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:41:57.821 UTC [87] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:41:57.821 UTC [87] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:41:57.823 UTC [87] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:41:57.823 UTC [87] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:41:57.825 UTC [87] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:41:57.825 UTC [87] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:41:57.826 UTC [87] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:41:57.826 UTC [87] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:41:57.827 UTC [87] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:41:57.828 UTC [87] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:41:57.830 UTC [87] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:41:57.830 UTC [87] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:41:57.849 UTC [87] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:41:58.155 UTC [87] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$TA9/lM9zU1fgRpPiDh1vWuBh7qQ7YHgNZVXcOzo/A6lUNtiBOP0Vm')
	                RETURNING id, username, email
	                
2025-04-19 18:41:58.157 UTC [87] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:41:58.157 UTC [87] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:05.097 UTC [87] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:42:05.386 UTC [87] DEBUG:  unexpected EOF on client connection
2025-04-19 18:42:07.782 UTC [95] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:07.796 UTC [95] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:07.812 UTC [95] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:07.812 UTC [95] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:07.817 UTC [95] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:07.828 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:07.832 UTC [95] DEBUG:  building index "pg_toast_17042_index" on table "pg_toast_17042" serially
2025-04-19 18:42:07.847 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:07.848 UTC [95] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:07.848 UTC [95] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:07.853 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:07.854 UTC [95] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:07.854 UTC [95] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:07.855 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:07.855 UTC [95] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:07.856 UTC [95] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:07.857 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:07.859 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:07.859 UTC [95] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:07.859 UTC [95] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:07.865 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:07.867 UTC [95] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:07.867 UTC [95] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:07.870 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:07.872 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:07.872 UTC [95] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:07.872 UTC [95] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:07.880 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:07.880 UTC [95] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:07.880 UTC [95] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:07.886 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:07.887 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:07.887 UTC [95] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:07.887 UTC [95] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:07.889 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:07.892 UTC [95] DEBUG:  building index "pg_toast_17103_index" on table "pg_toast_17103" serially
2025-04-19 18:42:07.895 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:07.896 UTC [95] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:07.896 UTC [95] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:07.900 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:07.904 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:07.904 UTC [95] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:07.904 UTC [95] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:07.909 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:07.910 UTC [95] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:07.910 UTC [95] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:07.914 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:07.916 UTC [95] DEBUG:  building index "pg_toast_17136_index" on table "pg_toast_17136" serially
2025-04-19 18:42:07.922 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:07.922 UTC [95] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:07.922 UTC [95] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:07.925 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:07.928 UTC [95] DEBUG:  building index "pg_toast_17147_index" on table "pg_toast_17147" serially
2025-04-19 18:42:07.931 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:07.932 UTC [95] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:07.932 UTC [95] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:07.935 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:07.937 UTC [95] DEBUG:  building index "pg_toast_17170_index" on table "pg_toast_17170" serially
2025-04-19 18:42:07.939 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:07.940 UTC [95] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:07.940 UTC [95] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:07.945 UTC [95] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:07.945 UTC [95] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:07.949 UTC [95] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:07.949 UTC [95] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:07.953 UTC [95] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:07.953 UTC [95] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:07.955 UTC [95] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:07.955 UTC [95] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:07.957 UTC [95] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:07.957 UTC [95] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:07.959 UTC [95] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:07.959 UTC [95] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:07.962 UTC [95] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:07.962 UTC [95] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:07.964 UTC [95] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:07.964 UTC [95] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:07.966 UTC [95] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:07.966 UTC [95] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:07.969 UTC [95] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:07.969 UTC [95] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:07.970 UTC [95] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:07.970 UTC [95] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:07.996 UTC [95] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:08.291 UTC [95] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$tPQsyMpMtAcEuL27JI5dTeMr3FhKr/cobD5TAw01BFk8azv3.iATW')
	                RETURNING id, username, email
	                
2025-04-19 18:42:08.291 UTC [95] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:08.292 UTC [95] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:08.293 UTC [95] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:42:08.318 UTC [95] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:08.319 UTC [95] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:08.322 UTC [95] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:08.327 UTC [95] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:08.327 UTC [95] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:08.332 UTC [95] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:08.339 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:08.343 UTC [95] DEBUG:  building index "pg_toast_17206_index" on table "pg_toast_17206" serially
2025-04-19 18:42:08.344 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:08.344 UTC [95] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:08.344 UTC [95] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:08.345 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:08.345 UTC [95] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:08.345 UTC [95] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:08.346 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:08.346 UTC [95] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:08.346 UTC [95] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:08.347 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:08.348 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:08.348 UTC [95] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:08.348 UTC [95] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:08.349 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:08.349 UTC [95] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:08.349 UTC [95] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:08.351 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:08.353 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:08.354 UTC [95] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:08.355 UTC [95] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:08.356 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:08.356 UTC [95] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:08.356 UTC [95] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:08.358 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:08.362 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:08.362 UTC [95] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:08.362 UTC [95] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:08.366 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:08.367 UTC [95] DEBUG:  building index "pg_toast_17267_index" on table "pg_toast_17267" serially
2025-04-19 18:42:08.371 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:08.373 UTC [95] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:08.373 UTC [95] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:08.375 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:08.376 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:08.376 UTC [95] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:08.376 UTC [95] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:08.377 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:08.377 UTC [95] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:08.377 UTC [95] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:08.379 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:08.380 UTC [95] DEBUG:  building index "pg_toast_17300_index" on table "pg_toast_17300" serially
2025-04-19 18:42:08.381 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:08.381 UTC [95] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:08.381 UTC [95] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:08.382 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:08.383 UTC [95] DEBUG:  building index "pg_toast_17311_index" on table "pg_toast_17311" serially
2025-04-19 18:42:08.385 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:08.386 UTC [95] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:08.386 UTC [95] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:08.390 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:08.392 UTC [95] DEBUG:  building index "pg_toast_17334_index" on table "pg_toast_17334" serially
2025-04-19 18:42:08.394 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:08.394 UTC [95] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:08.394 UTC [95] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:08.399 UTC [95] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:08.399 UTC [95] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:08.401 UTC [95] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:08.401 UTC [95] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:08.403 UTC [95] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:08.403 UTC [95] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:08.405 UTC [95] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:08.405 UTC [95] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:08.407 UTC [95] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:08.407 UTC [95] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:08.408 UTC [95] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:08.408 UTC [95] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:08.409 UTC [95] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:08.409 UTC [95] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:08.410 UTC [95] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:08.410 UTC [95] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:08.411 UTC [95] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:08.411 UTC [95] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:08.414 UTC [95] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:08.414 UTC [95] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:08.416 UTC [95] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:08.416 UTC [95] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:08.423 UTC [95] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:08.686 UTC [95] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6as9mSk3qumJoOhsapMLQuX2ytnQr34ZlON4RysRHkdmYbTHaElFK')
	                RETURNING id, username, email
	                
2025-04-19 18:42:08.687 UTC [95] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:08.687 UTC [95] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:22.440 UTC [95] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:42:22.934 UTC [95] DEBUG:  unexpected EOF on client connection
2025-04-19 18:42:28.890 UTC [109] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:29.007 UTC [109] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:29.041 UTC [109] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:29.041 UTC [109] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:29.052 UTC [109] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:29.062 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:29.078 UTC [109] DEBUG:  building index "pg_toast_17370_index" on table "pg_toast_17370" serially
2025-04-19 18:42:29.087 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:29.091 UTC [109] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:29.091 UTC [109] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:29.096 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:29.098 UTC [109] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:29.098 UTC [109] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:29.101 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:29.101 UTC [109] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:29.101 UTC [109] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:29.103 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:29.105 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:29.105 UTC [109] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:29.105 UTC [109] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:29.107 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:29.107 UTC [109] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:29.107 UTC [109] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:29.109 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:29.111 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:29.112 UTC [109] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:29.112 UTC [109] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:29.115 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:29.116 UTC [109] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:29.116 UTC [109] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:29.122 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:29.123 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:29.124 UTC [109] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:29.124 UTC [109] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:29.125 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:29.136 UTC [109] DEBUG:  building index "pg_toast_17431_index" on table "pg_toast_17431" serially
2025-04-19 18:42:29.137 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:29.138 UTC [109] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:29.138 UTC [109] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:29.140 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:29.143 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:29.143 UTC [109] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:29.143 UTC [109] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:29.144 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:29.145 UTC [109] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:29.145 UTC [109] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:29.147 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:29.149 UTC [109] DEBUG:  building index "pg_toast_17464_index" on table "pg_toast_17464" serially
2025-04-19 18:42:29.150 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:29.150 UTC [109] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:29.150 UTC [109] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:29.151 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:29.153 UTC [109] DEBUG:  building index "pg_toast_17475_index" on table "pg_toast_17475" serially
2025-04-19 18:42:29.157 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:29.159 UTC [109] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:29.159 UTC [109] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:29.167 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:29.171 UTC [109] DEBUG:  building index "pg_toast_17498_index" on table "pg_toast_17498" serially
2025-04-19 18:42:29.180 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:29.181 UTC [109] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:29.181 UTC [109] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:29.185 UTC [109] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:29.185 UTC [109] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:29.187 UTC [109] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:29.187 UTC [109] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:29.189 UTC [109] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:29.189 UTC [109] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:29.191 UTC [109] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:29.191 UTC [109] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:29.193 UTC [109] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:29.193 UTC [109] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:29.197 UTC [109] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:29.197 UTC [109] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:29.199 UTC [109] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:29.199 UTC [109] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:29.202 UTC [109] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:29.202 UTC [109] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:29.204 UTC [109] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:29.204 UTC [109] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:29.209 UTC [109] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:29.209 UTC [109] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:29.211 UTC [109] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:29.211 UTC [109] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:29.301 UTC [109] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:29.625 UTC [109] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$KK.IAqORjWBRqp4zdknmqudfpfHtaIY7ImWfLG9IjQJMwkPgrp.VO')
	                RETURNING id, username, email
	                
2025-04-19 18:42:29.627 UTC [109] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:29.627 UTC [109] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:29.629 UTC [109] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:42:29.694 UTC [109] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:29.707 UTC [109] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:29.713 UTC [109] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:29.724 UTC [109] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:29.724 UTC [109] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:29.732 UTC [109] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:29.738 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:29.740 UTC [109] DEBUG:  building index "pg_toast_17534_index" on table "pg_toast_17534" serially
2025-04-19 18:42:29.741 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:29.741 UTC [109] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:29.741 UTC [109] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:29.742 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:29.742 UTC [109] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:29.742 UTC [109] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:29.743 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:29.743 UTC [109] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:29.743 UTC [109] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:29.744 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:29.745 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:29.745 UTC [109] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:29.745 UTC [109] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:29.746 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:29.746 UTC [109] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:29.746 UTC [109] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:29.747 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:29.749 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:29.749 UTC [109] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:29.750 UTC [109] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:29.751 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:29.752 UTC [109] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:29.752 UTC [109] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:29.756 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:29.758 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:29.758 UTC [109] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:29.758 UTC [109] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:29.761 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:29.764 UTC [109] DEBUG:  building index "pg_toast_17595_index" on table "pg_toast_17595" serially
2025-04-19 18:42:29.766 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:29.767 UTC [109] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:29.767 UTC [109] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:29.771 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:29.773 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:29.773 UTC [109] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:29.773 UTC [109] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:29.775 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:29.775 UTC [109] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:29.776 UTC [109] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:29.782 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:29.787 UTC [109] DEBUG:  building index "pg_toast_17628_index" on table "pg_toast_17628" serially
2025-04-19 18:42:29.791 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:29.792 UTC [109] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:29.792 UTC [109] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:29.795 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:29.801 UTC [109] DEBUG:  building index "pg_toast_17639_index" on table "pg_toast_17639" serially
2025-04-19 18:42:29.808 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:29.809 UTC [109] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:29.809 UTC [109] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:29.814 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:29.816 UTC [109] DEBUG:  building index "pg_toast_17662_index" on table "pg_toast_17662" serially
2025-04-19 18:42:29.817 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:29.818 UTC [109] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:29.818 UTC [109] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:29.821 UTC [109] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:29.821 UTC [109] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:29.822 UTC [109] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:29.822 UTC [109] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:29.825 UTC [109] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:29.825 UTC [109] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:29.827 UTC [109] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:29.827 UTC [109] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:29.829 UTC [109] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:29.829 UTC [109] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:29.833 UTC [109] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:29.833 UTC [109] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:29.835 UTC [109] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:29.835 UTC [109] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:29.839 UTC [109] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:29.839 UTC [109] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:29.843 UTC [109] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:29.843 UTC [109] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:29.845 UTC [109] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:29.845 UTC [109] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:29.846 UTC [109] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:29.846 UTC [109] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:29.862 UTC [109] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:30.140 UTC [109] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$BELjuct2Aa8lc4va8QvM8.C9sKFuxfQKO9tLkj8.XJ8FFGMufMvka')
	                RETURNING id, username, email
	                
2025-04-19 18:42:30.142 UTC [109] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:30.143 UTC [109] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:30.350 UTC [109] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:42:30.679 UTC [109] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 18:42:39.900 UTC [109] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:42:40.243 UTC [109] DEBUG:  unexpected EOF on client connection
2025-04-19 18:42:43.524 UTC [123] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:43.546 UTC [123] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:43.579 UTC [123] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:43.579 UTC [123] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:43.591 UTC [123] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:43.607 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:43.615 UTC [123] DEBUG:  building index "pg_toast_17698_index" on table "pg_toast_17698" serially
2025-04-19 18:42:43.628 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:43.629 UTC [123] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:43.629 UTC [123] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:43.631 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:43.631 UTC [123] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:43.631 UTC [123] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:43.632 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:43.632 UTC [123] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:43.632 UTC [123] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:43.633 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:43.634 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:43.634 UTC [123] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:43.634 UTC [123] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:43.635 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:43.636 UTC [123] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:43.636 UTC [123] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:43.637 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:43.639 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:43.640 UTC [123] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:43.640 UTC [123] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:43.641 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:43.641 UTC [123] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:43.641 UTC [123] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:43.644 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:43.645 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:43.646 UTC [123] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:43.646 UTC [123] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:43.647 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:43.649 UTC [123] DEBUG:  building index "pg_toast_17759_index" on table "pg_toast_17759" serially
2025-04-19 18:42:43.650 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:43.650 UTC [123] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:43.650 UTC [123] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:43.652 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:43.653 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:43.654 UTC [123] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:43.654 UTC [123] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:43.654 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:43.655 UTC [123] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:43.655 UTC [123] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:43.657 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:43.658 UTC [123] DEBUG:  building index "pg_toast_17792_index" on table "pg_toast_17792" serially
2025-04-19 18:42:43.659 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:43.660 UTC [123] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:43.660 UTC [123] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:43.660 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:43.662 UTC [123] DEBUG:  building index "pg_toast_17803_index" on table "pg_toast_17803" serially
2025-04-19 18:42:43.663 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:43.663 UTC [123] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:43.663 UTC [123] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:43.665 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:43.666 UTC [123] DEBUG:  building index "pg_toast_17826_index" on table "pg_toast_17826" serially
2025-04-19 18:42:43.667 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:43.667 UTC [123] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:43.668 UTC [123] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:43.669 UTC [123] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:43.669 UTC [123] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:43.670 UTC [123] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:43.670 UTC [123] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:43.671 UTC [123] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:43.671 UTC [123] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:43.672 UTC [123] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:43.672 UTC [123] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:43.673 UTC [123] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:43.673 UTC [123] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:43.674 UTC [123] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:43.674 UTC [123] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:43.675 UTC [123] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:43.675 UTC [123] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:43.676 UTC [123] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:43.676 UTC [123] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:43.678 UTC [123] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:43.678 UTC [123] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:43.679 UTC [123] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:43.679 UTC [123] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:43.681 UTC [123] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:43.681 UTC [123] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:43.700 UTC [123] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:44.012 UTC [123] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$7C3kAFVce3P7MonkVJ0llOjJuV2DRywMll/mGA0MARwLnypNg8dha')
	                RETURNING id, username, email
	                
2025-04-19 18:42:44.014 UTC [123] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:44.015 UTC [123] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:44.017 UTC [123] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:42:44.068 UTC [123] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:44.071 UTC [123] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:44.086 UTC [123] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:44.179 UTC [123] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:44.179 UTC [123] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:44.191 UTC [123] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:44.229 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:44.232 UTC [123] DEBUG:  building index "pg_toast_17862_index" on table "pg_toast_17862" serially
2025-04-19 18:42:44.247 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:44.247 UTC [123] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:44.247 UTC [123] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:44.249 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:44.252 UTC [123] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:44.252 UTC [123] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:44.278 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:44.278 UTC [123] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:44.278 UTC [123] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:44.281 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:44.283 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:44.283 UTC [123] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:44.283 UTC [123] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:44.284 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:44.285 UTC [123] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:44.285 UTC [123] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:44.286 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:44.288 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:44.288 UTC [123] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:44.288 UTC [123] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:44.289 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:44.289 UTC [123] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:44.289 UTC [123] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:44.291 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:44.293 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:44.294 UTC [123] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:44.294 UTC [123] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:44.296 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:44.298 UTC [123] DEBUG:  building index "pg_toast_17923_index" on table "pg_toast_17923" serially
2025-04-19 18:42:44.299 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:44.299 UTC [123] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:44.299 UTC [123] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:44.301 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:44.302 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:44.302 UTC [123] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:44.302 UTC [123] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:44.303 UTC [123] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:44.303 UTC [123] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:44.303 UTC [123] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:44.304 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:44.305 UTC [123] DEBUG:  building index "pg_toast_17956_index" on table "pg_toast_17956" serially
2025-04-19 18:42:44.306 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:44.307 UTC [123] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:44.307 UTC [123] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:44.307 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:44.309 UTC [123] DEBUG:  building index "pg_toast_17967_index" on table "pg_toast_17967" serially
2025-04-19 18:42:44.310 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:44.310 UTC [123] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:44.310 UTC [123] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:44.312 UTC [123] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:44.313 UTC [123] DEBUG:  building index "pg_toast_17990_index" on table "pg_toast_17990" serially
2025-04-19 18:42:44.314 UTC [123] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:44.314 UTC [123] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:44.314 UTC [123] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:44.315 UTC [123] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:44.315 UTC [123] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:44.316 UTC [123] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:44.316 UTC [123] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:44.317 UTC [123] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:44.317 UTC [123] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:44.318 UTC [123] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:44.318 UTC [123] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:44.319 UTC [123] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:44.319 UTC [123] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:44.319 UTC [123] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:44.319 UTC [123] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:44.320 UTC [123] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:44.320 UTC [123] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:44.321 UTC [123] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:44.321 UTC [123] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:44.322 UTC [123] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:44.322 UTC [123] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:44.323 UTC [123] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:44.323 UTC [123] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:44.324 UTC [123] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:44.324 UTC [123] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:44.344 UTC [123] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:44.602 UTC [123] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jbVbOePbyyyL/qljinkB.u4rd4/4fwj0eqPm2bLa/2iNLEnsEoewe')
	                RETURNING id, username, email
	                
2025-04-19 18:42:44.603 UTC [123] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:44.604 UTC [123] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:55.111 UTC [132] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 18:42:55.324 UTC [132] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 18:42:56.043 UTC [123] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:42:56.372 UTC [123] DEBUG:  unexpected EOF on client connection
2025-04-19 18:42:58.391 UTC [133] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:58.398 UTC [133] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:58.405 UTC [133] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:58.405 UTC [133] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:58.409 UTC [133] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:58.414 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:58.420 UTC [133] DEBUG:  building index "pg_toast_18027_index" on table "pg_toast_18027" serially
2025-04-19 18:42:58.422 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:58.422 UTC [133] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:58.422 UTC [133] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:58.423 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:58.423 UTC [133] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:58.423 UTC [133] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:58.425 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:58.425 UTC [133] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:58.425 UTC [133] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:58.426 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:58.427 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:58.427 UTC [133] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:58.427 UTC [133] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:58.428 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:58.428 UTC [133] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:58.428 UTC [133] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:58.429 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:58.430 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:58.430 UTC [133] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:58.430 UTC [133] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:58.431 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:58.431 UTC [133] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:58.431 UTC [133] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:58.432 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:58.433 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:58.433 UTC [133] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:58.433 UTC [133] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:58.435 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:58.436 UTC [133] DEBUG:  building index "pg_toast_18088_index" on table "pg_toast_18088" serially
2025-04-19 18:42:58.437 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:58.437 UTC [133] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:58.437 UTC [133] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:58.438 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:58.440 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:58.440 UTC [133] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:58.440 UTC [133] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:58.441 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:58.441 UTC [133] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:58.441 UTC [133] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:58.443 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:58.446 UTC [133] DEBUG:  building index "pg_toast_18121_index" on table "pg_toast_18121" serially
2025-04-19 18:42:58.447 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:58.447 UTC [133] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:58.447 UTC [133] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:58.448 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:58.450 UTC [133] DEBUG:  building index "pg_toast_18132_index" on table "pg_toast_18132" serially
2025-04-19 18:42:58.451 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:58.451 UTC [133] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:58.451 UTC [133] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:58.453 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:58.454 UTC [133] DEBUG:  building index "pg_toast_18155_index" on table "pg_toast_18155" serially
2025-04-19 18:42:58.455 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:58.455 UTC [133] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:58.455 UTC [133] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:58.456 UTC [133] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:58.456 UTC [133] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:58.457 UTC [133] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:58.457 UTC [133] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:58.457 UTC [133] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:58.457 UTC [133] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:58.458 UTC [133] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:58.458 UTC [133] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:58.460 UTC [133] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:58.460 UTC [133] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:58.462 UTC [133] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:58.462 UTC [133] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:58.463 UTC [133] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:58.463 UTC [133] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:58.464 UTC [133] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 18:42:58.464 UTC [133] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:58.464 UTC [133] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:58.465 UTC [133] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:58.465 UTC [133] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:58.466 UTC [133] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:58.466 UTC [133] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:58.467 UTC [133] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:58.467 UTC [133] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:58.482 UTC [133] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:58.752 UTC [133] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$IO3rm6p.6IEVc2vFNWflsus5fQ/iqoTD/W3AY1tBUPdDbSDjFxzwu')
	                RETURNING id, username, email
	                
2025-04-19 18:42:58.753 UTC [133] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:58.753 UTC [133] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:42:58.754 UTC [133] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:42:58.759 UTC [133] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 18:42:58.759 UTC [133] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 18:42:58.770 UTC [133] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:58.771 UTC [133] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:42:58.774 UTC [133] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:42:58.778 UTC [133] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:42:58.778 UTC [133] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:42:58.781 UTC [133] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:42:58.784 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:42:58.785 UTC [133] DEBUG:  building index "pg_toast_18191_index" on table "pg_toast_18191" serially
2025-04-19 18:42:58.786 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:42:58.786 UTC [133] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:42:58.786 UTC [133] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:42:58.787 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:42:58.787 UTC [133] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:42:58.787 UTC [133] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:42:58.788 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:42:58.788 UTC [133] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:42:58.788 UTC [133] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:42:58.789 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:42:58.790 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:42:58.790 UTC [133] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:42:58.790 UTC [133] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:42:58.791 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:42:58.791 UTC [133] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:42:58.791 UTC [133] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:42:58.792 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:42:58.794 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:42:58.795 UTC [133] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:42:58.795 UTC [133] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:42:58.796 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:42:58.796 UTC [133] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:42:58.796 UTC [133] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:42:58.797 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:42:58.798 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:42:58.799 UTC [133] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:42:58.799 UTC [133] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:42:58.800 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:42:58.801 UTC [133] DEBUG:  building index "pg_toast_18252_index" on table "pg_toast_18252" serially
2025-04-19 18:42:58.802 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:42:58.802 UTC [133] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:42:58.802 UTC [133] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:42:58.804 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:42:58.805 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:42:58.806 UTC [133] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:42:58.806 UTC [133] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:42:58.806 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:42:58.806 UTC [133] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:42:58.807 UTC [133] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:42:58.808 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:42:58.809 UTC [133] DEBUG:  building index "pg_toast_18285_index" on table "pg_toast_18285" serially
2025-04-19 18:42:58.810 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:42:58.810 UTC [133] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:42:58.810 UTC [133] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:42:58.810 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:42:58.812 UTC [133] DEBUG:  building index "pg_toast_18296_index" on table "pg_toast_18296" serially
2025-04-19 18:42:58.812 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:42:58.812 UTC [133] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:42:58.812 UTC [133] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:42:58.814 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:42:58.815 UTC [133] DEBUG:  building index "pg_toast_18319_index" on table "pg_toast_18319" serially
2025-04-19 18:42:58.815 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:42:58.816 UTC [133] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:42:58.816 UTC [133] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:42:58.817 UTC [133] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:42:58.817 UTC [133] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:42:58.817 UTC [133] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:42:58.817 UTC [133] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:42:58.818 UTC [133] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:42:58.818 UTC [133] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:42:58.819 UTC [133] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:42:58.819 UTC [133] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:42:58.819 UTC [133] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:42:58.819 UTC [133] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:42:58.820 UTC [133] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:42:58.820 UTC [133] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:42:58.821 UTC [133] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:42:58.821 UTC [133] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:42:58.822 UTC [133] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:42:58.822 UTC [133] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:42:58.823 UTC [133] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:42:58.823 UTC [133] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:42:58.823 UTC [133] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:42:58.823 UTC [133] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:42:58.824 UTC [133] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:42:58.824 UTC [133] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:42:58.832 UTC [133] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:42:59.095 UTC [133] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Yrj8DcYa.h6KEKEcmgcr5eZdpr78pbjiUUIulyjEdEjdTgE56rIt6')
	                RETURNING id, username, email
	                
2025-04-19 18:42:59.096 UTC [133] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:42:59.097 UTC [133] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:43:11.373 UTC [133] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 18:43:12.096 UTC [133] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:43:12.396 UTC [133] DEBUG:  unexpected EOF on client connection
2025-04-19 18:43:14.621 UTC [148] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:43:14.635 UTC [148] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:43:14.641 UTC [148] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:43:14.641 UTC [148] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:43:14.645 UTC [148] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:43:14.650 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:43:14.653 UTC [148] DEBUG:  building index "pg_toast_18355_index" on table "pg_toast_18355" serially
2025-04-19 18:43:14.658 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:43:14.659 UTC [148] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:43:14.659 UTC [148] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:43:14.661 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:43:14.661 UTC [148] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:43:14.662 UTC [148] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:43:14.663 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:43:14.663 UTC [148] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:43:14.664 UTC [148] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:43:14.665 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:43:14.667 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:43:14.667 UTC [148] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:43:14.667 UTC [148] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:43:14.668 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:43:14.668 UTC [148] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:43:14.668 UTC [148] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:43:14.669 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:43:14.671 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:43:14.671 UTC [148] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:43:14.671 UTC [148] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:43:14.672 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:43:14.672 UTC [148] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:43:14.672 UTC [148] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:43:14.673 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:43:14.675 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:43:14.676 UTC [148] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:43:14.676 UTC [148] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:43:14.677 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:43:14.680 UTC [148] DEBUG:  building index "pg_toast_18416_index" on table "pg_toast_18416" serially
2025-04-19 18:43:14.680 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:43:14.681 UTC [148] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:43:14.681 UTC [148] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:43:14.682 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:43:14.683 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:43:14.684 UTC [148] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:43:14.684 UTC [148] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:43:14.685 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:43:14.685 UTC [148] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:43:14.685 UTC [148] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:43:14.688 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:43:14.689 UTC [148] DEBUG:  building index "pg_toast_18449_index" on table "pg_toast_18449" serially
2025-04-19 18:43:14.690 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:43:14.690 UTC [148] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:43:14.690 UTC [148] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:43:14.691 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:43:14.692 UTC [148] DEBUG:  building index "pg_toast_18460_index" on table "pg_toast_18460" serially
2025-04-19 18:43:14.693 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:43:14.693 UTC [148] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:43:14.693 UTC [148] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:43:14.695 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:43:14.696 UTC [148] DEBUG:  building index "pg_toast_18483_index" on table "pg_toast_18483" serially
2025-04-19 18:43:14.697 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:43:14.697 UTC [148] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:43:14.697 UTC [148] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:43:14.698 UTC [148] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:43:14.698 UTC [148] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:43:14.699 UTC [148] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:43:14.699 UTC [148] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:43:14.700 UTC [148] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:43:14.700 UTC [148] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:43:14.701 UTC [148] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:43:14.701 UTC [148] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:43:14.703 UTC [148] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:43:14.703 UTC [148] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:43:14.704 UTC [148] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:43:14.704 UTC [148] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:43:14.705 UTC [148] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:43:14.705 UTC [148] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:43:14.706 UTC [148] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:43:14.706 UTC [148] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:43:14.707 UTC [148] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:43:14.707 UTC [148] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:43:14.708 UTC [148] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:43:14.708 UTC [148] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:43:14.709 UTC [148] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:43:14.709 UTC [148] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:43:14.726 UTC [148] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:43:15.000 UTC [148] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4nNittqHxuehFoRSsb2/ju64tJpxu3ZtN8M.0SE.HJbNyF2HD94mG')
	                RETURNING id, username, email
	                
2025-04-19 18:43:15.002 UTC [148] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:43:15.002 UTC [148] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:43:15.004 UTC [148] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:43:15.023 UTC [148] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:43:15.025 UTC [148] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:43:15.029 UTC [148] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:43:15.034 UTC [148] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:43:15.034 UTC [148] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:43:15.037 UTC [148] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:43:15.041 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:43:15.044 UTC [148] DEBUG:  building index "pg_toast_18519_index" on table "pg_toast_18519" serially
2025-04-19 18:43:15.046 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:43:15.046 UTC [148] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:43:15.046 UTC [148] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:43:15.047 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:43:15.048 UTC [148] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:43:15.048 UTC [148] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:43:15.049 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:43:15.050 UTC [148] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:43:15.050 UTC [148] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:43:15.053 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:43:15.054 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:43:15.054 UTC [148] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:43:15.054 UTC [148] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:43:15.055 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:43:15.055 UTC [148] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:43:15.055 UTC [148] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:43:15.056 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:43:15.057 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:43:15.057 UTC [148] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:43:15.057 UTC [148] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:43:15.057 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:43:15.057 UTC [148] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:43:15.057 UTC [148] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:43:15.059 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:43:15.061 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:43:15.061 UTC [148] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:43:15.061 UTC [148] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:43:15.063 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:43:15.065 UTC [148] DEBUG:  building index "pg_toast_18580_index" on table "pg_toast_18580" serially
2025-04-19 18:43:15.066 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:43:15.066 UTC [148] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:43:15.066 UTC [148] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:43:15.070 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:43:15.071 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:43:15.071 UTC [148] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:43:15.071 UTC [148] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:43:15.072 UTC [148] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:43:15.072 UTC [148] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:43:15.072 UTC [148] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:43:15.073 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:43:15.074 UTC [148] DEBUG:  building index "pg_toast_18613_index" on table "pg_toast_18613" serially
2025-04-19 18:43:15.075 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:43:15.075 UTC [148] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:43:15.075 UTC [148] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:43:15.076 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:43:15.078 UTC [148] DEBUG:  building index "pg_toast_18624_index" on table "pg_toast_18624" serially
2025-04-19 18:43:15.079 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:43:15.079 UTC [148] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:43:15.079 UTC [148] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:43:15.080 UTC [148] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:43:15.081 UTC [148] DEBUG:  building index "pg_toast_18647_index" on table "pg_toast_18647" serially
2025-04-19 18:43:15.082 UTC [148] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:43:15.082 UTC [148] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:43:15.082 UTC [148] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:43:15.083 UTC [148] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:43:15.083 UTC [148] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:43:15.084 UTC [148] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:43:15.084 UTC [148] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:43:15.085 UTC [148] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:43:15.085 UTC [148] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:43:15.086 UTC [148] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:43:15.086 UTC [148] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:43:15.086 UTC [148] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:43:15.086 UTC [148] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:43:15.088 UTC [148] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:43:15.088 UTC [148] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:43:15.088 UTC [148] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:43:15.088 UTC [148] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:43:15.089 UTC [148] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:43:15.089 UTC [148] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:43:15.090 UTC [148] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:43:15.090 UTC [148] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:43:15.091 UTC [148] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:43:15.091 UTC [148] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:43:15.091 UTC [148] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:43:15.091 UTC [148] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:43:15.099 UTC [148] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:43:15.349 UTC [148] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$onpbG27t3DA1WVkMIo8Z..OYp6z8dett4cYgzZfHZpzgn/1MkWlfq')
	                RETURNING id, username, email
	                
2025-04-19 18:43:15.350 UTC [148] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:43:15.351 UTC [148] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:43:21.030 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 18:43:21.057 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 18:43:21.061 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 18:43:21.069 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 18:43:21.073 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 18:43:21.099 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 18:43:21.104 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 18:43:21.108 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 18:43:21.112 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 18:43:21.117 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 18:43:21.120 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 18:43:21.125 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 18:43:21.130 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 18:43:21.134 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 18:43:21.139 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 18:43:21.142 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 18:43:21.147 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 18:43:21.155 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 18:43:21.165 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 18:43:21.168 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 18:43:21.175 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 18:43:21.181 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 18:43:21.185 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 18:43:21.190 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 18:43:21.192 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 18:43:21.198 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 18:43:21.204 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 18:43:21.207 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 18:43:21.211 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 18:43:21.216 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 18:43:21.219 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 18:43:21.223 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 18:43:21.233 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 18:43:21.242 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 18:43:21.251 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 18:43:21.254 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 18:43:21.258 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 18:43:21.261 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 18:43:21.265 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 18:43:21.269 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 18:43:21.272 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 18:43:21.274 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 18:43:21.277 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 18:43:21.282 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 18:43:21.285 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 18:43:21.290 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 18:43:21.295 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 18:43:21.301 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 18:43:21.305 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 18:43:21.309 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 18:43:21.314 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 18:43:21.318 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 18:43:21.321 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 18:43:21.325 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 18:43:21.328 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 18:43:21.331 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 18:43:21.335 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 18:43:21.338 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 18:43:21.342 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 18:43:21.345 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 18:43:21.348 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 18:43:21.351 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 18:43:21.354 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 18:43:21.357 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 18:43:21.360 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 18:43:21.364 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 18:43:21.367 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 18:43:21.370 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 18:43:21.373 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 18:43:21.375 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 18:43:21.380 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 18:43:21.384 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 18:43:21.389 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 18:43:21.393 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 18:43:21.399 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 18:43:21.403 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 18:43:21.407 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 18:43:21.412 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 18:43:21.415 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 18:43:21.418 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 18:43:21.421 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 18:43:21.424 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 18:43:21.427 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 18:43:21.432 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 18:43:21.434 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 18:43:21.437 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 18:43:21.441 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 18:43:21.445 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 18:43:21.449 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 18:43:21.452 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 18:43:21.454 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 18:43:21.459 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 18:43:21.467 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 18:43:21.471 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 18:43:21.476 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 18:43:21.480 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 18:43:21.484 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 18:43:21.487 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 18:43:21.490 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 18:43:21.492 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 18:43:21.497 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 18:43:21.501 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 18:43:21.505 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 18:43:21.509 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 18:43:21.514 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 18:43:21.520 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 18:43:21.531 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 18:43:21.535 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 18:43:21.539 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 18:43:21.543 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 18:43:21.548 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 18:43:21.552 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 18:43:21.555 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 18:43:21.558 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 18:43:21.561 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 18:43:21.565 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 18:43:21.568 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 18:43:21.571 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 18:43:21.573 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 18:43:21.576 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 18:43:21.582 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 18:43:21.586 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 18:43:21.590 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 18:43:21.595 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 18:43:21.600 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 18:43:21.603 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 18:43:21.605 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 18:43:21.608 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 18:43:21.611 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 18:43:21.615 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 18:43:21.618 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 18:43:21.622 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 18:43:21.627 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 18:43:21.633 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 18:43:21.637 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 18:43:21.640 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 18:43:21.644 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 18:43:21.649 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 18:43:21.652 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 18:43:21.661 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 18:43:21.669 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 18:43:21.672 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 18:43:21.674 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 18:43:21.678 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 18:43:21.682 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 18:43:21.685 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 18:43:21.688 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 18:43:21.691 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 18:43:21.693 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 18:43:21.697 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 18:43:21.700 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 18:43:21.705 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 18:43:21.708 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 18:43:21.713 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 18:43:21.717 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 18:43:21.720 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 18:43:21.723 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 18:43:21.727 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 18:43:21.732 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 18:43:21.736 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 18:43:21.739 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 18:43:21.742 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 18:43:21.744 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 18:43:21.747 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 18:43:21.750 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 18:43:21.754 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 18:43:21.757 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 18:43:21.759 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 18:43:21.764 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 18:43:21.767 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 18:43:21.769 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 18:43:21.772 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 18:43:21.775 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 18:43:21.780 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 18:43:21.782 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 18:43:21.785 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 18:43:21.788 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 18:43:21.791 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 18:43:21.794 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 18:43:21.798 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 18:43:21.800 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 18:43:21.803 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 18:43:21.815 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 18:43:21.824 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 18:43:21.838 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 18:43:21.848 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 18:43:21.857 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 18:43:21.868 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 18:43:21.877 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 18:43:21.883 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 18:43:21.888 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 18:43:21.892 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 18:43:21.899 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 18:43:21.906 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 18:43:21.911 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 18:43:21.914 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 18:43:21.917 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 18:43:21.920 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 18:43:21.923 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 18:43:21.925 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 18:43:21.930 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 18:43:21.933 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 18:43:21.935 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 18:43:21.938 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 18:43:21.940 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 18:43:21.947 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 18:43:21.952 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 18:43:21.957 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 18:43:21.962 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 18:43:21.966 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 18:43:21.972 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 18:43:21.979 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 18:43:21.985 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 18:43:21.989 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 18:43:21.991 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 18:43:21.995 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 18:43:21.999 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 18:43:22.002 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 18:43:22.006 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 18:43:22.009 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 18:43:22.013 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 18:43:22.016 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 18:43:22.019 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 18:43:22.022 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 18:43:22.025 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 18:43:22.030 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 18:43:22.033 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 18:43:22.036 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 18:43:22.040 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 18:43:22.044 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 18:43:22.049 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 18:43:22.055 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 18:43:22.058 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 18:43:22.062 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 18:43:22.065 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 18:43:22.068 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 18:43:22.073 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 18:43:22.079 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 18:43:22.082 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 18:43:22.085 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 18:43:22.089 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 18:43:22.092 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 18:43:22.097 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 18:43:22.100 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 18:43:22.102 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 18:43:22.105 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 18:43:22.108 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 18:43:22.112 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 18:43:22.115 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 18:43:22.118 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 18:43:22.122 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 18:43:22.125 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 18:43:22.129 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 18:43:22.132 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 18:43:22.135 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 18:43:22.139 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 18:43:22.142 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 18:43:22.145 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 18:43:22.149 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 18:43:22.152 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 18:43:22.156 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 18:43:22.159 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 18:43:22.164 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 18:43:22.167 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 18:43:22.172 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 18:43:22.177 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 18:43:22.182 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 18:43:22.187 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 18:43:22.192 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 18:43:22.197 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 18:43:22.200 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 18:43:22.203 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 18:43:22.206 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 18:43:22.210 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 18:43:22.214 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 18:43:22.216 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 18:43:22.220 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 18:43:22.225 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 18:43:22.231 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 18:43:22.235 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 18:43:22.239 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 18:43:22.243 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 18:43:22.247 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 18:43:22.250 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 18:43:22.254 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 18:43:22.257 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 18:43:22.260 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 18:43:22.264 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 18:43:22.267 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 18:43:22.270 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 18:43:22.274 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 18:43:22.277 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 18:43:22.281 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 18:43:22.284 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 18:43:22.287 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 18:43:22.290 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 18:43:22.293 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 18:43:22.297 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 18:43:22.300 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 18:43:22.306 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 18:43:22.312 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 18:43:22.316 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 18:43:22.322 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 18:43:22.328 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 18:43:22.339 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 18:43:22.356 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 18:43:22.399 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 18:43:22.451 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 18:43:22.472 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 18:43:22.480 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 18:43:22.487 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 18:43:22.495 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 18:43:22.505 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 18:43:22.511 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 18:43:22.522 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 18:43:22.527 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 18:43:22.539 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 18:43:22.555 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 18:43:22.575 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 18:43:22.592 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 18:43:22.613 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 18:43:22.625 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 18:43:22.637 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 18:43:22.641 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 18:43:22.674 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 18:43:22.717 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 18:43:22.804 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 18:43:22.817 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 18:43:22.824 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 18:43:22.832 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 18:43:22.838 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 18:43:22.851 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 18:43:22.856 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 18:43:22.861 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 18:43:22.865 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 18:43:22.869 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 18:43:22.882 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 18:43:22.891 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 18:43:22.900 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 18:43:22.903 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 18:43:22.907 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 18:43:22.913 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 18:43:22.919 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 18:43:22.925 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 18:43:22.935 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 18:43:22.940 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 18:43:22.947 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 18:43:22.954 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 18:43:22.957 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 18:43:22.962 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 18:43:22.965 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 18:43:22.968 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 18:43:22.970 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 18:43:22.973 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 18:43:22.977 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 18:43:22.980 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 18:43:22.983 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 18:43:22.989 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 18:43:22.996 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 18:43:23.001 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 18:43:23.006 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 18:43:23.012 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 18:43:23.016 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 18:43:23.019 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 18:43:23.022 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 18:43:23.025 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 18:43:23.033 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 18:43:23.037 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 18:43:23.041 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 18:43:23.046 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 18:43:23.050 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 18:43:23.054 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 18:43:23.057 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 18:43:23.063 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 18:43:23.068 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 18:43:23.071 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 18:43:23.075 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 18:43:23.081 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 18:43:23.084 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 18:43:23.087 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 18:43:23.090 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 18:43:23.093 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 18:43:23.097 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 18:43:23.100 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 18:43:23.102 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 18:43:23.105 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 18:43:23.108 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 18:43:23.114 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 18:43:23.119 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 18:43:23.123 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 18:43:23.126 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 18:43:23.132 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 18:43:23.136 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 18:43:23.139 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 18:43:23.142 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 18:43:23.146 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 18:43:23.149 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 18:43:23.152 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 18:43:23.155 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 18:43:23.158 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 18:43:23.161 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 18:43:23.166 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 18:43:23.172 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 18:43:23.175 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 18:43:23.181 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 18:43:23.184 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 18:43:23.187 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 18:43:23.191 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 18:43:23.198 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 18:43:23.205 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 18:43:23.210 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 18:43:23.217 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 18:43:23.221 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 18:43:23.225 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 18:43:23.230 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 18:43:23.235 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 18:43:23.239 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 18:43:23.242 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 18:43:23.246 UTC [148] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 18:43:25.128 UTC [156] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 18:43:28.548 UTC [148] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:43:28.877 UTC [148] DEBUG:  unexpected EOF on client connection
2025-04-19 18:43:30.999 UTC [157] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:43:31.008 UTC [157] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:43:31.015 UTC [157] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:43:31.015 UTC [157] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:43:31.019 UTC [157] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:43:31.023 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:43:31.031 UTC [157] DEBUG:  building index "pg_toast_18683_index" on table "pg_toast_18683" serially
2025-04-19 18:43:31.033 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:43:31.033 UTC [157] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:43:31.033 UTC [157] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:43:31.034 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:43:31.034 UTC [157] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:43:31.035 UTC [157] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:43:31.036 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:43:31.036 UTC [157] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:43:31.036 UTC [157] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:43:31.037 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:43:31.038 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:43:31.038 UTC [157] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:43:31.038 UTC [157] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:43:31.039 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:43:31.039 UTC [157] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:43:31.039 UTC [157] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:43:31.040 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:43:31.041 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:43:31.042 UTC [157] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:43:31.042 UTC [157] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:43:31.043 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:43:31.043 UTC [157] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:43:31.043 UTC [157] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:43:31.045 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:43:31.046 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:43:31.047 UTC [157] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:43:31.047 UTC [157] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:43:31.048 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:43:31.050 UTC [157] DEBUG:  building index "pg_toast_18744_index" on table "pg_toast_18744" serially
2025-04-19 18:43:31.051 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:43:31.051 UTC [157] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:43:31.051 UTC [157] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:43:31.052 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:43:31.054 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:43:31.054 UTC [157] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:43:31.054 UTC [157] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:43:31.054 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:43:31.055 UTC [157] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:43:31.055 UTC [157] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:43:31.056 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:43:31.057 UTC [157] DEBUG:  building index "pg_toast_18777_index" on table "pg_toast_18777" serially
2025-04-19 18:43:31.058 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:43:31.058 UTC [157] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:43:31.058 UTC [157] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:43:31.059 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:43:31.060 UTC [157] DEBUG:  building index "pg_toast_18788_index" on table "pg_toast_18788" serially
2025-04-19 18:43:31.060 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:43:31.061 UTC [157] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:43:31.061 UTC [157] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:43:31.062 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:43:31.063 UTC [157] DEBUG:  building index "pg_toast_18811_index" on table "pg_toast_18811" serially
2025-04-19 18:43:31.064 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:43:31.064 UTC [157] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:43:31.064 UTC [157] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:43:31.065 UTC [157] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:43:31.065 UTC [157] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:43:31.066 UTC [157] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:43:31.066 UTC [157] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:43:31.067 UTC [157] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:43:31.067 UTC [157] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:43:31.068 UTC [157] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:43:31.068 UTC [157] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:43:31.070 UTC [157] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:43:31.070 UTC [157] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:43:31.071 UTC [157] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:43:31.071 UTC [157] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:43:31.073 UTC [157] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:43:31.073 UTC [157] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:43:31.075 UTC [157] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:43:31.075 UTC [157] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:43:31.076 UTC [157] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:43:31.076 UTC [157] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:43:31.077 UTC [157] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:43:31.077 UTC [157] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:43:31.078 UTC [157] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:43:31.078 UTC [157] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:43:31.090 UTC [157] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:43:31.365 UTC [157] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xBRuTo2.Au9rUu7BWH6O6u5P0TRoEIXeUpxYzUX9H3YQnFka7WkAy')
	                RETURNING id, username, email
	                
2025-04-19 18:43:31.366 UTC [157] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:43:31.366 UTC [157] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:43:31.367 UTC [157] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:43:31.378 UTC [157] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:43:31.379 UTC [157] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:43:31.382 UTC [157] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:43:31.386 UTC [157] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:43:31.386 UTC [157] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:43:31.391 UTC [157] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:43:31.398 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:43:31.401 UTC [157] DEBUG:  building index "pg_toast_18847_index" on table "pg_toast_18847" serially
2025-04-19 18:43:31.404 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:43:31.405 UTC [157] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:43:31.405 UTC [157] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:43:31.406 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:43:31.406 UTC [157] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:43:31.406 UTC [157] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:43:31.408 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:43:31.408 UTC [157] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:43:31.408 UTC [157] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:43:31.409 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:43:31.411 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:43:31.411 UTC [157] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:43:31.411 UTC [157] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:43:31.412 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:43:31.413 UTC [157] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:43:31.413 UTC [157] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:43:31.414 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:43:31.416 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:43:31.417 UTC [157] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:43:31.417 UTC [157] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:43:31.417 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:43:31.418 UTC [157] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:43:31.418 UTC [157] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:43:31.419 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:43:31.420 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:43:31.420 UTC [157] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:43:31.420 UTC [157] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:43:31.421 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:43:31.423 UTC [157] DEBUG:  building index "pg_toast_18908_index" on table "pg_toast_18908" serially
2025-04-19 18:43:31.424 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:43:31.425 UTC [157] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:43:31.425 UTC [157] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:43:31.426 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:43:31.429 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:43:31.429 UTC [157] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:43:31.429 UTC [157] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:43:31.430 UTC [157] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:43:31.430 UTC [157] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:43:31.431 UTC [157] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:43:31.432 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:43:31.433 UTC [157] DEBUG:  building index "pg_toast_18941_index" on table "pg_toast_18941" serially
2025-04-19 18:43:31.434 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:43:31.434 UTC [157] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:43:31.434 UTC [157] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:43:31.435 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:43:31.436 UTC [157] DEBUG:  building index "pg_toast_18952_index" on table "pg_toast_18952" serially
2025-04-19 18:43:31.437 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:43:31.437 UTC [157] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:43:31.437 UTC [157] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:43:31.438 UTC [157] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:43:31.439 UTC [157] DEBUG:  building index "pg_toast_18975_index" on table "pg_toast_18975" serially
2025-04-19 18:43:31.440 UTC [157] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:43:31.440 UTC [157] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:43:31.440 UTC [157] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:43:31.441 UTC [157] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:43:31.441 UTC [157] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:43:31.442 UTC [157] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:43:31.442 UTC [157] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:43:31.442 UTC [157] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:43:31.442 UTC [157] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:43:31.444 UTC [157] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:43:31.444 UTC [157] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:43:31.444 UTC [157] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:43:31.444 UTC [157] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:43:31.445 UTC [157] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:43:31.445 UTC [157] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:43:31.446 UTC [157] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:43:31.446 UTC [157] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:43:31.447 UTC [157] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:43:31.447 UTC [157] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:43:31.448 UTC [157] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:43:31.448 UTC [157] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:43:31.449 UTC [157] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:43:31.449 UTC [157] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:43:31.449 UTC [157] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:43:31.449 UTC [157] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:43:31.462 UTC [157] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:43:31.714 UTC [157] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$hytIPYqJl8eGIN/YFuaW/.hXAuxEqCNwlxSIi7H9JpQ3nN8DZkteW')
	                RETURNING id, username, email
	                
2025-04-19 18:43:31.716 UTC [157] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:43:31.716 UTC [157] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:43:44.139 UTC [157] DEBUG:  unexpected EOF on client connection
2025-04-19 18:43:44.401 UTC [1] LOG:  received fast shutdown request
2025-04-19 18:43:44.417 UTC [1] LOG:  aborting any active transactions
2025-04-19 18:43:44.418 UTC [62] DEBUG:  autovacuum launcher shutting down
2025-04-19 18:43:44.418 UTC [64] DEBUG:  logical replication launcher shutting down
2025-04-19 18:43:44.449 UTC [1] LOG:  background worker "logical replication launcher" (PID 64) exited with exit code 1
2025-04-19 18:43:44.463 UTC [59] LOG:  shutting down
2025-04-19 18:43:44.467 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 18:43:44.599 UTC [1] LOG:  database system is shut down

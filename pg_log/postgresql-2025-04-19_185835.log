2025-04-19 18:58:35.555 UTC [41] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 18:58:35.558 UTC [41] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 18:58:35.562 UTC [43] LOG:  database system was shut down at 2025-04-19 18:58:35 UTC
2025-04-19 18:58:35.562 UTC [43] DEBUG:  checkpoint record is at 0/17055D8
2025-04-19 18:58:35.562 UTC [43] DEBUG:  redo record is at 0/17055D8; shutdown true
2025-04-19 18:58:35.562 UTC [43] DEBUG:  next transaction ID: 734; next OID: 13824
2025-04-19 18:58:35.562 UTC [43] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 18:58:35.562 UTC [43] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 18:58:35.562 UTC [43] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 18:58:35.562 UTC [43] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 18:58:35.562 UTC [43] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 18:58:35.562 UTC [43] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:58:35.562 UTC [43] DEBUG:  starting up replication slots
2025-04-19 18:58:35.562 UTC [43] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 18:58:35.562 UTC [43] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:58:35.562 UTC [43] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 18:58:35.565 UTC [41] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 18:58:35.565 UTC [47] DEBUG:  autovacuum launcher started
2025-04-19 18:58:35.565 UTC [41] LOG:  database system is ready to accept connections
2025-04-19 18:58:35.565 UTC [49] DEBUG:  logical replication launcher started
2025-04-19 18:58:35.649 UTC [52] LOG:  statement: SELECT 1 FROM pg_database WHERE datname = 'powerball' ;
2025-04-19 18:58:35.660 UTC [54] LOG:  statement: CREATE DATABASE "powerball" ;
2025-04-19 18:58:35.662 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 18:58:35.840 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 18:58:35.849 UTC [41] LOG:  received fast shutdown request
2025-04-19 18:58:35.858 UTC [41] LOG:  aborting any active transactions
2025-04-19 18:58:35.858 UTC [49] DEBUG:  logical replication launcher shutting down
2025-04-19 18:58:35.859 UTC [47] DEBUG:  autovacuum launcher shutting down
2025-04-19 18:58:35.861 UTC [41] LOG:  background worker "logical replication launcher" (PID 49) exited with exit code 1
2025-04-19 18:58:35.862 UTC [44] LOG:  shutting down
2025-04-19 18:58:35.865 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 18:58:35.882 UTC [41] LOG:  database system is shut down
2025-04-19 18:58:35.883 UTC [42] DEBUG:  logger shutting down
2025-04-19 18:58:35.983 UTC [1] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 18:58:35.983 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2025-04-19 18:58:35.983 UTC [1] LOG:  listening on IPv6 address "::", port 5432
2025-04-19 18:58:35.988 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 18:58:35.995 UTC [58] LOG:  database system was shut down at 2025-04-19 18:58:35 UTC
2025-04-19 18:58:35.995 UTC [58] DEBUG:  checkpoint record is at 0/1705EA0
2025-04-19 18:58:35.995 UTC [58] DEBUG:  redo record is at 0/1705EA0; shutdown true
2025-04-19 18:58:35.995 UTC [58] DEBUG:  next transaction ID: 735; next OID: 16385
2025-04-19 18:58:35.995 UTC [58] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 18:58:35.995 UTC [58] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 18:58:35.995 UTC [58] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 18:58:35.995 UTC [58] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 18:58:35.995 UTC [58] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 18:58:35.995 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:58:35.995 UTC [58] DEBUG:  starting up replication slots
2025-04-19 18:58:35.995 UTC [58] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 18:58:35.996 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 18:58:35.996 UTC [58] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 18:58:36.005 UTC [1] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 18:58:36.005 UTC [1] LOG:  database system is ready to accept connections
2025-04-19 18:58:36.005 UTC [62] DEBUG:  autovacuum launcher started
2025-04-19 18:58:36.006 UTC [64] DEBUG:  logical replication launcher started
2025-04-19 18:58:48.315 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:58:48.316 UTC [72] DEBUG:  relation "user_checks" does not exist
2025-04-19 18:58:48.316 UTC [72] NOTICE:  table "user_checks" does not exist, skipping
2025-04-19 18:58:48.316 UTC [72] DEBUG:  relation "prediction_numbers" does not exist
2025-04-19 18:58:48.316 UTC [72] NOTICE:  table "prediction_numbers" does not exist, skipping
2025-04-19 18:58:48.316 UTC [72] DEBUG:  relation "predictions" does not exist
2025-04-19 18:58:48.316 UTC [72] NOTICE:  table "predictions" does not exist, skipping
2025-04-19 18:58:48.316 UTC [72] DEBUG:  relation "expected_combinations" does not exist
2025-04-19 18:58:48.316 UTC [72] NOTICE:  table "expected_combinations" does not exist, skipping
2025-04-19 18:58:48.317 UTC [72] DEBUG:  relation "numbers" does not exist
2025-04-19 18:58:48.317 UTC [72] NOTICE:  table "numbers" does not exist, skipping
2025-04-19 18:58:48.317 UTC [72] DEBUG:  relation "draws" does not exist
2025-04-19 18:58:48.317 UTC [72] NOTICE:  table "draws" does not exist, skipping
2025-04-19 18:58:48.317 UTC [72] DEBUG:  relation "users" does not exist
2025-04-19 18:58:48.317 UTC [72] NOTICE:  table "users" does not exist, skipping
2025-04-19 18:58:48.317 UTC [72] DEBUG:  relation "user_stats" does not exist
2025-04-19 18:58:48.317 UTC [72] NOTICE:  table "user_stats" does not exist, skipping
2025-04-19 18:58:48.317 UTC [72] DEBUG:  relation "analysis_results" does not exist
2025-04-19 18:58:48.317 UTC [72] NOTICE:  table "analysis_results" does not exist, skipping
2025-04-19 18:58:48.318 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:58:48.328 UTC [72] DEBUG:  building index "pg_toast_16386_index" on table "pg_toast_16386" serially
2025-04-19 18:58:48.330 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:58:48.331 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:58:48.331 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:58:48.333 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:58:48.333 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:58:48.333 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:58:48.334 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:58:48.334 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:58:48.334 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:58:48.336 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:58:48.343 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:58:48.343 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:58:48.343 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:58:48.346 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:58:48.346 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:58:48.346 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:58:48.348 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:58:48.350 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:58:48.350 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:58:48.350 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:58:48.351 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:58:48.352 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:58:48.352 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:58:48.356 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:58:48.358 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:58:48.358 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:58:48.358 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:58:48.363 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:58:48.373 UTC [72] DEBUG:  building index "pg_toast_16447_index" on table "pg_toast_16447" serially
2025-04-19 18:58:48.374 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:58:48.374 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:58:48.374 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:58:48.377 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:58:48.378 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:58:48.379 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:58:48.379 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:58:48.380 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:58:48.380 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:58:48.380 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:58:48.381 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:58:48.382 UTC [72] DEBUG:  building index "pg_toast_16480_index" on table "pg_toast_16480" serially
2025-04-19 18:58:48.384 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:58:48.384 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:58:48.384 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:58:48.385 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:58:48.387 UTC [72] DEBUG:  building index "pg_toast_16491_index" on table "pg_toast_16491" serially
2025-04-19 18:58:48.388 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:58:48.388 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:58:48.388 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:58:48.390 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:58:48.392 UTC [72] DEBUG:  building index "pg_toast_16514_index" on table "pg_toast_16514" serially
2025-04-19 18:58:48.392 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:58:48.393 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:58:48.393 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:58:48.394 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:58:48.394 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:58:48.395 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:58:48.395 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:58:48.396 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:58:48.396 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:58:48.399 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:58:48.399 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:58:48.401 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:58:48.401 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:58:48.403 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:58:48.403 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:58:48.404 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:58:48.404 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:58:48.405 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:58:48.405 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:58:48.406 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:58:48.407 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:58:48.408 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:58:48.408 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:58:48.408 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:58:48.408 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:58:48.420 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:58:48.737 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$x2pF3hU2URpbFW3a1ykua.2zALRiMG8XPV7X67wXMGAilg1bOn8MC')
	                RETURNING id, username, email
	                
2025-04-19 18:58:48.738 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:58:48.739 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:58:48.740 UTC [72] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:58:48.752 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:58:48.753 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:58:48.758 UTC [72] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:58:48.765 UTC [72] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:58:48.765 UTC [72] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:58:48.770 UTC [72] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:58:48.775 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:58:48.777 UTC [72] DEBUG:  building index "pg_toast_16550_index" on table "pg_toast_16550" serially
2025-04-19 18:58:48.778 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:58:48.778 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:58:48.778 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:58:48.780 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:58:48.780 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:58:48.780 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:58:48.781 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:58:48.781 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:58:48.781 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:58:48.782 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:58:48.784 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:58:48.784 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:58:48.784 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:58:48.786 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:58:48.786 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:58:48.786 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:58:48.788 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:58:48.789 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:58:48.789 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:58:48.790 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:58:48.791 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:58:48.792 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:58:48.792 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:58:48.793 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:58:48.795 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:58:48.795 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:58:48.795 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:58:48.797 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:58:48.798 UTC [72] DEBUG:  building index "pg_toast_16611_index" on table "pg_toast_16611" serially
2025-04-19 18:58:48.800 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:58:48.800 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:58:48.800 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:58:48.802 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:58:48.803 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:58:48.803 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:58:48.803 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:58:48.804 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:58:48.804 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:58:48.804 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:58:48.806 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:58:48.807 UTC [72] DEBUG:  building index "pg_toast_16644_index" on table "pg_toast_16644" serially
2025-04-19 18:58:48.809 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:58:48.809 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:58:48.809 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:58:48.810 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:58:48.812 UTC [72] DEBUG:  building index "pg_toast_16655_index" on table "pg_toast_16655" serially
2025-04-19 18:58:48.813 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:58:48.813 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:58:48.813 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:58:48.816 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:58:48.817 UTC [72] DEBUG:  building index "pg_toast_16678_index" on table "pg_toast_16678" serially
2025-04-19 18:58:48.818 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:58:48.819 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:58:48.819 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:58:48.820 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:58:48.820 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:58:48.821 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:58:48.821 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:58:48.823 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:58:48.823 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:58:48.824 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:58:48.824 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:58:48.826 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:58:48.826 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:58:48.828 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:58:48.828 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:58:48.830 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:58:48.830 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:58:48.831 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:58:48.831 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:58:48.832 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:58:48.832 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:58:48.833 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:58:48.833 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:58:48.834 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:58:48.834 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:58:48.840 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:58:49.111 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$OCRG5JivokyJTwqZfK5oq.3yhHPeCQJIXkeyKERs5Sz18oQBfXf36')
	                RETURNING id, username, email
	                
2025-04-19 18:58:49.111 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:58:49.112 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:00.346 UTC [72] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:59:00.994 UTC [72] DEBUG:  unexpected EOF on client connection
2025-04-19 18:59:09.742 UTC [87] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:09.753 UTC [87] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:09.764 UTC [87] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:09.764 UTC [87] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:09.769 UTC [87] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:09.774 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:09.778 UTC [87] DEBUG:  building index "pg_toast_16714_index" on table "pg_toast_16714" serially
2025-04-19 18:59:09.780 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:09.781 UTC [87] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:09.781 UTC [87] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:09.782 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:09.782 UTC [87] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:09.783 UTC [87] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:09.783 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:09.784 UTC [87] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:09.784 UTC [87] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:09.785 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:09.789 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:09.789 UTC [87] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:09.789 UTC [87] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:09.791 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:09.792 UTC [87] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:09.792 UTC [87] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:09.793 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:09.795 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:09.795 UTC [87] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:09.795 UTC [87] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:09.796 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:09.797 UTC [87] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:09.797 UTC [87] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:09.799 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:09.801 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:09.801 UTC [87] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:09.801 UTC [87] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:09.802 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:09.805 UTC [87] DEBUG:  building index "pg_toast_16775_index" on table "pg_toast_16775" serially
2025-04-19 18:59:09.805 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:09.806 UTC [87] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:09.806 UTC [87] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:09.807 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:09.808 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:09.809 UTC [87] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:09.809 UTC [87] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:09.810 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:09.810 UTC [87] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:09.810 UTC [87] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:09.812 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:09.813 UTC [87] DEBUG:  building index "pg_toast_16808_index" on table "pg_toast_16808" serially
2025-04-19 18:59:09.814 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:09.815 UTC [87] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:09.815 UTC [87] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:09.816 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:09.817 UTC [87] DEBUG:  building index "pg_toast_16819_index" on table "pg_toast_16819" serially
2025-04-19 18:59:09.818 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:09.818 UTC [87] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:09.818 UTC [87] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:09.820 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:09.822 UTC [87] DEBUG:  building index "pg_toast_16842_index" on table "pg_toast_16842" serially
2025-04-19 18:59:09.823 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:09.824 UTC [87] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:09.824 UTC [87] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:09.825 UTC [87] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:09.825 UTC [87] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:09.826 UTC [87] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:09.827 UTC [87] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:09.828 UTC [87] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:09.828 UTC [87] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:09.831 UTC [87] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:09.831 UTC [87] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:09.834 UTC [87] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:09.834 UTC [87] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:09.837 UTC [87] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:09.837 UTC [87] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:09.839 UTC [87] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:09.839 UTC [87] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:09.840 UTC [87] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:09.840 UTC [87] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:09.842 UTC [87] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:09.842 UTC [87] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:09.844 UTC [87] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:09.844 UTC [87] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:09.847 UTC [87] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:09.847 UTC [87] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:09.863 UTC [87] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:10.174 UTC [87] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Q73.vPjE6LYlAUK9BoARKedeMHbHnfl6CVjkvAhvyfGY8lOoQ.UTW')
	                RETURNING id, username, email
	                
2025-04-19 18:59:10.178 UTC [87] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:10.179 UTC [87] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:10.184 UTC [87] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:59:10.211 UTC [87] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:10.213 UTC [87] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:10.220 UTC [87] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:10.226 UTC [87] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:10.226 UTC [87] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:10.230 UTC [87] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:10.236 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:10.239 UTC [87] DEBUG:  building index "pg_toast_16878_index" on table "pg_toast_16878" serially
2025-04-19 18:59:10.243 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:10.243 UTC [87] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:10.243 UTC [87] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:10.246 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:10.246 UTC [87] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:10.246 UTC [87] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:10.248 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:10.248 UTC [87] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:10.248 UTC [87] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:10.250 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:10.255 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:10.256 UTC [87] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:10.256 UTC [87] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:10.258 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:10.258 UTC [87] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:10.258 UTC [87] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:10.259 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:10.260 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:10.261 UTC [87] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:10.261 UTC [87] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:10.262 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:10.262 UTC [87] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:10.262 UTC [87] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:10.264 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:10.267 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:10.267 UTC [87] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:10.267 UTC [87] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:10.269 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:10.270 UTC [87] DEBUG:  building index "pg_toast_16939_index" on table "pg_toast_16939" serially
2025-04-19 18:59:10.271 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:10.272 UTC [87] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:10.272 UTC [87] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:10.274 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:10.277 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:10.278 UTC [87] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:10.278 UTC [87] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:10.279 UTC [87] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:10.280 UTC [87] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:10.280 UTC [87] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:10.282 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:10.284 UTC [87] DEBUG:  building index "pg_toast_16972_index" on table "pg_toast_16972" serially
2025-04-19 18:59:10.285 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:10.285 UTC [87] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:10.285 UTC [87] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:10.286 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:10.288 UTC [87] DEBUG:  building index "pg_toast_16983_index" on table "pg_toast_16983" serially
2025-04-19 18:59:10.289 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:10.289 UTC [87] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:10.289 UTC [87] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:10.291 UTC [87] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:10.293 UTC [87] DEBUG:  building index "pg_toast_17006_index" on table "pg_toast_17006" serially
2025-04-19 18:59:10.294 UTC [87] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:10.295 UTC [87] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:10.295 UTC [87] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:10.296 UTC [87] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:10.296 UTC [87] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:10.299 UTC [87] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:10.299 UTC [87] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:10.301 UTC [87] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:10.301 UTC [87] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:10.302 UTC [87] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:10.302 UTC [87] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:10.303 UTC [87] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:10.303 UTC [87] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:10.304 UTC [87] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:10.304 UTC [87] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:10.306 UTC [87] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:10.306 UTC [87] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:10.307 UTC [87] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:10.307 UTC [87] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:10.308 UTC [87] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:10.308 UTC [87] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:10.309 UTC [87] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:10.309 UTC [87] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:10.312 UTC [87] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:10.312 UTC [87] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:10.325 UTC [87] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:10.650 UTC [87] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$loG2blvIkgfhNf/VYz5DQOmpIHimsHRwUvdluBop.zGgyxty4lvde')
	                RETURNING id, username, email
	                
2025-04-19 18:59:10.663 UTC [87] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:10.669 UTC [87] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:17.450 UTC [87] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:59:17.766 UTC [87] DEBUG:  unexpected EOF on client connection
2025-04-19 18:59:19.809 UTC [95] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:19.817 UTC [95] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:19.827 UTC [95] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:19.827 UTC [95] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:19.831 UTC [95] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:19.835 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:19.838 UTC [95] DEBUG:  building index "pg_toast_17042_index" on table "pg_toast_17042" serially
2025-04-19 18:59:19.841 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:19.841 UTC [95] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:19.841 UTC [95] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:19.843 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:19.843 UTC [95] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:19.843 UTC [95] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:19.844 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:19.844 UTC [95] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:19.844 UTC [95] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:19.845 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:19.846 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:19.847 UTC [95] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:19.847 UTC [95] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:19.847 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:19.848 UTC [95] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:19.848 UTC [95] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:19.849 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:19.852 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:19.852 UTC [95] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:19.852 UTC [95] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:19.853 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:19.854 UTC [95] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:19.854 UTC [95] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:19.855 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:19.856 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:19.857 UTC [95] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:19.857 UTC [95] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:19.858 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:19.860 UTC [95] DEBUG:  building index "pg_toast_17103_index" on table "pg_toast_17103" serially
2025-04-19 18:59:19.861 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:19.861 UTC [95] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:19.861 UTC [95] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:19.862 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:19.866 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:19.866 UTC [95] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:19.866 UTC [95] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:19.868 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:19.869 UTC [95] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:19.869 UTC [95] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:19.870 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:19.871 UTC [95] DEBUG:  building index "pg_toast_17136_index" on table "pg_toast_17136" serially
2025-04-19 18:59:19.872 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:19.872 UTC [95] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:19.872 UTC [95] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:19.873 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:19.874 UTC [95] DEBUG:  building index "pg_toast_17147_index" on table "pg_toast_17147" serially
2025-04-19 18:59:19.875 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:19.875 UTC [95] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:19.875 UTC [95] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:19.876 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:19.877 UTC [95] DEBUG:  building index "pg_toast_17170_index" on table "pg_toast_17170" serially
2025-04-19 18:59:19.878 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:19.878 UTC [95] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:19.878 UTC [95] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:19.879 UTC [95] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:19.879 UTC [95] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:19.880 UTC [95] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:19.880 UTC [95] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:19.880 UTC [95] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:19.880 UTC [95] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:19.883 UTC [95] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:19.883 UTC [95] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:19.886 UTC [95] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:19.886 UTC [95] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:19.886 UTC [95] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:19.886 UTC [95] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:19.887 UTC [95] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:19.887 UTC [95] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:19.888 UTC [95] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:19.888 UTC [95] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:19.889 UTC [95] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:19.889 UTC [95] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:19.890 UTC [95] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:19.890 UTC [95] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:19.890 UTC [95] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:19.890 UTC [95] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:19.902 UTC [95] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:20.286 UTC [95] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lDu7hgHqQt.AC6spAbP5nu4eZGkGM6Z3DXOIXKL7a0MmIhoHjlJ7e')
	                RETURNING id, username, email
	                
2025-04-19 18:59:20.287 UTC [95] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:20.288 UTC [95] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:20.289 UTC [95] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:59:20.318 UTC [95] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:20.323 UTC [95] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:20.330 UTC [95] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:20.341 UTC [95] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:20.341 UTC [95] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:20.357 UTC [95] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:20.366 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:20.369 UTC [95] DEBUG:  building index "pg_toast_17206_index" on table "pg_toast_17206" serially
2025-04-19 18:59:20.376 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:20.377 UTC [95] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:20.378 UTC [95] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:20.379 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:20.379 UTC [95] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:20.379 UTC [95] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:20.381 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:20.381 UTC [95] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:20.381 UTC [95] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:20.386 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:20.393 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:20.394 UTC [95] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:20.394 UTC [95] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:20.396 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:20.396 UTC [95] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:20.396 UTC [95] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:20.398 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:20.399 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:20.399 UTC [95] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:20.399 UTC [95] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:20.400 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:20.401 UTC [95] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:20.401 UTC [95] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:20.403 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:20.405 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:20.413 UTC [95] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:20.413 UTC [95] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:20.416 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:20.418 UTC [95] DEBUG:  building index "pg_toast_17267_index" on table "pg_toast_17267" serially
2025-04-19 18:59:20.419 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:20.420 UTC [95] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:20.420 UTC [95] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:20.423 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:20.426 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:20.426 UTC [95] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:20.426 UTC [95] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:20.428 UTC [95] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:20.429 UTC [95] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:20.429 UTC [95] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:20.432 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:20.436 UTC [95] DEBUG:  building index "pg_toast_17300_index" on table "pg_toast_17300" serially
2025-04-19 18:59:20.437 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:20.438 UTC [95] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:20.438 UTC [95] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:20.440 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:20.442 UTC [95] DEBUG:  building index "pg_toast_17311_index" on table "pg_toast_17311" serially
2025-04-19 18:59:20.445 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:20.447 UTC [95] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:20.447 UTC [95] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:20.452 UTC [95] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:20.453 UTC [95] DEBUG:  building index "pg_toast_17334_index" on table "pg_toast_17334" serially
2025-04-19 18:59:20.455 UTC [95] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:20.455 UTC [95] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:20.455 UTC [95] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:20.457 UTC [95] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:20.457 UTC [95] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:20.458 UTC [95] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:20.458 UTC [95] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:20.460 UTC [95] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:20.460 UTC [95] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:20.462 UTC [95] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:20.462 UTC [95] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:20.464 UTC [95] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:20.464 UTC [95] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:20.465 UTC [95] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:20.465 UTC [95] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:20.467 UTC [95] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:20.467 UTC [95] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:20.469 UTC [95] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:20.469 UTC [95] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:20.471 UTC [95] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:20.471 UTC [95] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:20.472 UTC [95] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:20.472 UTC [95] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:20.473 UTC [95] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:20.474 UTC [95] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:20.497 UTC [95] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:20.785 UTC [95] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ggtsdGchTdfFNeYlcD.wK.tnCt7lM/PzUdqnTpN0ZRmmtb6Q.nxyi')
	                RETURNING id, username, email
	                
2025-04-19 18:59:20.787 UTC [95] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:20.787 UTC [95] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:33.514 UTC [95] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:59:33.822 UTC [95] DEBUG:  unexpected EOF on client connection
2025-04-19 18:59:35.332 UTC [109] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:35.337 UTC [109] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:35.343 UTC [109] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:35.343 UTC [109] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:35.347 UTC [109] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:35.350 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:35.352 UTC [109] DEBUG:  building index "pg_toast_17370_index" on table "pg_toast_17370" serially
2025-04-19 18:59:35.353 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:35.354 UTC [109] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:35.354 UTC [109] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:35.355 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:35.355 UTC [109] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:35.355 UTC [109] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:35.356 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:35.356 UTC [109] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:35.356 UTC [109] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:35.356 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:35.357 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:35.358 UTC [109] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:35.358 UTC [109] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:35.358 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:35.358 UTC [109] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:35.359 UTC [109] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:35.359 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:35.360 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:35.360 UTC [109] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:35.360 UTC [109] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:35.361 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:35.361 UTC [109] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:35.361 UTC [109] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:35.362 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:35.363 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:35.363 UTC [109] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:35.363 UTC [109] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:35.365 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:35.366 UTC [109] DEBUG:  building index "pg_toast_17431_index" on table "pg_toast_17431" serially
2025-04-19 18:59:35.367 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:35.367 UTC [109] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:35.367 UTC [109] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:35.368 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:35.369 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:35.370 UTC [109] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:35.370 UTC [109] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:35.370 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:35.370 UTC [109] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:35.370 UTC [109] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:35.371 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:35.373 UTC [109] DEBUG:  building index "pg_toast_17464_index" on table "pg_toast_17464" serially
2025-04-19 18:59:35.374 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:35.374 UTC [109] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:35.374 UTC [109] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:35.374 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:35.375 UTC [109] DEBUG:  building index "pg_toast_17475_index" on table "pg_toast_17475" serially
2025-04-19 18:59:35.376 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:35.376 UTC [109] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:35.376 UTC [109] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:35.377 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:35.378 UTC [109] DEBUG:  building index "pg_toast_17498_index" on table "pg_toast_17498" serially
2025-04-19 18:59:35.379 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:35.379 UTC [109] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:35.379 UTC [109] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:35.380 UTC [109] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:35.380 UTC [109] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:35.381 UTC [109] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:35.381 UTC [109] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:35.382 UTC [109] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:35.382 UTC [109] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:35.382 UTC [109] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:35.382 UTC [109] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:35.383 UTC [109] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:35.383 UTC [109] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:35.384 UTC [109] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:35.384 UTC [109] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:35.385 UTC [109] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:35.385 UTC [109] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:35.386 UTC [109] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:35.386 UTC [109] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:35.386 UTC [109] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:35.386 UTC [109] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:35.387 UTC [109] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:35.387 UTC [109] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:35.388 UTC [109] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:35.388 UTC [109] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:35.397 UTC [109] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:35.665 UTC [109] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AdB/px8by3yxfFvRyNtNzO2xFYoHi8.U2YOBhQuD1ItNwuNJLAHxW')
	                RETURNING id, username, email
	                
2025-04-19 18:59:35.666 UTC [109] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:35.666 UTC [109] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:35.667 UTC [109] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:59:35.673 UTC [109] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:35.674 UTC [109] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:35.676 UTC [109] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:35.680 UTC [109] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:35.680 UTC [109] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:35.683 UTC [109] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:35.686 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:35.688 UTC [109] DEBUG:  building index "pg_toast_17534_index" on table "pg_toast_17534" serially
2025-04-19 18:59:35.688 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:35.689 UTC [109] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:35.689 UTC [109] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:35.689 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:35.690 UTC [109] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:35.690 UTC [109] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:35.690 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:35.690 UTC [109] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:35.691 UTC [109] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:35.691 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:35.692 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:35.692 UTC [109] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:35.692 UTC [109] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:35.693 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:35.693 UTC [109] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:35.693 UTC [109] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:35.694 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:35.695 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:35.695 UTC [109] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:35.695 UTC [109] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:35.696 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:35.696 UTC [109] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:35.696 UTC [109] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:35.697 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:35.698 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:35.699 UTC [109] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:35.699 UTC [109] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:35.700 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:35.701 UTC [109] DEBUG:  building index "pg_toast_17595_index" on table "pg_toast_17595" serially
2025-04-19 18:59:35.702 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:35.702 UTC [109] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:35.702 UTC [109] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:35.703 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:35.704 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:35.704 UTC [109] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:35.704 UTC [109] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:35.705 UTC [109] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:35.705 UTC [109] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:35.705 UTC [109] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:35.706 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:35.707 UTC [109] DEBUG:  building index "pg_toast_17628_index" on table "pg_toast_17628" serially
2025-04-19 18:59:35.708 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:35.708 UTC [109] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:35.708 UTC [109] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:35.709 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:35.710 UTC [109] DEBUG:  building index "pg_toast_17639_index" on table "pg_toast_17639" serially
2025-04-19 18:59:35.711 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:35.711 UTC [109] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:35.711 UTC [109] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:35.712 UTC [109] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:35.713 UTC [109] DEBUG:  building index "pg_toast_17662_index" on table "pg_toast_17662" serially
2025-04-19 18:59:35.714 UTC [109] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:35.714 UTC [109] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:35.714 UTC [109] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:35.715 UTC [109] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:35.715 UTC [109] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:35.716 UTC [109] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:35.716 UTC [109] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:35.717 UTC [109] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:35.717 UTC [109] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:35.717 UTC [109] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:35.717 UTC [109] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:35.718 UTC [109] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:35.718 UTC [109] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:35.719 UTC [109] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:35.719 UTC [109] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:35.720 UTC [109] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:35.720 UTC [109] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:35.721 UTC [109] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:35.721 UTC [109] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:35.722 UTC [109] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:35.722 UTC [109] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:35.722 UTC [109] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:35.722 UTC [109] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:35.723 UTC [109] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:35.723 UTC [109] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:35.730 UTC [109] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:35.977 UTC [109] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$EsPngIhdb84p9WPmA.88b.WyRetmlPKpH9Z6ASeexBkANeCcQ5tpq')
	                RETURNING id, username, email
	                
2025-04-19 18:59:35.978 UTC [109] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:35.978 UTC [109] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:36.043 UTC [110] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 18:59:49.378 UTC [109] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 18:59:49.668 UTC [109] DEBUG:  unexpected EOF on client connection
2025-04-19 18:59:51.490 UTC [118] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:51.496 UTC [118] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:51.501 UTC [118] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:51.501 UTC [118] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:51.504 UTC [118] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:51.508 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:51.509 UTC [118] DEBUG:  building index "pg_toast_17698_index" on table "pg_toast_17698" serially
2025-04-19 18:59:51.511 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:51.511 UTC [118] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:51.511 UTC [118] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:51.512 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:51.512 UTC [118] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:51.512 UTC [118] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:51.513 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:51.513 UTC [118] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:51.513 UTC [118] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:51.514 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:51.515 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:51.515 UTC [118] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:51.515 UTC [118] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:51.516 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:51.516 UTC [118] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:51.516 UTC [118] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:51.517 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:51.518 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:51.518 UTC [118] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:51.518 UTC [118] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:51.519 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:51.519 UTC [118] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:51.519 UTC [118] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:51.520 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:51.522 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:51.522 UTC [118] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:51.522 UTC [118] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:51.523 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:51.525 UTC [118] DEBUG:  building index "pg_toast_17759_index" on table "pg_toast_17759" serially
2025-04-19 18:59:51.526 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:51.526 UTC [118] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:51.526 UTC [118] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:51.527 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:51.528 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:51.528 UTC [118] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:51.528 UTC [118] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:51.529 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:51.529 UTC [118] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:51.529 UTC [118] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:51.530 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:51.531 UTC [118] DEBUG:  building index "pg_toast_17792_index" on table "pg_toast_17792" serially
2025-04-19 18:59:51.532 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:51.532 UTC [118] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:51.532 UTC [118] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:51.533 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:51.534 UTC [118] DEBUG:  building index "pg_toast_17803_index" on table "pg_toast_17803" serially
2025-04-19 18:59:51.534 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:51.535 UTC [118] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:51.535 UTC [118] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:51.536 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:51.537 UTC [118] DEBUG:  building index "pg_toast_17826_index" on table "pg_toast_17826" serially
2025-04-19 18:59:51.538 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:51.538 UTC [118] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:51.538 UTC [118] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:51.539 UTC [118] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:51.539 UTC [118] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:51.539 UTC [118] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:51.539 UTC [118] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:51.540 UTC [118] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:51.540 UTC [118] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:51.541 UTC [118] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:51.541 UTC [118] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:51.542 UTC [118] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:51.542 UTC [118] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:51.542 UTC [118] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:51.542 UTC [118] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:51.543 UTC [118] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:51.543 UTC [118] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:51.544 UTC [118] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:51.544 UTC [118] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:51.545 UTC [118] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:51.545 UTC [118] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:51.546 UTC [118] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:51.546 UTC [118] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:51.546 UTC [118] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:51.546 UTC [118] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:51.555 UTC [118] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:51.821 UTC [118] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6.vj0qMZAgh3Tc.sK3t4weCvHoCOsIz7BrvfGLhU8nok10O4A3FSa')
	                RETURNING id, username, email
	                
2025-04-19 18:59:51.821 UTC [118] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:51.822 UTC [118] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:51.822 UTC [118] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 18:59:51.829 UTC [118] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:51.829 UTC [118] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 18:59:51.832 UTC [118] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 18:59:51.836 UTC [118] NOTICE:  drop cascades to 2 other objects
2025-04-19 18:59:51.836 UTC [118] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 18:59:51.839 UTC [118] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 18:59:51.842 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 18:59:51.843 UTC [118] DEBUG:  building index "pg_toast_17862_index" on table "pg_toast_17862" serially
2025-04-19 18:59:51.844 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 18:59:51.844 UTC [118] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 18:59:51.844 UTC [118] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 18:59:51.845 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 18:59:51.845 UTC [118] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 18:59:51.845 UTC [118] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 18:59:51.846 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 18:59:51.846 UTC [118] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 18:59:51.846 UTC [118] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 18:59:51.847 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 18:59:51.847 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 18:59:51.847 UTC [118] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 18:59:51.847 UTC [118] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 18:59:51.848 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 18:59:51.848 UTC [118] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 18:59:51.848 UTC [118] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 18:59:51.849 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 18:59:51.850 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 18:59:51.850 UTC [118] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 18:59:51.850 UTC [118] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 18:59:51.850 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 18:59:51.850 UTC [118] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 18:59:51.850 UTC [118] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 18:59:51.851 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 18:59:51.852 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 18:59:51.852 UTC [118] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 18:59:51.852 UTC [118] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 18:59:51.853 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 18:59:51.854 UTC [118] DEBUG:  building index "pg_toast_17923_index" on table "pg_toast_17923" serially
2025-04-19 18:59:51.855 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 18:59:51.855 UTC [118] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 18:59:51.855 UTC [118] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 18:59:51.856 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 18:59:51.857 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 18:59:51.858 UTC [118] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 18:59:51.858 UTC [118] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 18:59:51.859 UTC [118] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 18:59:51.859 UTC [118] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 18:59:51.859 UTC [118] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 18:59:51.860 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 18:59:51.862 UTC [118] DEBUG:  building index "pg_toast_17956_index" on table "pg_toast_17956" serially
2025-04-19 18:59:51.863 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 18:59:51.863 UTC [118] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 18:59:51.863 UTC [118] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 18:59:51.864 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 18:59:51.865 UTC [118] DEBUG:  building index "pg_toast_17967_index" on table "pg_toast_17967" serially
2025-04-19 18:59:51.865 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 18:59:51.866 UTC [118] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 18:59:51.866 UTC [118] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 18:59:51.868 UTC [118] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 18:59:51.869 UTC [118] DEBUG:  building index "pg_toast_17990_index" on table "pg_toast_17990" serially
2025-04-19 18:59:51.870 UTC [118] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 18:59:51.871 UTC [118] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 18:59:51.871 UTC [118] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 18:59:51.872 UTC [118] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 18:59:51.872 UTC [118] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 18:59:51.873 UTC [118] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 18:59:51.873 UTC [118] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 18:59:51.874 UTC [118] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 18:59:51.874 UTC [118] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 18:59:51.876 UTC [118] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 18:59:51.876 UTC [118] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 18:59:51.876 UTC [118] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 18:59:51.876 UTC [118] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 18:59:51.878 UTC [118] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 18:59:51.878 UTC [118] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 18:59:51.878 UTC [118] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 18:59:51.878 UTC [118] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 18:59:51.879 UTC [118] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 18:59:51.879 UTC [118] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 18:59:51.880 UTC [118] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 18:59:51.880 UTC [118] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 18:59:51.881 UTC [118] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 18:59:51.881 UTC [118] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 18:59:51.882 UTC [118] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 18:59:51.882 UTC [118] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 18:59:51.888 UTC [118] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 18:59:52.132 UTC [118] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kzlCtlrcC0dnL3EOs7VCZenJdVoIrdKGLclHdEPxcoie.SSxBcp22')
	                RETURNING id, username, email
	                
2025-04-19 18:59:52.133 UTC [118] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 18:59:52.133 UTC [118] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 18:59:52.834 UTC [118] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:00:03.302 UTC [118] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:00:03.586 UTC [118] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:00:05.252 UTC [118] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:00:05.536 UTC [118] DEBUG:  unexpected EOF on client connection
2025-04-19 19:00:07.563 UTC [133] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:07.573 UTC [133] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:07.596 UTC [133] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:07.596 UTC [133] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:07.605 UTC [133] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:07.618 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:07.624 UTC [133] DEBUG:  building index "pg_toast_18026_index" on table "pg_toast_18026" serially
2025-04-19 19:00:07.627 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:07.627 UTC [133] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:07.627 UTC [133] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:07.628 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:07.629 UTC [133] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:07.629 UTC [133] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:07.630 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:07.630 UTC [133] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:07.630 UTC [133] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:07.631 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:07.632 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:07.633 UTC [133] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:07.633 UTC [133] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:07.634 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:07.634 UTC [133] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:07.634 UTC [133] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:07.635 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:07.636 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:07.636 UTC [133] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:07.636 UTC [133] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:07.638 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:07.638 UTC [133] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:07.638 UTC [133] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:07.639 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:07.641 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:07.641 UTC [133] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:07.641 UTC [133] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:07.642 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:07.644 UTC [133] DEBUG:  building index "pg_toast_18087_index" on table "pg_toast_18087" serially
2025-04-19 19:00:07.645 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:07.645 UTC [133] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:07.645 UTC [133] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:07.646 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:07.647 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:07.648 UTC [133] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:07.648 UTC [133] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:07.649 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:07.649 UTC [133] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:07.649 UTC [133] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:07.650 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:07.651 UTC [133] DEBUG:  building index "pg_toast_18120_index" on table "pg_toast_18120" serially
2025-04-19 19:00:07.653 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:07.653 UTC [133] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:07.653 UTC [133] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:07.654 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:07.655 UTC [133] DEBUG:  building index "pg_toast_18131_index" on table "pg_toast_18131" serially
2025-04-19 19:00:07.656 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:07.657 UTC [133] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:07.657 UTC [133] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:07.659 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:07.660 UTC [133] DEBUG:  building index "pg_toast_18154_index" on table "pg_toast_18154" serially
2025-04-19 19:00:07.661 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:07.661 UTC [133] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:07.661 UTC [133] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:07.662 UTC [133] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:07.662 UTC [133] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:07.663 UTC [133] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:07.663 UTC [133] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:07.665 UTC [133] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:07.665 UTC [133] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:07.666 UTC [133] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:07.666 UTC [133] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:07.667 UTC [133] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:07.667 UTC [133] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:07.668 UTC [133] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:07.668 UTC [133] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:07.669 UTC [133] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:07.669 UTC [133] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:07.670 UTC [133] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:07.670 UTC [133] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:07.671 UTC [133] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:07.671 UTC [133] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:07.673 UTC [133] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:07.673 UTC [133] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:07.675 UTC [133] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:07.675 UTC [133] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:07.691 UTC [133] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:07.974 UTC [133] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZHLYz7aWlus2HqaH9fptReYkxiEWpVoNmaYIQy.wlMIeda7B.D.RC')
	                RETURNING id, username, email
	                
2025-04-19 19:00:07.975 UTC [133] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:07.975 UTC [133] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:07.976 UTC [133] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:00:07.984 UTC [133] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:07.984 UTC [133] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:07.987 UTC [133] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:07.992 UTC [133] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:07.992 UTC [133] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:08.001 UTC [133] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:08.006 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:08.007 UTC [133] DEBUG:  building index "pg_toast_18190_index" on table "pg_toast_18190" serially
2025-04-19 19:00:08.008 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:08.008 UTC [133] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:08.008 UTC [133] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:08.009 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:08.009 UTC [133] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:08.009 UTC [133] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:08.010 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:08.010 UTC [133] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:08.010 UTC [133] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:08.011 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:08.012 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:08.012 UTC [133] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:08.012 UTC [133] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:08.013 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:08.014 UTC [133] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:08.014 UTC [133] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:08.015 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:08.018 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:08.019 UTC [133] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:08.019 UTC [133] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:08.020 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:08.021 UTC [133] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:08.021 UTC [133] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:08.023 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:08.024 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:08.024 UTC [133] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:08.024 UTC [133] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:08.026 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:08.028 UTC [133] DEBUG:  building index "pg_toast_18251_index" on table "pg_toast_18251" serially
2025-04-19 19:00:08.029 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:08.029 UTC [133] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:08.029 UTC [133] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:08.031 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:08.033 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:08.034 UTC [133] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:08.034 UTC [133] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:08.035 UTC [133] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:08.035 UTC [133] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:08.035 UTC [133] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:08.039 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:08.042 UTC [133] DEBUG:  building index "pg_toast_18284_index" on table "pg_toast_18284" serially
2025-04-19 19:00:08.047 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:08.047 UTC [133] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:08.047 UTC [133] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:08.049 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:08.051 UTC [133] DEBUG:  building index "pg_toast_18295_index" on table "pg_toast_18295" serially
2025-04-19 19:00:08.052 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:08.052 UTC [133] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:08.052 UTC [133] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:08.054 UTC [133] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:08.056 UTC [133] DEBUG:  building index "pg_toast_18318_index" on table "pg_toast_18318" serially
2025-04-19 19:00:08.057 UTC [133] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:08.058 UTC [133] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:08.058 UTC [133] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:08.060 UTC [133] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:08.060 UTC [133] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:08.062 UTC [133] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:08.062 UTC [133] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:08.063 UTC [133] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:08.063 UTC [133] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:08.064 UTC [133] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:08.064 UTC [133] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:08.065 UTC [133] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:08.065 UTC [133] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:08.066 UTC [133] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:08.066 UTC [133] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:08.067 UTC [133] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:08.067 UTC [133] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:08.068 UTC [133] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:08.068 UTC [133] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:08.069 UTC [133] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:08.069 UTC [133] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:08.070 UTC [133] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:08.070 UTC [133] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:08.072 UTC [133] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:08.072 UTC [133] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:08.084 UTC [133] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:08.366 UTC [133] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Vf8sITYzwS2H46NsJ.H27eG55ETJYKmDkbLsVrjULQ9T7i/zh88OG')
	                RETURNING id, username, email
	                
2025-04-19 19:00:08.367 UTC [133] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:08.368 UTC [133] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:16.750 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 19:00:16.754 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.754 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 19:00:16.755 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.758 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 19:00:16.761 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.764 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 19:00:16.765 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.765 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 19:00:16.765 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.766 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 19:00:16.766 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.768 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 19:00:16.769 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.769 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 19:00:16.769 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.769 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 19:00:16.770 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.773 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 19:00:16.774 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.774 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 19:00:16.774 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.774 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 19:00:16.775 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.778 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 19:00:16.778 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.779 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 19:00:16.779 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.780 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 19:00:16.780 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.784 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 19:00:16.784 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.784 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 19:00:16.785 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.785 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 19:00:16.786 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.790 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 19:00:16.790 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.791 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 19:00:16.791 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.791 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 19:00:16.792 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.795 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 19:00:16.795 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.795 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 19:00:16.795 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.796 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 19:00:16.797 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.799 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 19:00:16.800 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.800 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 19:00:16.800 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.801 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 19:00:16.801 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.803 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 19:00:16.804 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.804 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 19:00:16.804 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.805 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 19:00:16.805 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.808 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 19:00:16.808 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.808 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 19:00:16.808 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.809 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 19:00:16.809 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.811 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 19:00:16.812 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.812 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 19:00:16.812 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.812 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 19:00:16.813 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.815 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 19:00:16.816 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.816 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 19:00:16.816 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.816 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 19:00:16.817 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.823 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 19:00:16.824 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.825 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 19:00:16.826 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.826 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 19:00:16.827 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.831 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 19:00:16.832 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.833 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 19:00:16.833 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.834 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 19:00:16.835 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.839 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 19:00:16.840 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.840 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 19:00:16.840 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.841 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 19:00:16.841 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.844 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 19:00:16.844 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.844 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 19:00:16.844 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.845 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 19:00:16.845 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.847 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 19:00:16.848 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.848 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 19:00:16.848 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.849 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 19:00:16.849 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.851 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 19:00:16.851 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.852 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 19:00:16.852 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.852 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 19:00:16.852 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.856 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 19:00:16.856 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.856 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 19:00:16.856 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.857 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 19:00:16.857 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.859 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 19:00:16.860 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.860 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 19:00:16.860 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.860 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 19:00:16.861 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.863 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 19:00:16.863 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.863 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 19:00:16.863 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.864 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 19:00:16.864 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.866 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 19:00:16.867 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.867 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 19:00:16.867 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.867 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 19:00:16.868 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.872 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 19:00:16.872 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.873 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 19:00:16.873 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.873 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 19:00:16.874 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.877 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 19:00:16.879 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.880 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 19:00:16.880 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.880 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 19:00:16.881 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.886 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 19:00:16.887 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.887 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 19:00:16.887 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.888 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 19:00:16.888 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.891 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 19:00:16.891 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.891 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 19:00:16.891 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.892 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 19:00:16.893 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.895 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 19:00:16.896 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.896 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 19:00:16.896 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.896 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 19:00:16.897 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.899 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 19:00:16.899 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.900 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 19:00:16.900 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.900 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 19:00:16.901 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.904 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 19:00:16.904 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.904 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 19:00:16.904 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.905 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 19:00:16.905 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.907 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 19:00:16.908 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.908 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 19:00:16.908 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.909 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 19:00:16.909 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.911 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 19:00:16.912 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.912 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 19:00:16.912 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.912 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 19:00:16.913 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.915 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 19:00:16.915 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.916 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 19:00:16.916 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.916 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 19:00:16.916 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.919 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 19:00:16.920 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.920 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 19:00:16.920 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.920 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 19:00:16.921 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.923 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 19:00:16.924 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.924 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 19:00:16.924 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.924 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 19:00:16.925 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.927 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 19:00:16.927 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.927 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 19:00:16.927 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.928 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 19:00:16.928 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.931 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 19:00:16.931 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.931 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 19:00:16.931 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.931 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 19:00:16.932 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.934 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 19:00:16.934 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.935 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 19:00:16.935 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.935 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 19:00:16.935 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.940 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 19:00:16.941 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.941 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 19:00:16.941 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.942 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 19:00:16.944 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.951 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 19:00:16.952 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.952 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 19:00:16.952 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.953 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 19:00:16.953 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.958 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 19:00:16.959 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.959 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 19:00:16.959 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.959 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 19:00:16.960 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.962 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 19:00:16.963 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.963 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 19:00:16.963 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.964 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 19:00:16.964 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.967 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 19:00:16.968 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.968 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 19:00:16.968 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.969 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 19:00:16.969 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.974 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 19:00:16.975 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.975 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 19:00:16.975 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.975 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 19:00:16.976 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.978 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 19:00:16.978 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.979 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 19:00:16.979 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.979 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 19:00:16.980 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.982 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 19:00:16.983 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.983 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 19:00:16.983 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.983 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 19:00:16.984 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.987 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 19:00:16.987 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.987 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 19:00:16.987 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.988 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 19:00:16.988 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.991 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 19:00:16.992 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.992 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 19:00:16.992 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.992 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 19:00:16.993 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:16.995 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 19:00:16.996 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:16.996 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 19:00:16.996 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:16.997 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 19:00:16.997 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.000 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 19:00:17.001 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.001 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 19:00:17.001 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.002 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 19:00:17.002 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.006 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 19:00:17.007 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.007 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 19:00:17.008 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.008 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 19:00:17.009 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.011 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 19:00:17.011 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.012 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 19:00:17.012 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.012 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 19:00:17.012 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.015 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 19:00:17.015 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.015 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 19:00:17.015 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.016 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 19:00:17.016 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.018 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 19:00:17.019 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.019 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 19:00:17.019 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.019 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 19:00:17.020 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.023 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 19:00:17.024 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.024 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 19:00:17.024 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.024 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 19:00:17.025 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.028 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 19:00:17.029 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.030 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 19:00:17.030 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.031 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 19:00:17.031 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.034 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 19:00:17.034 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.034 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 19:00:17.035 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.035 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 19:00:17.035 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.041 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 19:00:17.042 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.042 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 19:00:17.042 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.043 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 19:00:17.043 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.047 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 19:00:17.048 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.048 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 19:00:17.048 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.049 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 19:00:17.050 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.054 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 19:00:17.055 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.055 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 19:00:17.055 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.056 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 19:00:17.056 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.059 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 19:00:17.059 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.060 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 19:00:17.060 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.060 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 19:00:17.061 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.063 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 19:00:17.064 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.064 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 19:00:17.064 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.065 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 19:00:17.065 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.067 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 19:00:17.068 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.068 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 19:00:17.068 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.069 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 19:00:17.069 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.073 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 19:00:17.074 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.074 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 19:00:17.074 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.074 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 19:00:17.075 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.077 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 19:00:17.077 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.078 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 19:00:17.078 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.078 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 19:00:17.079 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.081 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 19:00:17.082 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.082 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 19:00:17.082 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.082 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 19:00:17.083 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.085 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 19:00:17.085 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.086 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 19:00:17.086 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.086 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 19:00:17.087 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.090 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 19:00:17.090 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.090 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 19:00:17.090 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.091 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 19:00:17.092 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.094 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 19:00:17.095 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.095 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 19:00:17.095 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.095 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 19:00:17.096 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.098 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 19:00:17.099 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.099 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 19:00:17.099 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.100 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 19:00:17.100 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.102 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 19:00:17.103 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.103 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 19:00:17.103 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.104 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 19:00:17.105 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.107 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 19:00:17.107 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.107 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 19:00:17.108 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.108 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 19:00:17.108 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.110 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 19:00:17.111 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.111 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 19:00:17.111 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.111 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 19:00:17.112 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.114 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 19:00:17.114 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.114 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 19:00:17.115 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.115 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 19:00:17.115 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.117 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 19:00:17.118 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.118 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 19:00:17.118 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.118 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 19:00:17.119 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.123 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 19:00:17.123 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.123 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 19:00:17.123 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.124 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 19:00:17.124 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.127 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 19:00:17.127 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.127 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 19:00:17.128 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.128 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 19:00:17.129 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.131 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 19:00:17.132 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.132 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 19:00:17.132 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.132 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 19:00:17.133 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.135 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 19:00:17.136 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.136 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 19:00:17.137 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.137 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 19:00:17.139 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.142 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 19:00:17.143 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.143 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 19:00:17.143 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.144 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 19:00:17.144 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.147 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 19:00:17.148 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.148 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 19:00:17.148 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.148 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 19:00:17.149 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.151 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 19:00:17.151 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.152 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 19:00:17.152 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.152 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 19:00:17.153 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.156 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 19:00:17.156 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.156 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 19:00:17.156 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.157 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 19:00:17.157 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.160 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 19:00:17.160 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.160 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 19:00:17.161 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.161 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 19:00:17.161 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.164 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 19:00:17.164 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.164 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 19:00:17.164 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.165 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 19:00:17.165 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.167 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 19:00:17.168 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.168 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 19:00:17.168 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.168 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 19:00:17.169 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.173 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 19:00:17.173 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.173 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 19:00:17.173 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.174 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 19:00:17.174 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.176 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 19:00:17.177 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.177 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 19:00:17.177 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.178 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 19:00:17.178 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.180 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 19:00:17.181 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.181 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 19:00:17.181 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.181 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 19:00:17.182 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.184 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 19:00:17.184 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.184 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 19:00:17.184 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.185 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 19:00:17.185 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.188 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 19:00:17.189 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.189 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 19:00:17.189 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.190 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 19:00:17.190 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.193 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 19:00:17.193 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.193 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 19:00:17.193 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.194 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 19:00:17.194 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.196 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 19:00:17.197 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.197 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 19:00:17.197 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.197 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 19:00:17.198 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.200 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 19:00:17.201 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.201 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 19:00:17.201 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.201 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 19:00:17.202 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.205 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 19:00:17.206 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.206 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 19:00:17.206 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.206 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 19:00:17.207 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.210 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 19:00:17.210 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.210 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 19:00:17.210 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.211 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 19:00:17.211 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.214 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 19:00:17.214 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.214 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 19:00:17.214 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.215 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 19:00:17.215 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.217 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 19:00:17.218 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.218 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 19:00:17.218 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.218 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 19:00:17.219 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.223 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 19:00:17.223 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.223 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 19:00:17.224 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.224 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 19:00:17.225 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.227 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 19:00:17.227 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.227 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 19:00:17.228 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.228 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 19:00:17.228 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.231 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 19:00:17.231 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.231 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 19:00:17.231 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.232 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 19:00:17.232 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.235 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 19:00:17.236 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.236 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 19:00:17.236 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.236 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 19:00:17.237 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.241 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 19:00:17.241 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.241 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 19:00:17.241 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.242 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 19:00:17.242 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.245 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 19:00:17.245 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.245 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 19:00:17.245 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.246 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 19:00:17.246 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.249 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 19:00:17.249 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.249 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 19:00:17.250 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.250 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 19:00:17.250 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.254 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 19:00:17.254 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.254 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 19:00:17.254 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.254 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 19:00:17.255 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.257 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 19:00:17.258 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.258 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 19:00:17.258 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.259 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 19:00:17.259 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.263 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 19:00:17.264 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.264 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 19:00:17.265 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.265 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 19:00:17.266 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.269 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 19:00:17.271 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.272 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 19:00:17.272 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.273 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 19:00:17.274 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.277 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 19:00:17.278 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.278 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 19:00:17.278 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.279 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 19:00:17.280 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.285 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 19:00:17.285 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.285 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 19:00:17.285 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.286 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 19:00:17.286 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.289 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 19:00:17.290 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.290 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 19:00:17.290 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.291 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 19:00:17.291 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.293 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 19:00:17.294 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.294 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 19:00:17.294 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.294 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 19:00:17.295 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.298 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 19:00:17.298 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.298 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 19:00:17.298 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.299 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 19:00:17.299 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.303 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 19:00:17.304 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.304 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 19:00:17.305 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.305 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 19:00:17.307 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.310 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 19:00:17.311 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.311 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 19:00:17.311 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.312 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 19:00:17.313 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.317 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 19:00:17.317 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.317 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 19:00:17.318 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.318 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 19:00:17.318 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.325 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 19:00:17.325 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.326 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 19:00:17.326 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.326 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 19:00:17.327 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.330 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 19:00:17.331 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.331 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 19:00:17.331 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.332 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 19:00:17.332 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.335 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 19:00:17.335 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.336 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 19:00:17.336 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.336 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 19:00:17.337 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.340 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 19:00:17.341 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.341 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 19:00:17.342 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.342 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 19:00:17.342 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.345 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 19:00:17.345 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.345 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 19:00:17.345 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.346 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 19:00:17.346 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.348 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 19:00:17.349 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.349 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 19:00:17.349 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.350 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 19:00:17.350 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.353 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 19:00:17.353 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.354 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 19:00:17.354 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.354 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 19:00:17.354 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.357 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 19:00:17.358 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.358 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 19:00:17.358 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.358 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 19:00:17.359 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.361 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 19:00:17.362 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.362 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 19:00:17.362 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.362 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 19:00:17.363 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.365 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 19:00:17.365 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.366 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 19:00:17.366 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.366 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 19:00:17.366 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.369 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 19:00:17.369 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.369 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 19:00:17.369 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.370 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 19:00:17.370 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.374 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 19:00:17.374 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.374 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 19:00:17.375 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.375 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 19:00:17.376 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.378 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 19:00:17.378 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.379 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 19:00:17.379 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.379 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 19:00:17.380 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.383 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 19:00:17.383 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.383 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 19:00:17.383 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.383 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 19:00:17.384 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.387 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 19:00:17.388 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.388 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 19:00:17.388 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.389 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 19:00:17.389 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.392 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 19:00:17.393 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.393 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 19:00:17.393 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.393 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 19:00:17.394 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.396 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 19:00:17.397 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.397 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 19:00:17.397 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.398 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 19:00:17.398 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.401 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 19:00:17.402 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.402 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 19:00:17.402 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.402 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 19:00:17.403 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.407 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 19:00:17.408 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.408 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 19:00:17.408 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.408 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 19:00:17.409 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.411 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 19:00:17.412 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.412 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 19:00:17.412 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.413 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 19:00:17.413 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.425 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 19:00:17.425 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.426 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 19:00:17.426 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.426 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 19:00:17.427 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.431 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 19:00:17.431 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.431 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 19:00:17.431 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.432 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 19:00:17.432 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.435 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 19:00:17.436 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.436 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 19:00:17.436 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.437 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 19:00:17.437 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.440 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 19:00:17.440 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.441 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 19:00:17.441 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.441 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 19:00:17.442 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.444 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 19:00:17.444 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.445 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 19:00:17.445 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.445 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 19:00:17.446 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.448 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 19:00:17.448 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.449 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 19:00:17.449 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.449 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 19:00:17.450 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.452 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 19:00:17.452 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.453 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 19:00:17.453 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.453 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 19:00:17.455 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.458 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 19:00:17.459 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.460 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 19:00:17.460 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.461 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 19:00:17.462 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.467 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 19:00:17.468 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.468 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 19:00:17.468 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.469 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 19:00:17.471 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.475 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 19:00:17.476 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.477 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 19:00:17.477 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.477 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 19:00:17.478 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.480 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 19:00:17.481 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.481 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 19:00:17.481 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.482 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 19:00:17.482 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.484 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 19:00:17.485 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.485 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 19:00:17.485 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.485 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 19:00:17.486 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.490 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 19:00:17.491 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.491 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 19:00:17.491 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.491 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 19:00:17.492 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.494 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 19:00:17.494 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.494 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 19:00:17.495 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.495 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 19:00:17.495 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.498 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 19:00:17.498 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.498 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 19:00:17.498 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.499 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 19:00:17.499 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.502 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 19:00:17.503 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.503 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 19:00:17.504 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.504 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 19:00:17.506 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.510 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 19:00:17.511 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.511 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 19:00:17.511 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.512 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 19:00:17.512 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.515 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 19:00:17.515 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.516 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 19:00:17.516 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.516 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 19:00:17.516 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.519 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 19:00:17.519 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.519 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 19:00:17.519 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.520 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 19:00:17.520 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.523 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 19:00:17.523 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.523 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 19:00:17.524 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.524 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 19:00:17.524 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.527 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 19:00:17.527 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.528 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 19:00:17.528 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.528 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 19:00:17.529 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.531 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 19:00:17.532 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.532 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 19:00:17.532 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.532 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 19:00:17.533 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.536 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 19:00:17.536 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.536 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 19:00:17.537 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.537 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 19:00:17.538 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.540 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 19:00:17.541 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.541 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 19:00:17.541 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.541 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 19:00:17.542 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.544 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 19:00:17.545 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.545 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 19:00:17.545 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.545 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 19:00:17.546 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.548 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 19:00:17.549 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.549 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 19:00:17.549 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.549 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 19:00:17.550 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.552 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 19:00:17.552 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.553 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 19:00:17.553 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.553 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 19:00:17.554 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.557 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 19:00:17.557 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.557 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 19:00:17.558 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.558 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 19:00:17.558 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.561 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 19:00:17.561 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.561 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 19:00:17.561 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.562 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 19:00:17.562 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.564 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 19:00:17.565 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.565 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 19:00:17.565 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.565 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 19:00:17.566 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.568 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 19:00:17.568 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.569 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 19:00:17.569 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.569 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 19:00:17.570 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.572 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 19:00:17.572 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.572 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 19:00:17.572 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.573 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 19:00:17.573 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.575 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 19:00:17.575 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.575 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 19:00:17.576 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.576 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 19:00:17.577 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.581 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 19:00:17.581 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.581 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 19:00:17.581 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.582 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 19:00:17.582 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.585 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 19:00:17.585 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.585 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 19:00:17.585 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.586 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 19:00:17.586 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.590 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 19:00:17.590 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.590 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 19:00:17.590 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.591 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 19:00:17.591 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.594 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 19:00:17.595 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.595 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 19:00:17.595 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.596 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 19:00:17.596 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.600 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 19:00:17.601 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.601 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 19:00:17.601 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.602 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 19:00:17.602 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.606 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 19:00:17.606 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.606 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 19:00:17.607 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.607 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 19:00:17.608 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.610 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 19:00:17.610 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.610 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 19:00:17.611 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.611 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 19:00:17.611 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.614 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 19:00:17.614 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.614 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 19:00:17.614 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.615 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 19:00:17.615 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.617 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 19:00:17.618 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.618 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 19:00:17.618 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.619 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 19:00:17.619 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.622 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 19:00:17.622 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.623 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 19:00:17.623 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.623 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 19:00:17.624 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.626 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 19:00:17.626 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.626 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 19:00:17.627 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.627 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 19:00:17.627 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.630 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 19:00:17.630 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.630 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 19:00:17.630 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.631 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 19:00:17.631 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.633 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 19:00:17.634 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.634 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 19:00:17.634 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.634 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 19:00:17.635 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.637 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 19:00:17.638 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.638 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 19:00:17.638 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.638 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 19:00:17.639 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.642 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 19:00:17.642 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.642 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 19:00:17.642 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.643 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 19:00:17.643 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.645 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 19:00:17.645 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.646 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 19:00:17.646 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.646 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 19:00:17.647 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.649 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 19:00:17.649 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.649 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 19:00:17.650 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.650 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 19:00:17.650 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.653 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 19:00:17.653 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.653 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 19:00:17.654 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.654 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 19:00:17.655 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.657 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 19:00:17.657 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.657 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 19:00:17.658 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.658 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 19:00:17.659 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.661 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 19:00:17.662 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.662 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 19:00:17.662 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.662 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 19:00:17.663 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.666 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 19:00:17.667 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.667 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 19:00:17.667 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.668 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 19:00:17.668 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.673 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 19:00:17.674 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.674 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 19:00:17.674 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.675 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 19:00:17.675 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.681 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 19:00:17.682 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.682 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 19:00:17.682 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.683 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 19:00:17.683 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.686 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 19:00:17.687 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.687 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 19:00:17.687 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.688 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 19:00:17.688 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.691 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 19:00:17.692 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.692 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 19:00:17.692 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.692 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 19:00:17.693 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.696 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 19:00:17.696 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.696 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 19:00:17.697 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.697 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 19:00:17.697 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.701 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 19:00:17.701 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.701 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 19:00:17.701 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.701 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 19:00:17.702 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.706 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 19:00:17.707 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.707 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 19:00:17.707 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.708 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 19:00:17.708 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.711 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 19:00:17.711 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.711 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 19:00:17.711 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.712 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 19:00:17.712 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.716 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 19:00:17.716 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.716 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 19:00:17.717 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.717 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 19:00:17.717 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.719 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 19:00:17.720 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.720 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 19:00:17.720 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.721 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 19:00:17.721 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.724 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 19:00:17.725 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.725 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 19:00:17.725 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.725 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 19:00:17.726 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.729 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 19:00:17.729 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.729 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 19:00:17.729 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.730 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 19:00:17.730 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.734 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 19:00:17.735 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.735 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 19:00:17.735 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.735 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 19:00:17.736 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.740 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 19:00:17.741 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.741 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 19:00:17.741 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.742 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 19:00:17.742 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.745 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 19:00:17.745 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.746 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 19:00:17.746 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.746 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 19:00:17.747 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.749 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 19:00:17.750 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.750 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 19:00:17.750 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.750 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 19:00:17.751 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.754 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 19:00:17.754 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.754 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 19:00:17.755 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.755 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 19:00:17.756 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.758 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 19:00:17.759 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.759 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 19:00:17.759 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.760 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 19:00:17.760 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.762 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 19:00:17.763 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.763 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 19:00:17.763 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.764 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 19:00:17.764 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.766 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 19:00:17.767 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.767 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 19:00:17.767 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.767 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 19:00:17.768 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.771 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 19:00:17.772 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.772 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 19:00:17.772 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.773 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 19:00:17.773 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.775 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 19:00:17.776 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.776 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 19:00:17.776 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.776 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 19:00:17.777 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.779 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 19:00:17.779 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.780 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 19:00:17.780 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.780 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 19:00:17.781 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.783 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 19:00:17.784 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.784 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 19:00:17.784 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.784 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 19:00:17.785 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.787 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 19:00:17.787 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.787 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 19:00:17.788 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.788 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 19:00:17.788 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.792 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 19:00:17.792 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.792 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 19:00:17.793 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1069, '2022-11-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.793 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (217,1,7,false),(217,2,28,false),(217,3,62,false),(217,4,63,false),(217,5,64,false),(217,6,10,true)
	        
2025-04-19 19:00:17.793 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.796 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 19:00:17.796 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.797 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 19:00:17.797 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1070, '2022-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.798 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (218,1,1,false),(218,2,6,false),(218,3,40,false),(218,4,51,false),(218,5,67,false),(218,6,2,true)
	        
2025-04-19 19:00:17.798 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.801 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 19:00:17.801 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.801 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 19:00:17.801 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1071, '2023-11-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.802 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (219,1,1,false),(219,2,2,false),(219,3,31,false),(219,4,39,false),(219,5,66,false),(219,6,25,true)
	        
2025-04-19 19:00:17.802 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.807 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 19:00:17.807 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.807 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 19:00:17.808 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1072, '2022-11-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.808 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (220,1,15,false),(220,2,30,false),(220,3,47,false),(220,4,50,false),(220,5,51,false),(220,6,3,true)
	        
2025-04-19 19:00:17.809 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.811 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 19:00:17.811 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.812 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 19:00:17.812 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1073, '2022-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.812 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (221,1,29,false),(221,2,30,false),(221,3,32,false),(221,4,48,false),(221,5,50,false),(221,6,20,true)
	        
2025-04-19 19:00:17.813 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.815 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 19:00:17.816 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.816 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 19:00:17.816 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1074, '2022-11-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.816 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (222,1,4,false),(222,2,19,false),(222,3,24,false),(222,4,47,false),(222,5,66,false),(222,6,10,true)
	        
2025-04-19 19:00:17.817 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.819 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 19:00:17.820 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.820 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 19:00:17.820 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1075, '2022-12-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.821 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (223,1,6,false),(223,2,13,false),(223,3,33,false),(223,4,36,false),(223,5,37,false),(223,6,7,true)
	        
2025-04-19 19:00:17.822 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.825 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 19:00:17.825 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.825 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 19:00:17.826 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1076, '2022-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.826 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (224,1,35,false),(224,2,45,false),(224,3,47,false),(224,4,54,false),(224,5,55,false),(224,6,14,true)
	        
2025-04-19 19:00:17.827 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.829 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 19:00:17.829 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.829 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 19:00:17.830 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1077, '2022-12-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.830 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (225,1,6,false),(225,2,28,false),(225,3,44,false),(225,4,59,false),(225,5,61,false),(225,6,21,true)
	        
2025-04-19 19:00:17.831 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.833 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 19:00:17.833 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.833 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 19:00:17.834 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1078, '2022-12-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.834 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (226,1,9,false),(226,2,23,false),(226,3,47,false),(226,4,59,false),(226,5,61,false),(226,6,21,true)
	        
2025-04-19 19:00:17.834 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.837 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 19:00:17.837 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.838 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 19:00:17.838 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1079, '2022-12-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.838 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (227,1,16,false),(227,2,31,false),(227,3,50,false),(227,4,55,false),(227,5,61,false),(227,6,9,true)
	        
2025-04-19 19:00:17.839 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.841 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 19:00:17.841 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.842 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 19:00:17.842 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1080, '2022-12-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.842 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (228,1,36,false),(228,2,51,false),(228,3,59,false),(228,4,66,false),(228,5,68,false),(228,6,25,true)
	        
2025-04-19 19:00:17.842 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.845 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 19:00:17.845 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.845 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 19:00:17.846 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1081, '2022-12-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.846 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (229,1,33,false),(229,2,56,false),(229,3,64,false),(229,4,66,false),(229,5,68,false),(229,6,12,true)
	        
2025-04-19 19:00:17.846 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.849 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 19:00:17.849 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.849 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 19:00:17.849 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1082, '2022-12-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.850 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (230,1,7,false),(230,2,37,false),(230,3,55,false),(230,4,65,false),(230,5,67,false),(230,6,12,true)
	        
2025-04-19 19:00:17.850 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.852 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 19:00:17.853 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.854 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 19:00:17.854 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1083, '2022-12-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.855 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (231,1,12,false),(231,2,15,false),(231,3,24,false),(231,4,34,false),(231,5,59,false),(231,6,14,true)
	        
2025-04-19 19:00:17.855 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.858 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 19:00:17.859 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.859 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 19:00:17.859 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1084, '2022-12-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.859 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (232,1,17,false),(232,2,37,false),(232,3,46,false),(232,4,54,false),(232,5,67,false),(232,6,8,true)
	        
2025-04-19 19:00:17.860 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.863 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 19:00:17.864 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.864 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 19:00:17.864 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1085, '2022-12-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.865 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (233,1,17,false),(233,2,41,false),(233,3,47,false),(233,4,60,false),(233,5,61,false),(233,6,17,true)
	        
2025-04-19 19:00:17.865 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.868 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 19:00:17.868 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.869 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 19:00:17.869 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1086, '2022-12-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.869 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (234,1,26,false),(234,2,32,false),(234,3,38,false),(234,4,45,false),(234,5,56,false),(234,6,1,true)
	        
2025-04-19 19:00:17.870 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.873 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 19:00:17.873 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.873 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 19:00:17.873 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1087, '2022-12-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.874 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (235,1,18,false),(235,2,37,false),(235,3,44,false),(235,4,50,false),(235,5,64,false),(235,6,11,true)
	        
2025-04-19 19:00:17.874 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.877 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 19:00:17.877 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.877 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 19:00:17.877 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1088, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.878 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (236,1,7,false),(236,2,9,false),(236,3,12,false),(236,4,31,false),(236,5,62,false),(236,6,22,true)
	        
2025-04-19 19:00:17.878 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.881 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 19:00:17.881 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.882 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 19:00:17.882 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1089, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.882 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (237,1,12,false),(237,2,32,false),(237,3,56,false),(237,4,67,false),(237,5,68,false),(237,6,26,true)
	        
2025-04-19 19:00:17.882 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.885 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 19:00:17.885 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.885 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 19:00:17.885 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1090, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.886 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (238,1,35,false),(238,2,36,false),(238,3,44,false),(238,4,45,false),(238,5,67,false),(238,6,14,true)
	        
2025-04-19 19:00:17.886 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.889 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 19:00:17.890 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.890 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 19:00:17.890 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1091, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.890 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (239,1,18,false),(239,2,43,false),(239,3,48,false),(239,4,60,false),(239,5,69,false),(239,6,14,true)
	        
2025-04-19 19:00:17.891 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.893 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 19:00:17.894 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.894 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 19:00:17.894 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1092, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.895 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (240,1,4,false),(240,2,8,false),(240,3,46,false),(240,4,47,false),(240,5,48,false),(240,6,5,true)
	        
2025-04-19 19:00:17.895 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.898 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 19:00:17.899 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.899 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 19:00:17.899 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1093, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.899 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (241,1,24,false),(241,2,26,false),(241,3,39,false),(241,4,47,false),(241,5,57,false),(241,6,23,true)
	        
2025-04-19 19:00:17.900 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.902 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 19:00:17.902 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.903 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 19:00:17.903 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1094, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.903 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (242,1,4,false),(242,2,14,false),(242,3,33,false),(242,4,39,false),(242,5,61,false),(242,6,3,true)
	        
2025-04-19 19:00:17.904 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.907 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 19:00:17.907 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.907 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 19:00:17.908 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1095, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.908 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (243,1,6,false),(243,2,15,false),(243,3,22,false),(243,4,42,false),(243,5,47,false),(243,6,26,true)
	        
2025-04-19 19:00:17.908 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.911 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 19:00:17.911 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.911 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 19:00:17.911 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1096, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.912 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (244,1,5,false),(244,2,14,false),(244,3,19,false),(244,4,46,false),(244,5,64,false),(244,6,22,true)
	        
2025-04-19 19:00:17.912 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.915 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 19:00:17.915 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.915 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 19:00:17.915 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1097, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.916 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (245,1,12,false),(245,2,31,false),(245,3,47,false),(245,4,58,false),(245,5,60,false),(245,6,23,true)
	        
2025-04-19 19:00:17.916 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.918 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 19:00:17.918 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.919 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 19:00:17.919 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1098, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.919 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (246,1,9,false),(246,2,17,false),(246,3,20,false),(246,4,38,false),(246,5,40,false),(246,6,18,true)
	        
2025-04-19 19:00:17.920 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.923 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 19:00:17.924 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.924 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 19:00:17.924 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1099, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.924 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (247,1,2,false),(247,2,18,false),(247,3,23,false),(247,4,27,false),(247,5,47,false),(247,6,15,true)
	        
2025-04-19 19:00:17.925 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.928 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 19:00:17.929 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.929 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 19:00:17.929 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1100, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.929 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (248,1,1,false),(248,2,4,false),(248,3,12,false),(248,4,36,false),(248,5,49,false),(248,6,5,true)
	        
2025-04-19 19:00:17.930 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.932 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 19:00:17.933 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.933 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 19:00:17.933 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1101, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.934 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (249,1,31,false),(249,2,43,false),(249,3,58,false),(249,4,59,false),(249,5,66,false),(249,6,9,true)
	        
2025-04-19 19:00:17.934 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.937 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 19:00:17.937 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.937 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 19:00:17.937 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1102, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.938 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (250,1,2,false),(250,2,8,false),(250,3,15,false),(250,4,19,false),(250,5,58,false),(250,6,10,true)
	        
2025-04-19 19:00:17.938 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.941 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 19:00:17.941 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.942 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 19:00:17.942 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1103, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.942 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (251,1,5,false),(251,2,11,false),(251,3,22,false),(251,4,23,false),(251,5,69,false),(251,6,7,true)
	        
2025-04-19 19:00:17.943 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.945 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 19:00:17.946 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.946 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 19:00:17.946 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1104, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.946 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (252,1,52,false),(252,2,58,false),(252,3,59,false),(252,4,64,false),(252,5,66,false),(252,6,9,true)
	        
2025-04-19 19:00:17.947 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.949 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 19:00:17.950 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.950 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 19:00:17.950 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1105, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.950 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (253,1,10,false),(253,2,23,false),(253,3,30,false),(253,4,54,false),(253,5,65,false),(253,6,11,true)
	        
2025-04-19 19:00:17.951 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.954 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 19:00:17.954 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.955 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 19:00:17.955 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1106, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.956 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (254,1,17,false),(254,2,26,false),(254,3,37,false),(254,4,61,false),(254,5,65,false),(254,6,2,true)
	        
2025-04-19 19:00:17.956 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.960 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 19:00:17.960 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.960 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 19:00:17.960 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1107, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.961 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (255,1,31,false),(255,2,32,false),(255,3,54,false),(255,4,60,false),(255,5,63,false),(255,6,12,true)
	        
2025-04-19 19:00:17.961 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.963 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 19:00:17.964 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.964 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 19:00:17.964 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1108, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.964 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (256,1,8,false),(256,2,21,false),(256,3,31,false),(256,4,32,false),(256,5,37,false),(256,6,23,true)
	        
2025-04-19 19:00:17.965 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.967 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 19:00:17.967 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.967 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 19:00:17.967 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1109, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.968 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (257,1,3,false),(257,2,17,false),(257,3,26,false),(257,4,38,false),(257,5,54,false),(257,6,15,true)
	        
2025-04-19 19:00:17.968 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.973 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 19:00:17.974 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.974 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 19:00:17.974 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1110, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.975 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (258,1,11,false),(258,2,18,false),(258,3,39,false),(258,4,44,false),(258,5,65,false),(258,6,7,true)
	        
2025-04-19 19:00:17.975 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.978 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 19:00:17.978 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.978 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 19:00:17.978 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1111, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.979 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (259,1,11,false),(259,2,24,false),(259,3,58,false),(259,4,66,false),(259,5,67,false),(259,6,26,true)
	        
2025-04-19 19:00:17.979 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.982 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 19:00:17.982 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.982 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 19:00:17.983 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1112, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.983 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (260,1,16,false),(260,2,28,false),(260,3,49,false),(260,4,51,false),(260,5,55,false),(260,6,23,true)
	        
2025-04-19 19:00:17.983 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.986 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 19:00:17.986 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.986 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 19:00:17.987 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1113, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.988 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (261,1,2,false),(261,2,9,false),(261,3,28,false),(261,4,36,false),(261,5,53,false),(261,6,4,true)
	        
2025-04-19 19:00:17.988 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.991 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 19:00:17.991 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.992 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 19:00:17.992 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1114, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.992 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (262,1,10,false),(262,2,16,false),(262,3,18,false),(262,4,40,false),(262,5,66,false),(262,6,16,true)
	        
2025-04-19 19:00:17.993 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:17.996 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 19:00:17.997 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:17.997 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 19:00:17.997 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1115, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:17.998 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (263,1,2,false),(263,2,13,false),(263,3,29,false),(263,4,58,false),(263,5,69,false),(263,6,4,true)
	        
2025-04-19 19:00:17.998 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.001 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 19:00:18.001 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.001 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 19:00:18.001 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1116, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.002 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (264,1,26,false),(264,2,27,false),(264,3,43,false),(264,4,61,false),(264,5,69,false),(264,6,4,true)
	        
2025-04-19 19:00:18.002 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.006 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 19:00:18.006 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.006 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 19:00:18.006 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1117, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.007 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (265,1,11,false),(265,2,20,false),(265,3,33,false),(265,4,43,false),(265,5,58,false),(265,6,24,true)
	        
2025-04-19 19:00:18.007 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.010 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 19:00:18.011 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.011 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 19:00:18.011 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1118, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.011 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (266,1,3,false),(266,2,10,false),(266,3,24,false),(266,4,46,false),(266,5,63,false),(266,6,4,true)
	        
2025-04-19 19:00:18.012 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.015 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 19:00:18.015 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.015 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 19:00:18.015 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1119, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.016 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (267,1,16,false),(267,2,18,false),(267,3,33,false),(267,4,37,false),(267,5,50,false),(267,6,8,true)
	        
2025-04-19 19:00:18.016 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.019 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 19:00:18.019 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.019 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 19:00:18.020 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1120, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.020 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (268,1,14,false),(268,2,29,false),(268,3,30,false),(268,4,54,false),(268,5,69,false),(268,6,11,true)
	        
2025-04-19 19:00:18.021 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.023 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 19:00:18.024 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.024 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 19:00:18.024 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1121, '2023-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.025 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (269,1,1,false),(269,2,27,false),(269,3,32,false),(269,4,47,false),(269,5,67,false),(269,6,14,true)
	        
2025-04-19 19:00:18.025 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.027 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 19:00:18.028 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.028 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 19:00:18.028 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1122, '2023-03-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.029 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (270,1,27,false),(270,2,28,false),(270,3,37,false),(270,4,50,false),(270,5,57,false),(270,6,5,true)
	        
2025-04-19 19:00:18.029 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.033 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 19:00:18.033 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.033 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 19:00:18.033 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1123, '2023-03-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.034 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (271,1,15,false),(271,2,17,false),(271,3,18,false),(271,4,47,false),(271,5,57,false),(271,6,19,true)
	        
2025-04-19 19:00:18.034 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.036 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 19:00:18.037 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.037 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 19:00:18.037 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1124, '2023-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.038 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (272,1,19,false),(272,2,26,false),(272,3,36,false),(272,4,43,false),(272,5,58,false),(272,6,14,true)
	        
2025-04-19 19:00:18.038 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.041 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 19:00:18.041 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.041 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 19:00:18.041 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1125, '2023-03-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.042 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (273,1,4,false),(273,2,9,false),(273,3,24,false),(273,4,46,false),(273,5,66,false),(273,6,7,true)
	        
2025-04-19 19:00:18.042 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.044 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 19:00:18.045 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.045 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 19:00:18.045 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1126, '2023-04-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.045 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (274,1,11,false),(274,2,19,false),(274,3,21,false),(274,4,29,false),(274,5,52,false),(274,6,17,true)
	        
2025-04-19 19:00:18.046 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.049 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 19:00:18.049 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.050 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 19:00:18.050 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1127, '2023-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.050 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (275,1,16,false),(275,2,30,false),(275,3,31,false),(275,4,54,false),(275,5,68,false),(275,6,1,true)
	        
2025-04-19 19:00:18.050 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.053 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 19:00:18.054 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.055 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 19:00:18.055 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1128, '2023-04-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.056 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (276,1,3,false),(276,2,5,false),(276,3,9,false),(276,4,42,false),(276,5,52,false),(276,6,11,true)
	        
2025-04-19 19:00:18.057 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.060 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 19:00:18.061 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.061 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 19:00:18.061 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1129, '2023-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.062 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (277,1,11,false),(277,2,22,false),(277,3,24,false),(277,4,51,false),(277,5,60,false),(277,6,18,true)
	        
2025-04-19 19:00:18.062 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.065 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 19:00:18.066 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.066 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 19:00:18.066 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1130, '2023-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.066 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (278,1,9,false),(278,2,10,false),(278,3,36,false),(278,4,46,false),(278,5,52,false),(278,6,14,true)
	        
2025-04-19 19:00:18.067 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.070 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 19:00:18.070 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.071 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 19:00:18.071 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1131, '2023-04-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.071 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (279,1,9,false),(279,2,36,false),(279,3,41,false),(279,4,44,false),(279,5,59,false),(279,6,4,true)
	        
2025-04-19 19:00:18.072 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.074 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 19:00:18.075 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.075 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 19:00:18.075 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1132, '2023-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.075 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (280,1,1,false),(280,2,33,false),(280,3,34,false),(280,4,56,false),(280,5,59,false),(280,6,18,true)
	        
2025-04-19 19:00:18.076 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.078 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 19:00:18.079 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.079 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 19:00:18.079 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1133, '2023-04-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.079 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (281,1,23,false),(281,2,25,false),(281,3,35,false),(281,4,63,false),(281,5,64,false),(281,6,25,true)
	        
2025-04-19 19:00:18.080 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.083 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 19:00:18.083 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.084 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 19:00:18.084 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1134, '2023-04-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.084 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (282,1,4,false),(282,2,11,false),(282,3,21,false),(282,4,38,false),(282,5,64,false),(282,6,11,true)
	        
2025-04-19 19:00:18.085 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.089 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 19:00:18.090 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.090 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 19:00:18.090 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1135, '2023-04-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.091 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (283,1,17,false),(283,2,36,false),(283,3,47,false),(283,4,63,false),(283,5,68,false),(283,6,25,true)
	        
2025-04-19 19:00:18.091 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.093 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 19:00:18.094 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.094 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 19:00:18.094 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1136, '2023-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.095 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (284,1,19,false),(284,2,21,false),(284,3,55,false),(284,4,66,false),(284,5,68,false),(284,6,3,true)
	        
2025-04-19 19:00:18.095 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.098 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 19:00:18.098 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.098 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 19:00:18.098 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1137, '2023-04-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.099 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (285,1,2,false),(285,2,15,false),(285,3,30,false),(285,4,35,false),(285,5,49,false),(285,6,6,true)
	        
2025-04-19 19:00:18.099 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.101 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 19:00:18.101 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.101 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 19:00:18.101 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1138, '2023-04-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.102 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (286,1,16,false),(286,2,53,false),(286,3,54,false),(286,4,57,false),(286,5,65,false),(286,6,8,true)
	        
2025-04-19 19:00:18.102 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.105 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 19:00:18.106 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.106 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 19:00:18.106 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1139, '2023-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.107 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (287,1,3,false),(287,2,38,false),(287,3,55,false),(287,4,61,false),(287,5,66,false),(287,6,1,true)
	        
2025-04-19 19:00:18.107 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.109 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 19:00:18.110 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.110 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 19:00:18.110 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1140, '2023-05-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.111 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (288,1,21,false),(288,2,26,false),(288,3,30,false),(288,4,45,false),(288,5,47,false),(288,6,23,true)
	        
2025-04-19 19:00:18.111 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.113 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 19:00:18.114 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.114 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 19:00:18.114 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1141, '2023-05-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.114 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (289,1,31,false),(289,2,39,false),(289,3,47,false),(289,4,51,false),(289,5,53,false),(289,6,6,true)
	        
2025-04-19 19:00:18.115 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.117 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 19:00:18.118 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.118 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 19:00:18.118 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1142, '2023-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.119 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (290,1,15,false),(290,2,20,false),(290,3,33,false),(290,4,36,false),(290,5,43,false),(290,6,12,true)
	        
2025-04-19 19:00:18.119 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.122 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 19:00:18.123 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.123 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 19:00:18.123 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1143, '2023-05-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.124 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (291,1,21,false),(291,2,24,false),(291,3,33,false),(291,4,55,false),(291,5,69,false),(291,6,3,true)
	        
2025-04-19 19:00:18.125 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.128 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 19:00:18.128 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.128 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 19:00:18.129 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1144, '2023-05-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.129 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (292,1,3,false),(292,2,15,false),(292,3,20,false),(292,4,23,false),(292,5,46,false),(292,6,11,true)
	        
2025-04-19 19:00:18.130 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.132 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 19:00:18.133 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.133 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 19:00:18.133 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1145, '2023-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.133 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (293,1,1,false),(293,2,26,false),(293,3,28,false),(293,4,55,false),(293,5,58,false),(293,6,25,true)
	        
2025-04-19 19:00:18.134 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.136 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 19:00:18.137 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.137 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 19:00:18.137 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1146, '2023-05-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.138 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (294,1,18,false),(294,2,34,false),(294,3,37,false),(294,4,45,false),(294,5,51,false),(294,6,14,true)
	        
2025-04-19 19:00:18.138 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.141 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 19:00:18.141 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.141 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 19:00:18.141 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1147, '2023-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.142 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (295,1,17,false),(295,2,23,false),(295,3,32,false),(295,4,38,false),(295,5,63,false),(295,6,23,true)
	        
2025-04-19 19:00:18.142 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.145 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 19:00:18.145 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.145 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 19:00:18.145 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1148, '2023-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.146 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (296,1,9,false),(296,2,38,false),(296,3,48,false),(296,4,52,false),(296,5,68,false),(296,6,25,true)
	        
2025-04-19 19:00:18.146 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.148 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 19:00:18.149 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.149 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 19:00:18.149 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1149, '2023-05-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.150 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (297,1,12,false),(297,2,21,false),(297,3,44,false),(297,4,50,false),(297,5,58,false),(297,6,26,true)
	        
2025-04-19 19:00:18.150 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.152 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 19:00:18.153 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.153 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 19:00:18.153 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1150, '2023-05-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.153 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (298,1,24,false),(298,2,38,false),(298,3,39,false),(298,4,48,false),(298,5,56,false),(298,6,4,true)
	        
2025-04-19 19:00:18.154 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.156 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 19:00:18.157 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.157 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 19:00:18.157 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1151, '2023-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.157 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (299,1,21,false),(299,2,33,false),(299,3,35,false),(299,4,62,false),(299,5,64,false),(299,6,24,true)
	        
2025-04-19 19:00:18.158 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.160 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 19:00:18.160 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.160 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 19:00:18.160 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1152, '2023-05-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.161 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (300,1,2,false),(300,2,4,false),(300,3,54,false),(300,4,61,false),(300,5,62,false),(300,6,14,true)
	        
2025-04-19 19:00:18.161 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.163 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 19:00:18.164 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.164 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 19:00:18.164 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1153, '2023-06-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.164 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (301,1,15,false),(301,2,45,false),(301,3,64,false),(301,4,67,false),(301,5,68,false),(301,6,18,true)
	        
2025-04-19 19:00:18.165 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.167 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 19:00:18.167 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.167 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 19:00:18.167 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1154, '2023-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.168 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (302,1,2,false),(302,2,31,false),(302,3,45,false),(302,4,46,false),(302,5,49,false),(302,6,20,true)
	        
2025-04-19 19:00:18.168 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.172 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 19:00:18.172 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.172 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 19:00:18.172 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1155, '2023-06-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.173 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (303,1,16,false),(303,2,21,false),(303,3,29,false),(303,4,53,false),(303,5,66,false),(303,6,2,true)
	        
2025-04-19 19:00:18.173 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.176 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 19:00:18.176 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.176 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 19:00:18.176 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1156, '2023-06-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.177 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (304,1,21,false),(304,2,32,false),(304,3,42,false),(304,4,46,false),(304,5,50,false),(304,6,4,true)
	        
2025-04-19 19:00:18.177 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.179 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 19:00:18.180 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.180 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 19:00:18.180 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1157, '2023-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.180 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (305,1,2,false),(305,2,3,false),(305,3,16,false),(305,4,23,false),(305,5,68,false),(305,6,7,true)
	        
2025-04-19 19:00:18.181 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.183 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 19:00:18.183 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.184 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 19:00:18.184 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1158, '2023-06-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.184 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (306,1,3,false),(306,2,20,false),(306,3,36,false),(306,4,42,false),(306,5,64,false),(306,6,4,true)
	        
2025-04-19 19:00:18.185 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.190 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 19:00:18.191 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.191 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 19:00:18.191 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1159, '2023-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.192 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (307,1,2,false),(307,2,12,false),(307,3,45,false),(307,4,61,false),(307,5,64,false),(307,6,26,true)
	        
2025-04-19 19:00:18.192 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.197 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 19:00:18.198 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.198 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 19:00:18.198 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1160, '2023-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.199 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (308,1,36,false),(308,2,39,false),(308,3,52,false),(308,4,57,false),(308,5,69,false),(308,6,1,true)
	        
2025-04-19 19:00:18.199 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.202 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 19:00:18.203 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.204 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 19:00:18.204 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1161, '2023-06-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.205 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (309,1,5,false),(309,2,11,false),(309,3,33,false),(309,4,35,false),(309,5,63,false),(309,6,14,true)
	        
2025-04-19 19:00:18.205 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.208 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 19:00:18.209 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.209 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 19:00:18.210 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1162, '2023-06-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.210 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (310,1,2,false),(310,2,38,false),(310,3,44,false),(310,4,50,false),(310,5,62,false),(310,6,19,true)
	        
2025-04-19 19:00:18.211 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.216 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 19:00:18.216 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.217 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 19:00:18.217 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1163, '2023-06-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.218 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (311,1,6,false),(311,2,28,false),(311,3,39,false),(311,4,43,false),(311,5,54,false),(311,6,12,true)
	        
2025-04-19 19:00:18.218 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.229 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 19:00:18.230 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.230 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 19:00:18.230 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1164, '2023-06-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.244 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (312,1,19,false),(312,2,25,false),(312,3,34,false),(312,4,57,false),(312,5,68,false),(312,6,4,true)
	        
2025-04-19 19:00:18.246 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.250 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 19:00:18.251 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.252 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 19:00:18.252 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1165, '2023-07-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.253 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (313,1,4,false),(313,2,17,false),(313,3,35,false),(313,4,49,false),(313,5,61,false),(313,6,8,true)
	        
2025-04-19 19:00:18.254 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.260 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 19:00:18.260 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.260 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 19:00:18.260 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1166, '2023-07-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.261 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (314,1,15,false),(314,2,26,false),(314,3,31,false),(314,4,38,false),(314,5,61,false),(314,6,3,true)
	        
2025-04-19 19:00:18.261 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.263 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 19:00:18.264 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.264 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 19:00:18.264 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1167, '2023-07-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.265 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (315,1,17,false),(315,2,24,false),(315,3,48,false),(315,4,62,false),(315,5,68,false),(315,6,23,true)
	        
2025-04-19 19:00:18.265 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.267 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 19:00:18.268 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.268 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 19:00:18.268 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1168, '2023-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.268 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (316,1,7,false),(316,2,23,false),(316,3,24,false),(316,4,32,false),(316,5,43,false),(316,6,18,true)
	        
2025-04-19 19:00:18.269 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.274 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 19:00:18.275 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.275 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 19:00:18.275 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1169, '2023-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.276 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (317,1,2,false),(317,2,24,false),(317,3,34,false),(317,4,53,false),(317,5,58,false),(317,6,13,true)
	        
2025-04-19 19:00:18.276 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.279 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 19:00:18.279 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.280 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 19:00:18.280 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1170, '2023-07-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.281 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (318,1,23,false),(318,2,35,false),(318,3,45,false),(318,4,66,false),(318,5,67,false),(318,6,20,true)
	        
2025-04-19 19:00:18.281 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.284 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 19:00:18.284 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.285 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 19:00:18.285 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1171, '2023-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.285 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (319,1,2,false),(319,2,9,false),(319,3,43,false),(319,4,55,false),(319,5,57,false),(319,6,18,true)
	        
2025-04-19 19:00:18.287 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.294 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 19:00:18.295 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.295 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 19:00:18.295 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1172, '2023-07-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.299 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (320,1,5,false),(320,2,8,false),(320,3,9,false),(320,4,17,false),(320,5,41,false),(320,6,21,true)
	        
2025-04-19 19:00:18.300 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.302 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 19:00:18.303 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.303 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 19:00:18.303 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1173, '2023-07-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.305 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (321,1,7,false),(321,2,10,false),(321,3,11,false),(321,4,13,false),(321,5,24,false),(321,6,24,true)
	        
2025-04-19 19:00:18.305 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.308 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 19:00:18.308 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.308 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 19:00:18.309 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1174, '2023-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.309 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (322,1,25,false),(322,2,27,false),(322,3,36,false),(322,4,37,false),(322,5,63,false),(322,6,7,true)
	        
2025-04-19 19:00:18.309 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.312 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 19:00:18.312 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.312 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 19:00:18.312 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1175, '2023-07-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.313 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (323,1,3,false),(323,2,4,false),(323,3,12,false),(323,4,28,false),(323,5,49,false),(323,6,25,true)
	        
2025-04-19 19:00:18.313 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.316 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 19:00:18.316 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.316 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 19:00:18.316 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1176, '2023-07-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.317 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (324,1,3,false),(324,2,16,false),(324,3,40,false),(324,4,48,false),(324,5,60,false),(324,6,14,true)
	        
2025-04-19 19:00:18.317 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.321 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 19:00:18.322 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.322 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 19:00:18.322 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1177, '2023-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.323 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (325,1,10,false),(325,2,25,false),(325,3,27,false),(325,4,34,false),(325,5,38,false),(325,6,2,true)
	        
2025-04-19 19:00:18.323 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.327 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 19:00:18.327 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.327 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 19:00:18.327 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1178, '2023-08-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.328 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (326,1,2,false),(326,2,11,false),(326,3,48,false),(326,4,58,false),(326,5,65,false),(326,6,13,true)
	        
2025-04-19 19:00:18.328 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.331 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 19:00:18.331 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.331 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 19:00:18.331 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1179, '2023-08-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.332 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (327,1,23,false),(327,2,24,false),(327,3,33,false),(327,4,51,false),(327,5,64,false),(327,6,5,true)
	        
2025-04-19 19:00:18.332 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.335 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 19:00:18.335 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.335 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 19:00:18.335 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1180, '2023-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.336 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (328,1,18,false),(328,2,42,false),(328,3,44,false),(328,4,62,false),(328,5,65,false),(328,6,23,true)
	        
2025-04-19 19:00:18.336 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.341 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 19:00:18.342 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.342 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 19:00:18.342 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1181, '2023-08-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.342 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (329,1,6,false),(329,2,13,false),(329,3,20,false),(329,4,35,false),(329,5,54,false),(329,6,22,true)
	        
2025-04-19 19:00:18.343 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.345 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 19:00:18.346 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.347 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 19:00:18.347 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1182, '2023-08-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.348 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (330,1,10,false),(330,2,15,false),(330,3,21,false),(330,4,67,false),(330,5,69,false),(330,6,3,true)
	        
2025-04-19 19:00:18.348 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.352 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 19:00:18.352 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.353 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 19:00:18.353 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1183, '2023-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.354 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (331,1,19,false),(331,2,21,false),(331,3,37,false),(331,4,50,false),(331,5,65,false),(331,6,26,true)
	        
2025-04-19 19:00:18.355 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.359 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 19:00:18.360 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.360 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 19:00:18.361 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1184, '2023-08-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.361 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (332,1,32,false),(332,2,34,false),(332,3,37,false),(332,4,39,false),(332,5,47,false),(332,6,3,true)
	        
2025-04-19 19:00:18.362 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.365 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 19:00:18.365 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.365 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 19:00:18.365 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1186, '2023-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.366 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (333,1,1,false),(333,2,25,false),(333,3,27,false),(333,4,38,false),(333,5,62,false),(333,6,13,true)
	        
2025-04-19 19:00:18.366 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.369 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 19:00:18.369 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.369 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 19:00:18.369 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1187, '2023-08-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.370 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (334,1,3,false),(334,2,4,false),(334,3,12,false),(334,4,22,false),(334,5,28,false),(334,6,16,true)
	        
2025-04-19 19:00:18.370 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.373 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 19:00:18.374 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.374 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 19:00:18.374 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1188, '2023-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.374 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (335,1,25,false),(335,2,30,false),(335,3,32,false),(335,4,33,false),(335,5,55,false),(335,6,20,true)
	        
2025-04-19 19:00:18.375 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.377 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 19:00:18.377 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.377 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 19:00:18.378 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1189, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.378 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (336,1,20,false),(336,2,22,false),(336,3,26,false),(336,4,28,false),(336,5,63,false),(336,6,5,true)
	        
2025-04-19 19:00:18.378 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.381 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 19:00:18.382 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.382 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 19:00:18.382 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1190, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.382 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (337,1,4,false),(337,2,6,false),(337,3,25,false),(337,4,55,false),(337,5,68,false),(337,6,26,true)
	        
2025-04-19 19:00:18.383 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.386 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 19:00:18.387 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.387 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 19:00:18.387 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1191, '2023-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.388 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (338,1,4,false),(338,2,13,false),(338,3,35,false),(338,4,61,false),(338,5,69,false),(338,6,4,true)
	        
2025-04-19 19:00:18.388 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.391 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 19:00:18.391 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.392 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 19:00:18.392 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1192, '2023-09-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.392 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (339,1,25,false),(339,2,38,false),(339,3,42,false),(339,4,66,false),(339,5,67,false),(339,6,19,true)
	        
2025-04-19 19:00:18.393 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.396 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 19:00:18.396 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.397 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 19:00:18.397 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1193, '2023-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.397 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (340,1,1,false),(340,2,26,false),(340,3,32,false),(340,4,46,false),(340,5,51,false),(340,6,13,true)
	        
2025-04-19 19:00:18.398 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.400 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 19:00:18.401 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.401 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 19:00:18.401 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1194, '2023-09-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.401 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (341,1,9,false),(341,2,14,false),(341,3,20,false),(341,4,23,false),(341,5,63,false),(341,6,1,true)
	        
2025-04-19 19:00:18.402 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.405 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 19:00:18.405 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.405 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 19:00:18.405 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1195, '2023-09-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.406 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (342,1,11,false),(342,2,19,false),(342,3,29,false),(342,4,63,false),(342,5,68,false),(342,6,25,true)
	        
2025-04-19 19:00:18.406 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.410 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 19:00:18.410 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.411 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 19:00:18.411 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1196, '2023-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.411 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (343,1,9,false),(343,2,25,false),(343,3,27,false),(343,4,53,false),(343,5,66,false),(343,6,5,true)
	        
2025-04-19 19:00:18.412 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.414 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 19:00:18.415 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.415 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 19:00:18.415 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1197, '2023-09-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.416 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (344,1,22,false),(344,2,30,false),(344,3,37,false),(344,4,44,false),(344,5,45,false),(344,6,18,true)
	        
2025-04-19 19:00:18.416 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.418 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 19:00:18.419 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.419 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 19:00:18.419 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1198, '2023-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.420 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (345,1,8,false),(345,2,11,false),(345,3,19,false),(345,4,24,false),(345,5,46,false),(345,6,5,true)
	        
2025-04-19 19:00:18.420 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.423 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 19:00:18.423 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.423 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 19:00:18.423 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1199, '2023-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.424 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (346,1,2,false),(346,2,21,false),(346,3,26,false),(346,4,40,false),(346,5,42,false),(346,6,9,true)
	        
2025-04-19 19:00:18.424 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.427 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 19:00:18.427 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.427 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 19:00:18.427 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1200, '2023-09-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.428 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (347,1,16,false),(347,2,27,false),(347,3,59,false),(347,4,62,false),(347,5,63,false),(347,6,23,true)
	        
2025-04-19 19:00:18.428 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.430 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 19:00:18.431 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.431 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 19:00:18.431 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1201, '2023-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.431 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (348,1,1,false),(348,2,12,false),(348,3,20,false),(348,4,33,false),(348,5,66,false),(348,6,21,true)
	        
2025-04-19 19:00:18.432 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.434 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 19:00:18.434 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.434 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 19:00:18.435 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1202, '2023-09-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.435 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (349,1,10,false),(349,2,12,false),(349,3,22,false),(349,4,36,false),(349,5,50,false),(349,6,4,true)
	        
2025-04-19 19:00:18.435 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.437 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 19:00:18.438 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.438 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 19:00:18.438 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1203, '2023-09-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.438 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (350,1,1,false),(350,2,7,false),(350,3,46,false),(350,4,47,false),(350,5,63,false),(350,6,7,true)
	        
2025-04-19 19:00:18.439 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.443 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 19:00:18.443 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.444 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 19:00:18.444 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1204, '2023-09-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.444 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (351,1,19,false),(351,2,30,false),(351,3,37,false),(351,4,44,false),(351,5,46,false),(351,6,22,true)
	        
2025-04-19 19:00:18.445 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.448 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 19:00:18.449 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.449 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 19:00:18.449 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1205, '2023-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.450 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (352,1,12,false),(352,2,26,false),(352,3,27,false),(352,4,43,false),(352,5,47,false),(352,6,5,true)
	        
2025-04-19 19:00:18.451 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.455 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 19:00:18.456 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.456 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 19:00:18.456 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1206, '2023-10-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.457 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (353,1,9,false),(353,2,35,false),(353,3,54,false),(353,4,63,false),(353,5,64,false),(353,6,1,true)
	        
2025-04-19 19:00:18.457 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.460 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 19:00:18.460 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.460 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 19:00:18.460 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1207, '2023-10-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.461 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (354,1,47,false),(354,2,54,false),(354,3,57,false),(354,4,60,false),(354,5,65,false),(354,6,19,true)
	        
2025-04-19 19:00:18.461 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.464 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 19:00:18.465 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.465 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 19:00:18.465 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1208, '2023-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.466 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (355,1,16,false),(355,2,34,false),(355,3,46,false),(355,4,55,false),(355,5,67,false),(355,6,14,true)
	        
2025-04-19 19:00:18.466 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.469 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 19:00:18.470 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.471 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 19:00:18.471 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1209, '2023-10-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.471 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (356,1,22,false),(356,2,24,false),(356,3,40,false),(356,4,52,false),(356,5,64,false),(356,6,10,true)
	        
2025-04-19 19:00:18.472 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.475 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 19:00:18.475 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.475 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 19:00:18.476 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1210, '2023-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.476 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (357,1,14,false),(357,2,16,false),(357,3,42,false),(357,4,48,false),(357,5,64,false),(357,6,14,true)
	        
2025-04-19 19:00:18.477 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.480 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 19:00:18.481 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.481 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 19:00:18.481 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1211, '2023-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.482 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (358,1,2,false),(358,2,27,false),(358,3,31,false),(358,4,44,false),(358,5,64,false),(358,6,18,true)
	        
2025-04-19 19:00:18.482 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.485 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 19:00:18.485 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.485 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 19:00:18.486 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1212, '2023-10-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.486 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (359,1,1,false),(359,2,4,false),(359,3,13,false),(359,4,35,false),(359,5,58,false),(359,6,24,true)
	        
2025-04-19 19:00:18.486 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.490 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 19:00:18.490 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.490 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 19:00:18.490 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1213, '2023-10-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.491 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (360,1,6,false),(360,2,15,false),(360,3,24,false),(360,4,67,false),(360,5,68,false),(360,6,11,true)
	        
2025-04-19 19:00:18.491 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.493 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 19:00:18.494 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.494 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 19:00:18.494 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1214, '2023-10-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.494 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (361,1,18,false),(361,2,21,false),(361,3,25,false),(361,4,46,false),(361,5,64,false),(361,6,21,true)
	        
2025-04-19 19:00:18.495 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.498 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 19:00:18.498 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.498 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 19:00:18.498 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1215, '2023-10-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.499 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (362,1,24,false),(362,2,27,false),(362,3,41,false),(362,4,53,false),(362,5,68,false),(362,6,2,true)
	        
2025-04-19 19:00:18.500 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.503 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 19:00:18.503 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.503 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 19:00:18.503 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1216, '2023-10-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.504 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (363,1,14,false),(363,2,24,false),(363,3,50,false),(363,4,59,false),(363,5,64,false),(363,6,2,true)
	        
2025-04-19 19:00:18.504 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.507 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 19:00:18.508 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.508 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 19:00:18.508 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1217, '2023-10-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.508 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (364,1,19,false),(364,2,22,false),(364,3,34,false),(364,4,66,false),(364,5,69,false),(364,6,5,true)
	        
2025-04-19 19:00:18.509 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.511 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 19:00:18.512 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.512 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 19:00:18.512 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1218, '2023-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.512 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (365,1,22,false),(365,2,26,false),(365,3,39,false),(365,4,47,false),(365,5,63,false),(365,6,12,true)
	        
2025-04-19 19:00:18.513 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.515 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 19:00:18.516 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.516 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 19:00:18.516 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1219, '2023-11-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.516 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (366,1,1,false),(366,2,28,false),(366,3,30,false),(366,4,34,false),(366,5,52,false),(366,6,6,true)
	        
2025-04-19 19:00:18.517 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.521 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 19:00:18.522 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.522 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 19:00:18.522 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1220, '2023-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.523 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (367,1,12,false),(367,2,25,false),(367,3,40,false),(367,4,59,false),(367,5,61,false),(367,6,26,true)
	        
2025-04-19 19:00:18.523 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.526 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 19:00:18.526 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.526 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 19:00:18.526 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1221, '2023-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.527 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (368,1,14,false),(368,2,21,false),(368,3,33,false),(368,4,39,false),(368,5,62,false),(368,6,20,true)
	        
2025-04-19 19:00:18.527 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.530 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 19:00:18.530 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.530 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 19:00:18.530 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1222, '2023-11-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.531 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (369,1,1,false),(369,2,12,false),(369,3,14,false),(369,4,24,false),(369,5,57,false),(369,6,7,true)
	        
2025-04-19 19:00:18.531 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.535 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 19:00:18.535 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.535 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 19:00:18.535 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1223, '2023-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.536 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (370,1,24,false),(370,2,33,false),(370,3,35,false),(370,4,37,false),(370,5,42,false),(370,6,21,true)
	        
2025-04-19 19:00:18.536 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.541 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 19:00:18.541 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.541 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 19:00:18.541 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1224, '2023-11-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.542 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (371,1,3,false),(371,2,4,false),(371,3,51,false),(371,4,53,false),(371,5,60,false),(371,6,6,true)
	        
2025-04-19 19:00:18.542 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.544 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 19:00:18.545 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.545 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 19:00:18.545 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1225, '2023-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.546 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (372,1,34,false),(372,2,50,false),(372,3,51,false),(372,4,61,false),(372,5,67,false),(372,6,20,true)
	        
2025-04-19 19:00:18.546 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.548 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 19:00:18.549 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.549 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 19:00:18.549 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1226, '2023-11-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.550 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (373,1,19,false),(373,2,26,false),(373,3,30,false),(373,4,39,false),(373,5,63,false),(373,6,13,true)
	        
2025-04-19 19:00:18.550 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.553 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 19:00:18.553 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.554 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 19:00:18.554 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1227, '2023-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.554 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (374,1,20,false),(374,2,24,false),(374,3,33,false),(374,4,39,false),(374,5,42,false),(374,6,21,true)
	        
2025-04-19 19:00:18.554 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.557 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 19:00:18.558 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.558 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 19:00:18.558 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1228, '2023-11-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.559 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (375,1,27,false),(375,2,33,false),(375,3,63,false),(375,4,66,false),(375,5,68,false),(375,6,9,true)
	        
2025-04-19 19:00:18.559 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.561 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 19:00:18.562 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.562 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 19:00:18.562 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1229, '2023-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.562 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (376,1,2,false),(376,2,21,false),(376,3,38,false),(376,4,61,false),(376,5,66,false),(376,6,12,true)
	        
2025-04-19 19:00:18.563 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.565 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 19:00:18.566 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.566 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 19:00:18.566 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1230, '2023-11-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.566 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (377,1,6,false),(377,2,47,false),(377,3,50,false),(377,4,61,false),(377,5,68,false),(377,6,4,true)
	        
2025-04-19 19:00:18.567 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.570 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 19:00:18.571 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.572 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 19:00:18.572 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1231, '2023-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.572 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (378,1,28,false),(378,2,35,false),(378,3,41,false),(378,4,47,false),(378,5,60,false),(378,6,3,true)
	        
2025-04-19 19:00:18.573 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.576 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 19:00:18.576 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.576 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 19:00:18.577 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1232, '2023-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.577 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (379,1,18,false),(379,2,19,false),(379,3,27,false),(379,4,28,false),(379,5,45,false),(379,6,9,true)
	        
2025-04-19 19:00:18.578 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.580 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 19:00:18.581 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.581 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 19:00:18.581 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1233, '2023-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.582 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (380,1,2,false),(380,2,12,false),(380,3,37,false),(380,4,56,false),(380,5,65,false),(380,6,21,true)
	        
2025-04-19 19:00:18.582 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.585 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 19:00:18.586 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.586 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 19:00:18.586 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1234, '2023-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.586 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (381,1,5,false),(381,2,25,false),(381,3,26,false),(381,4,40,false),(381,5,60,false),(381,6,1,true)
	        
2025-04-19 19:00:18.587 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.590 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 19:00:18.591 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.591 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 19:00:18.591 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1235, '2023-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.591 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (382,1,1,false),(382,2,24,false),(382,3,27,false),(382,4,31,false),(382,5,62,false),(382,6,20,true)
	        
2025-04-19 19:00:18.592 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.606 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 19:00:18.607 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.609 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 19:00:18.610 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1236, '2023-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.612 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (383,1,3,false),(383,2,8,false),(383,3,41,false),(383,4,56,false),(383,5,64,false),(383,6,18,true)
	        
2025-04-19 19:00:18.614 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.622 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 19:00:18.622 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.623 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 19:00:18.623 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1237, '2023-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.624 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (384,1,3,false),(384,2,9,false),(384,3,10,false),(384,4,20,false),(384,5,62,false),(384,6,25,true)
	        
2025-04-19 19:00:18.624 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.631 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 19:00:18.631 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.631 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 19:00:18.631 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1238, '2023-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.632 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (385,1,5,false),(385,2,8,false),(385,3,19,false),(385,4,34,false),(385,5,39,false),(385,6,26,true)
	        
2025-04-19 19:00:18.632 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.635 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 19:00:18.636 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.636 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 19:00:18.636 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1239, '2023-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.637 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (386,1,27,false),(386,2,35,false),(386,3,41,false),(386,4,56,false),(386,5,60,false),(386,6,16,true)
	        
2025-04-19 19:00:18.638 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.641 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 19:00:18.641 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.642 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 19:00:18.642 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1240, '2023-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.642 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (387,1,9,false),(387,2,14,false),(387,3,17,false),(387,4,18,false),(387,5,53,false),(387,6,6,true)
	        
2025-04-19 19:00:18.643 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.646 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 19:00:18.647 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.647 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 19:00:18.647 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1241, '2023-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.648 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (388,1,5,false),(388,2,12,false),(388,3,20,false),(388,4,24,false),(388,5,29,false),(388,6,4,true)
	        
2025-04-19 19:00:18.648 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.653 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 19:00:18.654 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.655 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 19:00:18.655 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1242, '2023-12-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.656 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (389,1,4,false),(389,2,11,false),(389,3,38,false),(389,4,51,false),(389,5,68,false),(389,6,5,true)
	        
2025-04-19 19:00:18.656 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.659 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 19:00:18.660 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.660 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 19:00:18.660 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1243, '2023-12-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.660 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (390,1,10,false),(390,2,11,false),(390,3,26,false),(390,4,27,false),(390,5,34,false),(390,6,7,true)
	        
2025-04-19 19:00:18.661 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.663 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 19:00:18.663 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.664 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 19:00:18.664 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1244, '2024-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.664 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (391,1,12,false),(391,2,21,false),(391,3,42,false),(391,4,44,false),(391,5,49,false),(391,6,1,true)
	        
2025-04-19 19:00:18.665 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.667 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 19:00:18.667 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.668 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 19:00:18.668 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1245, '2024-01-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.668 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (392,1,30,false),(392,2,31,false),(392,3,38,false),(392,4,48,false),(392,5,68,false),(392,6,8,true)
	        
2025-04-19 19:00:18.668 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.671 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 19:00:18.671 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.672 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 19:00:18.672 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1246, '2024-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.672 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (393,1,4,false),(393,2,31,false),(393,3,34,false),(393,4,38,false),(393,5,61,false),(393,6,13,true)
	        
2025-04-19 19:00:18.673 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.675 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 19:00:18.675 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.675 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 19:00:18.676 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1247, '2024-01-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.676 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (394,1,7,false),(394,2,17,false),(394,3,28,false),(394,4,40,false),(394,5,45,false),(394,6,2,true)
	        
2025-04-19 19:00:18.677 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.679 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 19:00:18.679 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.679 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 19:00:18.679 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1248, '2024-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.680 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (395,1,25,false),(395,2,40,false),(395,3,43,false),(395,4,48,false),(395,5,50,false),(395,6,11,true)
	        
2025-04-19 19:00:18.680 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.682 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 19:00:18.682 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.682 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 19:00:18.683 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1249, '2024-01-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.683 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (396,1,12,false),(396,2,31,false),(396,3,33,false),(396,4,51,false),(396,5,58,false),(396,6,15,true)
	        
2025-04-19 19:00:18.683 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.686 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 19:00:18.686 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.686 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 19:00:18.687 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1250, '2024-01-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.687 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (397,1,13,false),(397,2,30,false),(397,3,35,false),(397,4,49,false),(397,5,59,false),(397,6,4,true)
	        
2025-04-19 19:00:18.688 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.690 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 19:00:18.690 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.690 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 19:00:18.690 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1251, '2024-01-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.691 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (398,1,18,false),(398,2,22,false),(398,3,43,false),(398,4,61,false),(398,5,65,false),(398,6,2,true)
	        
2025-04-19 19:00:18.691 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.693 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 19:00:18.694 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.694 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 19:00:18.694 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1252, '2024-01-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.694 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (399,1,16,false),(399,2,31,false),(399,3,34,false),(399,4,47,false),(399,5,65,false),(399,6,10,true)
	        
2025-04-19 19:00:18.695 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.697 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 19:00:18.697 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.698 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 19:00:18.698 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1253, '2024-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.698 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (400,1,24,false),(400,2,25,false),(400,3,43,false),(400,4,52,false),(400,5,63,false),(400,6,21,true)
	        
2025-04-19 19:00:18.698 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.700 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 19:00:18.701 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.701 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 19:00:18.701 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1254, '2024-01-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.701 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (401,1,1,false),(401,2,5,false),(401,3,32,false),(401,4,50,false),(401,5,64,false),(401,6,8,true)
	        
2025-04-19 19:00:18.702 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.705 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 19:00:18.706 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.706 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 19:00:18.706 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1255, '2024-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.706 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (402,1,7,false),(402,2,38,false),(402,3,65,false),(402,4,66,false),(402,5,68,false),(402,6,21,true)
	        
2025-04-19 19:00:18.707 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.709 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 19:00:18.709 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.710 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 19:00:18.710 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1256, '2024-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.710 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (403,1,39,false),(403,2,41,false),(403,3,43,false),(403,4,49,false),(403,5,64,false),(403,6,4,true)
	        
2025-04-19 19:00:18.711 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.713 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 19:00:18.713 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.714 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 19:00:18.714 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1257, '2024-01-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.714 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (404,1,15,false),(404,2,18,false),(404,3,19,false),(404,4,41,false),(404,5,43,false),(404,6,14,true)
	        
2025-04-19 19:00:18.715 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.717 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 19:00:18.718 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.718 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 19:00:18.718 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1258, '2024-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.719 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (405,1,9,false),(405,2,11,false),(405,3,27,false),(405,4,59,false),(405,5,66,false),(405,6,19,true)
	        
2025-04-19 19:00:18.719 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.722 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 19:00:18.722 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.723 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 19:00:18.723 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1259, '2024-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.723 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (406,1,1,false),(406,2,2,false),(406,3,27,false),(406,4,30,false),(406,5,67,false),(406,6,9,true)
	        
2025-04-19 19:00:18.723 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.726 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 19:00:18.726 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.726 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 19:00:18.726 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1260, '2024-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.727 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (407,1,12,false),(407,2,21,false),(407,3,62,false),(407,4,67,false),(407,5,69,false),(407,6,17,true)
	        
2025-04-19 19:00:18.727 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.729 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 19:00:18.730 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.730 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 19:00:18.730 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1261, '2024-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.731 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (408,1,27,false),(408,2,28,false),(408,3,34,false),(408,4,37,false),(408,5,44,false),(408,6,8,true)
	        
2025-04-19 19:00:18.731 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.733 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 19:00:18.733 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.734 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 19:00:18.734 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1262, '2024-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.734 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (409,1,17,false),(409,2,36,false),(409,3,43,false),(409,4,53,false),(409,5,67,false),(409,6,14,true)
	        
2025-04-19 19:00:18.735 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.737 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 19:00:18.738 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.738 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 19:00:18.738 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1263, '2024-02-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.739 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (410,1,1,false),(410,2,4,false),(410,3,45,false),(410,4,47,false),(410,5,67,false),(410,6,18,true)
	        
2025-04-19 19:00:18.739 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.741 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 19:00:18.741 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.742 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 19:00:18.742 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1264, '2024-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.742 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (411,1,6,false),(411,2,28,false),(411,3,59,false),(411,4,62,false),(411,5,69,false),(411,6,21,true)
	        
2025-04-19 19:00:18.743 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.745 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 19:00:18.745 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.745 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 19:00:18.746 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1265, '2024-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.746 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (412,1,4,false),(412,2,23,false),(412,3,45,false),(412,4,50,false),(412,5,53,false),(412,6,17,true)
	        
2025-04-19 19:00:18.746 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.749 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 19:00:18.749 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.749 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 19:00:18.749 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1266, '2024-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.750 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (413,1,4,false),(413,2,27,false),(413,3,33,false),(413,4,41,false),(413,5,42,false),(413,6,14,true)
	        
2025-04-19 19:00:18.750 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.752 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 19:00:18.752 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.752 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 19:00:18.752 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1267, '2024-02-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.753 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (414,1,3,false),(414,2,8,false),(414,3,40,false),(414,4,53,false),(414,5,58,false),(414,6,3,true)
	        
2025-04-19 19:00:18.754 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.756 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 19:00:18.756 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.757 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 19:00:18.757 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1268, '2024-02-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.757 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (415,1,24,false),(415,2,29,false),(415,3,42,false),(415,4,51,false),(415,5,54,false),(415,6,16,true)
	        
2025-04-19 19:00:18.758 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.760 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 19:00:18.760 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.760 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 19:00:18.760 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1269, '2024-02-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.761 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (416,1,16,false),(416,2,26,false),(416,3,29,false),(416,4,38,false),(416,5,50,false),(416,6,6,true)
	        
2025-04-19 19:00:18.761 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.763 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 19:00:18.763 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.763 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 19:00:18.764 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1270, '2024-03-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.764 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (417,1,3,false),(417,2,18,false),(417,3,27,false),(417,4,36,false),(417,5,53,false),(417,6,12,true)
	        
2025-04-19 19:00:18.764 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.766 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 19:00:18.767 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.767 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 19:00:18.767 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1271, '2024-03-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.767 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (418,1,36,false),(418,2,42,false),(418,3,50,false),(418,4,52,false),(418,5,67,false),(418,6,26,true)
	        
2025-04-19 19:00:18.768 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:18.770 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 19:00:18.770 UTC [133] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:00:18.771 UTC [133] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 19:00:18.771 UTC [133] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1272, '2024-03-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:00:18.771 UTC [133] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (419,1,6,false),(419,2,19,false),(419,3,28,false),(419,4,44,false),(419,5,60,false),(419,6,10,true)
	        
2025-04-19 19:00:18.772 UTC [133] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:00:21.134 UTC [133] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:00:21.430 UTC [133] DEBUG:  unexpected EOF on client connection
2025-04-19 19:00:23.243 UTC [141] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:23.251 UTC [141] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:23.258 UTC [141] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:23.258 UTC [141] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:23.263 UTC [141] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:23.267 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:23.269 UTC [141] DEBUG:  building index "pg_toast_18354_index" on table "pg_toast_18354" serially
2025-04-19 19:00:23.270 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:23.271 UTC [141] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:23.271 UTC [141] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:23.271 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:23.272 UTC [141] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:23.272 UTC [141] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:23.272 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:23.273 UTC [141] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:23.273 UTC [141] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:23.274 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:23.276 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:23.276 UTC [141] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:23.276 UTC [141] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:23.277 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:23.279 UTC [141] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:23.279 UTC [141] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:23.280 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:23.283 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:23.283 UTC [141] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:23.283 UTC [141] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:23.285 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:23.285 UTC [141] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:23.285 UTC [141] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:23.288 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:23.288 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:23.289 UTC [141] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:23.289 UTC [141] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:23.290 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:23.292 UTC [141] DEBUG:  building index "pg_toast_18415_index" on table "pg_toast_18415" serially
2025-04-19 19:00:23.292 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:23.293 UTC [141] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:23.293 UTC [141] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:23.294 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:23.295 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:23.295 UTC [141] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:23.295 UTC [141] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:23.296 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:23.296 UTC [141] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:23.296 UTC [141] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:23.297 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:23.298 UTC [141] DEBUG:  building index "pg_toast_18448_index" on table "pg_toast_18448" serially
2025-04-19 19:00:23.299 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:23.299 UTC [141] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:23.299 UTC [141] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:23.300 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:23.301 UTC [141] DEBUG:  building index "pg_toast_18459_index" on table "pg_toast_18459" serially
2025-04-19 19:00:23.302 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:23.302 UTC [141] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:23.302 UTC [141] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:23.304 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:23.304 UTC [141] DEBUG:  building index "pg_toast_18482_index" on table "pg_toast_18482" serially
2025-04-19 19:00:23.305 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:23.305 UTC [141] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:23.305 UTC [141] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:23.306 UTC [141] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:23.306 UTC [141] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:23.307 UTC [141] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:23.307 UTC [141] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:23.307 UTC [141] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:23.307 UTC [141] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:23.308 UTC [141] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:23.308 UTC [141] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:23.309 UTC [141] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:23.309 UTC [141] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:23.310 UTC [141] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:23.310 UTC [141] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:23.310 UTC [141] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:23.310 UTC [141] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:23.312 UTC [141] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:23.312 UTC [141] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:23.313 UTC [141] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:23.313 UTC [141] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:23.314 UTC [141] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:23.314 UTC [141] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:23.315 UTC [141] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:23.315 UTC [141] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:23.325 UTC [141] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:23.601 UTC [141] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8bMqdurpMwAgozHuO/7w3uH/kft44.xaHBkj0I2bxVFgMJ8kcz8NO')
	                RETURNING id, username, email
	                
2025-04-19 19:00:23.602 UTC [141] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:23.602 UTC [141] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:23.607 UTC [141] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:00:23.620 UTC [141] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:23.621 UTC [141] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:23.624 UTC [141] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:23.629 UTC [141] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:23.629 UTC [141] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:23.632 UTC [141] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:23.635 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:23.636 UTC [141] DEBUG:  building index "pg_toast_18518_index" on table "pg_toast_18518" serially
2025-04-19 19:00:23.637 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:23.637 UTC [141] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:23.637 UTC [141] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:23.638 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:23.638 UTC [141] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:23.638 UTC [141] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:23.639 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:23.639 UTC [141] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:23.639 UTC [141] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:23.640 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:23.641 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:23.641 UTC [141] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:23.641 UTC [141] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:23.642 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:23.642 UTC [141] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:23.642 UTC [141] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:23.642 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:23.643 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:23.643 UTC [141] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:23.643 UTC [141] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:23.644 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:23.644 UTC [141] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:23.644 UTC [141] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:23.645 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:23.646 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:23.646 UTC [141] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:23.646 UTC [141] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:23.647 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:23.648 UTC [141] DEBUG:  building index "pg_toast_18579_index" on table "pg_toast_18579" serially
2025-04-19 19:00:23.649 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:23.649 UTC [141] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:23.649 UTC [141] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:23.650 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:23.653 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:23.653 UTC [141] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:23.653 UTC [141] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:23.654 UTC [141] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:23.654 UTC [141] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:23.654 UTC [141] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:23.656 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:23.658 UTC [141] DEBUG:  building index "pg_toast_18612_index" on table "pg_toast_18612" serially
2025-04-19 19:00:23.659 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:23.659 UTC [141] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:23.659 UTC [141] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:23.660 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:23.663 UTC [141] DEBUG:  building index "pg_toast_18623_index" on table "pg_toast_18623" serially
2025-04-19 19:00:23.664 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:23.664 UTC [141] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:23.664 UTC [141] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:23.668 UTC [141] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:23.669 UTC [141] DEBUG:  building index "pg_toast_18646_index" on table "pg_toast_18646" serially
2025-04-19 19:00:23.669 UTC [141] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:23.669 UTC [141] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:23.669 UTC [141] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:23.670 UTC [141] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:23.670 UTC [141] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:23.671 UTC [141] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:23.671 UTC [141] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:23.672 UTC [141] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:23.672 UTC [141] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:23.672 UTC [141] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:23.672 UTC [141] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:23.673 UTC [141] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:23.673 UTC [141] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:23.674 UTC [141] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:23.674 UTC [141] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:23.675 UTC [141] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:23.675 UTC [141] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:23.675 UTC [141] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:23.675 UTC [141] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:23.676 UTC [141] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:23.676 UTC [141] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:23.677 UTC [141] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:23.677 UTC [141] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:23.678 UTC [141] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:23.678 UTC [141] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:23.684 UTC [141] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:23.940 UTC [141] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$HyH3SKHfQ7wjRJ5yZ3EXuOcewq.fGbG1UZeZ0PFRr3OvqD26a/mky')
	                RETURNING id, username, email
	                
2025-04-19 19:00:23.943 UTC [141] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:23.945 UTC [141] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:28.116 UTC [149] LOG:  statement: set search_path to 'public';
2025-04-19 19:00:28.117 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:28.133 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:28.135 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:33.639 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:33.648 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:33.655 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:36.043 UTC [157] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:00:36.311 UTC [157] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:00:36.833 UTC [158] LOG:  statement: set search_path to 'public';
2025-04-19 19:00:36.833 UTC [158] LOG:  statement: SELECT * FROM draws LIMIT 100
2025-04-19 19:00:36.854 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:36.858 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:36.865 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:37.118 UTC [141] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:00:37.456 UTC [141] DEBUG:  unexpected EOF on client connection
2025-04-19 19:00:38.197 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:38.217 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:38.219 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:39.563 UTC [159] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:39.570 UTC [159] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:39.576 UTC [159] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:39.576 UTC [159] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:39.581 UTC [159] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:39.584 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:39.587 UTC [159] DEBUG:  building index "pg_toast_18683_index" on table "pg_toast_18683" serially
2025-04-19 19:00:39.589 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:39.589 UTC [159] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:39.589 UTC [159] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:39.590 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:39.590 UTC [159] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:39.590 UTC [159] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:39.591 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:39.591 UTC [159] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:39.591 UTC [159] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:39.592 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:39.592 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:39.593 UTC [159] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:39.593 UTC [159] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:39.594 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:39.594 UTC [159] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:39.594 UTC [159] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:39.594 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:39.596 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:39.596 UTC [159] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:39.596 UTC [159] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:39.596 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:39.597 UTC [159] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:39.597 UTC [159] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:39.598 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:39.599 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:39.600 UTC [159] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:39.600 UTC [159] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:39.601 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:39.602 UTC [159] DEBUG:  building index "pg_toast_18744_index" on table "pg_toast_18744" serially
2025-04-19 19:00:39.603 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:39.604 UTC [159] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:39.604 UTC [159] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:39.605 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:39.608 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:39.608 UTC [159] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:39.608 UTC [159] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:39.609 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:39.610 UTC [159] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:39.610 UTC [159] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:39.611 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:39.614 UTC [159] DEBUG:  building index "pg_toast_18777_index" on table "pg_toast_18777" serially
2025-04-19 19:00:39.616 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:39.617 UTC [159] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:39.617 UTC [159] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:39.618 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:39.620 UTC [159] DEBUG:  building index "pg_toast_18788_index" on table "pg_toast_18788" serially
2025-04-19 19:00:39.620 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:39.621 UTC [159] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:39.621 UTC [159] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:39.622 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:39.623 UTC [159] DEBUG:  building index "pg_toast_18811_index" on table "pg_toast_18811" serially
2025-04-19 19:00:39.624 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:39.624 UTC [159] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:39.624 UTC [159] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:39.625 UTC [159] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:39.625 UTC [159] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:39.625 UTC [159] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:39.626 UTC [159] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:39.626 UTC [159] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:39.626 UTC [159] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:39.627 UTC [159] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:39.627 UTC [159] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:39.628 UTC [159] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:39.628 UTC [159] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:39.629 UTC [159] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:39.629 UTC [159] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:39.630 UTC [159] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:39.630 UTC [159] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:39.630 UTC [159] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:39.630 UTC [159] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:39.631 UTC [159] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:39.631 UTC [159] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:39.632 UTC [159] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:39.632 UTC [159] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:39.633 UTC [159] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:39.633 UTC [159] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:39.644 UTC [159] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:39.796 UTC [158] LOG:  statement: SELECT * FROM draws LIMIT 100
2025-04-19 19:00:39.826 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:39.831 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:39.833 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:39.933 UTC [159] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$M/tjomVxg.u7dAXVQk0LY.OsnVuZ7xlAbE1BIzkgyFDrQ1oCU0YCq')
	                RETURNING id, username, email
	                
2025-04-19 19:00:39.934 UTC [159] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:39.934 UTC [159] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:39.935 UTC [159] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:00:39.944 UTC [159] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:39.946 UTC [159] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:39.951 UTC [159] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:39.955 UTC [159] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:39.955 UTC [159] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:39.958 UTC [159] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:39.962 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:39.963 UTC [159] DEBUG:  building index "pg_toast_18847_index" on table "pg_toast_18847" serially
2025-04-19 19:00:39.964 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:39.964 UTC [159] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:39.964 UTC [159] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:39.965 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:39.965 UTC [159] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:39.965 UTC [159] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:39.966 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:39.966 UTC [159] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:39.966 UTC [159] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:39.967 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:39.968 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:39.968 UTC [159] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:39.968 UTC [159] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:39.969 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:39.969 UTC [159] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:39.969 UTC [159] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:39.969 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:39.970 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:39.970 UTC [159] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:39.970 UTC [159] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:39.971 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:39.971 UTC [159] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:39.971 UTC [159] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:39.972 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:39.973 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:39.974 UTC [159] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:39.974 UTC [159] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:39.975 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:39.976 UTC [159] DEBUG:  building index "pg_toast_18908_index" on table "pg_toast_18908" serially
2025-04-19 19:00:39.977 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:39.977 UTC [159] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:39.977 UTC [159] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:39.978 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:39.981 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:39.981 UTC [159] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:39.981 UTC [159] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:39.982 UTC [159] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:39.983 UTC [159] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:39.983 UTC [159] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:39.985 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:39.988 UTC [159] DEBUG:  building index "pg_toast_18941_index" on table "pg_toast_18941" serially
2025-04-19 19:00:39.989 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:39.990 UTC [159] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:39.990 UTC [159] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:39.990 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:39.991 UTC [159] DEBUG:  building index "pg_toast_18952_index" on table "pg_toast_18952" serially
2025-04-19 19:00:39.992 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:39.992 UTC [159] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:39.992 UTC [159] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:39.994 UTC [159] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:39.995 UTC [159] DEBUG:  building index "pg_toast_18975_index" on table "pg_toast_18975" serially
2025-04-19 19:00:39.996 UTC [159] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:39.997 UTC [159] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:39.997 UTC [159] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:39.998 UTC [159] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:39.998 UTC [159] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:39.998 UTC [159] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:39.998 UTC [159] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:39.999 UTC [159] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:39.999 UTC [159] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:40.000 UTC [159] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:40.000 UTC [159] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:40.001 UTC [159] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:40.001 UTC [159] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:40.002 UTC [159] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:40.002 UTC [159] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:40.004 UTC [159] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:40.004 UTC [159] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:40.005 UTC [159] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:40.005 UTC [159] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:40.006 UTC [159] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:40.006 UTC [159] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:40.007 UTC [159] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:40.007 UTC [159] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:40.007 UTC [159] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:40.007 UTC [159] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:40.015 UTC [159] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:40.268 UTC [159] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lGK8MRVbgB/V3dgJCiFn.O7Cdt9cASoD07oDlVtEweo3QKvyxoU/e')
	                RETURNING id, username, email
	                
2025-04-19 19:00:40.269 UTC [159] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:40.269 UTC [159] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:40.587 UTC [158] LOG:  statement: SELECT * FROM draws LIMIT 100
2025-04-19 19:00:40.595 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:40.601 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:40.604 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:40.784 UTC [158] LOG:  statement: SELECT * FROM draws LIMIT 100
2025-04-19 19:00:40.788 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:00:40.791 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:00:40.798 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:00:53.194 UTC [159] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:00:53.525 UTC [159] DEBUG:  unexpected EOF on client connection
2025-04-19 19:00:56.338 UTC [175] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:56.348 UTC [175] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:56.358 UTC [175] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:56.358 UTC [175] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:56.365 UTC [175] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:56.370 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:56.374 UTC [175] DEBUG:  building index "pg_toast_19011_index" on table "pg_toast_19011" serially
2025-04-19 19:00:56.376 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:56.376 UTC [175] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:56.376 UTC [175] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:56.377 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:56.377 UTC [175] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:56.377 UTC [175] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:56.378 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:56.378 UTC [175] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:56.378 UTC [175] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:56.379 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:56.380 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:56.380 UTC [175] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:56.380 UTC [175] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:56.381 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:56.381 UTC [175] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:56.381 UTC [175] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:56.382 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:56.383 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:56.383 UTC [175] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:56.383 UTC [175] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:56.384 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:56.384 UTC [175] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:56.384 UTC [175] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:56.386 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:56.387 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:56.387 UTC [175] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:56.387 UTC [175] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:56.388 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:56.390 UTC [175] DEBUG:  building index "pg_toast_19072_index" on table "pg_toast_19072" serially
2025-04-19 19:00:56.391 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:56.391 UTC [175] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:56.391 UTC [175] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:56.392 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:56.393 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:56.393 UTC [175] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:56.393 UTC [175] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:56.394 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:56.394 UTC [175] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:56.394 UTC [175] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:56.395 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:56.396 UTC [175] DEBUG:  building index "pg_toast_19105_index" on table "pg_toast_19105" serially
2025-04-19 19:00:56.397 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:56.397 UTC [175] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:56.397 UTC [175] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:56.398 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:56.399 UTC [175] DEBUG:  building index "pg_toast_19116_index" on table "pg_toast_19116" serially
2025-04-19 19:00:56.400 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:56.400 UTC [175] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:56.400 UTC [175] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:56.402 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:56.403 UTC [175] DEBUG:  building index "pg_toast_19139_index" on table "pg_toast_19139" serially
2025-04-19 19:00:56.403 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:56.403 UTC [175] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:56.403 UTC [175] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:56.404 UTC [175] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:56.404 UTC [175] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:56.405 UTC [175] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:56.405 UTC [175] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:56.406 UTC [175] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:56.406 UTC [175] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:56.407 UTC [175] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:56.407 UTC [175] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:56.408 UTC [175] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:56.408 UTC [175] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:56.409 UTC [175] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:56.409 UTC [175] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:56.409 UTC [175] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:56.409 UTC [175] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:56.410 UTC [175] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:56.410 UTC [175] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:56.411 UTC [175] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:56.411 UTC [175] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:56.412 UTC [175] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:56.412 UTC [175] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:56.413 UTC [175] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:56.413 UTC [175] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:56.423 UTC [175] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:56.707 UTC [175] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$wdkIf4RZ9Ib6DWa3khjVpOWnkv9b/aJWR5MurJJRh.uukaeeNvUNC')
	                RETURNING id, username, email
	                
2025-04-19 19:00:56.708 UTC [175] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:56.708 UTC [175] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:00:56.709 UTC [175] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:00:56.715 UTC [175] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:56.716 UTC [175] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:00:56.719 UTC [175] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:00:56.723 UTC [175] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:00:56.723 UTC [175] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:00:56.726 UTC [175] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:00:56.729 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:00:56.730 UTC [175] DEBUG:  building index "pg_toast_19175_index" on table "pg_toast_19175" serially
2025-04-19 19:00:56.731 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:00:56.731 UTC [175] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:00:56.731 UTC [175] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:00:56.732 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:00:56.732 UTC [175] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:00:56.732 UTC [175] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:00:56.733 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:00:56.733 UTC [175] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:00:56.733 UTC [175] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:00:56.734 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:00:56.735 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:00:56.735 UTC [175] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:00:56.735 UTC [175] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:00:56.736 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:00:56.736 UTC [175] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:00:56.736 UTC [175] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:00:56.737 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:00:56.738 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:00:56.738 UTC [175] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:00:56.738 UTC [175] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:00:56.739 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:00:56.739 UTC [175] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:00:56.739 UTC [175] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:00:56.740 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:00:56.741 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:00:56.742 UTC [175] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:00:56.742 UTC [175] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:00:56.742 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:00:56.743 UTC [175] DEBUG:  building index "pg_toast_19236_index" on table "pg_toast_19236" serially
2025-04-19 19:00:56.744 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:00:56.745 UTC [175] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:00:56.745 UTC [175] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:00:56.745 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:00:56.746 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:00:56.746 UTC [175] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:00:56.746 UTC [175] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:00:56.747 UTC [175] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:00:56.747 UTC [175] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:00:56.747 UTC [175] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:00:56.749 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:00:56.750 UTC [175] DEBUG:  building index "pg_toast_19269_index" on table "pg_toast_19269" serially
2025-04-19 19:00:56.751 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:00:56.751 UTC [175] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:00:56.751 UTC [175] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:00:56.752 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:00:56.753 UTC [175] DEBUG:  building index "pg_toast_19280_index" on table "pg_toast_19280" serially
2025-04-19 19:00:56.754 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:00:56.754 UTC [175] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:00:56.754 UTC [175] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:00:56.755 UTC [175] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:00:56.756 UTC [175] DEBUG:  building index "pg_toast_19303_index" on table "pg_toast_19303" serially
2025-04-19 19:00:56.757 UTC [175] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:00:56.757 UTC [175] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:00:56.757 UTC [175] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:00:56.758 UTC [175] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:00:56.758 UTC [175] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:00:56.759 UTC [175] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:00:56.759 UTC [175] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:00:56.760 UTC [175] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:00:56.760 UTC [175] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:00:56.761 UTC [175] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:00:56.761 UTC [175] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:00:56.761 UTC [175] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:00:56.761 UTC [175] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:00:56.762 UTC [175] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:00:56.762 UTC [175] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:00:56.763 UTC [175] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:00:56.763 UTC [175] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:00:56.764 UTC [175] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:00:56.764 UTC [175] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:00:56.764 UTC [175] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:00:56.764 UTC [175] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:00:56.765 UTC [175] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:00:56.765 UTC [175] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:00:56.766 UTC [175] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:00:56.766 UTC [175] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:00:56.775 UTC [175] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:00:57.027 UTC [175] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4OQ6cSZLEjAm6u6f3FRonu40wx5TT8xcfALX9c4vNOKuD/w9on/Me')
	                RETURNING id, username, email
	                
2025-04-19 19:00:57.028 UTC [175] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:00:57.028 UTC [175] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:06.073 UTC [183] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:01:09.492 UTC [175] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:01:09.765 UTC [175] DEBUG:  unexpected EOF on client connection
2025-04-19 19:01:11.353 UTC [184] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:01:11.360 UTC [184] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:01:11.366 UTC [184] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:01:11.366 UTC [184] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:01:11.370 UTC [184] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:01:11.373 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:01:11.376 UTC [184] DEBUG:  building index "pg_toast_19339_index" on table "pg_toast_19339" serially
2025-04-19 19:01:11.377 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:01:11.378 UTC [184] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:01:11.378 UTC [184] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:01:11.379 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:01:11.379 UTC [184] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:01:11.379 UTC [184] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:01:11.380 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:01:11.380 UTC [184] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:01:11.380 UTC [184] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:01:11.380 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:01:11.381 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:01:11.382 UTC [184] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:01:11.382 UTC [184] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:01:11.382 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:01:11.382 UTC [184] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:01:11.382 UTC [184] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:01:11.383 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:01:11.384 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:01:11.384 UTC [184] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:01:11.384 UTC [184] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:01:11.385 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:01:11.385 UTC [184] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:01:11.385 UTC [184] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:01:11.387 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:01:11.388 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:01:11.388 UTC [184] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:01:11.388 UTC [184] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:01:11.389 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:01:11.391 UTC [184] DEBUG:  building index "pg_toast_19400_index" on table "pg_toast_19400" serially
2025-04-19 19:01:11.391 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:01:11.391 UTC [184] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:01:11.392 UTC [184] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:01:11.393 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:01:11.393 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:01:11.394 UTC [184] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:01:11.394 UTC [184] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:01:11.394 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:01:11.395 UTC [184] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:01:11.395 UTC [184] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:01:11.396 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:01:11.397 UTC [184] DEBUG:  building index "pg_toast_19433_index" on table "pg_toast_19433" serially
2025-04-19 19:01:11.397 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:01:11.397 UTC [184] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:01:11.397 UTC [184] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:01:11.398 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:01:11.399 UTC [184] DEBUG:  building index "pg_toast_19444_index" on table "pg_toast_19444" serially
2025-04-19 19:01:11.400 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:01:11.401 UTC [184] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:01:11.401 UTC [184] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:01:11.402 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:01:11.403 UTC [184] DEBUG:  building index "pg_toast_19467_index" on table "pg_toast_19467" serially
2025-04-19 19:01:11.404 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:01:11.404 UTC [184] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:01:11.404 UTC [184] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:01:11.405 UTC [184] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:01:11.405 UTC [184] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:01:11.405 UTC [184] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:01:11.406 UTC [184] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:01:11.406 UTC [184] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:01:11.406 UTC [184] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:01:11.407 UTC [184] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:01:11.407 UTC [184] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:01:11.408 UTC [184] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:01:11.408 UTC [184] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:01:11.408 UTC [184] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:01:11.408 UTC [184] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:01:11.409 UTC [184] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:01:11.409 UTC [184] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:01:11.410 UTC [184] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:01:11.410 UTC [184] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:01:11.411 UTC [184] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:01:11.411 UTC [184] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:01:11.411 UTC [184] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:01:11.411 UTC [184] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:01:11.412 UTC [184] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:01:11.412 UTC [184] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:01:11.420 UTC [184] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:11.685 UTC [184] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$v67PPDTTzyZA5LpKQEQTyuti8W5WKpi/QGJlkQ0lQcetNA9gseVbu')
	                RETURNING id, username, email
	                
2025-04-19 19:01:11.685 UTC [184] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:01:11.685 UTC [184] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:11.686 UTC [184] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:01:11.696 UTC [184] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:11.697 UTC [184] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:01:11.699 UTC [184] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:01:11.703 UTC [184] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:01:11.703 UTC [184] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:01:11.707 UTC [184] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:01:11.710 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:01:11.711 UTC [184] DEBUG:  building index "pg_toast_19503_index" on table "pg_toast_19503" serially
2025-04-19 19:01:11.712 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:01:11.712 UTC [184] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:01:11.712 UTC [184] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:01:11.713 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:01:11.713 UTC [184] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:01:11.713 UTC [184] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:01:11.714 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:01:11.714 UTC [184] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:01:11.714 UTC [184] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:01:11.715 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:01:11.715 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:01:11.716 UTC [184] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:01:11.716 UTC [184] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:01:11.716 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:01:11.716 UTC [184] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:01:11.716 UTC [184] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:01:11.717 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:01:11.718 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:01:11.718 UTC [184] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:01:11.718 UTC [184] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:01:11.719 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:01:11.719 UTC [184] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:01:11.719 UTC [184] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:01:11.720 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:01:11.721 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:01:11.721 UTC [184] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:01:11.721 UTC [184] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:01:11.722 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:01:11.723 UTC [184] DEBUG:  building index "pg_toast_19564_index" on table "pg_toast_19564" serially
2025-04-19 19:01:11.724 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:01:11.724 UTC [184] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:01:11.724 UTC [184] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:01:11.725 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:01:11.726 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:01:11.726 UTC [184] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:01:11.726 UTC [184] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:01:11.727 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:01:11.727 UTC [184] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:01:11.727 UTC [184] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:01:11.728 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:01:11.729 UTC [184] DEBUG:  building index "pg_toast_19597_index" on table "pg_toast_19597" serially
2025-04-19 19:01:11.730 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:01:11.730 UTC [184] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:01:11.730 UTC [184] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:01:11.731 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:01:11.732 UTC [184] DEBUG:  building index "pg_toast_19608_index" on table "pg_toast_19608" serially
2025-04-19 19:01:11.732 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:01:11.732 UTC [184] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:01:11.732 UTC [184] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:01:11.734 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:01:11.735 UTC [184] DEBUG:  building index "pg_toast_19631_index" on table "pg_toast_19631" serially
2025-04-19 19:01:11.735 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:01:11.735 UTC [184] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:01:11.735 UTC [184] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:01:11.736 UTC [184] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:01:11.736 UTC [184] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:01:11.737 UTC [184] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:01:11.737 UTC [184] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:01:11.738 UTC [184] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:01:11.738 UTC [184] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:01:11.739 UTC [184] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:01:11.739 UTC [184] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:01:11.740 UTC [184] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:01:11.740 UTC [184] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:01:11.740 UTC [184] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:01:11.740 UTC [184] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:01:11.741 UTC [184] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:01:11.741 UTC [184] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:01:11.742 UTC [184] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:01:11.742 UTC [184] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:01:11.743 UTC [184] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:01:11.743 UTC [184] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:01:11.744 UTC [184] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:01:11.744 UTC [184] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:01:11.744 UTC [184] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:01:11.744 UTC [184] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:01:11.750 UTC [184] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:11.992 UTC [184] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yqk4xtb8MkuqBmjNKj9rWeOFNHD5AvebwBYHGjhkNjf/3J0ZAJCym')
	                RETURNING id, username, email
	                
2025-04-19 19:01:11.993 UTC [184] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:01:11.993 UTC [184] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:21.547 UTC [184] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:01:22.890 UTC [184] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:01:23.975 UTC [184] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:01:25.253 UTC [184] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:01:25.469 UTC [184] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:01:25.755 UTC [184] DEBUG:  unexpected EOF on client connection
2025-04-19 19:01:27.637 UTC [199] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:01:27.648 UTC [199] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:01:27.654 UTC [199] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:01:27.654 UTC [199] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:01:27.659 UTC [199] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:01:27.663 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:01:27.671 UTC [199] DEBUG:  building index "pg_toast_19667_index" on table "pg_toast_19667" serially
2025-04-19 19:01:27.674 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:01:27.675 UTC [199] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:01:27.675 UTC [199] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:01:27.676 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:01:27.676 UTC [199] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:01:27.676 UTC [199] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:01:27.677 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:01:27.677 UTC [199] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:01:27.677 UTC [199] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:01:27.678 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:01:27.679 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:01:27.679 UTC [199] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:01:27.679 UTC [199] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:01:27.680 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:01:27.680 UTC [199] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:01:27.680 UTC [199] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:01:27.681 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:01:27.682 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:01:27.682 UTC [199] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:01:27.682 UTC [199] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:01:27.683 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:01:27.683 UTC [199] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:01:27.683 UTC [199] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:01:27.684 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:01:27.685 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:01:27.685 UTC [199] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:01:27.685 UTC [199] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:01:27.686 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:01:27.688 UTC [199] DEBUG:  building index "pg_toast_19728_index" on table "pg_toast_19728" serially
2025-04-19 19:01:27.689 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:01:27.689 UTC [199] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:01:27.689 UTC [199] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:01:27.690 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:01:27.691 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:01:27.691 UTC [199] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:01:27.691 UTC [199] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:01:27.692 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:01:27.692 UTC [199] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:01:27.692 UTC [199] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:01:27.693 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:01:27.694 UTC [199] DEBUG:  building index "pg_toast_19761_index" on table "pg_toast_19761" serially
2025-04-19 19:01:27.695 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:01:27.695 UTC [199] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:01:27.695 UTC [199] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:01:27.696 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:01:27.697 UTC [199] DEBUG:  building index "pg_toast_19772_index" on table "pg_toast_19772" serially
2025-04-19 19:01:27.698 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:01:27.698 UTC [199] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:01:27.698 UTC [199] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:01:27.700 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:01:27.701 UTC [199] DEBUG:  building index "pg_toast_19795_index" on table "pg_toast_19795" serially
2025-04-19 19:01:27.702 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:01:27.702 UTC [199] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:01:27.702 UTC [199] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:01:27.703 UTC [199] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:01:27.703 UTC [199] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:01:27.704 UTC [199] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:01:27.704 UTC [199] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:01:27.704 UTC [199] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:01:27.704 UTC [199] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:01:27.705 UTC [199] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:01:27.705 UTC [199] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:01:27.706 UTC [199] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:01:27.706 UTC [199] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:01:27.707 UTC [199] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:01:27.707 UTC [199] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:01:27.708 UTC [199] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:01:27.708 UTC [199] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:01:27.709 UTC [199] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:01:27.709 UTC [199] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:01:27.709 UTC [199] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:01:27.709 UTC [199] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:01:27.710 UTC [199] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:01:27.710 UTC [199] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:01:27.711 UTC [199] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:01:27.711 UTC [199] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:01:27.747 UTC [199] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:28.013 UTC [199] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AqvUahBEnkJor7/WWITmVOtok6m3ZAWitgq6uZTYLazoti8T5Ou5q')
	                RETURNING id, username, email
	                
2025-04-19 19:01:28.014 UTC [199] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:01:28.015 UTC [199] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:28.016 UTC [199] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:01:28.031 UTC [199] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:28.033 UTC [199] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:01:28.039 UTC [199] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:01:28.046 UTC [199] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:01:28.046 UTC [199] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:01:28.054 UTC [199] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:01:28.060 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:01:28.062 UTC [199] DEBUG:  building index "pg_toast_19831_index" on table "pg_toast_19831" serially
2025-04-19 19:01:28.063 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:01:28.064 UTC [199] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:01:28.064 UTC [199] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:01:28.065 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:01:28.066 UTC [199] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:01:28.066 UTC [199] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:01:28.066 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:01:28.067 UTC [199] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:01:28.067 UTC [199] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:01:28.067 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:01:28.069 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:01:28.069 UTC [199] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:01:28.069 UTC [199] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:01:28.070 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:01:28.070 UTC [199] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:01:28.070 UTC [199] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:01:28.071 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:01:28.072 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:01:28.073 UTC [199] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:01:28.073 UTC [199] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:01:28.073 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:01:28.074 UTC [199] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:01:28.074 UTC [199] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:01:28.076 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:01:28.078 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:01:28.079 UTC [199] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:01:28.079 UTC [199] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:01:28.080 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:01:28.081 UTC [199] DEBUG:  building index "pg_toast_19892_index" on table "pg_toast_19892" serially
2025-04-19 19:01:28.082 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:01:28.082 UTC [199] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:01:28.082 UTC [199] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:01:28.083 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:01:28.084 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:01:28.085 UTC [199] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:01:28.085 UTC [199] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:01:28.085 UTC [199] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:01:28.086 UTC [199] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:01:28.086 UTC [199] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:01:28.087 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:01:28.088 UTC [199] DEBUG:  building index "pg_toast_19925_index" on table "pg_toast_19925" serially
2025-04-19 19:01:28.089 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:01:28.089 UTC [199] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:01:28.089 UTC [199] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:01:28.091 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:01:28.094 UTC [199] DEBUG:  building index "pg_toast_19936_index" on table "pg_toast_19936" serially
2025-04-19 19:01:28.097 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:01:28.098 UTC [199] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:01:28.098 UTC [199] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:01:28.101 UTC [199] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:01:28.103 UTC [199] DEBUG:  building index "pg_toast_19959_index" on table "pg_toast_19959" serially
2025-04-19 19:01:28.104 UTC [199] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:01:28.105 UTC [199] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:01:28.105 UTC [199] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:01:28.106 UTC [199] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:01:28.106 UTC [199] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:01:28.107 UTC [199] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:01:28.107 UTC [199] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:01:28.108 UTC [199] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:01:28.108 UTC [199] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:01:28.109 UTC [199] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:01:28.109 UTC [199] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:01:28.110 UTC [199] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:01:28.110 UTC [199] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:01:28.111 UTC [199] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:01:28.111 UTC [199] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:01:28.111 UTC [199] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:01:28.111 UTC [199] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:01:28.112 UTC [199] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:01:28.112 UTC [199] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:01:28.113 UTC [199] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:01:28.113 UTC [199] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:01:28.113 UTC [199] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:01:28.113 UTC [199] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:01:28.114 UTC [199] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:01:28.114 UTC [199] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:01:28.121 UTC [199] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:28.374 UTC [199] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$QLo7EcDYpiQOPBXqXqPQ7elg95iSl1NTTYtZCPf3.EuCsiD18Erca')
	                RETURNING id, username, email
	                
2025-04-19 19:01:28.375 UTC [199] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:01:28.376 UTC [199] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:34.475 UTC [199] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:01:36.080 UTC [200] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:01:36.321 UTC [200] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:01:41.486 UTC [199] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:01:41.804 UTC [199] DEBUG:  unexpected EOF on client connection
2025-04-19 19:01:44.087 UTC [208] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:01:44.097 UTC [208] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:01:44.104 UTC [208] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:01:44.104 UTC [208] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:01:44.110 UTC [208] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:01:44.116 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:01:44.119 UTC [208] DEBUG:  building index "pg_toast_19996_index" on table "pg_toast_19996" serially
2025-04-19 19:01:44.120 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:01:44.121 UTC [208] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:01:44.121 UTC [208] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:01:44.122 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:01:44.122 UTC [208] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:01:44.122 UTC [208] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:01:44.123 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:01:44.123 UTC [208] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:01:44.123 UTC [208] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:01:44.124 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:01:44.125 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:01:44.126 UTC [208] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:01:44.126 UTC [208] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:01:44.126 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:01:44.127 UTC [208] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:01:44.127 UTC [208] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:01:44.127 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:01:44.129 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:01:44.129 UTC [208] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:01:44.129 UTC [208] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:01:44.130 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:01:44.130 UTC [208] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:01:44.130 UTC [208] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:01:44.131 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:01:44.133 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:01:44.133 UTC [208] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:01:44.133 UTC [208] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:01:44.134 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:01:44.137 UTC [208] DEBUG:  building index "pg_toast_20057_index" on table "pg_toast_20057" serially
2025-04-19 19:01:44.138 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:01:44.138 UTC [208] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:01:44.138 UTC [208] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:01:44.139 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:01:44.140 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:01:44.141 UTC [208] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:01:44.141 UTC [208] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:01:44.142 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:01:44.142 UTC [208] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:01:44.142 UTC [208] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:01:44.143 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:01:44.145 UTC [208] DEBUG:  building index "pg_toast_20090_index" on table "pg_toast_20090" serially
2025-04-19 19:01:44.145 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:01:44.146 UTC [208] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:01:44.146 UTC [208] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:01:44.147 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:01:44.148 UTC [208] DEBUG:  building index "pg_toast_20101_index" on table "pg_toast_20101" serially
2025-04-19 19:01:44.149 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:01:44.149 UTC [208] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:01:44.149 UTC [208] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:01:44.151 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:01:44.152 UTC [208] DEBUG:  building index "pg_toast_20124_index" on table "pg_toast_20124" serially
2025-04-19 19:01:44.153 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:01:44.153 UTC [208] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:01:44.153 UTC [208] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:01:44.154 UTC [208] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:01:44.154 UTC [208] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:01:44.155 UTC [208] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:01:44.155 UTC [208] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:01:44.156 UTC [208] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:01:44.156 UTC [208] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:01:44.157 UTC [208] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:01:44.158 UTC [208] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:01:44.159 UTC [208] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:01:44.159 UTC [208] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:01:44.161 UTC [208] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:01:44.161 UTC [208] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:01:44.163 UTC [208] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:01:44.163 UTC [208] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:01:44.164 UTC [208] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 19:01:44.165 UTC [208] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:01:44.165 UTC [208] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:01:44.166 UTC [208] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:01:44.166 UTC [208] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:01:44.168 UTC [208] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:01:44.168 UTC [208] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:01:44.169 UTC [208] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:01:44.169 UTC [208] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:01:44.183 UTC [208] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:44.463 UTC [208] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8rmpZkrYjMH01tNQ49.U1eZX9lJz5gUc5QCBIFvfh1UM4HewwInE2')
	                RETURNING id, username, email
	                
2025-04-19 19:01:44.465 UTC [208] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:01:44.465 UTC [208] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:44.466 UTC [208] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:01:44.470 UTC [208] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 19:01:44.470 UTC [208] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 19:01:44.475 UTC [208] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:44.476 UTC [208] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:01:44.478 UTC [208] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:01:44.482 UTC [208] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:01:44.482 UTC [208] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:01:44.486 UTC [208] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:01:44.489 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:01:44.490 UTC [208] DEBUG:  building index "pg_toast_20160_index" on table "pg_toast_20160" serially
2025-04-19 19:01:44.492 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:01:44.493 UTC [208] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:01:44.493 UTC [208] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:01:44.494 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:01:44.494 UTC [208] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:01:44.494 UTC [208] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:01:44.495 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:01:44.495 UTC [208] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:01:44.495 UTC [208] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:01:44.496 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:01:44.497 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:01:44.497 UTC [208] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:01:44.497 UTC [208] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:01:44.498 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:01:44.498 UTC [208] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:01:44.498 UTC [208] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:01:44.499 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:01:44.500 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:01:44.500 UTC [208] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:01:44.500 UTC [208] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:01:44.501 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:01:44.501 UTC [208] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:01:44.501 UTC [208] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:01:44.502 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:01:44.504 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:01:44.504 UTC [208] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:01:44.504 UTC [208] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:01:44.505 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:01:44.506 UTC [208] DEBUG:  building index "pg_toast_20221_index" on table "pg_toast_20221" serially
2025-04-19 19:01:44.507 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:01:44.507 UTC [208] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:01:44.507 UTC [208] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:01:44.509 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:01:44.512 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:01:44.513 UTC [208] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:01:44.513 UTC [208] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:01:44.514 UTC [208] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:01:44.514 UTC [208] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:01:44.514 UTC [208] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:01:44.517 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:01:44.519 UTC [208] DEBUG:  building index "pg_toast_20254_index" on table "pg_toast_20254" serially
2025-04-19 19:01:44.520 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:01:44.520 UTC [208] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:01:44.520 UTC [208] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:01:44.522 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:01:44.523 UTC [208] DEBUG:  building index "pg_toast_20265_index" on table "pg_toast_20265" serially
2025-04-19 19:01:44.524 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:01:44.524 UTC [208] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:01:44.524 UTC [208] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:01:44.525 UTC [208] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:01:44.526 UTC [208] DEBUG:  building index "pg_toast_20288_index" on table "pg_toast_20288" serially
2025-04-19 19:01:44.527 UTC [208] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:01:44.528 UTC [208] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:01:44.528 UTC [208] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:01:44.529 UTC [208] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:01:44.529 UTC [208] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:01:44.529 UTC [208] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:01:44.529 UTC [208] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:01:44.530 UTC [208] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:01:44.530 UTC [208] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:01:44.531 UTC [208] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:01:44.531 UTC [208] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:01:44.532 UTC [208] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:01:44.532 UTC [208] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:01:44.533 UTC [208] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:01:44.533 UTC [208] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:01:44.534 UTC [208] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:01:44.534 UTC [208] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:01:44.535 UTC [208] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:01:44.535 UTC [208] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:01:44.536 UTC [208] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:01:44.536 UTC [208] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:01:44.537 UTC [208] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:01:44.537 UTC [208] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:01:44.538 UTC [208] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:01:44.538 UTC [208] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:01:44.550 UTC [208] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:01:44.809 UTC [208] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$0HPm7WvDcMFhhe8kyd.QxOp7C.G2HMsKDgGROq0rds9PRAhzulDn.')
	                RETURNING id, username, email
	                
2025-04-19 19:01:44.811 UTC [208] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:01:44.812 UTC [208] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:01:57.510 UTC [208] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:01:57.858 UTC [208] DEBUG:  unexpected EOF on client connection
2025-04-19 19:02:00.869 UTC [223] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:00.884 UTC [223] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:00.892 UTC [223] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:00.892 UTC [223] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:00.896 UTC [223] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:00.904 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:00.909 UTC [223] DEBUG:  building index "pg_toast_20324_index" on table "pg_toast_20324" serially
2025-04-19 19:02:00.911 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:00.912 UTC [223] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:00.912 UTC [223] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:00.913 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:00.913 UTC [223] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:00.913 UTC [223] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:00.914 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:00.915 UTC [223] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:00.915 UTC [223] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:00.915 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:00.917 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:00.917 UTC [223] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:00.917 UTC [223] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:00.918 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:00.919 UTC [223] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:00.919 UTC [223] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:00.920 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:00.921 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:00.921 UTC [223] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:00.921 UTC [223] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:00.922 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:00.923 UTC [223] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:00.923 UTC [223] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:00.924 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:00.925 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:00.926 UTC [223] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:00.926 UTC [223] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:00.927 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:00.929 UTC [223] DEBUG:  building index "pg_toast_20385_index" on table "pg_toast_20385" serially
2025-04-19 19:02:00.930 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:00.930 UTC [223] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:00.930 UTC [223] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:00.931 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:00.932 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:00.933 UTC [223] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:00.933 UTC [223] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:00.933 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:00.934 UTC [223] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:00.934 UTC [223] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:00.936 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:00.939 UTC [223] DEBUG:  building index "pg_toast_20418_index" on table "pg_toast_20418" serially
2025-04-19 19:02:00.940 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:00.941 UTC [223] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:00.941 UTC [223] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:00.942 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:00.943 UTC [223] DEBUG:  building index "pg_toast_20429_index" on table "pg_toast_20429" serially
2025-04-19 19:02:00.944 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:00.944 UTC [223] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:00.944 UTC [223] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:00.946 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:00.949 UTC [223] DEBUG:  building index "pg_toast_20452_index" on table "pg_toast_20452" serially
2025-04-19 19:02:00.950 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:00.950 UTC [223] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:00.950 UTC [223] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:00.953 UTC [223] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:00.953 UTC [223] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:00.955 UTC [223] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:00.955 UTC [223] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:00.957 UTC [223] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:00.957 UTC [223] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:00.961 UTC [223] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:00.961 UTC [223] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:00.964 UTC [223] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:00.964 UTC [223] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:00.969 UTC [223] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:00.969 UTC [223] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:00.970 UTC [223] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:00.970 UTC [223] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:00.973 UTC [223] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:00.973 UTC [223] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:00.974 UTC [223] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:00.974 UTC [223] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:00.975 UTC [223] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:00.975 UTC [223] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:00.976 UTC [223] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:00.976 UTC [223] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:01.007 UTC [223] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:01.312 UTC [223] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$YWfdbkd8TV6TtpR6rWafG.5W/orW8HvMN0CUhO.Ss7eEWSs0KY7V6')
	                RETURNING id, username, email
	                
2025-04-19 19:02:01.313 UTC [223] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:01.314 UTC [223] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:01.315 UTC [223] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:02:01.337 UTC [223] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:01.339 UTC [223] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:01.344 UTC [223] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:01.350 UTC [223] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:01.350 UTC [223] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:01.354 UTC [223] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:01.358 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:01.359 UTC [223] DEBUG:  building index "pg_toast_20488_index" on table "pg_toast_20488" serially
2025-04-19 19:02:01.361 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:01.361 UTC [223] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:01.361 UTC [223] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:01.362 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:01.362 UTC [223] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:01.362 UTC [223] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:01.363 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:01.363 UTC [223] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:01.363 UTC [223] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:01.364 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:01.365 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:01.365 UTC [223] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:01.365 UTC [223] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:01.366 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:01.366 UTC [223] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:01.366 UTC [223] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:01.366 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:01.368 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:01.370 UTC [223] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:01.370 UTC [223] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:01.375 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:01.375 UTC [223] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:01.375 UTC [223] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:01.377 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:01.378 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:01.379 UTC [223] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:01.379 UTC [223] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:01.380 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:01.381 UTC [223] DEBUG:  building index "pg_toast_20549_index" on table "pg_toast_20549" serially
2025-04-19 19:02:01.382 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:01.382 UTC [223] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:01.382 UTC [223] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:01.384 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:01.385 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:01.385 UTC [223] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:01.385 UTC [223] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:01.386 UTC [223] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:01.386 UTC [223] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:01.386 UTC [223] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:01.387 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:01.389 UTC [223] DEBUG:  building index "pg_toast_20582_index" on table "pg_toast_20582" serially
2025-04-19 19:02:01.390 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:01.390 UTC [223] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:01.390 UTC [223] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:01.391 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:01.392 UTC [223] DEBUG:  building index "pg_toast_20593_index" on table "pg_toast_20593" serially
2025-04-19 19:02:01.393 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:01.393 UTC [223] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:01.393 UTC [223] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:01.401 UTC [223] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:01.403 UTC [223] DEBUG:  building index "pg_toast_20616_index" on table "pg_toast_20616" serially
2025-04-19 19:02:01.405 UTC [223] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:01.405 UTC [223] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:01.405 UTC [223] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:01.407 UTC [223] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:01.407 UTC [223] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:01.408 UTC [223] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:01.408 UTC [223] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:01.409 UTC [223] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:01.409 UTC [223] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:01.410 UTC [223] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:01.410 UTC [223] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:01.411 UTC [223] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:01.411 UTC [223] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:01.412 UTC [223] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:01.412 UTC [223] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:01.413 UTC [223] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:01.413 UTC [223] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:01.415 UTC [223] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:01.415 UTC [223] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:01.416 UTC [223] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:01.416 UTC [223] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:01.417 UTC [223] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:01.417 UTC [223] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:01.418 UTC [223] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:01.418 UTC [223] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:01.431 UTC [223] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:01.700 UTC [223] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$oPFtQIp4VhU3pia6yHVmmueDiYMsL9BECK5q.yTxSPVjbW84ZD0na')
	                RETURNING id, username, email
	                
2025-04-19 19:02:01.701 UTC [223] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:01.701 UTC [223] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:06.087 UTC [224] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:02:13.713 UTC [223] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:02:14.132 UTC [223] DEBUG:  unexpected EOF on client connection
2025-04-19 19:02:17.531 UTC [239] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:17.541 UTC [239] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:17.555 UTC [239] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:17.555 UTC [239] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:17.576 UTC [239] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:17.584 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:17.587 UTC [239] DEBUG:  building index "pg_toast_20652_index" on table "pg_toast_20652" serially
2025-04-19 19:02:17.588 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:17.589 UTC [239] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:17.589 UTC [239] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:17.590 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:17.590 UTC [239] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:17.590 UTC [239] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:17.591 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:17.591 UTC [239] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:17.591 UTC [239] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:17.592 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:17.597 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:17.597 UTC [239] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:17.598 UTC [239] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:17.599 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:17.599 UTC [239] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:17.599 UTC [239] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:17.601 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:17.607 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:17.608 UTC [239] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:17.608 UTC [239] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:17.609 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:17.609 UTC [239] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:17.610 UTC [239] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:17.611 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:17.612 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:17.613 UTC [239] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:17.613 UTC [239] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:17.614 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:17.617 UTC [239] DEBUG:  building index "pg_toast_20713_index" on table "pg_toast_20713" serially
2025-04-19 19:02:17.618 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:17.618 UTC [239] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:17.618 UTC [239] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:17.620 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:17.621 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:17.622 UTC [239] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:17.622 UTC [239] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:17.623 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:17.623 UTC [239] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:17.623 UTC [239] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:17.626 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:17.630 UTC [239] DEBUG:  building index "pg_toast_20746_index" on table "pg_toast_20746" serially
2025-04-19 19:02:17.632 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:17.633 UTC [239] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:17.633 UTC [239] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:17.634 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:17.636 UTC [239] DEBUG:  building index "pg_toast_20757_index" on table "pg_toast_20757" serially
2025-04-19 19:02:17.636 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:17.637 UTC [239] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:17.637 UTC [239] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:17.639 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:17.640 UTC [239] DEBUG:  building index "pg_toast_20780_index" on table "pg_toast_20780" serially
2025-04-19 19:02:17.641 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:17.641 UTC [239] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:17.641 UTC [239] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:17.642 UTC [239] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:17.642 UTC [239] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:17.643 UTC [239] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:17.643 UTC [239] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:17.644 UTC [239] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:17.644 UTC [239] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:17.645 UTC [239] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:17.645 UTC [239] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:17.646 UTC [239] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:17.646 UTC [239] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:17.647 UTC [239] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:17.647 UTC [239] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:17.648 UTC [239] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:17.648 UTC [239] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:17.649 UTC [239] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:17.649 UTC [239] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:17.650 UTC [239] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:17.650 UTC [239] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:17.651 UTC [239] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:17.651 UTC [239] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:17.652 UTC [239] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:17.652 UTC [239] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:17.668 UTC [239] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:17.971 UTC [239] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$CC5VkSUpoPr6WNOugl1oB.Eyo/NN3M2subspsehcRAAspMRAvYSqG')
	                RETURNING id, username, email
	                
2025-04-19 19:02:17.972 UTC [239] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:17.973 UTC [239] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:17.974 UTC [239] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:02:17.983 UTC [239] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:17.984 UTC [239] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:17.988 UTC [239] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:17.994 UTC [239] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:17.994 UTC [239] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:18.001 UTC [239] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:18.006 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:18.007 UTC [239] DEBUG:  building index "pg_toast_20816_index" on table "pg_toast_20816" serially
2025-04-19 19:02:18.008 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:18.009 UTC [239] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:18.009 UTC [239] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:18.010 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:18.010 UTC [239] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:18.010 UTC [239] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:18.011 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:18.011 UTC [239] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:18.011 UTC [239] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:18.012 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:18.014 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:18.014 UTC [239] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:18.014 UTC [239] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:18.015 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:18.015 UTC [239] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:18.015 UTC [239] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:18.016 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:18.017 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:18.017 UTC [239] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:18.017 UTC [239] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:18.023 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:18.024 UTC [239] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:18.024 UTC [239] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:18.026 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:18.027 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:18.028 UTC [239] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:18.028 UTC [239] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:18.030 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:18.031 UTC [239] DEBUG:  building index "pg_toast_20877_index" on table "pg_toast_20877" serially
2025-04-19 19:02:18.032 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:18.032 UTC [239] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:18.032 UTC [239] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:18.034 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:18.035 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:18.035 UTC [239] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:18.035 UTC [239] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:18.036 UTC [239] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:18.036 UTC [239] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:18.036 UTC [239] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:18.037 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:18.038 UTC [239] DEBUG:  building index "pg_toast_20910_index" on table "pg_toast_20910" serially
2025-04-19 19:02:18.039 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:18.039 UTC [239] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:18.039 UTC [239] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:18.040 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:18.041 UTC [239] DEBUG:  building index "pg_toast_20921_index" on table "pg_toast_20921" serially
2025-04-19 19:02:18.042 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:18.042 UTC [239] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:18.042 UTC [239] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:18.043 UTC [239] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:18.044 UTC [239] DEBUG:  building index "pg_toast_20944_index" on table "pg_toast_20944" serially
2025-04-19 19:02:18.045 UTC [239] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:18.045 UTC [239] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:18.045 UTC [239] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:18.046 UTC [239] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:18.046 UTC [239] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:18.047 UTC [239] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:18.047 UTC [239] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:18.048 UTC [239] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:18.048 UTC [239] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:18.049 UTC [239] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:18.049 UTC [239] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:18.051 UTC [239] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:18.051 UTC [239] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:18.052 UTC [239] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:18.052 UTC [239] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:18.053 UTC [239] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:18.053 UTC [239] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:18.055 UTC [239] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:18.055 UTC [239] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:18.056 UTC [239] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:18.056 UTC [239] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:18.059 UTC [239] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:18.059 UTC [239] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:18.060 UTC [239] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:18.060 UTC [239] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:18.068 UTC [239] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:18.366 UTC [239] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5IwyXtagJTpDE2QqBrZztuoPNSXYrwoxY0g239cy5A08CLVSYK7Ma')
	                RETURNING id, username, email
	                
2025-04-19 19:02:18.368 UTC [239] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:18.368 UTC [239] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:30.274 UTC [239] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:02:30.603 UTC [239] DEBUG:  unexpected EOF on client connection
2025-04-19 19:02:33.236 UTC [247] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:33.246 UTC [247] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:33.258 UTC [247] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:33.258 UTC [247] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:33.262 UTC [247] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:33.266 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:33.274 UTC [247] DEBUG:  building index "pg_toast_20980_index" on table "pg_toast_20980" serially
2025-04-19 19:02:33.277 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:33.278 UTC [247] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:33.278 UTC [247] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:33.279 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:33.280 UTC [247] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:33.280 UTC [247] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:33.281 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:33.281 UTC [247] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:33.281 UTC [247] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:33.282 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:33.283 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:33.284 UTC [247] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:33.284 UTC [247] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:33.285 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:33.285 UTC [247] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:33.285 UTC [247] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:33.287 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:33.290 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:33.290 UTC [247] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:33.291 UTC [247] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:33.292 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:33.293 UTC [247] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:33.293 UTC [247] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:33.298 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:33.300 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:33.300 UTC [247] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:33.300 UTC [247] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:33.301 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:33.303 UTC [247] DEBUG:  building index "pg_toast_21041_index" on table "pg_toast_21041" serially
2025-04-19 19:02:33.305 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:33.305 UTC [247] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:33.305 UTC [247] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:33.306 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:33.308 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:33.308 UTC [247] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:33.308 UTC [247] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:33.309 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:33.309 UTC [247] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:33.309 UTC [247] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:33.310 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:33.311 UTC [247] DEBUG:  building index "pg_toast_21074_index" on table "pg_toast_21074" serially
2025-04-19 19:02:33.312 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:33.313 UTC [247] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:33.313 UTC [247] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:33.314 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:33.315 UTC [247] DEBUG:  building index "pg_toast_21085_index" on table "pg_toast_21085" serially
2025-04-19 19:02:33.316 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:33.316 UTC [247] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:33.316 UTC [247] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:33.318 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:33.319 UTC [247] DEBUG:  building index "pg_toast_21108_index" on table "pg_toast_21108" serially
2025-04-19 19:02:33.320 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:33.320 UTC [247] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:33.320 UTC [247] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:33.321 UTC [247] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:33.321 UTC [247] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:33.322 UTC [247] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:33.322 UTC [247] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:33.323 UTC [247] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:33.323 UTC [247] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:33.324 UTC [247] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:33.324 UTC [247] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:33.325 UTC [247] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:33.325 UTC [247] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:33.326 UTC [247] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:33.326 UTC [247] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:33.326 UTC [247] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:33.326 UTC [247] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:33.327 UTC [247] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:33.327 UTC [247] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:33.328 UTC [247] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:33.328 UTC [247] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:33.329 UTC [247] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:33.329 UTC [247] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:33.330 UTC [247] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:33.330 UTC [247] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:33.349 UTC [247] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:33.665 UTC [247] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$t1oYz/K8RWEapXhJ1vE6IOEcot4B54otXYm./WXugrSElAnF5UysK')
	                RETURNING id, username, email
	                
2025-04-19 19:02:33.666 UTC [247] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:33.666 UTC [247] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:33.667 UTC [247] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:02:33.679 UTC [247] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:33.684 UTC [247] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:33.688 UTC [247] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:33.697 UTC [247] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:33.697 UTC [247] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:33.701 UTC [247] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:33.704 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:33.706 UTC [247] DEBUG:  building index "pg_toast_21144_index" on table "pg_toast_21144" serially
2025-04-19 19:02:33.707 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:33.707 UTC [247] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:33.707 UTC [247] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:33.709 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:33.710 UTC [247] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:33.710 UTC [247] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:33.710 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:33.711 UTC [247] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:33.711 UTC [247] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:33.711 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:33.712 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:33.713 UTC [247] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:33.713 UTC [247] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:33.713 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:33.714 UTC [247] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:33.714 UTC [247] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:33.714 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:33.715 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:33.715 UTC [247] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:33.715 UTC [247] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:33.717 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:33.717 UTC [247] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:33.717 UTC [247] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:33.719 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:33.720 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:33.720 UTC [247] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:33.720 UTC [247] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:33.722 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:33.724 UTC [247] DEBUG:  building index "pg_toast_21205_index" on table "pg_toast_21205" serially
2025-04-19 19:02:33.725 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:33.725 UTC [247] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:33.725 UTC [247] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:33.726 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:33.727 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:33.728 UTC [247] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:33.728 UTC [247] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:33.728 UTC [247] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:33.729 UTC [247] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:33.729 UTC [247] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:33.730 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:33.731 UTC [247] DEBUG:  building index "pg_toast_21238_index" on table "pg_toast_21238" serially
2025-04-19 19:02:33.732 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:33.732 UTC [247] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:33.732 UTC [247] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:33.733 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:33.734 UTC [247] DEBUG:  building index "pg_toast_21249_index" on table "pg_toast_21249" serially
2025-04-19 19:02:33.735 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:33.735 UTC [247] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:33.735 UTC [247] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:33.737 UTC [247] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:33.738 UTC [247] DEBUG:  building index "pg_toast_21272_index" on table "pg_toast_21272" serially
2025-04-19 19:02:33.739 UTC [247] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:33.739 UTC [247] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:33.739 UTC [247] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:33.740 UTC [247] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:33.740 UTC [247] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:33.741 UTC [247] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:33.741 UTC [247] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:33.742 UTC [247] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:33.742 UTC [247] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:33.743 UTC [247] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:33.743 UTC [247] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:33.744 UTC [247] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:33.744 UTC [247] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:33.745 UTC [247] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:33.745 UTC [247] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:33.746 UTC [247] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:33.746 UTC [247] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:33.747 UTC [247] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:33.747 UTC [247] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:33.748 UTC [247] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:33.748 UTC [247] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:33.749 UTC [247] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:33.749 UTC [247] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:33.751 UTC [247] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:33.751 UTC [247] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:33.763 UTC [247] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:34.052 UTC [247] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$orO6hRhCh2Xfbhk5lXEUxepP9YsyC.Tf5EyiKtmHeGefWpe.3kg8W')
	                RETURNING id, username, email
	                
2025-04-19 19:02:34.053 UTC [247] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:34.054 UTC [247] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:36.078 UTC [248] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:02:36.342 UTC [248] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:02:46.473 UTC [247] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:02:46.914 UTC [247] DEBUG:  unexpected EOF on client connection
2025-04-19 19:02:49.438 UTC [262] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:49.448 UTC [262] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:49.458 UTC [262] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:49.458 UTC [262] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:49.462 UTC [262] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:49.465 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:49.469 UTC [262] DEBUG:  building index "pg_toast_21309_index" on table "pg_toast_21309" serially
2025-04-19 19:02:49.471 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:49.474 UTC [262] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:49.474 UTC [262] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:49.476 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:49.476 UTC [262] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:49.476 UTC [262] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:49.478 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:49.479 UTC [262] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:49.479 UTC [262] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:49.480 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:49.481 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:49.482 UTC [262] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:49.482 UTC [262] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:49.483 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:49.483 UTC [262] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:49.483 UTC [262] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:49.484 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:49.486 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:49.486 UTC [262] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:49.486 UTC [262] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:49.487 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:49.487 UTC [262] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:49.487 UTC [262] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:49.490 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:49.491 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:49.491 UTC [262] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:49.491 UTC [262] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:49.492 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:49.494 UTC [262] DEBUG:  building index "pg_toast_21370_index" on table "pg_toast_21370" serially
2025-04-19 19:02:49.495 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:49.495 UTC [262] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:49.495 UTC [262] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:49.496 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:49.498 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:49.498 UTC [262] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:49.498 UTC [262] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:49.499 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:49.499 UTC [262] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:49.499 UTC [262] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:49.500 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:49.503 UTC [262] DEBUG:  building index "pg_toast_21403_index" on table "pg_toast_21403" serially
2025-04-19 19:02:49.506 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:49.506 UTC [262] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:49.507 UTC [262] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:49.509 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:49.511 UTC [262] DEBUG:  building index "pg_toast_21414_index" on table "pg_toast_21414" serially
2025-04-19 19:02:49.512 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:49.512 UTC [262] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:49.512 UTC [262] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:49.513 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:49.515 UTC [262] DEBUG:  building index "pg_toast_21437_index" on table "pg_toast_21437" serially
2025-04-19 19:02:49.516 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:49.517 UTC [262] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:49.517 UTC [262] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:49.518 UTC [262] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:49.518 UTC [262] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:49.522 UTC [262] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:49.522 UTC [262] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:49.523 UTC [262] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:49.523 UTC [262] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:49.524 UTC [262] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:49.524 UTC [262] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:49.525 UTC [262] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:49.525 UTC [262] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:49.526 UTC [262] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:49.526 UTC [262] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:49.527 UTC [262] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:49.527 UTC [262] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:49.528 UTC [262] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:49.528 UTC [262] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:49.529 UTC [262] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:49.529 UTC [262] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:49.529 UTC [262] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:49.529 UTC [262] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:49.530 UTC [262] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:49.530 UTC [262] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:49.547 UTC [262] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:49.874 UTC [262] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$p8xEmN6c0Kz6YrUWo/Snq.UV0voDESfFjsXsvzX2/DdlR46UMGR1O')
	                RETURNING id, username, email
	                
2025-04-19 19:02:49.877 UTC [262] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:49.878 UTC [262] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:02:49.879 UTC [262] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:02:49.920 UTC [262] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:49.924 UTC [262] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:02:49.928 UTC [262] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:02:49.943 UTC [262] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:02:49.943 UTC [262] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:02:49.954 UTC [262] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:02:49.959 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:02:49.961 UTC [262] DEBUG:  building index "pg_toast_21473_index" on table "pg_toast_21473" serially
2025-04-19 19:02:49.963 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:02:49.963 UTC [262] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:02:49.963 UTC [262] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:02:49.964 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:02:49.965 UTC [262] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:02:49.965 UTC [262] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:02:49.966 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:02:49.966 UTC [262] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:02:49.966 UTC [262] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:02:49.968 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:02:49.970 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:02:49.971 UTC [262] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:02:49.971 UTC [262] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:02:49.972 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:02:49.972 UTC [262] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:02:49.972 UTC [262] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:02:49.973 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:02:49.974 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:02:49.975 UTC [262] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:02:49.975 UTC [262] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:02:49.976 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:02:49.976 UTC [262] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:02:49.976 UTC [262] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:02:49.977 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:02:49.978 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:02:49.978 UTC [262] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:02:49.978 UTC [262] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:02:49.980 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:02:49.981 UTC [262] DEBUG:  building index "pg_toast_21534_index" on table "pg_toast_21534" serially
2025-04-19 19:02:49.982 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:02:49.982 UTC [262] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:02:49.982 UTC [262] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:02:49.983 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:02:49.984 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:02:49.985 UTC [262] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:02:49.985 UTC [262] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:02:49.985 UTC [262] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:02:49.986 UTC [262] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:02:49.986 UTC [262] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:02:49.987 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:02:49.990 UTC [262] DEBUG:  building index "pg_toast_21567_index" on table "pg_toast_21567" serially
2025-04-19 19:02:49.994 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:02:49.995 UTC [262] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:02:49.995 UTC [262] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:02:49.996 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:02:49.997 UTC [262] DEBUG:  building index "pg_toast_21578_index" on table "pg_toast_21578" serially
2025-04-19 19:02:49.999 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:02:49.999 UTC [262] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:02:49.999 UTC [262] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:02:50.001 UTC [262] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:02:50.002 UTC [262] DEBUG:  building index "pg_toast_21601_index" on table "pg_toast_21601" serially
2025-04-19 19:02:50.003 UTC [262] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:02:50.004 UTC [262] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:02:50.004 UTC [262] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:02:50.005 UTC [262] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:02:50.005 UTC [262] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:02:50.005 UTC [262] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:02:50.006 UTC [262] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:02:50.007 UTC [262] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:02:50.007 UTC [262] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:02:50.010 UTC [262] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:02:50.010 UTC [262] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:02:50.011 UTC [262] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:02:50.011 UTC [262] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:02:50.012 UTC [262] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:02:50.012 UTC [262] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:02:50.013 UTC [262] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:02:50.013 UTC [262] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:02:50.013 UTC [262] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:02:50.013 UTC [262] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:02:50.014 UTC [262] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:02:50.014 UTC [262] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:02:50.015 UTC [262] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:02:50.015 UTC [262] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:02:50.016 UTC [262] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:02:50.016 UTC [262] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:02:50.027 UTC [262] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:02:50.370 UTC [262] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$39uLGmpFbh8Ctb5HynGkA.4jVTMHAEQx03zzqr3l12x8RYBUILCEy')
	                RETURNING id, username, email
	                
2025-04-19 19:02:50.382 UTC [262] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:02:50.384 UTC [262] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:02.771 UTC [262] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:03:03.118 UTC [262] DEBUG:  unexpected EOF on client connection
2025-04-19 19:03:05.956 UTC [270] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:05.967 UTC [270] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:05.979 UTC [270] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:05.979 UTC [270] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:05.985 UTC [270] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:05.993 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:06.000 UTC [270] DEBUG:  building index "pg_toast_21637_index" on table "pg_toast_21637" serially
2025-04-19 19:03:06.003 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:06.003 UTC [270] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:06.003 UTC [270] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:06.005 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:06.005 UTC [270] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:06.005 UTC [270] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:06.006 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:06.007 UTC [270] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:06.007 UTC [270] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:06.008 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:06.009 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:06.009 UTC [270] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:06.009 UTC [270] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:06.010 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:06.010 UTC [270] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:06.010 UTC [270] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:06.011 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:06.012 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:06.012 UTC [270] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:06.012 UTC [270] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:06.013 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:06.013 UTC [270] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:06.013 UTC [270] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:06.015 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:06.016 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:06.016 UTC [270] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:06.017 UTC [270] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:06.018 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:06.020 UTC [270] DEBUG:  building index "pg_toast_21698_index" on table "pg_toast_21698" serially
2025-04-19 19:03:06.021 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:06.021 UTC [270] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:06.021 UTC [270] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:06.022 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:06.023 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:06.024 UTC [270] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:06.024 UTC [270] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:06.024 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:06.025 UTC [270] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:06.025 UTC [270] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:06.028 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:06.030 UTC [270] DEBUG:  building index "pg_toast_21731_index" on table "pg_toast_21731" serially
2025-04-19 19:03:06.031 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:06.032 UTC [270] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:06.032 UTC [270] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:06.033 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:06.035 UTC [270] DEBUG:  building index "pg_toast_21742_index" on table "pg_toast_21742" serially
2025-04-19 19:03:06.036 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:06.036 UTC [270] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:06.036 UTC [270] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:06.038 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:06.039 UTC [270] DEBUG:  building index "pg_toast_21765_index" on table "pg_toast_21765" serially
2025-04-19 19:03:06.041 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:06.041 UTC [270] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:06.041 UTC [270] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:06.042 UTC [270] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:06.042 UTC [270] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:06.043 UTC [270] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:06.043 UTC [270] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:06.044 UTC [270] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:06.044 UTC [270] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:06.045 UTC [270] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:06.045 UTC [270] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:06.046 UTC [270] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:06.046 UTC [270] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:06.047 UTC [270] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:06.047 UTC [270] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:06.048 UTC [270] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:06.048 UTC [270] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:06.049 UTC [270] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:06.049 UTC [270] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:06.050 UTC [270] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:06.050 UTC [270] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:06.051 UTC [270] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:06.051 UTC [270] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:06.052 UTC [270] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:06.052 UTC [270] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:06.074 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:06.087 UTC [271] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:03:06.382 UTC [270] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$0zpom3ogLEpPcSZQqs7IDubGZZPtOxk8Ku/ZFA64frsQG7XxLF3xC')
	                RETURNING id, username, email
	                
2025-04-19 19:03:06.383 UTC [270] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:06.385 UTC [270] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:06.387 UTC [270] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:03:06.406 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:06.407 UTC [270] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:06.411 UTC [270] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:06.415 UTC [270] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:06.415 UTC [270] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:06.419 UTC [270] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:06.423 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:06.424 UTC [270] DEBUG:  building index "pg_toast_21801_index" on table "pg_toast_21801" serially
2025-04-19 19:03:06.427 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:06.428 UTC [270] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:06.428 UTC [270] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:06.429 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:06.429 UTC [270] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:06.429 UTC [270] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:06.429 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:06.430 UTC [270] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:06.430 UTC [270] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:06.430 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:06.431 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:06.431 UTC [270] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:06.431 UTC [270] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:06.432 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:06.432 UTC [270] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:06.432 UTC [270] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:06.433 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:06.434 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:06.434 UTC [270] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:06.434 UTC [270] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:06.435 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:06.436 UTC [270] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:06.436 UTC [270] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:06.437 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:06.438 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:06.438 UTC [270] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:06.438 UTC [270] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:06.439 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:06.441 UTC [270] DEBUG:  building index "pg_toast_21862_index" on table "pg_toast_21862" serially
2025-04-19 19:03:06.442 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:06.442 UTC [270] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:06.442 UTC [270] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:06.443 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:06.444 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:06.444 UTC [270] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:06.444 UTC [270] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:06.445 UTC [270] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:06.445 UTC [270] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:06.445 UTC [270] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:06.447 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:06.450 UTC [270] DEBUG:  building index "pg_toast_21895_index" on table "pg_toast_21895" serially
2025-04-19 19:03:06.453 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:06.453 UTC [270] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:06.453 UTC [270] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:06.454 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:06.456 UTC [270] DEBUG:  building index "pg_toast_21906_index" on table "pg_toast_21906" serially
2025-04-19 19:03:06.457 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:06.458 UTC [270] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:06.458 UTC [270] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:06.459 UTC [270] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:06.460 UTC [270] DEBUG:  building index "pg_toast_21929_index" on table "pg_toast_21929" serially
2025-04-19 19:03:06.461 UTC [270] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:06.461 UTC [270] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:06.461 UTC [270] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:06.462 UTC [270] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:06.462 UTC [270] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:06.463 UTC [270] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:06.464 UTC [270] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:06.464 UTC [270] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:06.464 UTC [270] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:06.466 UTC [270] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:06.466 UTC [270] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:06.466 UTC [270] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:06.466 UTC [270] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:06.468 UTC [270] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:06.468 UTC [270] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:06.468 UTC [270] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:06.469 UTC [270] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:06.469 UTC [270] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:06.470 UTC [270] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:06.470 UTC [270] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:06.470 UTC [270] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:06.471 UTC [270] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:06.471 UTC [270] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:06.472 UTC [270] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:06.472 UTC [270] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:06.501 UTC [270] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:06.846 UTC [270] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$T3Wjz1sKbpW77P4rsbuveeV7M0hgm.DmcvDjQQB6KlvGw2Ql3nMwC')
	                RETURNING id, username, email
	                
2025-04-19 19:03:06.848 UTC [270] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:06.850 UTC [270] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:18.913 UTC [270] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:03:19.280 UTC [270] DEBUG:  unexpected EOF on client connection
2025-04-19 19:03:21.310 UTC [286] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:21.318 UTC [286] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:21.325 UTC [286] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:21.325 UTC [286] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:21.330 UTC [286] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:21.340 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:21.349 UTC [286] DEBUG:  building index "pg_toast_21965_index" on table "pg_toast_21965" serially
2025-04-19 19:03:21.352 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:21.353 UTC [286] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:21.353 UTC [286] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:21.356 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:21.356 UTC [286] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:21.356 UTC [286] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:21.358 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:21.358 UTC [286] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:21.358 UTC [286] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:21.360 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:21.362 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:21.362 UTC [286] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:21.362 UTC [286] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:21.363 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:21.363 UTC [286] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:21.363 UTC [286] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:21.364 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:21.366 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:21.366 UTC [286] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:21.366 UTC [286] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:21.367 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:21.367 UTC [286] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:21.367 UTC [286] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:21.369 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:21.370 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:21.371 UTC [286] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:21.371 UTC [286] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:21.373 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:21.375 UTC [286] DEBUG:  building index "pg_toast_22026_index" on table "pg_toast_22026" serially
2025-04-19 19:03:21.377 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:21.378 UTC [286] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:21.378 UTC [286] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:21.380 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:21.382 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:21.382 UTC [286] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:21.382 UTC [286] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:21.383 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:21.384 UTC [286] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:21.384 UTC [286] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:21.385 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:21.387 UTC [286] DEBUG:  building index "pg_toast_22059_index" on table "pg_toast_22059" serially
2025-04-19 19:03:21.387 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:21.388 UTC [286] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:21.388 UTC [286] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:21.389 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:21.390 UTC [286] DEBUG:  building index "pg_toast_22070_index" on table "pg_toast_22070" serially
2025-04-19 19:03:21.390 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:21.391 UTC [286] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:21.391 UTC [286] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:21.392 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:21.393 UTC [286] DEBUG:  building index "pg_toast_22093_index" on table "pg_toast_22093" serially
2025-04-19 19:03:21.394 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:21.395 UTC [286] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:21.395 UTC [286] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:21.396 UTC [286] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:21.396 UTC [286] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:21.396 UTC [286] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:21.396 UTC [286] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:21.397 UTC [286] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:21.397 UTC [286] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:21.398 UTC [286] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:21.398 UTC [286] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:21.399 UTC [286] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:21.399 UTC [286] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:21.400 UTC [286] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:21.400 UTC [286] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:21.401 UTC [286] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:21.401 UTC [286] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:21.402 UTC [286] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:21.402 UTC [286] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:21.403 UTC [286] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:21.403 UTC [286] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:21.404 UTC [286] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:21.404 UTC [286] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:21.405 UTC [286] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:21.405 UTC [286] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:21.420 UTC [286] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:21.688 UTC [286] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$UeOhD16fatyMWBNVBGjLQuGYCStlVcNU5uDsJQW.BLhwKJuyp4khW')
	                RETURNING id, username, email
	                
2025-04-19 19:03:21.689 UTC [286] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:21.689 UTC [286] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:21.690 UTC [286] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:03:21.698 UTC [286] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:21.699 UTC [286] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:21.701 UTC [286] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:21.705 UTC [286] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:21.705 UTC [286] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:21.708 UTC [286] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:21.711 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:21.712 UTC [286] DEBUG:  building index "pg_toast_22129_index" on table "pg_toast_22129" serially
2025-04-19 19:03:21.713 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:21.713 UTC [286] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:21.713 UTC [286] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:21.714 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:21.714 UTC [286] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:21.714 UTC [286] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:21.715 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:21.715 UTC [286] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:21.715 UTC [286] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:21.715 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:21.716 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:21.716 UTC [286] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:21.716 UTC [286] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:21.717 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:21.717 UTC [286] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:21.717 UTC [286] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:21.718 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:21.719 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:21.719 UTC [286] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:21.719 UTC [286] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:21.720 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:21.720 UTC [286] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:21.720 UTC [286] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:21.721 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:21.722 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:21.722 UTC [286] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:21.722 UTC [286] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:21.723 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:21.724 UTC [286] DEBUG:  building index "pg_toast_22190_index" on table "pg_toast_22190" serially
2025-04-19 19:03:21.725 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:21.725 UTC [286] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:21.725 UTC [286] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:21.726 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:21.727 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:21.727 UTC [286] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:21.727 UTC [286] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:21.728 UTC [286] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:21.728 UTC [286] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:21.728 UTC [286] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:21.729 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:21.730 UTC [286] DEBUG:  building index "pg_toast_22223_index" on table "pg_toast_22223" serially
2025-04-19 19:03:21.731 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:21.731 UTC [286] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:21.731 UTC [286] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:21.732 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:21.733 UTC [286] DEBUG:  building index "pg_toast_22234_index" on table "pg_toast_22234" serially
2025-04-19 19:03:21.734 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:21.734 UTC [286] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:21.734 UTC [286] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:21.735 UTC [286] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:21.736 UTC [286] DEBUG:  building index "pg_toast_22257_index" on table "pg_toast_22257" serially
2025-04-19 19:03:21.737 UTC [286] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:21.737 UTC [286] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:21.737 UTC [286] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:21.738 UTC [286] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:21.738 UTC [286] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:21.738 UTC [286] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:21.738 UTC [286] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:21.739 UTC [286] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:21.739 UTC [286] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:21.740 UTC [286] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:21.740 UTC [286] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:21.740 UTC [286] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:21.740 UTC [286] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:21.741 UTC [286] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:21.741 UTC [286] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:21.742 UTC [286] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:21.742 UTC [286] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:21.743 UTC [286] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:21.743 UTC [286] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:21.743 UTC [286] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:21.743 UTC [286] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:21.744 UTC [286] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:21.744 UTC [286] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:21.745 UTC [286] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:21.745 UTC [286] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:21.750 UTC [286] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:21.993 UTC [286] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$YkXbjwg5BjMnyrFcFBT1cO4QmXqs1ykK4qtkTIJJAB9gtWs95tfCu')
	                RETURNING id, username, email
	                
2025-04-19 19:03:21.994 UTC [286] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:21.994 UTC [286] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:34.940 UTC [286] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:03:35.282 UTC [286] DEBUG:  unexpected EOF on client connection
2025-04-19 19:03:36.074 UTC [294] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:03:36.305 UTC [294] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:03:36.353 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 19:03:38.861 UTC [302] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:38.878 UTC [302] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:38.886 UTC [302] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:38.886 UTC [302] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:38.890 UTC [302] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:38.894 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:38.897 UTC [302] DEBUG:  building index "pg_toast_22294_index" on table "pg_toast_22294" serially
2025-04-19 19:03:38.902 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:38.905 UTC [302] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:38.905 UTC [302] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:38.909 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:38.910 UTC [302] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:38.910 UTC [302] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:38.911 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:38.911 UTC [302] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:38.911 UTC [302] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:38.912 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:38.913 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:38.913 UTC [302] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:38.913 UTC [302] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:38.914 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:38.914 UTC [302] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:38.914 UTC [302] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:38.915 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:38.916 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:38.917 UTC [302] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:38.917 UTC [302] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:38.917 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:38.918 UTC [302] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:38.918 UTC [302] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:38.919 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:38.920 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:38.920 UTC [302] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:38.920 UTC [302] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:38.922 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:38.924 UTC [302] DEBUG:  building index "pg_toast_22355_index" on table "pg_toast_22355" serially
2025-04-19 19:03:38.925 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:38.925 UTC [302] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:38.925 UTC [302] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:38.926 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:38.929 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:38.930 UTC [302] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:38.930 UTC [302] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:38.930 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:38.931 UTC [302] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:38.931 UTC [302] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:38.932 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:38.933 UTC [302] DEBUG:  building index "pg_toast_22388_index" on table "pg_toast_22388" serially
2025-04-19 19:03:38.934 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:38.935 UTC [302] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:38.935 UTC [302] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:38.935 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:38.936 UTC [302] DEBUG:  building index "pg_toast_22399_index" on table "pg_toast_22399" serially
2025-04-19 19:03:38.937 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:38.937 UTC [302] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:38.937 UTC [302] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:38.939 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:38.940 UTC [302] DEBUG:  building index "pg_toast_22422_index" on table "pg_toast_22422" serially
2025-04-19 19:03:38.940 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:38.941 UTC [302] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:38.941 UTC [302] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:38.942 UTC [302] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:38.942 UTC [302] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:38.943 UTC [302] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:38.943 UTC [302] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:38.945 UTC [302] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:38.945 UTC [302] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:38.946 UTC [302] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:38.946 UTC [302] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:38.948 UTC [302] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:38.948 UTC [302] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:38.949 UTC [302] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:38.950 UTC [302] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:38.951 UTC [302] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:38.951 UTC [302] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:38.952 UTC [302] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:38.952 UTC [302] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:38.953 UTC [302] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:38.953 UTC [302] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:38.954 UTC [302] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:38.954 UTC [302] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:38.954 UTC [302] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:38.955 UTC [302] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:38.967 UTC [302] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:39.250 UTC [302] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$u3DmzBYJpc8CYDvqIUC4/eNj0W.pORl8El53HFsdU8f7KlDIwrY9i')
	                RETURNING id, username, email
	                
2025-04-19 19:03:39.251 UTC [302] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:39.252 UTC [302] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:39.252 UTC [302] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:03:39.268 UTC [302] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:39.270 UTC [302] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:39.273 UTC [302] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:39.278 UTC [302] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:39.278 UTC [302] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:39.284 UTC [302] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:39.287 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:39.289 UTC [302] DEBUG:  building index "pg_toast_22458_index" on table "pg_toast_22458" serially
2025-04-19 19:03:39.290 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:39.290 UTC [302] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:39.290 UTC [302] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:39.291 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:39.291 UTC [302] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:39.291 UTC [302] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:39.292 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:39.292 UTC [302] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:39.292 UTC [302] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:39.293 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:39.293 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:39.294 UTC [302] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:39.294 UTC [302] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:39.294 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:39.294 UTC [302] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:39.294 UTC [302] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:39.295 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:39.296 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:39.296 UTC [302] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:39.296 UTC [302] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:39.297 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:39.297 UTC [302] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:39.297 UTC [302] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:39.298 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:39.300 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:39.301 UTC [302] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:39.301 UTC [302] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:39.303 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:39.304 UTC [302] DEBUG:  building index "pg_toast_22519_index" on table "pg_toast_22519" serially
2025-04-19 19:03:39.305 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:39.305 UTC [302] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:39.305 UTC [302] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:39.306 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:39.307 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:39.308 UTC [302] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:39.308 UTC [302] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:39.308 UTC [302] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:39.309 UTC [302] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:39.309 UTC [302] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:39.310 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:39.311 UTC [302] DEBUG:  building index "pg_toast_22552_index" on table "pg_toast_22552" serially
2025-04-19 19:03:39.312 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:39.312 UTC [302] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:39.312 UTC [302] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:39.313 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:39.314 UTC [302] DEBUG:  building index "pg_toast_22563_index" on table "pg_toast_22563" serially
2025-04-19 19:03:39.315 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:39.316 UTC [302] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:39.316 UTC [302] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:39.318 UTC [302] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:39.320 UTC [302] DEBUG:  building index "pg_toast_22586_index" on table "pg_toast_22586" serially
2025-04-19 19:03:39.322 UTC [302] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:39.322 UTC [302] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:39.322 UTC [302] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:39.330 UTC [302] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:39.330 UTC [302] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:39.331 UTC [302] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:39.331 UTC [302] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:39.331 UTC [302] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:39.331 UTC [302] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:39.333 UTC [302] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:39.333 UTC [302] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:39.334 UTC [302] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:39.334 UTC [302] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:39.335 UTC [302] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:39.335 UTC [302] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:39.335 UTC [302] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:39.335 UTC [302] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:39.336 UTC [302] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:39.336 UTC [302] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:39.337 UTC [302] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:39.337 UTC [302] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:39.338 UTC [302] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:39.338 UTC [302] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:39.339 UTC [302] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:39.339 UTC [302] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:39.351 UTC [302] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:39.623 UTC [302] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.4ZPFH2kzdR/g0hHNoFNuOQxuS2RHEnlaSqfQuyBjrj5EpZfZxR26')
	                RETURNING id, username, email
	                
2025-04-19 19:03:39.625 UTC [302] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:39.625 UTC [302] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:50.893 UTC [302] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:03:51.200 UTC [302] DEBUG:  unexpected EOF on client connection
2025-04-19 19:03:52.922 UTC [310] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:52.933 UTC [310] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:52.941 UTC [310] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:52.941 UTC [310] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:52.946 UTC [310] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:52.953 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:52.956 UTC [310] DEBUG:  building index "pg_toast_22622_index" on table "pg_toast_22622" serially
2025-04-19 19:03:52.960 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:52.961 UTC [310] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:52.961 UTC [310] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:52.962 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:52.962 UTC [310] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:52.962 UTC [310] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:52.963 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:52.963 UTC [310] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:52.964 UTC [310] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:52.964 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:52.965 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:52.966 UTC [310] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:52.966 UTC [310] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:52.967 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:52.967 UTC [310] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:52.967 UTC [310] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:52.968 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:52.969 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:52.969 UTC [310] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:52.969 UTC [310] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:52.970 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:52.970 UTC [310] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:52.971 UTC [310] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:52.972 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:52.974 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:52.974 UTC [310] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:52.975 UTC [310] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:52.977 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:52.981 UTC [310] DEBUG:  building index "pg_toast_22683_index" on table "pg_toast_22683" serially
2025-04-19 19:03:52.983 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:52.984 UTC [310] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:52.984 UTC [310] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:52.986 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:52.988 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:52.988 UTC [310] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:52.988 UTC [310] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:52.989 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:52.989 UTC [310] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:52.990 UTC [310] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:52.991 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:52.993 UTC [310] DEBUG:  building index "pg_toast_22716_index" on table "pg_toast_22716" serially
2025-04-19 19:03:52.994 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:52.994 UTC [310] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:52.994 UTC [310] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:52.995 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:52.996 UTC [310] DEBUG:  building index "pg_toast_22727_index" on table "pg_toast_22727" serially
2025-04-19 19:03:53.000 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:53.000 UTC [310] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:53.001 UTC [310] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:53.004 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:53.005 UTC [310] DEBUG:  building index "pg_toast_22750_index" on table "pg_toast_22750" serially
2025-04-19 19:03:53.007 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:53.007 UTC [310] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:53.007 UTC [310] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:53.008 UTC [310] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:53.008 UTC [310] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:53.009 UTC [310] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:53.009 UTC [310] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:53.010 UTC [310] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:53.011 UTC [310] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:53.013 UTC [310] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:53.013 UTC [310] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:53.015 UTC [310] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:53.015 UTC [310] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:53.016 UTC [310] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:53.016 UTC [310] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:53.017 UTC [310] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:53.017 UTC [310] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:53.018 UTC [310] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:53.018 UTC [310] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:53.019 UTC [310] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:53.019 UTC [310] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:53.020 UTC [310] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:53.020 UTC [310] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:53.021 UTC [310] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:53.021 UTC [310] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:53.030 UTC [310] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:53.295 UTC [310] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1aUlfa7YROqP0p0FIU9FBuulbwsmwNevZ.bWqtJDD/iToIOW46Izq')
	                RETURNING id, username, email
	                
2025-04-19 19:03:53.295 UTC [310] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:53.296 UTC [310] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:03:53.296 UTC [310] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:03:53.309 UTC [310] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:53.310 UTC [310] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:03:53.314 UTC [310] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:03:53.318 UTC [310] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:03:53.318 UTC [310] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:03:53.322 UTC [310] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:03:53.325 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:03:53.326 UTC [310] DEBUG:  building index "pg_toast_22786_index" on table "pg_toast_22786" serially
2025-04-19 19:03:53.327 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:03:53.328 UTC [310] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:03:53.328 UTC [310] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:03:53.328 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:03:53.328 UTC [310] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:03:53.328 UTC [310] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:03:53.329 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:03:53.329 UTC [310] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:03:53.329 UTC [310] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:03:53.330 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:03:53.331 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:03:53.331 UTC [310] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:03:53.331 UTC [310] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:03:53.332 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:03:53.332 UTC [310] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:03:53.332 UTC [310] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:03:53.332 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:03:53.333 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:03:53.333 UTC [310] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:03:53.333 UTC [310] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:03:53.334 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:03:53.334 UTC [310] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:03:53.334 UTC [310] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:03:53.335 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:03:53.336 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:03:53.336 UTC [310] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:03:53.336 UTC [310] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:03:53.337 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:03:53.338 UTC [310] DEBUG:  building index "pg_toast_22847_index" on table "pg_toast_22847" serially
2025-04-19 19:03:53.339 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:03:53.339 UTC [310] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:03:53.339 UTC [310] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:03:53.340 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:03:53.341 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:03:53.342 UTC [310] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:03:53.342 UTC [310] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:03:53.342 UTC [310] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:03:53.342 UTC [310] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:03:53.342 UTC [310] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:03:53.344 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:03:53.345 UTC [310] DEBUG:  building index "pg_toast_22880_index" on table "pg_toast_22880" serially
2025-04-19 19:03:53.346 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:03:53.346 UTC [310] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:03:53.346 UTC [310] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:03:53.347 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:03:53.349 UTC [310] DEBUG:  building index "pg_toast_22891_index" on table "pg_toast_22891" serially
2025-04-19 19:03:53.350 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:03:53.350 UTC [310] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:03:53.350 UTC [310] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:03:53.352 UTC [310] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:03:53.353 UTC [310] DEBUG:  building index "pg_toast_22914_index" on table "pg_toast_22914" serially
2025-04-19 19:03:53.355 UTC [310] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:03:53.355 UTC [310] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:03:53.355 UTC [310] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:03:53.356 UTC [310] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:03:53.356 UTC [310] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:03:53.357 UTC [310] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:03:53.357 UTC [310] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:03:53.357 UTC [310] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:03:53.357 UTC [310] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:03:53.358 UTC [310] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:03:53.358 UTC [310] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:03:53.359 UTC [310] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:03:53.359 UTC [310] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:03:53.361 UTC [310] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:03:53.361 UTC [310] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:03:53.361 UTC [310] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:03:53.362 UTC [310] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:03:53.362 UTC [310] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:03:53.362 UTC [310] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:03:53.363 UTC [310] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:03:53.363 UTC [310] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:03:53.364 UTC [310] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:03:53.364 UTC [310] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:03:53.365 UTC [310] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:03:53.365 UTC [310] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:03:53.370 UTC [310] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:03:53.615 UTC [310] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$S.RC6/U1USjeoG0oql.yXOFprr7D4d9sPPeylTY8TD9tcAjXNfHU2')
	                RETURNING id, username, email
	                
2025-04-19 19:03:53.617 UTC [310] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:03:53.618 UTC [310] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:06.112 UTC [318] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:04:06.818 UTC [310] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:04:07.122 UTC [310] DEBUG:  unexpected EOF on client connection
2025-04-19 19:04:08.943 UTC [326] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:08.953 UTC [326] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:08.959 UTC [326] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:08.959 UTC [326] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:08.963 UTC [326] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:08.967 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:08.973 UTC [326] DEBUG:  building index "pg_toast_22950_index" on table "pg_toast_22950" serially
2025-04-19 19:04:08.975 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:08.975 UTC [326] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:08.975 UTC [326] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:08.976 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:08.976 UTC [326] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:08.976 UTC [326] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:08.977 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:08.977 UTC [326] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:08.977 UTC [326] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:08.978 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:08.979 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:08.979 UTC [326] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:08.979 UTC [326] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:08.980 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:08.980 UTC [326] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:08.980 UTC [326] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:08.980 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:08.981 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:08.982 UTC [326] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:08.982 UTC [326] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:08.982 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:08.982 UTC [326] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:08.982 UTC [326] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:08.984 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:08.985 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:08.986 UTC [326] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:08.986 UTC [326] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:08.987 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:08.991 UTC [326] DEBUG:  building index "pg_toast_23011_index" on table "pg_toast_23011" serially
2025-04-19 19:04:08.992 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:08.992 UTC [326] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:08.992 UTC [326] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:08.993 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:08.994 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:08.994 UTC [326] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:08.994 UTC [326] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:08.995 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:08.995 UTC [326] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:08.995 UTC [326] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:08.996 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:08.997 UTC [326] DEBUG:  building index "pg_toast_23044_index" on table "pg_toast_23044" serially
2025-04-19 19:04:08.998 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:08.998 UTC [326] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:08.998 UTC [326] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:08.999 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:09.001 UTC [326] DEBUG:  building index "pg_toast_23055_index" on table "pg_toast_23055" serially
2025-04-19 19:04:09.002 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:09.002 UTC [326] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:09.002 UTC [326] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:09.005 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:09.005 UTC [326] DEBUG:  building index "pg_toast_23078_index" on table "pg_toast_23078" serially
2025-04-19 19:04:09.006 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:09.006 UTC [326] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:09.006 UTC [326] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:09.007 UTC [326] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:09.007 UTC [326] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:09.008 UTC [326] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:09.008 UTC [326] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:09.009 UTC [326] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:09.009 UTC [326] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:09.010 UTC [326] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:09.010 UTC [326] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:09.011 UTC [326] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:09.011 UTC [326] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:09.012 UTC [326] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:09.012 UTC [326] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:09.013 UTC [326] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:09.013 UTC [326] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:09.013 UTC [326] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:09.013 UTC [326] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:09.014 UTC [326] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:09.014 UTC [326] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:09.015 UTC [326] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:09.015 UTC [326] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:09.016 UTC [326] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:09.016 UTC [326] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:09.029 UTC [326] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:09.297 UTC [326] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$sAG81yTjIK8VzBOl7CtZC.xYl6is.tOaCxh7EbrOLz/XBHifTzRey')
	                RETURNING id, username, email
	                
2025-04-19 19:04:09.298 UTC [326] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:09.299 UTC [326] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:09.299 UTC [326] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:04:09.308 UTC [326] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:09.309 UTC [326] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:09.311 UTC [326] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:09.315 UTC [326] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:09.315 UTC [326] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:09.318 UTC [326] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:09.321 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:09.323 UTC [326] DEBUG:  building index "pg_toast_23114_index" on table "pg_toast_23114" serially
2025-04-19 19:04:09.324 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:09.324 UTC [326] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:09.324 UTC [326] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:09.325 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:09.325 UTC [326] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:09.325 UTC [326] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:09.326 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:09.327 UTC [326] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:09.327 UTC [326] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:09.327 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:09.328 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:09.328 UTC [326] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:09.328 UTC [326] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:09.329 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:09.329 UTC [326] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:09.329 UTC [326] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:09.330 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:09.331 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:09.331 UTC [326] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:09.331 UTC [326] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:09.332 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:09.332 UTC [326] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:09.332 UTC [326] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:09.334 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:09.336 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:09.336 UTC [326] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:09.336 UTC [326] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:09.337 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:09.338 UTC [326] DEBUG:  building index "pg_toast_23175_index" on table "pg_toast_23175" serially
2025-04-19 19:04:09.339 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:09.339 UTC [326] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:09.339 UTC [326] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:09.340 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:09.342 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:09.342 UTC [326] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:09.342 UTC [326] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:09.343 UTC [326] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:09.343 UTC [326] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:09.343 UTC [326] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:09.345 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:09.347 UTC [326] DEBUG:  building index "pg_toast_23208_index" on table "pg_toast_23208" serially
2025-04-19 19:04:09.348 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:09.349 UTC [326] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:09.349 UTC [326] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:09.350 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:09.353 UTC [326] DEBUG:  building index "pg_toast_23219_index" on table "pg_toast_23219" serially
2025-04-19 19:04:09.354 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:09.355 UTC [326] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:09.355 UTC [326] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:09.356 UTC [326] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:09.357 UTC [326] DEBUG:  building index "pg_toast_23242_index" on table "pg_toast_23242" serially
2025-04-19 19:04:09.358 UTC [326] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:09.358 UTC [326] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:09.358 UTC [326] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:09.359 UTC [326] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:09.359 UTC [326] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:09.360 UTC [326] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:09.360 UTC [326] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:09.361 UTC [326] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:09.361 UTC [326] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:09.362 UTC [326] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:09.362 UTC [326] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:09.363 UTC [326] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:09.363 UTC [326] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:09.363 UTC [326] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:09.363 UTC [326] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:09.364 UTC [326] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:09.364 UTC [326] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:09.365 UTC [326] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:09.365 UTC [326] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:09.366 UTC [326] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:09.366 UTC [326] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:09.367 UTC [326] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:09.367 UTC [326] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:09.368 UTC [326] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:09.368 UTC [326] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:09.374 UTC [326] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:09.620 UTC [326] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$dUs7eVm.M/zvEA6UOMUd5e5SxYI9CiGrpOCBBx.tKmWlpl0HMtFhW')
	                RETURNING id, username, email
	                
2025-04-19 19:04:09.621 UTC [326] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:09.621 UTC [326] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:20.901 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:04:20.968 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:04:20.992 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:04:21.181 UTC [149] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 19:04:21.191 UTC [149] LOG:  statement: SHOW ALL
2025-04-19 19:04:21.197 UTC [149] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 19:04:22.840 UTC [326] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:04:23.213 UTC [326] DEBUG:  unexpected EOF on client connection
2025-04-19 19:04:26.036 UTC [334] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:26.043 UTC [334] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:26.052 UTC [334] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:26.052 UTC [334] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:26.064 UTC [334] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:26.070 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:26.077 UTC [334] DEBUG:  building index "pg_toast_23278_index" on table "pg_toast_23278" serially
2025-04-19 19:04:26.079 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:26.080 UTC [334] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:26.080 UTC [334] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:26.081 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:26.081 UTC [334] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:26.082 UTC [334] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:26.082 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:26.083 UTC [334] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:26.083 UTC [334] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:26.083 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:26.084 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:26.084 UTC [334] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:26.084 UTC [334] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:26.085 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:26.085 UTC [334] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:26.085 UTC [334] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:26.086 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:26.087 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:26.088 UTC [334] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:26.088 UTC [334] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:26.089 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:26.089 UTC [334] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:26.089 UTC [334] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:26.091 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:26.092 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:26.092 UTC [334] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:26.092 UTC [334] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:26.093 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:26.095 UTC [334] DEBUG:  building index "pg_toast_23339_index" on table "pg_toast_23339" serially
2025-04-19 19:04:26.097 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:26.098 UTC [334] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:26.098 UTC [334] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:26.103 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:26.109 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:26.112 UTC [334] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:26.112 UTC [334] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:26.113 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:26.114 UTC [334] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:26.114 UTC [334] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:26.115 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:26.117 UTC [334] DEBUG:  building index "pg_toast_23372_index" on table "pg_toast_23372" serially
2025-04-19 19:04:26.118 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:26.118 UTC [334] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:26.118 UTC [334] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:26.119 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:26.120 UTC [334] DEBUG:  building index "pg_toast_23383_index" on table "pg_toast_23383" serially
2025-04-19 19:04:26.121 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:26.121 UTC [334] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:26.121 UTC [334] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:26.123 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:26.124 UTC [334] DEBUG:  building index "pg_toast_23406_index" on table "pg_toast_23406" serially
2025-04-19 19:04:26.126 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:26.128 UTC [334] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:26.128 UTC [334] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:26.131 UTC [334] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:26.131 UTC [334] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:26.133 UTC [334] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:26.133 UTC [334] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:26.134 UTC [334] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:26.134 UTC [334] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:26.136 UTC [334] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:26.136 UTC [334] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:26.139 UTC [334] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:26.139 UTC [334] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:26.141 UTC [334] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:26.141 UTC [334] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:26.143 UTC [334] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:26.143 UTC [334] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:26.147 UTC [334] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:26.147 UTC [334] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:26.148 UTC [334] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:26.148 UTC [334] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:26.149 UTC [334] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:26.149 UTC [334] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:26.150 UTC [334] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:26.150 UTC [334] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:26.166 UTC [334] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:26.446 UTC [334] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cBczCihAb.3YzrxYiaLufe31TfDDouTwTJr.VIFHdyw0RLPsNZ6jO')
	                RETURNING id, username, email
	                
2025-04-19 19:04:26.447 UTC [334] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:26.448 UTC [334] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:26.448 UTC [334] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:04:26.458 UTC [334] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:26.459 UTC [334] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:26.461 UTC [334] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:26.465 UTC [334] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:26.465 UTC [334] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:26.471 UTC [334] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:26.475 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:26.476 UTC [334] DEBUG:  building index "pg_toast_23442_index" on table "pg_toast_23442" serially
2025-04-19 19:04:26.477 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:26.478 UTC [334] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:26.478 UTC [334] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:26.478 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:26.479 UTC [334] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:26.479 UTC [334] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:26.479 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:26.479 UTC [334] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:26.479 UTC [334] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:26.480 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:26.481 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:26.481 UTC [334] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:26.481 UTC [334] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:26.482 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:26.482 UTC [334] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:26.482 UTC [334] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:26.483 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:26.484 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:26.484 UTC [334] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:26.484 UTC [334] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:26.484 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:26.485 UTC [334] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:26.485 UTC [334] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:26.486 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:26.487 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:26.487 UTC [334] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:26.487 UTC [334] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:26.488 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:26.489 UTC [334] DEBUG:  building index "pg_toast_23503_index" on table "pg_toast_23503" serially
2025-04-19 19:04:26.490 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:26.491 UTC [334] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:26.491 UTC [334] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:26.492 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:26.493 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:26.493 UTC [334] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:26.493 UTC [334] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:26.494 UTC [334] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:26.494 UTC [334] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:26.494 UTC [334] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:26.495 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:26.496 UTC [334] DEBUG:  building index "pg_toast_23536_index" on table "pg_toast_23536" serially
2025-04-19 19:04:26.497 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:26.497 UTC [334] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:26.497 UTC [334] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:26.498 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:26.499 UTC [334] DEBUG:  building index "pg_toast_23547_index" on table "pg_toast_23547" serially
2025-04-19 19:04:26.500 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:26.500 UTC [334] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:26.500 UTC [334] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:26.501 UTC [334] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:26.502 UTC [334] DEBUG:  building index "pg_toast_23570_index" on table "pg_toast_23570" serially
2025-04-19 19:04:26.503 UTC [334] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:26.503 UTC [334] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:26.503 UTC [334] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:26.504 UTC [334] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:26.504 UTC [334] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:26.505 UTC [334] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:26.505 UTC [334] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:26.505 UTC [334] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:26.505 UTC [334] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:26.506 UTC [334] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:26.506 UTC [334] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:26.507 UTC [334] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:26.507 UTC [334] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:26.508 UTC [334] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:26.508 UTC [334] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:26.508 UTC [334] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:26.508 UTC [334] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:26.510 UTC [334] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:26.510 UTC [334] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:26.510 UTC [334] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:26.510 UTC [334] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:26.511 UTC [334] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:26.511 UTC [334] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:26.512 UTC [334] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:26.512 UTC [334] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:26.517 UTC [334] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:26.774 UTC [334] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$b8ZjnJF3KWCNBJoYBRpHLeEGrJMjlIvkVkkes3gB3GKSo0Q7X0ncy')
	                RETURNING id, username, email
	                
2025-04-19 19:04:26.783 UTC [334] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:26.799 UTC [334] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:36.110 UTC [342] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:04:36.483 UTC [342] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:04:38.946 UTC [334] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:04:39.260 UTC [334] DEBUG:  unexpected EOF on client connection
2025-04-19 19:04:41.156 UTC [349] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:41.163 UTC [349] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:41.170 UTC [349] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:41.170 UTC [349] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:41.175 UTC [349] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:41.181 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:41.188 UTC [349] DEBUG:  building index "pg_toast_23607_index" on table "pg_toast_23607" serially
2025-04-19 19:04:41.191 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:41.192 UTC [349] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:41.192 UTC [349] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:41.194 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:41.195 UTC [349] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:41.195 UTC [349] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:41.196 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:41.196 UTC [349] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:41.196 UTC [349] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:41.197 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:41.197 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:41.198 UTC [349] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:41.198 UTC [349] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:41.198 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:41.199 UTC [349] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:41.199 UTC [349] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:41.199 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:41.200 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:41.201 UTC [349] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:41.201 UTC [349] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:41.202 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:41.202 UTC [349] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:41.202 UTC [349] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:41.203 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:41.205 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:41.205 UTC [349] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:41.205 UTC [349] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:41.206 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:41.208 UTC [349] DEBUG:  building index "pg_toast_23668_index" on table "pg_toast_23668" serially
2025-04-19 19:04:41.209 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:41.209 UTC [349] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:41.209 UTC [349] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:41.210 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:41.211 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:41.212 UTC [349] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:41.212 UTC [349] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:41.212 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:41.213 UTC [349] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:41.213 UTC [349] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:41.214 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:41.215 UTC [349] DEBUG:  building index "pg_toast_23701_index" on table "pg_toast_23701" serially
2025-04-19 19:04:41.216 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:41.216 UTC [349] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:41.217 UTC [349] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:41.217 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:41.219 UTC [349] DEBUG:  building index "pg_toast_23712_index" on table "pg_toast_23712" serially
2025-04-19 19:04:41.220 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:41.220 UTC [349] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:41.220 UTC [349] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:41.221 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:41.223 UTC [349] DEBUG:  building index "pg_toast_23735_index" on table "pg_toast_23735" serially
2025-04-19 19:04:41.224 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:41.224 UTC [349] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:41.224 UTC [349] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:41.225 UTC [349] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:41.225 UTC [349] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:41.226 UTC [349] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:41.226 UTC [349] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:41.227 UTC [349] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:41.227 UTC [349] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:41.228 UTC [349] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:41.228 UTC [349] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:41.229 UTC [349] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:41.229 UTC [349] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:41.230 UTC [349] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:41.230 UTC [349] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:41.231 UTC [349] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:41.231 UTC [349] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:41.232 UTC [349] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:41.232 UTC [349] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:41.233 UTC [349] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:41.233 UTC [349] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:41.233 UTC [349] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:41.233 UTC [349] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:41.234 UTC [349] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:41.234 UTC [349] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:41.245 UTC [349] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:41.514 UTC [349] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$E9yBhpoiqYaAaILvnQN3ke3G84kNav0T6LiWpgLRI8KlfeYamGXMu')
	                RETURNING id, username, email
	                
2025-04-19 19:04:41.515 UTC [349] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:41.516 UTC [349] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:41.516 UTC [349] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:04:41.526 UTC [349] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:41.527 UTC [349] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:41.530 UTC [349] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:41.535 UTC [349] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:41.535 UTC [349] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:41.539 UTC [349] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:41.542 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:41.543 UTC [349] DEBUG:  building index "pg_toast_23771_index" on table "pg_toast_23771" serially
2025-04-19 19:04:41.544 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:41.545 UTC [349] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:41.545 UTC [349] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:41.546 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:41.546 UTC [349] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:41.546 UTC [349] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:41.546 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:41.547 UTC [349] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:41.547 UTC [349] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:41.547 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:41.548 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:41.548 UTC [349] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:41.548 UTC [349] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:41.549 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:41.549 UTC [349] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:41.549 UTC [349] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:41.550 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:41.551 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:41.551 UTC [349] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:41.551 UTC [349] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:41.552 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:41.552 UTC [349] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:41.552 UTC [349] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:41.553 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:41.554 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:41.554 UTC [349] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:41.554 UTC [349] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:41.555 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:41.556 UTC [349] DEBUG:  building index "pg_toast_23832_index" on table "pg_toast_23832" serially
2025-04-19 19:04:41.556 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:41.557 UTC [349] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:41.557 UTC [349] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:41.558 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:41.559 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:41.559 UTC [349] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:41.559 UTC [349] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:41.560 UTC [349] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:41.560 UTC [349] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:41.560 UTC [349] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:41.561 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:41.562 UTC [349] DEBUG:  building index "pg_toast_23865_index" on table "pg_toast_23865" serially
2025-04-19 19:04:41.563 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:41.563 UTC [349] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:41.563 UTC [349] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:41.564 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:41.565 UTC [349] DEBUG:  building index "pg_toast_23876_index" on table "pg_toast_23876" serially
2025-04-19 19:04:41.566 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:41.566 UTC [349] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:41.566 UTC [349] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:41.568 UTC [349] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:41.569 UTC [349] DEBUG:  building index "pg_toast_23899_index" on table "pg_toast_23899" serially
2025-04-19 19:04:41.569 UTC [349] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:41.569 UTC [349] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:41.569 UTC [349] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:41.570 UTC [349] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:41.570 UTC [349] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:41.571 UTC [349] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:41.571 UTC [349] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:41.572 UTC [349] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:41.572 UTC [349] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:41.572 UTC [349] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:41.572 UTC [349] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:41.573 UTC [349] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:41.573 UTC [349] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:41.574 UTC [349] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:41.574 UTC [349] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:41.575 UTC [349] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:41.575 UTC [349] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:41.575 UTC [349] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:41.575 UTC [349] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:41.576 UTC [349] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:41.576 UTC [349] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:41.577 UTC [349] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:41.577 UTC [349] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:41.578 UTC [349] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:41.578 UTC [349] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:41.586 UTC [349] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:41.857 UTC [349] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Xzstz.9vC7aVU2fylsZe/OnP9puZrvho99tPIlYiyGsqnUHgl/y/W')
	                RETURNING id, username, email
	                
2025-04-19 19:04:41.858 UTC [349] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:41.859 UTC [349] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:54.846 UTC [349] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:04:55.186 UTC [349] DEBUG:  unexpected EOF on client connection
2025-04-19 19:04:57.100 UTC [357] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:57.110 UTC [357] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:57.122 UTC [357] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:57.122 UTC [357] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:57.128 UTC [357] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:57.132 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:57.135 UTC [357] DEBUG:  building index "pg_toast_23935_index" on table "pg_toast_23935" serially
2025-04-19 19:04:57.137 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:57.137 UTC [357] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:57.137 UTC [357] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:57.138 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:57.139 UTC [357] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:57.139 UTC [357] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:57.139 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:57.139 UTC [357] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:57.140 UTC [357] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:57.140 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:57.141 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:57.141 UTC [357] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:57.141 UTC [357] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:57.142 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:57.142 UTC [357] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:57.142 UTC [357] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:57.143 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:57.144 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:57.144 UTC [357] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:57.144 UTC [357] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:57.145 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:57.145 UTC [357] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:57.145 UTC [357] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:57.147 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:57.148 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:57.148 UTC [357] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:57.148 UTC [357] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:57.149 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:57.151 UTC [357] DEBUG:  building index "pg_toast_23996_index" on table "pg_toast_23996" serially
2025-04-19 19:04:57.151 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:57.152 UTC [357] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:57.152 UTC [357] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:57.153 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:57.156 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:57.156 UTC [357] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:57.156 UTC [357] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:57.157 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:57.158 UTC [357] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:57.158 UTC [357] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:57.159 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:57.161 UTC [357] DEBUG:  building index "pg_toast_24029_index" on table "pg_toast_24029" serially
2025-04-19 19:04:57.162 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:57.162 UTC [357] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:57.162 UTC [357] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:57.163 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:57.164 UTC [357] DEBUG:  building index "pg_toast_24040_index" on table "pg_toast_24040" serially
2025-04-19 19:04:57.165 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:57.166 UTC [357] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:57.166 UTC [357] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:57.167 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:57.169 UTC [357] DEBUG:  building index "pg_toast_24063_index" on table "pg_toast_24063" serially
2025-04-19 19:04:57.170 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:57.170 UTC [357] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:57.170 UTC [357] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:57.171 UTC [357] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:57.171 UTC [357] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:57.172 UTC [357] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:57.172 UTC [357] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:57.172 UTC [357] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:57.172 UTC [357] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:57.173 UTC [357] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:57.173 UTC [357] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:57.174 UTC [357] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:57.174 UTC [357] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:57.176 UTC [357] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:57.176 UTC [357] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:57.176 UTC [357] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:57.176 UTC [357] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:57.177 UTC [357] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:57.177 UTC [357] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:57.178 UTC [357] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:57.178 UTC [357] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:57.179 UTC [357] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:57.179 UTC [357] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:57.179 UTC [357] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:57.179 UTC [357] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:57.188 UTC [357] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:57.472 UTC [357] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jsSFky4lbugYV5ilv.XWxur3j5MEBg0kPT.LwBDDrLr829zc6ttp2')
	                RETURNING id, username, email
	                
2025-04-19 19:04:57.473 UTC [357] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:57.473 UTC [357] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:04:57.474 UTC [357] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:04:57.483 UTC [357] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:57.484 UTC [357] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:04:57.490 UTC [357] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:04:57.495 UTC [357] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:04:57.495 UTC [357] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:04:57.499 UTC [357] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:04:57.502 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:04:57.503 UTC [357] DEBUG:  building index "pg_toast_24099_index" on table "pg_toast_24099" serially
2025-04-19 19:04:57.505 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:04:57.505 UTC [357] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:04:57.505 UTC [357] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:04:57.506 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:04:57.506 UTC [357] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:04:57.506 UTC [357] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:04:57.507 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:04:57.507 UTC [357] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:04:57.507 UTC [357] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:04:57.508 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:04:57.509 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:04:57.509 UTC [357] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:04:57.509 UTC [357] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:04:57.510 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:04:57.510 UTC [357] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:04:57.510 UTC [357] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:04:57.511 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:04:57.512 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:04:57.512 UTC [357] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:04:57.512 UTC [357] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:04:57.513 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:04:57.513 UTC [357] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:04:57.513 UTC [357] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:04:57.514 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:04:57.515 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:04:57.515 UTC [357] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:04:57.515 UTC [357] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:04:57.516 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:04:57.517 UTC [357] DEBUG:  building index "pg_toast_24160_index" on table "pg_toast_24160" serially
2025-04-19 19:04:57.518 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:04:57.518 UTC [357] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:04:57.518 UTC [357] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:04:57.519 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:04:57.520 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:04:57.521 UTC [357] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:04:57.521 UTC [357] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:04:57.522 UTC [357] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:04:57.522 UTC [357] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:04:57.522 UTC [357] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:04:57.523 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:04:57.524 UTC [357] DEBUG:  building index "pg_toast_24193_index" on table "pg_toast_24193" serially
2025-04-19 19:04:57.525 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:04:57.525 UTC [357] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:04:57.525 UTC [357] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:04:57.526 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:04:57.527 UTC [357] DEBUG:  building index "pg_toast_24204_index" on table "pg_toast_24204" serially
2025-04-19 19:04:57.528 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:04:57.528 UTC [357] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:04:57.528 UTC [357] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:04:57.529 UTC [357] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:04:57.530 UTC [357] DEBUG:  building index "pg_toast_24227_index" on table "pg_toast_24227" serially
2025-04-19 19:04:57.531 UTC [357] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:04:57.531 UTC [357] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:04:57.531 UTC [357] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:04:57.532 UTC [357] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:04:57.532 UTC [357] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:04:57.533 UTC [357] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:04:57.533 UTC [357] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:04:57.533 UTC [357] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:04:57.533 UTC [357] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:04:57.534 UTC [357] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:04:57.534 UTC [357] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:04:57.535 UTC [357] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:04:57.535 UTC [357] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:04:57.536 UTC [357] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:04:57.536 UTC [357] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:04:57.537 UTC [357] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:04:57.537 UTC [357] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:04:57.538 UTC [357] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:04:57.538 UTC [357] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:04:57.539 UTC [357] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:04:57.539 UTC [357] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:04:57.539 UTC [357] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:04:57.539 UTC [357] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:04:57.540 UTC [357] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:04:57.540 UTC [357] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:04:57.549 UTC [357] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:04:57.792 UTC [357] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$gbh/exEr02IepZGgiHeq6uRAMZBXwTTO4yz4d9NZE0xuQK5KW.eQe')
	                RETURNING id, username, email
	                
2025-04-19 19:04:57.793 UTC [357] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:04:57.794 UTC [357] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:06.121 UTC [365] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:05:10.782 UTC [357] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:05:11.070 UTC [357] DEBUG:  unexpected EOF on client connection
2025-04-19 19:05:12.876 UTC [373] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:05:12.883 UTC [373] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:05:12.889 UTC [373] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:05:12.889 UTC [373] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:05:12.894 UTC [373] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:05:12.901 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:05:12.904 UTC [373] DEBUG:  building index "pg_toast_24263_index" on table "pg_toast_24263" serially
2025-04-19 19:05:12.905 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:05:12.906 UTC [373] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:05:12.906 UTC [373] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:05:12.907 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:05:12.907 UTC [373] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:05:12.907 UTC [373] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:05:12.908 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:05:12.908 UTC [373] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:05:12.908 UTC [373] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:05:12.909 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:05:12.910 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:05:12.910 UTC [373] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:05:12.910 UTC [373] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:05:12.911 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:05:12.911 UTC [373] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:05:12.911 UTC [373] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:05:12.912 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:05:12.913 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:05:12.913 UTC [373] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:05:12.913 UTC [373] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:05:12.914 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:05:12.914 UTC [373] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:05:12.914 UTC [373] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:05:12.915 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:05:12.916 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:05:12.917 UTC [373] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:05:12.917 UTC [373] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:05:12.918 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:05:12.919 UTC [373] DEBUG:  building index "pg_toast_24324_index" on table "pg_toast_24324" serially
2025-04-19 19:05:12.920 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:05:12.920 UTC [373] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:05:12.920 UTC [373] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:05:12.921 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:05:12.922 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:05:12.923 UTC [373] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:05:12.923 UTC [373] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:05:12.923 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:05:12.923 UTC [373] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:05:12.923 UTC [373] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:05:12.924 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:05:12.925 UTC [373] DEBUG:  building index "pg_toast_24357_index" on table "pg_toast_24357" serially
2025-04-19 19:05:12.926 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:05:12.926 UTC [373] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:05:12.926 UTC [373] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:05:12.927 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:05:12.928 UTC [373] DEBUG:  building index "pg_toast_24368_index" on table "pg_toast_24368" serially
2025-04-19 19:05:12.929 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:05:12.929 UTC [373] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:05:12.929 UTC [373] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:05:12.931 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:05:12.931 UTC [373] DEBUG:  building index "pg_toast_24391_index" on table "pg_toast_24391" serially
2025-04-19 19:05:12.932 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:05:12.932 UTC [373] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:05:12.932 UTC [373] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:05:12.933 UTC [373] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:05:12.933 UTC [373] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:05:12.934 UTC [373] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:05:12.934 UTC [373] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:05:12.935 UTC [373] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:05:12.935 UTC [373] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:05:12.936 UTC [373] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:05:12.936 UTC [373] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:05:12.937 UTC [373] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:05:12.937 UTC [373] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:05:12.938 UTC [373] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:05:12.938 UTC [373] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:05:12.939 UTC [373] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:05:12.939 UTC [373] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:05:12.939 UTC [373] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:05:12.939 UTC [373] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:05:12.940 UTC [373] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:05:12.940 UTC [373] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:05:12.941 UTC [373] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:05:12.941 UTC [373] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:05:12.942 UTC [373] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:05:12.942 UTC [373] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:05:12.952 UTC [373] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:13.223 UTC [373] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$e/j2nS4Skog4euFQS4Web.r/USvQ3ehv3Cd.PmHV2RqgqRdKmltli')
	                RETURNING id, username, email
	                
2025-04-19 19:05:13.224 UTC [373] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:05:13.224 UTC [373] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:13.224 UTC [373] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:05:13.233 UTC [373] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:13.233 UTC [373] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:05:13.236 UTC [373] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:05:13.240 UTC [373] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:05:13.240 UTC [373] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:05:13.298 UTC [373] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:05:13.338 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:05:13.362 UTC [373] DEBUG:  building index "pg_toast_24427_index" on table "pg_toast_24427" serially
2025-04-19 19:05:13.369 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:05:13.370 UTC [373] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:05:13.370 UTC [373] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:05:13.378 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:05:13.379 UTC [373] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:05:13.379 UTC [373] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:05:13.387 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:05:13.388 UTC [373] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:05:13.388 UTC [373] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:05:13.393 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:05:13.395 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:05:13.395 UTC [373] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:05:13.395 UTC [373] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:05:13.399 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:05:13.399 UTC [373] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:05:13.399 UTC [373] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:05:13.401 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:05:13.403 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:05:13.403 UTC [373] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:05:13.403 UTC [373] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:05:13.405 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:05:13.405 UTC [373] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:05:13.405 UTC [373] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:05:13.406 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:05:13.407 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:05:13.407 UTC [373] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:05:13.407 UTC [373] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:05:13.409 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:05:13.410 UTC [373] DEBUG:  building index "pg_toast_24488_index" on table "pg_toast_24488" serially
2025-04-19 19:05:13.410 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:05:13.411 UTC [373] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:05:13.411 UTC [373] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:05:13.412 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:05:13.413 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:05:13.413 UTC [373] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:05:13.413 UTC [373] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:05:13.414 UTC [373] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:05:13.414 UTC [373] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:05:13.414 UTC [373] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:05:13.416 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:05:13.423 UTC [373] DEBUG:  building index "pg_toast_24521_index" on table "pg_toast_24521" serially
2025-04-19 19:05:13.425 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:05:13.425 UTC [373] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:05:13.425 UTC [373] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:05:13.428 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:05:13.433 UTC [373] DEBUG:  building index "pg_toast_24532_index" on table "pg_toast_24532" serially
2025-04-19 19:05:13.436 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:05:13.437 UTC [373] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:05:13.437 UTC [373] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:05:13.442 UTC [373] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:05:13.444 UTC [373] DEBUG:  building index "pg_toast_24555_index" on table "pg_toast_24555" serially
2025-04-19 19:05:13.445 UTC [373] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:05:13.446 UTC [373] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:05:13.446 UTC [373] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:05:13.451 UTC [373] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:05:13.451 UTC [373] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:05:13.454 UTC [373] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:05:13.454 UTC [373] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:05:13.457 UTC [373] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:05:13.457 UTC [373] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:05:13.465 UTC [373] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:05:13.465 UTC [373] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:05:13.468 UTC [373] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:05:13.468 UTC [373] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:05:13.471 UTC [373] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:05:13.471 UTC [373] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:05:13.476 UTC [373] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:05:13.476 UTC [373] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:05:13.481 UTC [373] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:05:13.481 UTC [373] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:05:13.487 UTC [373] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:05:13.487 UTC [373] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:05:13.493 UTC [373] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:05:13.493 UTC [373] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:05:13.497 UTC [373] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:05:13.497 UTC [373] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:05:13.508 UTC [373] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:13.793 UTC [373] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RSgqpZcIryIH87huH1xWruQ.8zRDTePE.lfLQHzm7kmTWXOwAiHu.')
	                RETURNING id, username, email
	                
2025-04-19 19:05:13.794 UTC [373] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:05:13.794 UTC [373] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:26.723 UTC [373] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:05:27.002 UTC [373] DEBUG:  unexpected EOF on client connection
2025-04-19 19:05:28.717 UTC [381] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:05:28.723 UTC [381] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:05:28.732 UTC [381] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:05:28.732 UTC [381] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:05:28.736 UTC [381] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:05:28.740 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:05:28.742 UTC [381] DEBUG:  building index "pg_toast_24591_index" on table "pg_toast_24591" serially
2025-04-19 19:05:28.744 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:05:28.744 UTC [381] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:05:28.744 UTC [381] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:05:28.745 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:05:28.745 UTC [381] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:05:28.745 UTC [381] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:05:28.746 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:05:28.746 UTC [381] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:05:28.746 UTC [381] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:05:28.747 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:05:28.748 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:05:28.749 UTC [381] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:05:28.749 UTC [381] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:05:28.749 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:05:28.749 UTC [381] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:05:28.749 UTC [381] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:05:28.750 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:05:28.751 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:05:28.751 UTC [381] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:05:28.751 UTC [381] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:05:28.752 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:05:28.752 UTC [381] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:05:28.752 UTC [381] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:05:28.754 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:05:28.754 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:05:28.755 UTC [381] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:05:28.755 UTC [381] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:05:28.756 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:05:28.757 UTC [381] DEBUG:  building index "pg_toast_24652_index" on table "pg_toast_24652" serially
2025-04-19 19:05:28.758 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:05:28.758 UTC [381] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:05:28.758 UTC [381] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:05:28.759 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:05:28.760 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:05:28.760 UTC [381] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:05:28.760 UTC [381] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:05:28.761 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:05:28.761 UTC [381] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:05:28.761 UTC [381] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:05:28.762 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:05:28.763 UTC [381] DEBUG:  building index "pg_toast_24685_index" on table "pg_toast_24685" serially
2025-04-19 19:05:28.764 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:05:28.764 UTC [381] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:05:28.764 UTC [381] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:05:28.765 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:05:28.766 UTC [381] DEBUG:  building index "pg_toast_24696_index" on table "pg_toast_24696" serially
2025-04-19 19:05:28.767 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:05:28.767 UTC [381] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:05:28.767 UTC [381] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:05:28.768 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:05:28.771 UTC [381] DEBUG:  building index "pg_toast_24719_index" on table "pg_toast_24719" serially
2025-04-19 19:05:28.772 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:05:28.772 UTC [381] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:05:28.772 UTC [381] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:05:28.773 UTC [381] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:05:28.773 UTC [381] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:05:28.774 UTC [381] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:05:28.774 UTC [381] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:05:28.775 UTC [381] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:05:28.775 UTC [381] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:05:28.776 UTC [381] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:05:28.776 UTC [381] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:05:28.777 UTC [381] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:05:28.777 UTC [381] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:05:28.778 UTC [381] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:05:28.778 UTC [381] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:05:28.779 UTC [381] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:05:28.779 UTC [381] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:05:28.779 UTC [381] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:05:28.779 UTC [381] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:05:28.780 UTC [381] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:05:28.780 UTC [381] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:05:28.781 UTC [381] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:05:28.781 UTC [381] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:05:28.782 UTC [381] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:05:28.782 UTC [381] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:05:28.791 UTC [381] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:29.064 UTC [381] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Mi7MQakHbBm25W1pO/oiIeG1cJjroYcWYbLJNu7tsajW.3gRAc2x2')
	                RETURNING id, username, email
	                
2025-04-19 19:05:29.065 UTC [381] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:05:29.066 UTC [381] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:29.067 UTC [381] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:05:29.087 UTC [381] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:29.089 UTC [381] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:05:29.095 UTC [381] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:05:29.105 UTC [381] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:05:29.105 UTC [381] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:05:29.111 UTC [381] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:05:29.120 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:05:29.123 UTC [381] DEBUG:  building index "pg_toast_24755_index" on table "pg_toast_24755" serially
2025-04-19 19:05:29.128 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:05:29.129 UTC [381] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:05:29.129 UTC [381] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:05:29.133 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:05:29.133 UTC [381] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:05:29.133 UTC [381] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:05:29.136 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:05:29.138 UTC [381] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:05:29.138 UTC [381] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:05:29.143 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:05:29.151 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:05:29.152 UTC [381] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:05:29.152 UTC [381] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:05:29.160 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:05:29.161 UTC [381] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:05:29.161 UTC [381] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:05:29.161 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:05:29.162 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:05:29.163 UTC [381] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:05:29.163 UTC [381] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:05:29.165 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:05:29.165 UTC [381] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:05:29.165 UTC [381] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:05:29.166 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:05:29.169 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:05:29.169 UTC [381] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:05:29.169 UTC [381] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:05:29.175 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:05:29.177 UTC [381] DEBUG:  building index "pg_toast_24816_index" on table "pg_toast_24816" serially
2025-04-19 19:05:29.178 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:05:29.179 UTC [381] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:05:29.179 UTC [381] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:05:29.180 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:05:29.183 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:05:29.184 UTC [381] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:05:29.184 UTC [381] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:05:29.185 UTC [381] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:05:29.185 UTC [381] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:05:29.185 UTC [381] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:05:29.187 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:05:29.190 UTC [381] DEBUG:  building index "pg_toast_24849_index" on table "pg_toast_24849" serially
2025-04-19 19:05:29.194 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:05:29.194 UTC [381] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:05:29.194 UTC [381] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:05:29.195 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:05:29.196 UTC [381] DEBUG:  building index "pg_toast_24860_index" on table "pg_toast_24860" serially
2025-04-19 19:05:29.197 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:05:29.197 UTC [381] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:05:29.197 UTC [381] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:05:29.199 UTC [381] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:05:29.200 UTC [381] DEBUG:  building index "pg_toast_24883_index" on table "pg_toast_24883" serially
2025-04-19 19:05:29.201 UTC [381] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:05:29.202 UTC [381] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:05:29.202 UTC [381] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:05:29.203 UTC [381] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:05:29.203 UTC [381] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:05:29.203 UTC [381] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:05:29.203 UTC [381] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:05:29.204 UTC [381] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:05:29.204 UTC [381] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:05:29.205 UTC [381] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:05:29.205 UTC [381] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:05:29.206 UTC [381] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:05:29.206 UTC [381] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:05:29.207 UTC [381] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:05:29.207 UTC [381] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:05:29.208 UTC [381] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:05:29.208 UTC [381] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:05:29.209 UTC [381] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:05:29.209 UTC [381] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:05:29.211 UTC [381] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:05:29.211 UTC [381] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:05:29.212 UTC [381] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:05:29.212 UTC [381] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:05:29.213 UTC [381] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:05:29.213 UTC [381] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:05:29.223 UTC [381] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:29.537 UTC [381] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$liBHGwRSqXceYSv8Ld8Te.G83QtWA/X4Xx8mp5mtZgKWRIftGBpo2')
	                RETURNING id, username, email
	                
2025-04-19 19:05:29.538 UTC [381] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:05:29.539 UTC [381] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:36.110 UTC [389] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:05:36.359 UTC [389] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:05:39.608 UTC [397] LOG:  statement: 
	                SELECT table_name 
	                FROM information_schema.tables 
	                WHERE table_schema = 'public'
	            
2025-04-19 19:05:39.620 UTC [397] LOG:  statement: 
	                    SELECT column_name, data_type 
	                    FROM information_schema.columns 
	                    WHERE table_name = 'draws'
	                
2025-04-19 19:05:39.628 UTC [397] LOG:  statement: 
	                    SELECT column_name, data_type 
	                    FROM information_schema.columns 
	                    WHERE table_name = 'numbers'
	                
2025-04-19 19:05:39.630 UTC [397] LOG:  statement: SELECT current_user
2025-04-19 19:05:39.631 UTC [397] LOG:  statement: 
	                SELECT table_name, privilege_type
	                FROM information_schema.table_privileges
	                WHERE grantee = current_user AND table_schema = 'public'
	            
2025-04-19 19:05:39.637 UTC [397] LOG:  statement: 
	                SELECT EXISTS (
	                    SELECT FROM information_schema.tables 
	                    WHERE table_schema = 'public' AND table_name = 'draws'
	                )
	            
2025-04-19 19:05:39.638 UTC [397] LOG:  statement: SELECT id FROM draws WHERE draw_number = 9999
2025-04-19 19:05:39.639 UTC [397] LOG:  statement: 
	                INSERT INTO draws (draw_number, draw_date, jackpot_amount, winners)
	                VALUES (9999, '2025-04-19', 0, 0)
	                RETURNING id
	            
2025-04-19 19:05:39.641 UTC [397] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 1, 1, false)
	                
2025-04-19 19:05:39.646 UTC [397] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 2, 2, false)
	                
2025-04-19 19:05:39.646 UTC [397] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 3, 3, false)
	                
2025-04-19 19:05:39.647 UTC [397] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 4, 4, false)
	                
2025-04-19 19:05:39.647 UTC [397] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 5, 5, false)
	                
2025-04-19 19:05:39.647 UTC [397] LOG:  statement: 
	                INSERT INTO numbers (draw_id, position, number, is_powerball)
	                VALUES (1, 6, 10, true)
	            
2025-04-19 19:05:39.647 UTC [397] LOG:  statement: 
	                SELECT d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	                       array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	                       (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	                FROM draws d
	                JOIN numbers n ON d.id = n.draw_id
	                WHERE d.draw_number = 9999
	                GROUP BY d.id, d.draw_number
	            
2025-04-19 19:05:39.649 UTC [397] LOG:  statement: DELETE FROM numbers WHERE draw_id = 1
2025-04-19 19:05:39.650 UTC [397] LOG:  statement: DELETE FROM draws WHERE id = 1
2025-04-19 19:05:42.754 UTC [381] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:05:43.036 UTC [381] DEBUG:  unexpected EOF on client connection
2025-04-19 19:05:45.331 UTC [398] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:05:45.338 UTC [398] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:05:45.344 UTC [398] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:05:45.344 UTC [398] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:05:45.348 UTC [398] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:05:45.353 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:05:45.356 UTC [398] DEBUG:  building index "pg_toast_24920_index" on table "pg_toast_24920" serially
2025-04-19 19:05:45.357 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:05:45.358 UTC [398] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:05:45.358 UTC [398] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:05:45.359 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:05:45.359 UTC [398] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:05:45.359 UTC [398] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:05:45.360 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:05:45.360 UTC [398] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:05:45.360 UTC [398] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:05:45.361 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:05:45.362 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:05:45.362 UTC [398] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:05:45.362 UTC [398] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:05:45.363 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:05:45.363 UTC [398] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:05:45.363 UTC [398] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:05:45.364 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:05:45.367 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:05:45.367 UTC [398] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:05:45.367 UTC [398] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:05:45.368 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:05:45.369 UTC [398] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:05:45.369 UTC [398] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:05:45.371 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:05:45.373 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:05:45.373 UTC [398] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:05:45.373 UTC [398] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:05:45.374 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:05:45.376 UTC [398] DEBUG:  building index "pg_toast_24981_index" on table "pg_toast_24981" serially
2025-04-19 19:05:45.377 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:05:45.377 UTC [398] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:05:45.377 UTC [398] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:05:45.379 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:05:45.380 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:05:45.380 UTC [398] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:05:45.380 UTC [398] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:05:45.381 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:05:45.381 UTC [398] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:05:45.381 UTC [398] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:05:45.382 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:05:45.383 UTC [398] DEBUG:  building index "pg_toast_25014_index" on table "pg_toast_25014" serially
2025-04-19 19:05:45.384 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:05:45.384 UTC [398] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:05:45.384 UTC [398] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:05:45.385 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:05:45.386 UTC [398] DEBUG:  building index "pg_toast_25025_index" on table "pg_toast_25025" serially
2025-04-19 19:05:45.387 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:05:45.387 UTC [398] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:05:45.387 UTC [398] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:05:45.389 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:05:45.390 UTC [398] DEBUG:  building index "pg_toast_25048_index" on table "pg_toast_25048" serially
2025-04-19 19:05:45.390 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:05:45.390 UTC [398] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:05:45.390 UTC [398] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:05:45.391 UTC [398] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:05:45.391 UTC [398] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:05:45.392 UTC [398] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:05:45.392 UTC [398] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:05:45.393 UTC [398] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:05:45.393 UTC [398] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:05:45.394 UTC [398] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:05:45.394 UTC [398] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:05:45.395 UTC [398] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:05:45.395 UTC [398] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:05:45.396 UTC [398] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:05:45.396 UTC [398] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:05:45.397 UTC [398] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:05:45.397 UTC [398] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:05:45.398 UTC [398] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:05:45.398 UTC [398] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:05:45.398 UTC [398] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:05:45.398 UTC [398] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:05:45.399 UTC [398] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:05:45.399 UTC [398] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:05:45.400 UTC [398] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:05:45.400 UTC [398] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:05:45.412 UTC [398] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:45.693 UTC [398] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$m/1LEFllIEGx5YIKCBNsH./iZSo1NMq1ar09xAF.AKo8VUwkvVcXy')
	                RETURNING id, username, email
	                
2025-04-19 19:05:45.694 UTC [398] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:05:45.695 UTC [398] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:45.696 UTC [398] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:05:45.714 UTC [398] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:45.715 UTC [398] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:05:45.717 UTC [398] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:05:45.722 UTC [398] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:05:45.722 UTC [398] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:05:45.725 UTC [398] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:05:45.729 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:05:45.733 UTC [398] DEBUG:  building index "pg_toast_25084_index" on table "pg_toast_25084" serially
2025-04-19 19:05:45.734 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:05:45.734 UTC [398] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:05:45.734 UTC [398] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:05:45.735 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:05:45.735 UTC [398] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:05:45.735 UTC [398] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:05:45.736 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:05:45.736 UTC [398] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:05:45.736 UTC [398] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:05:45.737 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:05:45.738 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:05:45.739 UTC [398] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:05:45.739 UTC [398] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:05:45.740 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:05:45.740 UTC [398] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:05:45.740 UTC [398] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:05:45.741 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:05:45.742 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:05:45.743 UTC [398] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:05:45.743 UTC [398] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:05:45.743 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:05:45.744 UTC [398] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:05:45.744 UTC [398] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:05:45.745 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:05:45.746 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:05:45.746 UTC [398] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:05:45.746 UTC [398] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:05:45.747 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:05:45.748 UTC [398] DEBUG:  building index "pg_toast_25145_index" on table "pg_toast_25145" serially
2025-04-19 19:05:45.749 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:05:45.749 UTC [398] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:05:45.749 UTC [398] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:05:45.750 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:05:45.751 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:05:45.751 UTC [398] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:05:45.751 UTC [398] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:05:45.752 UTC [398] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:05:45.752 UTC [398] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:05:45.752 UTC [398] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:05:45.753 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:05:45.754 UTC [398] DEBUG:  building index "pg_toast_25178_index" on table "pg_toast_25178" serially
2025-04-19 19:05:45.756 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:05:45.756 UTC [398] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:05:45.756 UTC [398] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:05:45.757 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:05:45.759 UTC [398] DEBUG:  building index "pg_toast_25189_index" on table "pg_toast_25189" serially
2025-04-19 19:05:45.759 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:05:45.760 UTC [398] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:05:45.760 UTC [398] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:05:45.761 UTC [398] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:05:45.762 UTC [398] DEBUG:  building index "pg_toast_25212_index" on table "pg_toast_25212" serially
2025-04-19 19:05:45.763 UTC [398] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:05:45.764 UTC [398] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:05:45.764 UTC [398] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:05:45.765 UTC [398] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:05:45.765 UTC [398] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:05:45.769 UTC [398] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:05:45.769 UTC [398] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:05:45.769 UTC [398] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:05:45.769 UTC [398] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:05:45.770 UTC [398] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:05:45.770 UTC [398] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:05:45.771 UTC [398] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:05:45.771 UTC [398] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:05:45.772 UTC [398] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:05:45.772 UTC [398] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:05:45.773 UTC [398] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:05:45.773 UTC [398] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:05:45.774 UTC [398] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:05:45.774 UTC [398] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:05:45.775 UTC [398] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:05:45.775 UTC [398] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:05:45.776 UTC [398] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:05:45.776 UTC [398] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:05:45.777 UTC [398] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:05:45.777 UTC [398] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:05:45.782 UTC [398] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:05:46.041 UTC [398] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$H45DAPQvtk3aIN5xAqeKOOzWaPr3j6crQwjIxu3nW7ii5nQmayHbq')
	                RETURNING id, username, email
	                
2025-04-19 19:05:46.042 UTC [398] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:05:46.042 UTC [398] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:05:54.129 UTC [398] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:05:54.864 UTC [398] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:05:56.028 UTC [398] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:05:57.053 UTC [398] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:05:57.615 UTC [398] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:05:57.777 UTC [398] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:05:58.627 UTC [398] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:05:59.026 UTC [398] DEBUG:  unexpected EOF on client connection
2025-04-19 19:06:01.007 UTC [412] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:01.013 UTC [412] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:01.020 UTC [412] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:01.020 UTC [412] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:01.027 UTC [412] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:01.034 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:01.038 UTC [412] DEBUG:  building index "pg_toast_25248_index" on table "pg_toast_25248" serially
2025-04-19 19:06:01.043 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:01.044 UTC [412] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:01.044 UTC [412] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:01.046 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:01.047 UTC [412] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:01.047 UTC [412] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:01.048 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:01.048 UTC [412] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:01.048 UTC [412] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:01.049 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:01.050 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:01.051 UTC [412] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:01.051 UTC [412] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:01.052 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:01.052 UTC [412] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:01.052 UTC [412] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:01.053 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:01.055 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:01.057 UTC [412] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:01.058 UTC [412] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:01.062 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:01.064 UTC [412] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:01.064 UTC [412] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:01.067 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:01.069 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:01.070 UTC [412] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:01.070 UTC [412] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:01.073 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:01.077 UTC [412] DEBUG:  building index "pg_toast_25309_index" on table "pg_toast_25309" serially
2025-04-19 19:06:01.078 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:01.078 UTC [412] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:01.078 UTC [412] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:01.079 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:01.081 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:01.081 UTC [412] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:01.081 UTC [412] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:01.082 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:01.082 UTC [412] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:01.082 UTC [412] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:01.083 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:01.085 UTC [412] DEBUG:  building index "pg_toast_25342_index" on table "pg_toast_25342" serially
2025-04-19 19:06:01.085 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:01.086 UTC [412] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:01.086 UTC [412] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:01.086 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:01.087 UTC [412] DEBUG:  building index "pg_toast_25353_index" on table "pg_toast_25353" serially
2025-04-19 19:06:01.088 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:01.088 UTC [412] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:01.088 UTC [412] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:01.090 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:01.092 UTC [412] DEBUG:  building index "pg_toast_25376_index" on table "pg_toast_25376" serially
2025-04-19 19:06:01.093 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:01.093 UTC [412] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:01.093 UTC [412] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:01.094 UTC [412] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:01.094 UTC [412] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:01.095 UTC [412] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:01.095 UTC [412] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:01.095 UTC [412] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:01.095 UTC [412] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:01.096 UTC [412] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:01.096 UTC [412] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:01.097 UTC [412] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:01.097 UTC [412] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:01.098 UTC [412] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:01.098 UTC [412] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:01.099 UTC [412] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:01.099 UTC [412] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:01.100 UTC [412] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:01.100 UTC [412] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:01.101 UTC [412] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:01.101 UTC [412] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:01.101 UTC [412] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:01.101 UTC [412] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:01.102 UTC [412] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:01.102 UTC [412] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:01.114 UTC [412] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:01.380 UTC [412] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$LXmo6Gt6VW5LGjSNFj0G1uo.IVN5QWaqCUQKNX4jYt..N9jkAHS9G')
	                RETURNING id, username, email
	                
2025-04-19 19:06:01.381 UTC [412] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:01.382 UTC [412] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:01.382 UTC [412] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:06:01.391 UTC [412] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:01.392 UTC [412] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:01.396 UTC [412] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:01.401 UTC [412] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:01.401 UTC [412] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:01.405 UTC [412] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:01.408 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:01.409 UTC [412] DEBUG:  building index "pg_toast_25412_index" on table "pg_toast_25412" serially
2025-04-19 19:06:01.411 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:01.411 UTC [412] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:01.411 UTC [412] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:01.413 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:01.413 UTC [412] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:01.413 UTC [412] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:01.413 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:01.414 UTC [412] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:01.414 UTC [412] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:01.414 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:01.415 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:01.415 UTC [412] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:01.415 UTC [412] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:01.416 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:01.416 UTC [412] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:01.416 UTC [412] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:01.417 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:01.418 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:01.418 UTC [412] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:01.418 UTC [412] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:01.419 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:01.419 UTC [412] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:01.419 UTC [412] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:01.420 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:01.420 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:01.421 UTC [412] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:01.421 UTC [412] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:01.422 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:01.424 UTC [412] DEBUG:  building index "pg_toast_25473_index" on table "pg_toast_25473" serially
2025-04-19 19:06:01.426 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:01.426 UTC [412] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:01.426 UTC [412] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:01.428 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:01.430 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:01.430 UTC [412] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:01.430 UTC [412] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:01.431 UTC [412] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:01.431 UTC [412] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:01.431 UTC [412] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:01.432 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:01.433 UTC [412] DEBUG:  building index "pg_toast_25506_index" on table "pg_toast_25506" serially
2025-04-19 19:06:01.434 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:01.434 UTC [412] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:01.434 UTC [412] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:01.435 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:01.436 UTC [412] DEBUG:  building index "pg_toast_25517_index" on table "pg_toast_25517" serially
2025-04-19 19:06:01.437 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:01.437 UTC [412] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:01.437 UTC [412] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:01.439 UTC [412] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:01.440 UTC [412] DEBUG:  building index "pg_toast_25540_index" on table "pg_toast_25540" serially
2025-04-19 19:06:01.441 UTC [412] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:01.441 UTC [412] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:01.441 UTC [412] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:01.442 UTC [412] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:01.442 UTC [412] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:01.442 UTC [412] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:01.442 UTC [412] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:01.443 UTC [412] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:01.443 UTC [412] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:01.444 UTC [412] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:01.444 UTC [412] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:01.445 UTC [412] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:01.446 UTC [412] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:01.447 UTC [412] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:01.447 UTC [412] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:01.448 UTC [412] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:01.448 UTC [412] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:01.449 UTC [412] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:01.449 UTC [412] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:01.450 UTC [412] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:01.450 UTC [412] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:01.451 UTC [412] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:01.451 UTC [412] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:01.452 UTC [412] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:01.452 UTC [412] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:01.457 UTC [412] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:01.701 UTC [412] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$zdEpIu40d3ME6U19HAdtM.1.XRlkOV8WButKbmsuqg8G6D68igoB2')
	                RETURNING id, username, email
	                
2025-04-19 19:06:01.703 UTC [412] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:01.703 UTC [412] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:06.121 UTC [413] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:06:14.711 UTC [412] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:06:14.992 UTC [412] DEBUG:  unexpected EOF on client connection
2025-04-19 19:06:17.107 UTC [421] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:17.113 UTC [421] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:17.129 UTC [421] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:17.129 UTC [421] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:17.140 UTC [421] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:17.146 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:17.149 UTC [421] DEBUG:  building index "pg_toast_25576_index" on table "pg_toast_25576" serially
2025-04-19 19:06:17.151 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:17.151 UTC [421] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:17.152 UTC [421] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:17.152 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:17.152 UTC [421] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:17.153 UTC [421] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:17.153 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:17.153 UTC [421] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:17.154 UTC [421] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:17.154 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:17.155 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:17.155 UTC [421] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:17.155 UTC [421] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:17.156 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:17.157 UTC [421] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:17.157 UTC [421] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:17.157 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:17.159 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:17.159 UTC [421] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:17.159 UTC [421] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:17.160 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:17.160 UTC [421] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:17.160 UTC [421] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:17.161 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:17.163 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:17.164 UTC [421] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:17.164 UTC [421] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:17.166 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:17.167 UTC [421] DEBUG:  building index "pg_toast_25637_index" on table "pg_toast_25637" serially
2025-04-19 19:06:17.168 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:17.168 UTC [421] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:17.168 UTC [421] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:17.170 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:17.171 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:17.171 UTC [421] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:17.171 UTC [421] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:17.172 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:17.172 UTC [421] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:17.172 UTC [421] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:17.173 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:17.174 UTC [421] DEBUG:  building index "pg_toast_25670_index" on table "pg_toast_25670" serially
2025-04-19 19:06:17.175 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:17.175 UTC [421] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:17.175 UTC [421] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:17.177 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:17.182 UTC [421] DEBUG:  building index "pg_toast_25681_index" on table "pg_toast_25681" serially
2025-04-19 19:06:17.184 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:17.185 UTC [421] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:17.185 UTC [421] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:17.187 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:17.188 UTC [421] DEBUG:  building index "pg_toast_25704_index" on table "pg_toast_25704" serially
2025-04-19 19:06:17.190 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:17.190 UTC [421] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:17.190 UTC [421] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:17.191 UTC [421] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:17.191 UTC [421] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:17.192 UTC [421] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:17.192 UTC [421] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:17.193 UTC [421] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:17.193 UTC [421] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:17.195 UTC [421] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:17.195 UTC [421] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:17.197 UTC [421] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:17.197 UTC [421] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:17.197 UTC [421] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:17.197 UTC [421] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:17.198 UTC [421] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:17.198 UTC [421] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:17.199 UTC [421] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:17.199 UTC [421] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:17.200 UTC [421] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:17.200 UTC [421] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:17.201 UTC [421] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:17.201 UTC [421] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:17.203 UTC [421] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:17.203 UTC [421] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:17.220 UTC [421] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:17.494 UTC [421] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$XGnJxim3tM/tYPeLQ2CHx.mTG4l6mUCasxGUFutHv9zdjkMsGW/iW')
	                RETURNING id, username, email
	                
2025-04-19 19:06:17.495 UTC [421] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:17.496 UTC [421] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:17.497 UTC [421] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:06:17.511 UTC [421] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:17.512 UTC [421] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:17.515 UTC [421] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:17.520 UTC [421] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:17.520 UTC [421] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:17.523 UTC [421] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:17.526 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:17.527 UTC [421] DEBUG:  building index "pg_toast_25740_index" on table "pg_toast_25740" serially
2025-04-19 19:06:17.529 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:17.529 UTC [421] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:17.529 UTC [421] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:17.529 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:17.530 UTC [421] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:17.530 UTC [421] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:17.530 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:17.531 UTC [421] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:17.531 UTC [421] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:17.531 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:17.532 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:17.532 UTC [421] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:17.532 UTC [421] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:17.533 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:17.535 UTC [421] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:17.535 UTC [421] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:17.536 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:17.538 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:17.538 UTC [421] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:17.538 UTC [421] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:17.539 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:17.540 UTC [421] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:17.540 UTC [421] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:17.541 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:17.545 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:17.545 UTC [421] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:17.545 UTC [421] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:17.547 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:17.548 UTC [421] DEBUG:  building index "pg_toast_25801_index" on table "pg_toast_25801" serially
2025-04-19 19:06:17.550 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:17.550 UTC [421] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:17.550 UTC [421] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:17.552 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:17.553 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:17.554 UTC [421] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:17.554 UTC [421] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:17.556 UTC [421] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:17.556 UTC [421] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:17.556 UTC [421] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:17.558 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:17.559 UTC [421] DEBUG:  building index "pg_toast_25834_index" on table "pg_toast_25834" serially
2025-04-19 19:06:17.560 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:17.560 UTC [421] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:17.560 UTC [421] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:17.561 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:17.562 UTC [421] DEBUG:  building index "pg_toast_25845_index" on table "pg_toast_25845" serially
2025-04-19 19:06:17.563 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:17.563 UTC [421] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:17.563 UTC [421] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:17.565 UTC [421] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:17.567 UTC [421] DEBUG:  building index "pg_toast_25868_index" on table "pg_toast_25868" serially
2025-04-19 19:06:17.567 UTC [421] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:17.568 UTC [421] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:17.568 UTC [421] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:17.568 UTC [421] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:17.568 UTC [421] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:17.570 UTC [421] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:17.570 UTC [421] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:17.571 UTC [421] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:17.571 UTC [421] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:17.572 UTC [421] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:17.572 UTC [421] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:17.573 UTC [421] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:17.573 UTC [421] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:17.573 UTC [421] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:17.573 UTC [421] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:17.574 UTC [421] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:17.574 UTC [421] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:17.575 UTC [421] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:17.575 UTC [421] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:17.576 UTC [421] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:17.576 UTC [421] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:17.577 UTC [421] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:17.577 UTC [421] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:17.578 UTC [421] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:17.578 UTC [421] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:17.585 UTC [421] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:17.836 UTC [421] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4DcPXwvlOEQTWzRWZ4/3n.hWO5rqIHMoSP7Ol16PUik4deEFc82mG')
	                RETURNING id, username, email
	                
2025-04-19 19:06:17.837 UTC [421] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:17.838 UTC [421] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:30.640 UTC [421] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:06:30.916 UTC [421] DEBUG:  unexpected EOF on client connection
2025-04-19 19:06:32.442 UTC [436] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:32.453 UTC [436] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:32.463 UTC [436] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:32.463 UTC [436] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:32.467 UTC [436] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:32.470 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:32.472 UTC [436] DEBUG:  building index "pg_toast_25904_index" on table "pg_toast_25904" serially
2025-04-19 19:06:32.473 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:32.474 UTC [436] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:32.474 UTC [436] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:32.475 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:32.475 UTC [436] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:32.475 UTC [436] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:32.476 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:32.476 UTC [436] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:32.476 UTC [436] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:32.477 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:32.478 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:32.479 UTC [436] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:32.479 UTC [436] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:32.479 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:32.480 UTC [436] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:32.480 UTC [436] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:32.480 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:32.481 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:32.481 UTC [436] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:32.481 UTC [436] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:32.482 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:32.482 UTC [436] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:32.482 UTC [436] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:32.484 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:32.485 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:32.485 UTC [436] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:32.485 UTC [436] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:32.487 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:32.489 UTC [436] DEBUG:  building index "pg_toast_25965_index" on table "pg_toast_25965" serially
2025-04-19 19:06:32.490 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:32.490 UTC [436] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:32.490 UTC [436] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:32.492 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:32.493 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:32.493 UTC [436] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:32.493 UTC [436] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:32.494 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:32.495 UTC [436] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:32.495 UTC [436] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:32.496 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:32.497 UTC [436] DEBUG:  building index "pg_toast_25998_index" on table "pg_toast_25998" serially
2025-04-19 19:06:32.498 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:32.498 UTC [436] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:32.498 UTC [436] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:32.499 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:32.500 UTC [436] DEBUG:  building index "pg_toast_26009_index" on table "pg_toast_26009" serially
2025-04-19 19:06:32.500 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:32.501 UTC [436] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:32.501 UTC [436] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:32.502 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:32.503 UTC [436] DEBUG:  building index "pg_toast_26032_index" on table "pg_toast_26032" serially
2025-04-19 19:06:32.504 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:32.504 UTC [436] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:32.504 UTC [436] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:32.505 UTC [436] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:32.505 UTC [436] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:32.506 UTC [436] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:32.506 UTC [436] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:32.507 UTC [436] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:32.507 UTC [436] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:32.508 UTC [436] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:32.508 UTC [436] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:32.508 UTC [436] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:32.508 UTC [436] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:32.509 UTC [436] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:32.509 UTC [436] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:32.510 UTC [436] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:32.510 UTC [436] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:32.511 UTC [436] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:32.511 UTC [436] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:32.511 UTC [436] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:32.511 UTC [436] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:32.512 UTC [436] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:32.512 UTC [436] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:32.514 UTC [436] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:32.514 UTC [436] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:32.522 UTC [436] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:32.787 UTC [436] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$tiZkeQI9IR11VrFcoEOGcuC77Egdm8aNwelLkbye6DMCW/iIrZzjC')
	                RETURNING id, username, email
	                
2025-04-19 19:06:32.788 UTC [436] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:32.788 UTC [436] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:32.789 UTC [436] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:06:32.797 UTC [436] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:32.798 UTC [436] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:32.801 UTC [436] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:32.805 UTC [436] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:32.805 UTC [436] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:32.809 UTC [436] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:32.813 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:32.814 UTC [436] DEBUG:  building index "pg_toast_26068_index" on table "pg_toast_26068" serially
2025-04-19 19:06:32.816 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:32.816 UTC [436] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:32.816 UTC [436] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:32.817 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:32.817 UTC [436] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:32.817 UTC [436] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:32.818 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:32.819 UTC [436] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:32.819 UTC [436] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:32.820 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:32.821 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:32.822 UTC [436] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:32.822 UTC [436] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:32.823 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:32.823 UTC [436] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:32.823 UTC [436] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:32.824 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:32.825 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:32.825 UTC [436] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:32.825 UTC [436] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:32.826 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:32.826 UTC [436] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:32.826 UTC [436] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:32.827 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:32.828 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:32.828 UTC [436] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:32.828 UTC [436] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:32.829 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:32.831 UTC [436] DEBUG:  building index "pg_toast_26129_index" on table "pg_toast_26129" serially
2025-04-19 19:06:32.831 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:32.832 UTC [436] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:32.832 UTC [436] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:32.833 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:32.834 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:32.834 UTC [436] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:32.834 UTC [436] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:32.835 UTC [436] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:32.835 UTC [436] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:32.835 UTC [436] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:32.836 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:32.838 UTC [436] DEBUG:  building index "pg_toast_26162_index" on table "pg_toast_26162" serially
2025-04-19 19:06:32.838 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:32.838 UTC [436] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:32.838 UTC [436] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:32.839 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:32.840 UTC [436] DEBUG:  building index "pg_toast_26173_index" on table "pg_toast_26173" serially
2025-04-19 19:06:32.841 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:32.841 UTC [436] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:32.841 UTC [436] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:32.842 UTC [436] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:32.843 UTC [436] DEBUG:  building index "pg_toast_26196_index" on table "pg_toast_26196" serially
2025-04-19 19:06:32.844 UTC [436] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:32.844 UTC [436] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:32.844 UTC [436] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:32.845 UTC [436] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:32.845 UTC [436] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:32.846 UTC [436] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:32.846 UTC [436] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:32.847 UTC [436] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:32.847 UTC [436] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:32.847 UTC [436] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:32.847 UTC [436] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:32.848 UTC [436] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:32.848 UTC [436] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:32.849 UTC [436] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:32.849 UTC [436] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:32.850 UTC [436] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:32.850 UTC [436] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:32.851 UTC [436] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:32.851 UTC [436] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:32.852 UTC [436] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:32.852 UTC [436] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:32.853 UTC [436] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:32.853 UTC [436] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:32.854 UTC [436] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:32.854 UTC [436] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:32.863 UTC [436] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:33.125 UTC [436] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kEnf/8rJB.Mo5YoPZ2GpA.r8z07P4naSSienjjXz8i4pe7cxFlIAe')
	                RETURNING id, username, email
	                
2025-04-19 19:06:33.126 UTC [436] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:33.126 UTC [436] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:36.149 UTC [437] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:06:36.374 UTC [437] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:06:46.537 UTC [436] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:06:46.845 UTC [436] DEBUG:  unexpected EOF on client connection
2025-04-19 19:06:49.030 UTC [445] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:49.038 UTC [445] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:49.051 UTC [445] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:49.051 UTC [445] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:49.058 UTC [445] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:49.069 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:49.077 UTC [445] DEBUG:  building index "pg_toast_26233_index" on table "pg_toast_26233" serially
2025-04-19 19:06:49.080 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:49.081 UTC [445] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:49.081 UTC [445] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:49.084 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:49.085 UTC [445] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:49.085 UTC [445] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:49.087 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:49.087 UTC [445] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:49.087 UTC [445] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:49.089 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:49.090 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:49.090 UTC [445] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:49.091 UTC [445] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:49.091 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:49.091 UTC [445] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:49.091 UTC [445] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:49.092 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:49.093 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:49.093 UTC [445] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:49.094 UTC [445] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:49.094 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:49.094 UTC [445] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:49.094 UTC [445] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:49.096 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:49.097 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:49.097 UTC [445] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:49.097 UTC [445] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:49.098 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:49.100 UTC [445] DEBUG:  building index "pg_toast_26294_index" on table "pg_toast_26294" serially
2025-04-19 19:06:49.100 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:49.101 UTC [445] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:49.101 UTC [445] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:49.102 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:49.103 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:49.103 UTC [445] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:49.103 UTC [445] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:49.104 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:49.104 UTC [445] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:49.104 UTC [445] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:49.105 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:49.106 UTC [445] DEBUG:  building index "pg_toast_26327_index" on table "pg_toast_26327" serially
2025-04-19 19:06:49.107 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:49.107 UTC [445] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:49.107 UTC [445] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:49.108 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:49.109 UTC [445] DEBUG:  building index "pg_toast_26338_index" on table "pg_toast_26338" serially
2025-04-19 19:06:49.109 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:49.110 UTC [445] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:49.110 UTC [445] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:49.111 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:49.112 UTC [445] DEBUG:  building index "pg_toast_26361_index" on table "pg_toast_26361" serially
2025-04-19 19:06:49.112 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:49.112 UTC [445] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:49.112 UTC [445] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:49.113 UTC [445] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:49.113 UTC [445] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:49.114 UTC [445] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:49.114 UTC [445] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:49.115 UTC [445] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:49.115 UTC [445] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:49.116 UTC [445] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:49.116 UTC [445] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:49.117 UTC [445] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:49.117 UTC [445] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:49.118 UTC [445] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:49.118 UTC [445] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:49.119 UTC [445] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:49.119 UTC [445] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:49.120 UTC [445] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:49.120 UTC [445] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:49.121 UTC [445] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:49.121 UTC [445] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:49.121 UTC [445] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:49.121 UTC [445] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:49.122 UTC [445] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:49.122 UTC [445] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:49.137 UTC [445] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:49.405 UTC [445] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lV1yz5IA7r8Rnt/IyimRt.BPejSBtw/19KOMl/nkfTwFl3wKzr4Z.')
	                RETURNING id, username, email
	                
2025-04-19 19:06:49.406 UTC [445] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:49.406 UTC [445] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:06:49.407 UTC [445] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:06:49.417 UTC [445] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:49.418 UTC [445] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:06:49.420 UTC [445] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:06:49.424 UTC [445] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:06:49.424 UTC [445] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:06:49.427 UTC [445] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:06:49.430 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:06:49.431 UTC [445] DEBUG:  building index "pg_toast_26397_index" on table "pg_toast_26397" serially
2025-04-19 19:06:49.432 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:06:49.432 UTC [445] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:06:49.432 UTC [445] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:06:49.433 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:06:49.433 UTC [445] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:06:49.433 UTC [445] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:06:49.434 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:06:49.434 UTC [445] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:06:49.434 UTC [445] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:06:49.435 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:06:49.436 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:06:49.436 UTC [445] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:06:49.436 UTC [445] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:06:49.436 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:06:49.437 UTC [445] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:06:49.437 UTC [445] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:06:49.437 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:06:49.438 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:06:49.438 UTC [445] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:06:49.438 UTC [445] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:06:49.439 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:06:49.439 UTC [445] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:06:49.439 UTC [445] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:06:49.440 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:06:49.441 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:06:49.441 UTC [445] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:06:49.441 UTC [445] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:06:49.442 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:06:49.443 UTC [445] DEBUG:  building index "pg_toast_26458_index" on table "pg_toast_26458" serially
2025-04-19 19:06:49.444 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:06:49.444 UTC [445] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:06:49.444 UTC [445] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:06:49.445 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:06:49.446 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:06:49.446 UTC [445] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:06:49.446 UTC [445] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:06:49.447 UTC [445] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:06:49.447 UTC [445] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:06:49.447 UTC [445] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:06:49.449 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:06:49.450 UTC [445] DEBUG:  building index "pg_toast_26491_index" on table "pg_toast_26491" serially
2025-04-19 19:06:49.451 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:06:49.452 UTC [445] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:06:49.452 UTC [445] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:06:49.453 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:06:49.456 UTC [445] DEBUG:  building index "pg_toast_26502_index" on table "pg_toast_26502" serially
2025-04-19 19:06:49.457 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:06:49.457 UTC [445] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:06:49.457 UTC [445] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:06:49.460 UTC [445] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:06:49.461 UTC [445] DEBUG:  building index "pg_toast_26525_index" on table "pg_toast_26525" serially
2025-04-19 19:06:49.462 UTC [445] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:06:49.462 UTC [445] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:06:49.462 UTC [445] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:06:49.464 UTC [445] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:06:49.464 UTC [445] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:06:49.465 UTC [445] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:06:49.465 UTC [445] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:06:49.465 UTC [445] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:06:49.465 UTC [445] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:06:49.466 UTC [445] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:06:49.466 UTC [445] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:06:49.467 UTC [445] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:06:49.467 UTC [445] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:06:49.468 UTC [445] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:06:49.468 UTC [445] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:06:49.469 UTC [445] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:06:49.469 UTC [445] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:06:49.471 UTC [445] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:06:49.471 UTC [445] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:06:49.472 UTC [445] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:06:49.472 UTC [445] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:06:49.473 UTC [445] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:06:49.473 UTC [445] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:06:49.474 UTC [445] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:06:49.474 UTC [445] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:06:49.485 UTC [445] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:06:49.727 UTC [445] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$QlrGXc32xPQBj6sy8JmFMeS079fMFuEZjwSG5qfA1ObPLlF1DTw2G')
	                RETURNING id, username, email
	                
2025-04-19 19:06:49.728 UTC [445] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:06:49.729 UTC [445] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:02.437 UTC [445] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:07:02.714 UTC [445] DEBUG:  unexpected EOF on client connection
2025-04-19 19:07:04.563 UTC [460] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:04.570 UTC [460] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:04.577 UTC [460] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:04.577 UTC [460] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:04.582 UTC [460] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:04.586 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:04.589 UTC [460] DEBUG:  building index "pg_toast_26561_index" on table "pg_toast_26561" serially
2025-04-19 19:07:04.591 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:04.593 UTC [460] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:04.593 UTC [460] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:04.594 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:04.594 UTC [460] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:04.595 UTC [460] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:04.596 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:04.596 UTC [460] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:04.596 UTC [460] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:04.597 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:04.599 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:04.600 UTC [460] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:04.600 UTC [460] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:04.602 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:04.603 UTC [460] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:04.603 UTC [460] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:04.606 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:04.609 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:04.609 UTC [460] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:04.609 UTC [460] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:04.612 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:04.613 UTC [460] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:04.613 UTC [460] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:04.616 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:04.618 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:04.618 UTC [460] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:04.618 UTC [460] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:04.620 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:04.621 UTC [460] DEBUG:  building index "pg_toast_26622_index" on table "pg_toast_26622" serially
2025-04-19 19:07:04.622 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:04.622 UTC [460] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:04.622 UTC [460] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:04.623 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:04.624 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:04.625 UTC [460] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:04.625 UTC [460] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:04.625 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:04.626 UTC [460] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:04.626 UTC [460] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:04.627 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:04.628 UTC [460] DEBUG:  building index "pg_toast_26655_index" on table "pg_toast_26655" serially
2025-04-19 19:07:04.629 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:04.629 UTC [460] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:04.629 UTC [460] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:04.630 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:04.631 UTC [460] DEBUG:  building index "pg_toast_26666_index" on table "pg_toast_26666" serially
2025-04-19 19:07:04.632 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:04.632 UTC [460] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:04.632 UTC [460] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:04.633 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:04.634 UTC [460] DEBUG:  building index "pg_toast_26689_index" on table "pg_toast_26689" serially
2025-04-19 19:07:04.635 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:04.635 UTC [460] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:04.635 UTC [460] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:04.636 UTC [460] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:04.636 UTC [460] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:04.637 UTC [460] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:04.637 UTC [460] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:04.638 UTC [460] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:04.638 UTC [460] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:04.639 UTC [460] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:04.639 UTC [460] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:04.639 UTC [460] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:04.639 UTC [460] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:04.640 UTC [460] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:04.640 UTC [460] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:04.641 UTC [460] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:04.641 UTC [460] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:04.642 UTC [460] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:04.642 UTC [460] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:04.643 UTC [460] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:04.643 UTC [460] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:04.643 UTC [460] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:04.643 UTC [460] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:04.644 UTC [460] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:04.644 UTC [460] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:04.663 UTC [460] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:04.932 UTC [460] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$SE0xEXQWulenYB3YPmZEfuY38hkjTQBgvLAsmb1O5P0PM1M1TWxUa')
	                RETURNING id, username, email
	                
2025-04-19 19:07:04.934 UTC [460] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:04.934 UTC [460] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:04.935 UTC [460] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:07:04.961 UTC [460] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:04.963 UTC [460] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:04.971 UTC [460] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:04.983 UTC [460] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:04.983 UTC [460] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:04.993 UTC [460] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:04.996 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:04.997 UTC [460] DEBUG:  building index "pg_toast_26725_index" on table "pg_toast_26725" serially
2025-04-19 19:07:04.999 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:04.999 UTC [460] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:04.999 UTC [460] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:04.999 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:05.000 UTC [460] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:05.000 UTC [460] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:05.000 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:05.000 UTC [460] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:05.000 UTC [460] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:05.001 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:05.002 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:05.002 UTC [460] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:05.002 UTC [460] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:05.003 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:05.003 UTC [460] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:05.003 UTC [460] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:05.004 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:05.005 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:05.005 UTC [460] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:05.005 UTC [460] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:05.006 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:05.007 UTC [460] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:05.007 UTC [460] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:05.009 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:05.012 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:05.012 UTC [460] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:05.012 UTC [460] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:05.015 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:05.016 UTC [460] DEBUG:  building index "pg_toast_26786_index" on table "pg_toast_26786" serially
2025-04-19 19:07:05.017 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:05.018 UTC [460] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:05.018 UTC [460] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:05.019 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:05.021 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:05.021 UTC [460] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:05.021 UTC [460] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:05.022 UTC [460] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:05.022 UTC [460] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:05.022 UTC [460] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:05.023 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:05.024 UTC [460] DEBUG:  building index "pg_toast_26819_index" on table "pg_toast_26819" serially
2025-04-19 19:07:05.026 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:05.026 UTC [460] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:05.026 UTC [460] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:05.028 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:05.031 UTC [460] DEBUG:  building index "pg_toast_26830_index" on table "pg_toast_26830" serially
2025-04-19 19:07:05.032 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:05.033 UTC [460] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:05.033 UTC [460] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:05.036 UTC [460] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:05.039 UTC [460] DEBUG:  building index "pg_toast_26853_index" on table "pg_toast_26853" serially
2025-04-19 19:07:05.040 UTC [460] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:05.041 UTC [460] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:05.041 UTC [460] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:05.042 UTC [460] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:05.042 UTC [460] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:05.043 UTC [460] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:05.043 UTC [460] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:05.045 UTC [460] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:05.045 UTC [460] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:05.045 UTC [460] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:05.045 UTC [460] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:05.046 UTC [460] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:05.046 UTC [460] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:05.047 UTC [460] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:05.047 UTC [460] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:05.048 UTC [460] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:05.048 UTC [460] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:05.048 UTC [460] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:05.048 UTC [460] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:05.049 UTC [460] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:05.049 UTC [460] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:05.050 UTC [460] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:05.050 UTC [460] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:05.051 UTC [460] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:05.051 UTC [460] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:05.062 UTC [460] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:05.310 UTC [460] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xC/XEa3yL5tTTukcr47XGOKTmi934Zqii5YaTn0pTm4O36TNPGBhG')
	                RETURNING id, username, email
	                
2025-04-19 19:07:05.311 UTC [460] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:05.311 UTC [460] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:06.109 UTC [461] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:07:18.347 UTC [460] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:07:18.649 UTC [460] DEBUG:  unexpected EOF on client connection
2025-04-19 19:07:21.714 UTC [476] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:21.756 UTC [476] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:21.785 UTC [476] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:21.785 UTC [476] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:21.794 UTC [476] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:21.804 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:21.817 UTC [476] DEBUG:  building index "pg_toast_26889_index" on table "pg_toast_26889" serially
2025-04-19 19:07:21.820 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:21.821 UTC [476] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:21.822 UTC [476] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:21.823 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:21.824 UTC [476] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:21.824 UTC [476] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:21.825 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:21.826 UTC [476] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:21.826 UTC [476] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:21.827 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:21.829 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:21.830 UTC [476] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:21.830 UTC [476] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:21.830 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:21.831 UTC [476] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:21.831 UTC [476] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:21.832 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:21.833 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:21.833 UTC [476] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:21.833 UTC [476] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:21.834 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:21.834 UTC [476] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:21.834 UTC [476] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:21.837 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:21.843 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:21.843 UTC [476] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:21.844 UTC [476] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:21.846 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:21.849 UTC [476] DEBUG:  building index "pg_toast_26950_index" on table "pg_toast_26950" serially
2025-04-19 19:07:21.850 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:21.850 UTC [476] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:21.850 UTC [476] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:21.852 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:21.853 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:21.853 UTC [476] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:21.853 UTC [476] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:21.855 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:21.855 UTC [476] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:21.855 UTC [476] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:21.857 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:21.858 UTC [476] DEBUG:  building index "pg_toast_26983_index" on table "pg_toast_26983" serially
2025-04-19 19:07:21.860 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:21.860 UTC [476] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:21.860 UTC [476] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:21.862 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:21.863 UTC [476] DEBUG:  building index "pg_toast_26994_index" on table "pg_toast_26994" serially
2025-04-19 19:07:21.865 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:21.865 UTC [476] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:21.865 UTC [476] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:21.867 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:21.868 UTC [476] DEBUG:  building index "pg_toast_27017_index" on table "pg_toast_27017" serially
2025-04-19 19:07:21.869 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:21.870 UTC [476] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:21.870 UTC [476] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:21.873 UTC [476] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:21.873 UTC [476] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:21.876 UTC [476] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:21.877 UTC [476] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:21.878 UTC [476] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:21.878 UTC [476] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:21.879 UTC [476] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:21.879 UTC [476] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:21.880 UTC [476] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:21.880 UTC [476] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:21.882 UTC [476] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:21.882 UTC [476] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:21.883 UTC [476] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:21.883 UTC [476] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:21.885 UTC [476] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:21.885 UTC [476] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:21.886 UTC [476] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:21.886 UTC [476] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:21.887 UTC [476] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:21.887 UTC [476] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:21.888 UTC [476] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:21.888 UTC [476] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:21.915 UTC [476] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:22.222 UTC [476] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jaFFq0xyFgKaKAMpfuvXMOjxPZFSrC1B6pG4qHkwgTgRcIimsyAlK')
	                RETURNING id, username, email
	                
2025-04-19 19:07:22.223 UTC [476] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:22.224 UTC [476] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:22.225 UTC [476] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:07:22.237 UTC [476] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:22.239 UTC [476] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:22.242 UTC [476] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:22.248 UTC [476] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:22.248 UTC [476] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:22.252 UTC [476] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:22.256 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:22.257 UTC [476] DEBUG:  building index "pg_toast_27053_index" on table "pg_toast_27053" serially
2025-04-19 19:07:22.258 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:22.259 UTC [476] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:22.259 UTC [476] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:22.260 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:22.260 UTC [476] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:22.260 UTC [476] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:22.261 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:22.261 UTC [476] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:22.261 UTC [476] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:22.262 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:22.263 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:22.263 UTC [476] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:22.263 UTC [476] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:22.266 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:22.266 UTC [476] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:22.267 UTC [476] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:22.270 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:22.275 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:22.276 UTC [476] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:22.276 UTC [476] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:22.279 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:22.280 UTC [476] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:22.280 UTC [476] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:22.283 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:22.284 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:22.284 UTC [476] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:22.284 UTC [476] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:22.286 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:22.287 UTC [476] DEBUG:  building index "pg_toast_27114_index" on table "pg_toast_27114" serially
2025-04-19 19:07:22.289 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:22.289 UTC [476] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:22.289 UTC [476] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:22.290 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:22.292 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:22.292 UTC [476] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:22.292 UTC [476] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:22.293 UTC [476] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:22.294 UTC [476] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:22.294 UTC [476] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:22.295 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:22.297 UTC [476] DEBUG:  building index "pg_toast_27147_index" on table "pg_toast_27147" serially
2025-04-19 19:07:22.298 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:22.298 UTC [476] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:22.298 UTC [476] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:22.299 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:22.301 UTC [476] DEBUG:  building index "pg_toast_27158_index" on table "pg_toast_27158" serially
2025-04-19 19:07:22.302 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:22.303 UTC [476] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:22.303 UTC [476] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:22.304 UTC [476] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:22.306 UTC [476] DEBUG:  building index "pg_toast_27181_index" on table "pg_toast_27181" serially
2025-04-19 19:07:22.307 UTC [476] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:22.307 UTC [476] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:22.307 UTC [476] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:22.308 UTC [476] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:22.308 UTC [476] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:22.309 UTC [476] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:22.309 UTC [476] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:22.310 UTC [476] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:22.310 UTC [476] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:22.312 UTC [476] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:22.312 UTC [476] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:22.312 UTC [476] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:22.312 UTC [476] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:22.313 UTC [476] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:22.314 UTC [476] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:22.315 UTC [476] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:22.315 UTC [476] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:22.315 UTC [476] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:22.315 UTC [476] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:22.317 UTC [476] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:22.317 UTC [476] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:22.318 UTC [476] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:22.318 UTC [476] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:22.322 UTC [476] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:22.322 UTC [476] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:22.331 UTC [476] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:22.596 UTC [476] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$QtVxvz424n2D0rWIf4VbqeJoMros31ddGcgqjp7FOuted5TCU6Qoe')
	                RETURNING id, username, email
	                
2025-04-19 19:07:22.597 UTC [476] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:22.598 UTC [476] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:34.306 UTC [476] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:07:34.603 UTC [476] DEBUG:  unexpected EOF on client connection
2025-04-19 19:07:36.103 UTC [484] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:07:36.297 UTC [484] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:07:36.468 UTC [485] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:36.475 UTC [485] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:36.481 UTC [485] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:36.481 UTC [485] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:36.485 UTC [485] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:36.488 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:36.490 UTC [485] DEBUG:  building index "pg_toast_27218_index" on table "pg_toast_27218" serially
2025-04-19 19:07:36.491 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:36.492 UTC [485] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:36.492 UTC [485] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:36.493 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:36.494 UTC [485] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:36.494 UTC [485] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:36.494 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:36.495 UTC [485] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:36.495 UTC [485] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:36.496 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:36.496 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:36.497 UTC [485] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:36.497 UTC [485] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:36.497 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:36.498 UTC [485] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:36.498 UTC [485] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:36.499 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:36.500 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:36.500 UTC [485] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:36.501 UTC [485] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:36.501 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:36.502 UTC [485] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:36.502 UTC [485] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:36.504 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:36.505 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:36.505 UTC [485] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:36.505 UTC [485] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:36.506 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:36.509 UTC [485] DEBUG:  building index "pg_toast_27279_index" on table "pg_toast_27279" serially
2025-04-19 19:07:36.510 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:36.510 UTC [485] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:36.510 UTC [485] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:36.512 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:36.515 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:36.515 UTC [485] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:36.515 UTC [485] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:36.516 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:36.517 UTC [485] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:36.517 UTC [485] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:36.519 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:36.520 UTC [485] DEBUG:  building index "pg_toast_27312_index" on table "pg_toast_27312" serially
2025-04-19 19:07:36.521 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:36.521 UTC [485] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:36.521 UTC [485] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:36.522 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:36.524 UTC [485] DEBUG:  building index "pg_toast_27323_index" on table "pg_toast_27323" serially
2025-04-19 19:07:36.525 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:36.525 UTC [485] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:36.525 UTC [485] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:36.527 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:36.528 UTC [485] DEBUG:  building index "pg_toast_27346_index" on table "pg_toast_27346" serially
2025-04-19 19:07:36.529 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:36.529 UTC [485] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:36.529 UTC [485] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:36.530 UTC [485] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:36.530 UTC [485] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:36.531 UTC [485] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:36.531 UTC [485] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:36.531 UTC [485] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:36.531 UTC [485] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:36.532 UTC [485] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:36.532 UTC [485] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:36.533 UTC [485] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:36.533 UTC [485] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:36.534 UTC [485] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:36.534 UTC [485] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:36.535 UTC [485] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:36.535 UTC [485] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:36.536 UTC [485] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 19:07:36.536 UTC [485] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:36.536 UTC [485] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:36.537 UTC [485] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:36.537 UTC [485] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:36.538 UTC [485] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:36.538 UTC [485] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:36.539 UTC [485] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:36.539 UTC [485] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:36.550 UTC [485] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:36.832 UTC [485] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$nsK0Ej60O7ytVQG3RA3Pq.P9KxaAWElSY.gKISMOtqJhPsdP.7Kre')
	                RETURNING id, username, email
	                
2025-04-19 19:07:36.833 UTC [485] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:36.834 UTC [485] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:36.834 UTC [485] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:07:36.840 UTC [485] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 19:07:36.840 UTC [485] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 19:07:36.846 UTC [485] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:36.847 UTC [485] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:36.850 UTC [485] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:36.854 UTC [485] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:36.854 UTC [485] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:36.857 UTC [485] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:36.860 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:36.861 UTC [485] DEBUG:  building index "pg_toast_27382_index" on table "pg_toast_27382" serially
2025-04-19 19:07:36.862 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:36.862 UTC [485] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:36.862 UTC [485] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:36.863 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:36.863 UTC [485] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:36.863 UTC [485] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:36.864 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:36.864 UTC [485] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:36.864 UTC [485] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:36.865 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:36.866 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:36.866 UTC [485] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:36.866 UTC [485] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:36.867 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:36.867 UTC [485] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:36.867 UTC [485] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:36.867 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:36.868 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:36.868 UTC [485] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:36.868 UTC [485] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:36.869 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:36.869 UTC [485] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:36.869 UTC [485] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:36.870 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:36.871 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:36.871 UTC [485] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:36.871 UTC [485] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:36.872 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:36.873 UTC [485] DEBUG:  building index "pg_toast_27443_index" on table "pg_toast_27443" serially
2025-04-19 19:07:36.874 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:36.874 UTC [485] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:36.874 UTC [485] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:36.876 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:36.876 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:36.877 UTC [485] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:36.877 UTC [485] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:36.877 UTC [485] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:36.877 UTC [485] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:36.877 UTC [485] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:36.881 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:36.882 UTC [485] DEBUG:  building index "pg_toast_27476_index" on table "pg_toast_27476" serially
2025-04-19 19:07:36.883 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:36.883 UTC [485] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:36.883 UTC [485] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:36.885 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:36.887 UTC [485] DEBUG:  building index "pg_toast_27487_index" on table "pg_toast_27487" serially
2025-04-19 19:07:36.888 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:36.889 UTC [485] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:36.889 UTC [485] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:36.892 UTC [485] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:36.896 UTC [485] DEBUG:  building index "pg_toast_27510_index" on table "pg_toast_27510" serially
2025-04-19 19:07:36.898 UTC [485] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:36.899 UTC [485] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:36.899 UTC [485] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:36.901 UTC [485] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:36.901 UTC [485] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:36.902 UTC [485] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:36.902 UTC [485] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:36.904 UTC [485] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:36.904 UTC [485] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:36.906 UTC [485] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:36.906 UTC [485] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:36.907 UTC [485] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:36.907 UTC [485] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:36.909 UTC [485] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:36.909 UTC [485] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:36.910 UTC [485] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:36.910 UTC [485] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:36.910 UTC [485] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:36.910 UTC [485] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:36.911 UTC [485] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:36.911 UTC [485] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:36.912 UTC [485] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:36.912 UTC [485] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:36.913 UTC [485] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:36.913 UTC [485] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:36.921 UTC [485] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:37.173 UTC [485] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$APNml/AGB64t6NStY6SJRujWEcbYvk56sL1c5AalnilT4MB3CdSCu')
	                RETURNING id, username, email
	                
2025-04-19 19:07:37.174 UTC [485] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:37.175 UTC [485] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:50.358 UTC [485] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:07:50.702 UTC [485] DEBUG:  unexpected EOF on client connection
2025-04-19 19:07:53.000 UTC [500] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:53.007 UTC [500] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:53.016 UTC [500] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:53.016 UTC [500] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:53.024 UTC [500] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:53.032 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:53.035 UTC [500] DEBUG:  building index "pg_toast_27546_index" on table "pg_toast_27546" serially
2025-04-19 19:07:53.038 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:53.039 UTC [500] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:53.039 UTC [500] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:53.040 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:53.040 UTC [500] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:53.040 UTC [500] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:53.041 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:53.041 UTC [500] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:53.041 UTC [500] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:53.042 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:53.043 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:53.044 UTC [500] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:53.044 UTC [500] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:53.044 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:53.045 UTC [500] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:53.045 UTC [500] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:53.045 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:53.047 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:53.047 UTC [500] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:53.047 UTC [500] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:53.048 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:53.048 UTC [500] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:53.048 UTC [500] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:53.050 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:53.050 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:53.051 UTC [500] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:53.051 UTC [500] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:53.052 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:53.053 UTC [500] DEBUG:  building index "pg_toast_27607_index" on table "pg_toast_27607" serially
2025-04-19 19:07:53.054 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:53.055 UTC [500] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:53.055 UTC [500] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:53.056 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:53.057 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:53.058 UTC [500] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:53.058 UTC [500] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:53.058 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:53.059 UTC [500] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:53.059 UTC [500] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:53.060 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:53.061 UTC [500] DEBUG:  building index "pg_toast_27640_index" on table "pg_toast_27640" serially
2025-04-19 19:07:53.062 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:53.062 UTC [500] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:53.062 UTC [500] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:53.063 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:53.064 UTC [500] DEBUG:  building index "pg_toast_27651_index" on table "pg_toast_27651" serially
2025-04-19 19:07:53.065 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:53.065 UTC [500] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:53.065 UTC [500] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:53.067 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:53.068 UTC [500] DEBUG:  building index "pg_toast_27674_index" on table "pg_toast_27674" serially
2025-04-19 19:07:53.069 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:53.069 UTC [500] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:53.069 UTC [500] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:53.071 UTC [500] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:53.071 UTC [500] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:53.072 UTC [500] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:53.072 UTC [500] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:53.072 UTC [500] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:53.072 UTC [500] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:53.073 UTC [500] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:53.074 UTC [500] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:53.075 UTC [500] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:53.075 UTC [500] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:53.075 UTC [500] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:53.076 UTC [500] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:53.076 UTC [500] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:53.077 UTC [500] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:53.078 UTC [500] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:53.078 UTC [500] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:53.079 UTC [500] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:53.079 UTC [500] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:53.080 UTC [500] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:53.080 UTC [500] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:53.080 UTC [500] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:53.080 UTC [500] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:53.102 UTC [500] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:53.370 UTC [500] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$VPIZwiCBaTk1zEmaHTu2N.9WdYLTMHzzUm4k5odrTK9rvX9xO9ViK')
	                RETURNING id, username, email
	                
2025-04-19 19:07:53.372 UTC [500] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:53.372 UTC [500] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:53.374 UTC [500] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:07:53.396 UTC [500] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:53.397 UTC [500] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:07:53.400 UTC [500] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:07:53.404 UTC [500] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:07:53.404 UTC [500] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:07:53.408 UTC [500] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:07:53.412 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:07:53.415 UTC [500] DEBUG:  building index "pg_toast_27710_index" on table "pg_toast_27710" serially
2025-04-19 19:07:53.417 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:07:53.418 UTC [500] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:07:53.418 UTC [500] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:07:53.420 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:07:53.420 UTC [500] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:07:53.420 UTC [500] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:07:53.421 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:07:53.421 UTC [500] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:07:53.421 UTC [500] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:07:53.423 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:07:53.425 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:07:53.426 UTC [500] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:07:53.426 UTC [500] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:07:53.427 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:07:53.428 UTC [500] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:07:53.428 UTC [500] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:07:53.429 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:07:53.431 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:07:53.432 UTC [500] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:07:53.432 UTC [500] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:07:53.433 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:07:53.433 UTC [500] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:07:53.433 UTC [500] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:07:53.434 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:07:53.435 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:07:53.435 UTC [500] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:07:53.435 UTC [500] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:07:53.437 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:07:53.437 UTC [500] DEBUG:  building index "pg_toast_27771_index" on table "pg_toast_27771" serially
2025-04-19 19:07:53.438 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:07:53.439 UTC [500] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:07:53.439 UTC [500] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:07:53.440 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:07:53.441 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:07:53.441 UTC [500] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:07:53.441 UTC [500] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:07:53.442 UTC [500] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:07:53.442 UTC [500] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:07:53.442 UTC [500] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:07:53.443 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:07:53.445 UTC [500] DEBUG:  building index "pg_toast_27804_index" on table "pg_toast_27804" serially
2025-04-19 19:07:53.445 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:07:53.446 UTC [500] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:07:53.446 UTC [500] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:07:53.446 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:07:53.448 UTC [500] DEBUG:  building index "pg_toast_27815_index" on table "pg_toast_27815" serially
2025-04-19 19:07:53.448 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:07:53.449 UTC [500] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:07:53.449 UTC [500] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:07:53.450 UTC [500] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:07:53.451 UTC [500] DEBUG:  building index "pg_toast_27838_index" on table "pg_toast_27838" serially
2025-04-19 19:07:53.452 UTC [500] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:07:53.452 UTC [500] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:07:53.452 UTC [500] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:07:53.453 UTC [500] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:07:53.453 UTC [500] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:07:53.454 UTC [500] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:07:53.454 UTC [500] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:07:53.455 UTC [500] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:07:53.455 UTC [500] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:07:53.456 UTC [500] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:07:53.456 UTC [500] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:07:53.457 UTC [500] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:07:53.457 UTC [500] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:07:53.458 UTC [500] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:07:53.458 UTC [500] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:07:53.458 UTC [500] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:07:53.458 UTC [500] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:07:53.459 UTC [500] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:07:53.459 UTC [500] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:07:53.460 UTC [500] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:07:53.460 UTC [500] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:07:53.461 UTC [500] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:07:53.461 UTC [500] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:07:53.462 UTC [500] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:07:53.462 UTC [500] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:07:53.472 UTC [500] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:07:53.746 UTC [500] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$70o6Tn/FnWbStsRG3vHbv.kfB8OikFZGKpAvVjMLTBK76KcKakJ7S')
	                RETURNING id, username, email
	                
2025-04-19 19:07:53.747 UTC [500] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:07:53.748 UTC [500] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:07:59.697 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 19:07:59.704 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.705 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 19:07:59.705 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.709 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 19:07:59.712 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.718 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 19:07:59.718 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.718 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 19:07:59.719 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.719 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 19:07:59.720 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.723 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 19:07:59.723 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.724 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 19:07:59.724 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.724 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 19:07:59.725 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.727 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 19:07:59.728 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.728 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 19:07:59.728 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.729 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 19:07:59.729 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.732 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 19:07:59.732 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.732 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 19:07:59.732 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.733 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 19:07:59.733 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.736 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 19:07:59.736 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.736 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 19:07:59.736 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.737 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 19:07:59.737 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.739 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 19:07:59.740 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.740 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 19:07:59.740 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.741 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 19:07:59.741 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.748 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 19:07:59.749 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.750 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 19:07:59.750 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.750 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 19:07:59.751 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.756 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 19:07:59.757 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.757 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 19:07:59.757 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.758 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 19:07:59.758 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.762 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 19:07:59.762 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.763 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 19:07:59.763 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.763 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 19:07:59.764 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.766 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 19:07:59.766 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.766 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 19:07:59.767 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.767 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 19:07:59.767 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.770 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 19:07:59.770 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.770 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 19:07:59.770 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.771 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 19:07:59.771 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.773 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 19:07:59.773 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.774 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 19:07:59.774 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.774 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 19:07:59.775 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.778 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 19:07:59.778 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.779 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 19:07:59.779 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.779 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 19:07:59.780 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.782 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 19:07:59.782 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.782 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 19:07:59.782 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.783 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 19:07:59.783 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.785 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 19:07:59.785 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.786 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 19:07:59.786 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.786 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 19:07:59.787 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.789 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 19:07:59.789 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.789 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 19:07:59.789 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.790 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 19:07:59.790 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.792 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 19:07:59.792 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.792 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 19:07:59.792 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.793 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 19:07:59.793 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.797 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 19:07:59.797 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.797 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 19:07:59.797 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.798 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 19:07:59.798 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.800 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 19:07:59.801 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.801 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 19:07:59.801 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.801 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 19:07:59.802 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.804 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 19:07:59.805 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.805 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 19:07:59.805 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.805 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 19:07:59.806 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.808 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 19:07:59.809 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.809 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 19:07:59.809 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.810 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 19:07:59.811 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.816 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 19:07:59.817 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.817 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 19:07:59.818 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.819 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 19:07:59.820 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.824 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 19:07:59.824 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.825 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 19:07:59.825 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.826 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 19:07:59.826 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.832 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 19:07:59.832 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.832 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 19:07:59.832 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.833 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 19:07:59.833 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.835 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 19:07:59.836 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.836 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 19:07:59.836 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.836 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 19:07:59.837 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.839 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 19:07:59.839 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.839 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 19:07:59.839 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.840 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 19:07:59.841 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.843 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 19:07:59.844 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.844 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 19:07:59.844 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.845 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 19:07:59.845 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.848 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 19:07:59.848 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.848 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 19:07:59.848 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.849 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 19:07:59.849 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.852 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 19:07:59.852 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.852 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 19:07:59.852 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.853 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 19:07:59.853 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.855 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 19:07:59.855 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.856 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 19:07:59.856 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.856 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 19:07:59.856 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.858 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 19:07:59.859 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.859 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 19:07:59.859 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.859 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 19:07:59.860 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.863 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 19:07:59.863 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.863 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 19:07:59.864 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.864 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 19:07:59.864 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.866 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 19:07:59.867 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.867 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 19:07:59.867 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.867 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 19:07:59.868 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.870 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 19:07:59.871 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.871 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 19:07:59.871 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.871 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 19:07:59.872 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.874 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 19:07:59.874 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.874 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 19:07:59.874 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.875 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 19:07:59.875 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.878 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 19:07:59.879 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.879 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 19:07:59.879 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.879 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 19:07:59.880 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.882 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 19:07:59.882 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.883 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 19:07:59.883 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.883 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 19:07:59.883 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.886 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 19:07:59.886 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.887 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 19:07:59.887 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.887 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 19:07:59.888 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.894 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 19:07:59.894 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.895 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 19:07:59.895 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.896 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 19:07:59.897 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.900 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 19:07:59.900 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.901 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 19:07:59.901 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.901 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 19:07:59.901 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.904 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 19:07:59.904 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.904 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 19:07:59.904 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.905 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 19:07:59.905 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.907 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 19:07:59.908 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.908 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 19:07:59.908 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.908 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 19:07:59.909 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.912 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 19:07:59.912 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.912 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 19:07:59.913 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.913 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 19:07:59.913 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.916 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 19:07:59.917 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.917 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 19:07:59.917 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.917 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 19:07:59.918 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.920 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 19:07:59.921 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.921 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 19:07:59.921 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.922 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 19:07:59.922 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.929 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 19:07:59.930 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.930 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 19:07:59.930 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.930 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 19:07:59.931 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.935 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 19:07:59.937 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.938 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 19:07:59.938 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.939 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 19:07:59.939 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.942 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 19:07:59.942 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.943 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 19:07:59.943 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.943 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 19:07:59.944 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.946 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 19:07:59.946 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.947 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 19:07:59.947 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.947 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 19:07:59.947 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.949 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 19:07:59.950 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.950 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 19:07:59.950 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.950 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 19:07:59.951 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.953 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 19:07:59.953 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.953 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 19:07:59.954 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.954 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 19:07:59.954 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.957 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 19:07:59.957 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.958 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 19:07:59.958 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.958 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 19:07:59.959 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.964 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 19:07:59.964 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.965 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 19:07:59.965 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.965 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 19:07:59.966 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.968 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 19:07:59.968 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.968 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 19:07:59.969 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.969 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 19:07:59.969 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.971 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 19:07:59.972 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.972 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 19:07:59.972 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.972 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 19:07:59.973 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.975 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 19:07:59.975 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.975 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 19:07:59.976 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.976 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 19:07:59.976 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.979 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 19:07:59.979 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.980 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 19:07:59.980 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.980 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 19:07:59.980 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.982 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 19:07:59.983 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.983 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 19:07:59.983 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.983 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 19:07:59.984 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.986 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 19:07:59.986 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.987 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 19:07:59.987 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.987 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 19:07:59.987 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.990 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 19:07:59.990 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.990 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 19:07:59.990 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.991 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 19:07:59.991 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.993 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 19:07:59.994 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.994 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 19:07:59.994 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.995 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 19:07:59.995 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:07:59.998 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 19:07:59.998 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:07:59.998 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 19:07:59.998 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:07:59.999 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 19:07:59.999 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.001 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 19:08:00.001 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.001 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 19:08:00.002 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.002 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 19:08:00.002 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.005 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 19:08:00.005 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.005 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 19:08:00.006 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.007 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 19:08:00.007 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.014 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 19:08:00.015 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.015 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 19:08:00.015 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.015 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 19:08:00.016 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.019 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 19:08:00.019 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.019 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 19:08:00.019 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.020 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 19:08:00.021 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.025 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 19:08:00.025 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.026 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 19:08:00.026 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.027 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 19:08:00.028 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.032 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 19:08:00.032 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.032 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 19:08:00.032 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.033 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 19:08:00.035 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.040 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 19:08:00.040 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.040 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 19:08:00.040 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.041 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 19:08:00.041 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.045 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 19:08:00.045 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.046 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 19:08:00.046 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.046 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 19:08:00.047 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.049 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 19:08:00.050 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.050 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 19:08:00.050 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.050 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 19:08:00.051 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.054 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 19:08:00.055 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.055 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 19:08:00.055 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.055 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 19:08:00.056 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.058 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 19:08:00.059 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.059 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 19:08:00.059 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.059 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 19:08:00.060 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.063 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 19:08:00.063 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.063 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 19:08:00.063 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.064 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 19:08:00.064 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.067 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 19:08:00.067 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.067 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 19:08:00.067 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.068 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 19:08:00.068 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.070 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 19:08:00.071 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.071 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 19:08:00.071 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.071 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 19:08:00.072 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.075 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 19:08:00.075 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.075 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 19:08:00.076 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.076 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 19:08:00.076 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.079 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 19:08:00.080 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.080 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 19:08:00.080 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.080 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 19:08:00.081 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.083 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 19:08:00.084 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.084 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 19:08:00.084 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.084 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 19:08:00.085 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.087 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 19:08:00.087 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.088 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 19:08:00.088 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.088 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 19:08:00.088 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.091 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 19:08:00.091 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.091 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 19:08:00.091 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.092 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 19:08:00.092 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.095 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 19:08:00.096 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.096 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 19:08:00.096 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.096 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 19:08:00.097 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.099 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 19:08:00.099 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.099 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 19:08:00.100 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.100 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 19:08:00.100 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.103 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 19:08:00.104 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.104 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 19:08:00.104 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.104 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 19:08:00.105 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.108 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 19:08:00.108 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.108 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 19:08:00.108 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.109 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 19:08:00.109 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.112 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 19:08:00.113 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.113 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 19:08:00.113 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.113 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 19:08:00.114 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.116 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 19:08:00.116 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.116 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 19:08:00.117 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.117 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 19:08:00.117 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.120 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 19:08:00.120 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.121 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 19:08:00.121 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.121 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 19:08:00.122 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.125 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 19:08:00.125 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.125 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 19:08:00.125 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.125 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 19:08:00.126 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.130 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 19:08:00.131 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.131 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 19:08:00.131 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.132 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 19:08:00.133 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.142 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 19:08:00.143 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.144 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 19:08:00.144 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.144 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 19:08:00.145 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.148 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 19:08:00.148 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.148 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 19:08:00.148 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.149 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 19:08:00.149 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.152 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 19:08:00.152 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.152 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 19:08:00.152 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.153 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 19:08:00.153 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.157 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 19:08:00.157 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.157 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 19:08:00.158 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.158 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 19:08:00.158 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.161 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 19:08:00.162 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.162 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 19:08:00.162 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.162 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 19:08:00.163 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.165 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 19:08:00.165 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.165 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 19:08:00.165 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.166 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 19:08:00.166 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.168 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 19:08:00.169 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.169 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 19:08:00.169 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.169 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 19:08:00.170 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.173 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 19:08:00.173 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.173 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 19:08:00.173 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.174 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 19:08:00.174 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.177 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 19:08:00.177 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.177 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 19:08:00.178 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.178 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 19:08:00.179 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.181 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 19:08:00.182 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.182 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 19:08:00.182 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.182 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 19:08:00.183 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.185 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 19:08:00.186 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.186 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 19:08:00.186 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.186 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 19:08:00.187 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.189 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 19:08:00.189 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.189 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 19:08:00.189 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.190 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 19:08:00.190 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.192 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 19:08:00.193 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.193 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 19:08:00.193 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.193 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 19:08:00.194 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.196 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 19:08:00.197 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.197 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 19:08:00.197 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.198 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 19:08:00.198 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.200 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 19:08:00.201 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.201 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 19:08:00.201 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.201 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 19:08:00.202 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.205 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 19:08:00.205 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.206 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 19:08:00.206 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.206 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 19:08:00.207 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.210 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 19:08:00.210 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.210 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 19:08:00.210 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.211 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 19:08:00.211 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.214 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 19:08:00.214 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.214 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 19:08:00.214 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.215 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 19:08:00.215 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.218 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 19:08:00.218 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.218 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 19:08:00.218 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.219 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 19:08:00.219 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.222 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 19:08:00.223 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.223 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 19:08:00.223 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.223 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 19:08:00.223 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.226 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 19:08:00.226 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.226 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 19:08:00.226 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.227 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 19:08:00.227 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.230 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 19:08:00.230 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.230 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 19:08:00.230 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.231 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 19:08:00.231 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.233 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 19:08:00.234 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.234 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 19:08:00.234 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.234 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 19:08:00.235 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.237 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 19:08:00.237 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.238 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 19:08:00.238 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.238 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 19:08:00.239 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.242 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 19:08:00.242 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.242 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 19:08:00.242 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.243 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 19:08:00.243 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.248 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 19:08:00.248 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.248 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 19:08:00.248 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.249 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 19:08:00.249 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.251 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 19:08:00.251 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.252 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 19:08:00.252 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.252 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 19:08:00.252 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.256 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 19:08:00.256 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.256 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 19:08:00.256 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.257 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 19:08:00.257 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.259 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 19:08:00.260 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.260 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 19:08:00.260 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.260 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 19:08:00.261 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.263 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 19:08:00.264 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.264 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 19:08:00.264 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.264 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 19:08:00.265 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.267 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 19:08:00.267 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.268 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 19:08:00.268 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.268 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 19:08:00.269 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.271 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 19:08:00.271 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.271 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 19:08:00.271 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.272 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 19:08:00.272 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.275 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 19:08:00.276 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.276 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 19:08:00.276 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.277 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 19:08:00.277 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.280 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 19:08:00.281 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.281 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 19:08:00.281 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.282 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 19:08:00.282 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.285 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 19:08:00.285 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.285 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 19:08:00.286 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.286 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 19:08:00.287 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.289 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 19:08:00.290 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.290 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 19:08:00.290 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.290 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 19:08:00.291 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.293 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 19:08:00.294 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.294 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 19:08:00.294 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.295 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 19:08:00.295 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.298 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 19:08:00.298 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.298 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 19:08:00.299 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.299 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 19:08:00.300 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.302 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 19:08:00.302 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.303 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 19:08:00.303 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.303 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 19:08:00.303 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.306 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 19:08:00.306 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.306 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 19:08:00.306 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.307 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 19:08:00.307 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.310 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 19:08:00.310 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.310 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 19:08:00.311 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.311 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 19:08:00.312 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.315 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 19:08:00.315 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.315 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 19:08:00.316 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.316 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 19:08:00.316 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.320 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 19:08:00.320 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.320 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 19:08:00.320 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.321 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 19:08:00.321 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.325 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 19:08:00.325 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.326 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 19:08:00.326 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.326 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 19:08:00.327 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.329 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 19:08:00.330 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.330 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 19:08:00.330 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.331 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 19:08:00.331 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.334 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 19:08:00.334 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.334 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 19:08:00.334 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.335 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 19:08:00.335 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.339 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 19:08:00.339 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.339 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 19:08:00.339 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.339 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 19:08:00.340 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.343 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 19:08:00.343 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.343 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 19:08:00.344 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.344 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 19:08:00.345 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.348 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 19:08:00.348 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.349 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 19:08:00.349 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.349 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 19:08:00.350 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.353 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 19:08:00.353 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.353 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 19:08:00.353 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.354 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 19:08:00.354 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.356 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 19:08:00.356 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.357 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 19:08:00.357 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.357 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 19:08:00.358 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.360 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 19:08:00.361 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.361 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 19:08:00.361 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.361 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 19:08:00.362 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.364 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 19:08:00.365 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.365 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 19:08:00.365 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.366 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 19:08:00.367 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.371 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 19:08:00.371 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.371 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 19:08:00.372 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.374 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 19:08:00.379 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.388 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 19:08:00.390 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.390 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 19:08:00.390 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.391 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 19:08:00.392 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.396 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 19:08:00.396 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.396 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 19:08:00.397 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.397 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 19:08:00.398 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.400 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 19:08:00.401 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.401 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 19:08:00.401 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.401 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 19:08:00.402 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.406 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 19:08:00.406 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.406 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 19:08:00.406 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.407 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 19:08:00.407 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.411 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 19:08:00.411 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.411 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 19:08:00.411 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.412 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 19:08:00.412 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.415 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 19:08:00.415 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.415 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 19:08:00.415 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.415 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 19:08:00.416 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.418 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 19:08:00.418 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.418 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 19:08:00.418 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.419 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 19:08:00.419 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.421 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 19:08:00.422 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.422 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 19:08:00.422 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.423 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 19:08:00.423 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.426 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 19:08:00.426 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.426 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 19:08:00.427 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.427 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 19:08:00.427 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.430 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 19:08:00.431 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.431 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 19:08:00.431 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.431 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 19:08:00.432 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.434 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 19:08:00.434 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.434 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 19:08:00.434 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.435 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 19:08:00.435 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.438 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 19:08:00.438 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.438 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 19:08:00.438 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.439 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 19:08:00.439 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.442 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 19:08:00.442 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.443 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 19:08:00.443 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.443 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 19:08:00.444 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.446 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 19:08:00.447 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.447 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 19:08:00.447 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.447 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 19:08:00.448 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.450 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 19:08:00.450 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.450 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 19:08:00.450 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.451 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 19:08:00.451 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.453 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 19:08:00.453 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.454 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 19:08:00.454 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.454 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 19:08:00.454 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.457 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 19:08:00.457 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.457 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 19:08:00.457 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.458 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 19:08:00.458 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.463 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 19:08:00.463 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.463 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 19:08:00.463 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.464 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 19:08:00.464 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.467 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 19:08:00.467 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.467 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 19:08:00.467 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.468 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 19:08:00.468 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.470 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 19:08:00.471 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.471 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 19:08:00.471 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.471 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 19:08:00.472 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.476 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 19:08:00.476 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.476 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 19:08:00.476 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.476 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 19:08:00.477 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.480 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 19:08:00.480 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.480 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 19:08:00.480 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.481 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 19:08:00.481 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.483 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 19:08:00.484 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.484 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 19:08:00.484 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.484 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 19:08:00.485 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.487 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 19:08:00.487 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.487 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 19:08:00.487 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.488 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 19:08:00.489 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.491 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 19:08:00.492 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.492 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 19:08:00.492 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.492 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 19:08:00.493 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.496 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 19:08:00.496 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.497 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 19:08:00.497 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.497 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 19:08:00.498 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.500 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 19:08:00.500 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.500 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 19:08:00.501 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.501 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 19:08:00.501 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.503 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 19:08:00.504 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.504 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 19:08:00.504 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.505 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 19:08:00.505 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.507 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 19:08:00.507 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.507 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 19:08:00.508 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.508 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 19:08:00.509 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.513 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 19:08:00.513 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.513 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 19:08:00.513 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.514 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 19:08:00.514 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.516 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 19:08:00.517 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.517 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 19:08:00.517 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.517 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 19:08:00.518 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.520 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 19:08:00.520 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.520 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 19:08:00.520 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.521 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 19:08:00.521 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.523 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 19:08:00.524 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.524 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 19:08:00.524 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.524 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 19:08:00.525 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.529 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 19:08:00.530 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.530 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 19:08:00.530 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.530 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 19:08:00.531 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.533 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 19:08:00.534 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.534 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 19:08:00.534 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.534 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 19:08:00.535 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.538 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 19:08:00.538 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.538 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 19:08:00.538 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.539 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 19:08:00.539 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.541 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 19:08:00.542 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.542 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 19:08:00.542 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.542 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 19:08:00.543 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.547 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 19:08:00.547 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.547 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 19:08:00.547 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.548 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 19:08:00.548 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.550 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 19:08:00.551 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.551 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 19:08:00.551 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.551 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 19:08:00.552 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.555 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 19:08:00.555 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.555 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 19:08:00.555 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.556 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 19:08:00.556 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.558 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 19:08:00.558 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.558 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 19:08:00.559 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.559 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 19:08:00.559 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.563 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 19:08:00.564 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.564 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 19:08:00.564 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.564 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 19:08:00.565 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.567 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 19:08:00.568 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.568 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 19:08:00.568 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.568 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 19:08:00.569 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.571 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 19:08:00.571 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.571 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 19:08:00.571 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.572 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 19:08:00.572 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.574 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 19:08:00.575 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.575 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 19:08:00.575 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.575 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 19:08:00.576 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.580 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 19:08:00.581 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.581 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 19:08:00.581 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.581 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 19:08:00.582 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.584 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 19:08:00.584 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.585 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 19:08:00.585 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.585 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 19:08:00.586 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.588 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 19:08:00.588 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.588 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 19:08:00.589 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.589 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 19:08:00.589 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.592 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 19:08:00.592 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.592 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 19:08:00.592 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.593 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 19:08:00.593 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.596 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 19:08:00.597 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.597 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 19:08:00.597 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.597 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 19:08:00.598 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.600 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 19:08:00.600 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.601 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 19:08:00.601 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.601 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 19:08:00.601 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.604 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 19:08:00.604 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.605 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 19:08:00.605 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.605 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 19:08:00.606 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.609 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 19:08:00.609 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.609 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 19:08:00.609 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.610 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 19:08:00.610 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.613 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 19:08:00.613 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.614 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 19:08:00.614 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.614 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 19:08:00.615 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.617 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 19:08:00.617 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.617 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 19:08:00.617 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.618 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 19:08:00.618 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.621 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 19:08:00.622 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.622 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 19:08:00.622 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.622 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 19:08:00.623 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.625 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 19:08:00.625 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.625 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 19:08:00.626 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.626 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 19:08:00.626 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.629 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 19:08:00.629 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.630 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 19:08:00.630 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.630 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 19:08:00.631 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.633 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 19:08:00.633 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.633 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 19:08:00.634 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.634 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 19:08:00.634 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.637 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 19:08:00.638 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.638 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 19:08:00.638 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.638 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 19:08:00.639 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.642 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 19:08:00.642 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.642 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 19:08:00.642 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.643 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 19:08:00.643 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.646 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 19:08:00.647 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.647 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 19:08:00.647 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.647 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 19:08:00.648 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.650 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 19:08:00.650 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.651 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 19:08:00.651 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.651 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 19:08:00.651 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.654 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 19:08:00.655 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.655 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 19:08:00.655 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.655 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 19:08:00.656 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.659 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 19:08:00.659 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.659 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 19:08:00.660 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.660 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 19:08:00.661 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.665 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 19:08:00.666 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.666 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 19:08:00.666 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.667 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 19:08:00.667 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.671 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 19:08:00.671 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.671 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 19:08:00.671 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.672 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 19:08:00.672 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.675 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 19:08:00.676 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.676 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 19:08:00.676 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.677 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 19:08:00.677 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.680 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 19:08:00.681 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.681 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 19:08:00.681 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.681 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 19:08:00.682 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.684 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 19:08:00.685 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.685 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 19:08:00.685 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.686 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 19:08:00.686 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.688 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 19:08:00.689 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.689 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 19:08:00.689 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.689 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 19:08:00.690 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.691 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 19:08:00.692 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.692 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 19:08:00.692 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1069, '2022-11-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.692 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (217,1,7,false),(217,2,28,false),(217,3,62,false),(217,4,63,false),(217,5,64,false),(217,6,10,true)
	        
2025-04-19 19:08:00.693 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.697 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 19:08:00.697 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.697 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 19:08:00.697 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1070, '2022-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.697 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (218,1,1,false),(218,2,6,false),(218,3,40,false),(218,4,51,false),(218,5,67,false),(218,6,2,true)
	        
2025-04-19 19:08:00.698 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.700 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 19:08:00.700 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.700 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 19:08:00.700 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1071, '2023-11-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.701 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (219,1,1,false),(219,2,2,false),(219,3,31,false),(219,4,39,false),(219,5,66,false),(219,6,25,true)
	        
2025-04-19 19:08:00.701 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.703 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 19:08:00.704 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.704 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 19:08:00.704 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1072, '2022-11-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.704 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (220,1,15,false),(220,2,30,false),(220,3,47,false),(220,4,50,false),(220,5,51,false),(220,6,3,true)
	        
2025-04-19 19:08:00.705 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.707 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 19:08:00.707 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.708 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 19:08:00.708 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1073, '2022-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.708 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (221,1,29,false),(221,2,30,false),(221,3,32,false),(221,4,48,false),(221,5,50,false),(221,6,20,true)
	        
2025-04-19 19:08:00.708 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.713 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 19:08:00.713 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.713 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 19:08:00.713 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1074, '2022-11-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.714 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (222,1,4,false),(222,2,19,false),(222,3,24,false),(222,4,47,false),(222,5,66,false),(222,6,10,true)
	        
2025-04-19 19:08:00.714 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.716 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 19:08:00.716 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.717 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 19:08:00.717 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1075, '2022-12-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.717 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (223,1,6,false),(223,2,13,false),(223,3,33,false),(223,4,36,false),(223,5,37,false),(223,6,7,true)
	        
2025-04-19 19:08:00.718 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.720 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 19:08:00.720 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.720 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 19:08:00.721 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1076, '2022-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.721 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (224,1,35,false),(224,2,45,false),(224,3,47,false),(224,4,54,false),(224,5,55,false),(224,6,14,true)
	        
2025-04-19 19:08:00.721 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.724 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 19:08:00.724 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.724 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 19:08:00.724 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1077, '2022-12-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.725 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (225,1,6,false),(225,2,28,false),(225,3,44,false),(225,4,59,false),(225,5,61,false),(225,6,21,true)
	        
2025-04-19 19:08:00.725 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.729 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 19:08:00.729 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.729 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 19:08:00.729 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1078, '2022-12-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.730 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (226,1,9,false),(226,2,23,false),(226,3,47,false),(226,4,59,false),(226,5,61,false),(226,6,21,true)
	        
2025-04-19 19:08:00.730 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.733 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 19:08:00.733 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.734 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 19:08:00.734 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1079, '2022-12-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.734 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (227,1,16,false),(227,2,31,false),(227,3,50,false),(227,4,55,false),(227,5,61,false),(227,6,9,true)
	        
2025-04-19 19:08:00.734 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.737 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 19:08:00.737 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.737 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 19:08:00.737 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1080, '2022-12-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.738 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (228,1,36,false),(228,2,51,false),(228,3,59,false),(228,4,66,false),(228,5,68,false),(228,6,25,true)
	        
2025-04-19 19:08:00.739 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.741 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 19:08:00.741 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.741 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 19:08:00.741 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1081, '2022-12-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.742 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (229,1,33,false),(229,2,56,false),(229,3,64,false),(229,4,66,false),(229,5,68,false),(229,6,12,true)
	        
2025-04-19 19:08:00.742 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.746 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 19:08:00.747 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.747 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 19:08:00.747 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1082, '2022-12-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.747 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (230,1,7,false),(230,2,37,false),(230,3,55,false),(230,4,65,false),(230,5,67,false),(230,6,12,true)
	        
2025-04-19 19:08:00.748 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.750 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 19:08:00.750 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.751 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 19:08:00.751 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1083, '2022-12-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.751 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (231,1,12,false),(231,2,15,false),(231,3,24,false),(231,4,34,false),(231,5,59,false),(231,6,14,true)
	        
2025-04-19 19:08:00.751 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.754 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 19:08:00.754 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.755 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 19:08:00.755 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1084, '2022-12-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.755 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (232,1,17,false),(232,2,37,false),(232,3,46,false),(232,4,54,false),(232,5,67,false),(232,6,8,true)
	        
2025-04-19 19:08:00.755 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.758 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 19:08:00.759 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.759 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 19:08:00.759 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1085, '2022-12-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.759 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (233,1,17,false),(233,2,41,false),(233,3,47,false),(233,4,60,false),(233,5,61,false),(233,6,17,true)
	        
2025-04-19 19:08:00.760 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.764 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 19:08:00.764 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.764 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 19:08:00.765 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1086, '2022-12-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.765 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (234,1,26,false),(234,2,32,false),(234,3,38,false),(234,4,45,false),(234,5,56,false),(234,6,1,true)
	        
2025-04-19 19:08:00.765 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.768 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 19:08:00.768 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.769 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 19:08:00.769 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1087, '2022-12-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.769 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (235,1,18,false),(235,2,37,false),(235,3,44,false),(235,4,50,false),(235,5,64,false),(235,6,11,true)
	        
2025-04-19 19:08:00.770 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.773 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 19:08:00.773 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.773 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 19:08:00.774 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1088, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.774 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (236,1,7,false),(236,2,9,false),(236,3,12,false),(236,4,31,false),(236,5,62,false),(236,6,22,true)
	        
2025-04-19 19:08:00.775 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.778 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 19:08:00.779 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.779 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 19:08:00.779 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1089, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.779 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (237,1,12,false),(237,2,32,false),(237,3,56,false),(237,4,67,false),(237,5,68,false),(237,6,26,true)
	        
2025-04-19 19:08:00.780 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.782 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 19:08:00.782 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.782 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 19:08:00.782 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1090, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.783 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (238,1,35,false),(238,2,36,false),(238,3,44,false),(238,4,45,false),(238,5,67,false),(238,6,14,true)
	        
2025-04-19 19:08:00.783 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.786 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 19:08:00.786 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.786 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 19:08:00.786 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1091, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.787 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (239,1,18,false),(239,2,43,false),(239,3,48,false),(239,4,60,false),(239,5,69,false),(239,6,14,true)
	        
2025-04-19 19:08:00.787 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.790 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 19:08:00.791 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.791 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 19:08:00.791 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1092, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.791 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (240,1,4,false),(240,2,8,false),(240,3,46,false),(240,4,47,false),(240,5,48,false),(240,6,5,true)
	        
2025-04-19 19:08:00.792 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.802 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 19:08:00.806 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.806 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 19:08:00.806 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1093, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.812 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (241,1,24,false),(241,2,26,false),(241,3,39,false),(241,4,47,false),(241,5,57,false),(241,6,23,true)
	        
2025-04-19 19:08:00.813 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.817 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 19:08:00.818 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.818 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 19:08:00.818 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1094, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.818 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (242,1,4,false),(242,2,14,false),(242,3,33,false),(242,4,39,false),(242,5,61,false),(242,6,3,true)
	        
2025-04-19 19:08:00.819 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.822 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 19:08:00.822 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.822 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 19:08:00.822 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1095, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.823 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (243,1,6,false),(243,2,15,false),(243,3,22,false),(243,4,42,false),(243,5,47,false),(243,6,26,true)
	        
2025-04-19 19:08:00.823 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.825 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 19:08:00.826 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.826 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 19:08:00.826 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1096, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.826 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (244,1,5,false),(244,2,14,false),(244,3,19,false),(244,4,46,false),(244,5,64,false),(244,6,22,true)
	        
2025-04-19 19:08:00.827 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.830 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 19:08:00.830 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.830 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 19:08:00.830 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1097, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.831 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (245,1,12,false),(245,2,31,false),(245,3,47,false),(245,4,58,false),(245,5,60,false),(245,6,23,true)
	        
2025-04-19 19:08:00.831 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.833 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 19:08:00.833 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.833 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 19:08:00.834 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1098, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.834 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (246,1,9,false),(246,2,17,false),(246,3,20,false),(246,4,38,false),(246,5,40,false),(246,6,18,true)
	        
2025-04-19 19:08:00.834 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.837 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 19:08:00.837 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.837 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 19:08:00.837 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1099, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.838 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (247,1,2,false),(247,2,18,false),(247,3,23,false),(247,4,27,false),(247,5,47,false),(247,6,15,true)
	        
2025-04-19 19:08:00.838 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.840 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 19:08:00.841 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.841 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 19:08:00.841 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1100, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.841 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (248,1,1,false),(248,2,4,false),(248,3,12,false),(248,4,36,false),(248,5,49,false),(248,6,5,true)
	        
2025-04-19 19:08:00.842 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.845 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 19:08:00.845 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.845 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 19:08:00.845 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1101, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.846 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (249,1,31,false),(249,2,43,false),(249,3,58,false),(249,4,59,false),(249,5,66,false),(249,6,9,true)
	        
2025-04-19 19:08:00.846 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.848 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 19:08:00.849 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.849 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 19:08:00.849 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1102, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.849 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (250,1,2,false),(250,2,8,false),(250,3,15,false),(250,4,19,false),(250,5,58,false),(250,6,10,true)
	        
2025-04-19 19:08:00.850 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.852 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 19:08:00.852 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.852 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 19:08:00.852 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1103, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.852 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (251,1,5,false),(251,2,11,false),(251,3,22,false),(251,4,23,false),(251,5,69,false),(251,6,7,true)
	        
2025-04-19 19:08:00.853 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.855 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 19:08:00.855 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.856 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 19:08:00.856 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1104, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.856 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (252,1,52,false),(252,2,58,false),(252,3,59,false),(252,4,64,false),(252,5,66,false),(252,6,9,true)
	        
2025-04-19 19:08:00.857 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.859 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 19:08:00.859 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.859 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 19:08:00.859 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1105, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.860 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (253,1,10,false),(253,2,23,false),(253,3,30,false),(253,4,54,false),(253,5,65,false),(253,6,11,true)
	        
2025-04-19 19:08:00.860 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.863 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 19:08:00.863 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.863 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 19:08:00.863 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1106, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.864 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (254,1,17,false),(254,2,26,false),(254,3,37,false),(254,4,61,false),(254,5,65,false),(254,6,2,true)
	        
2025-04-19 19:08:00.864 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.867 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 19:08:00.867 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.867 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 19:08:00.868 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1107, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.868 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (255,1,31,false),(255,2,32,false),(255,3,54,false),(255,4,60,false),(255,5,63,false),(255,6,12,true)
	        
2025-04-19 19:08:00.868 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.871 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 19:08:00.871 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.871 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 19:08:00.871 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1108, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.872 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (256,1,8,false),(256,2,21,false),(256,3,31,false),(256,4,32,false),(256,5,37,false),(256,6,23,true)
	        
2025-04-19 19:08:00.872 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.874 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 19:08:00.874 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.874 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 19:08:00.874 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1109, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.875 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (257,1,3,false),(257,2,17,false),(257,3,26,false),(257,4,38,false),(257,5,54,false),(257,6,15,true)
	        
2025-04-19 19:08:00.876 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.878 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 19:08:00.879 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.879 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 19:08:00.879 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1110, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.879 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (258,1,11,false),(258,2,18,false),(258,3,39,false),(258,4,44,false),(258,5,65,false),(258,6,7,true)
	        
2025-04-19 19:08:00.880 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.882 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 19:08:00.882 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.882 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 19:08:00.883 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1111, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.886 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (259,1,11,false),(259,2,24,false),(259,3,58,false),(259,4,66,false),(259,5,67,false),(259,6,26,true)
	        
2025-04-19 19:08:00.888 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.895 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 19:08:00.895 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.895 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 19:08:00.896 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1112, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.896 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (260,1,16,false),(260,2,28,false),(260,3,49,false),(260,4,51,false),(260,5,55,false),(260,6,23,true)
	        
2025-04-19 19:08:00.898 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.902 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 19:08:00.903 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.903 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 19:08:00.904 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1113, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.904 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (261,1,2,false),(261,2,9,false),(261,3,28,false),(261,4,36,false),(261,5,53,false),(261,6,4,true)
	        
2025-04-19 19:08:00.905 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.914 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 19:08:00.914 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.915 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 19:08:00.915 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1114, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.915 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (262,1,10,false),(262,2,16,false),(262,3,18,false),(262,4,40,false),(262,5,66,false),(262,6,16,true)
	        
2025-04-19 19:08:00.916 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.920 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 19:08:00.920 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.921 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 19:08:00.921 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1115, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.921 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (263,1,2,false),(263,2,13,false),(263,3,29,false),(263,4,58,false),(263,5,69,false),(263,6,4,true)
	        
2025-04-19 19:08:00.922 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.925 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 19:08:00.926 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.926 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 19:08:00.926 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1116, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.927 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (264,1,26,false),(264,2,27,false),(264,3,43,false),(264,4,61,false),(264,5,69,false),(264,6,4,true)
	        
2025-04-19 19:08:00.928 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.931 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 19:08:00.931 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.931 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 19:08:00.931 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1117, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.932 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (265,1,11,false),(265,2,20,false),(265,3,33,false),(265,4,43,false),(265,5,58,false),(265,6,24,true)
	        
2025-04-19 19:08:00.932 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.935 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 19:08:00.936 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.936 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 19:08:00.936 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1118, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.938 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (266,1,3,false),(266,2,10,false),(266,3,24,false),(266,4,46,false),(266,5,63,false),(266,6,4,true)
	        
2025-04-19 19:08:00.939 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.941 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 19:08:00.942 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.942 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 19:08:00.942 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1119, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.943 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (267,1,16,false),(267,2,18,false),(267,3,33,false),(267,4,37,false),(267,5,50,false),(267,6,8,true)
	        
2025-04-19 19:08:00.944 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.949 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 19:08:00.949 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.949 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 19:08:00.949 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1120, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.950 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (268,1,14,false),(268,2,29,false),(268,3,30,false),(268,4,54,false),(268,5,69,false),(268,6,11,true)
	        
2025-04-19 19:08:00.951 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.953 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 19:08:00.953 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.954 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 19:08:00.954 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1121, '2023-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.954 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (269,1,1,false),(269,2,27,false),(269,3,32,false),(269,4,47,false),(269,5,67,false),(269,6,14,true)
	        
2025-04-19 19:08:00.955 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.958 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 19:08:00.958 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.958 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 19:08:00.958 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1122, '2023-03-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.959 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (270,1,27,false),(270,2,28,false),(270,3,37,false),(270,4,50,false),(270,5,57,false),(270,6,5,true)
	        
2025-04-19 19:08:00.960 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.964 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 19:08:00.965 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.965 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 19:08:00.966 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1123, '2023-03-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.966 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (271,1,15,false),(271,2,17,false),(271,3,18,false),(271,4,47,false),(271,5,57,false),(271,6,19,true)
	        
2025-04-19 19:08:00.967 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.971 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 19:08:00.972 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.972 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 19:08:00.972 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1124, '2023-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.973 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (272,1,19,false),(272,2,26,false),(272,3,36,false),(272,4,43,false),(272,5,58,false),(272,6,14,true)
	        
2025-04-19 19:08:00.974 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.980 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 19:08:00.980 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.981 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 19:08:00.981 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1125, '2023-03-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.982 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (273,1,4,false),(273,2,9,false),(273,3,24,false),(273,4,46,false),(273,5,66,false),(273,6,7,true)
	        
2025-04-19 19:08:00.983 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.988 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 19:08:00.989 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.990 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 19:08:00.992 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1126, '2023-04-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:00.994 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (274,1,11,false),(274,2,19,false),(274,3,21,false),(274,4,29,false),(274,5,52,false),(274,6,17,true)
	        
2025-04-19 19:08:00.995 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:00.999 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 19:08:00.999 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:00.999 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 19:08:01.000 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1127, '2023-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.000 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (275,1,16,false),(275,2,30,false),(275,3,31,false),(275,4,54,false),(275,5,68,false),(275,6,1,true)
	        
2025-04-19 19:08:01.000 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.003 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 19:08:01.003 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.003 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 19:08:01.004 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1128, '2023-04-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.004 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (276,1,3,false),(276,2,5,false),(276,3,9,false),(276,4,42,false),(276,5,52,false),(276,6,11,true)
	        
2025-04-19 19:08:01.004 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.007 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 19:08:01.007 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.008 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 19:08:01.008 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1129, '2023-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.008 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (277,1,11,false),(277,2,22,false),(277,3,24,false),(277,4,51,false),(277,5,60,false),(277,6,18,true)
	        
2025-04-19 19:08:01.009 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.012 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 19:08:01.013 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.013 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 19:08:01.013 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1130, '2023-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.014 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (278,1,9,false),(278,2,10,false),(278,3,36,false),(278,4,46,false),(278,5,52,false),(278,6,14,true)
	        
2025-04-19 19:08:01.014 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.022 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 19:08:01.022 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.023 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 19:08:01.023 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1131, '2023-04-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.023 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (279,1,9,false),(279,2,36,false),(279,3,41,false),(279,4,44,false),(279,5,59,false),(279,6,4,true)
	        
2025-04-19 19:08:01.024 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.029 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 19:08:01.030 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.030 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 19:08:01.030 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1132, '2023-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.030 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (280,1,1,false),(280,2,33,false),(280,3,34,false),(280,4,56,false),(280,5,59,false),(280,6,18,true)
	        
2025-04-19 19:08:01.031 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.033 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 19:08:01.034 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.034 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 19:08:01.034 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1133, '2023-04-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.035 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (281,1,23,false),(281,2,25,false),(281,3,35,false),(281,4,63,false),(281,5,64,false),(281,6,25,true)
	        
2025-04-19 19:08:01.035 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.038 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 19:08:01.038 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.038 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 19:08:01.038 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1134, '2023-04-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.039 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (282,1,4,false),(282,2,11,false),(282,3,21,false),(282,4,38,false),(282,5,64,false),(282,6,11,true)
	        
2025-04-19 19:08:01.039 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.042 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 19:08:01.042 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.042 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 19:08:01.042 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1135, '2023-04-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.043 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (283,1,17,false),(283,2,36,false),(283,3,47,false),(283,4,63,false),(283,5,68,false),(283,6,25,true)
	        
2025-04-19 19:08:01.043 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.046 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 19:08:01.047 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.047 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 19:08:01.047 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1136, '2023-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.048 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (284,1,19,false),(284,2,21,false),(284,3,55,false),(284,4,66,false),(284,5,68,false),(284,6,3,true)
	        
2025-04-19 19:08:01.048 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.050 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 19:08:01.051 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.051 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 19:08:01.051 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1137, '2023-04-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.052 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (285,1,2,false),(285,2,15,false),(285,3,30,false),(285,4,35,false),(285,5,49,false),(285,6,6,true)
	        
2025-04-19 19:08:01.052 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.054 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 19:08:01.055 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.055 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 19:08:01.055 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1138, '2023-04-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.055 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (286,1,16,false),(286,2,53,false),(286,3,54,false),(286,4,57,false),(286,5,65,false),(286,6,8,true)
	        
2025-04-19 19:08:01.056 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.058 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 19:08:01.058 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.059 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 19:08:01.059 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1139, '2023-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.059 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (287,1,3,false),(287,2,38,false),(287,3,55,false),(287,4,61,false),(287,5,66,false),(287,6,1,true)
	        
2025-04-19 19:08:01.060 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.062 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 19:08:01.063 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.063 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 19:08:01.063 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1140, '2023-05-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.063 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (288,1,21,false),(288,2,26,false),(288,3,30,false),(288,4,45,false),(288,5,47,false),(288,6,23,true)
	        
2025-04-19 19:08:01.064 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.067 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 19:08:01.068 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.068 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 19:08:01.068 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1141, '2023-05-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.069 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (289,1,31,false),(289,2,39,false),(289,3,47,false),(289,4,51,false),(289,5,53,false),(289,6,6,true)
	        
2025-04-19 19:08:01.069 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.074 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 19:08:01.074 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.075 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 19:08:01.075 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1142, '2023-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.075 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (290,1,15,false),(290,2,20,false),(290,3,33,false),(290,4,36,false),(290,5,43,false),(290,6,12,true)
	        
2025-04-19 19:08:01.076 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.079 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 19:08:01.080 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.080 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 19:08:01.080 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1143, '2023-05-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.080 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (291,1,21,false),(291,2,24,false),(291,3,33,false),(291,4,55,false),(291,5,69,false),(291,6,3,true)
	        
2025-04-19 19:08:01.081 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.083 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 19:08:01.084 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.084 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 19:08:01.084 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1144, '2023-05-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.085 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (292,1,3,false),(292,2,15,false),(292,3,20,false),(292,4,23,false),(292,5,46,false),(292,6,11,true)
	        
2025-04-19 19:08:01.085 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.089 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 19:08:01.090 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.090 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 19:08:01.090 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1145, '2023-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.091 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (293,1,1,false),(293,2,26,false),(293,3,28,false),(293,4,55,false),(293,5,58,false),(293,6,25,true)
	        
2025-04-19 19:08:01.092 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.097 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 19:08:01.100 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.103 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 19:08:01.106 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1146, '2023-05-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.108 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (294,1,18,false),(294,2,34,false),(294,3,37,false),(294,4,45,false),(294,5,51,false),(294,6,14,true)
	        
2025-04-19 19:08:01.112 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.116 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 19:08:01.117 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.117 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 19:08:01.117 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1147, '2023-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.118 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (295,1,17,false),(295,2,23,false),(295,3,32,false),(295,4,38,false),(295,5,63,false),(295,6,23,true)
	        
2025-04-19 19:08:01.118 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.123 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 19:08:01.124 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.125 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 19:08:01.125 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1148, '2023-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.126 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (296,1,9,false),(296,2,38,false),(296,3,48,false),(296,4,52,false),(296,5,68,false),(296,6,25,true)
	        
2025-04-19 19:08:01.126 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.130 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 19:08:01.130 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.131 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 19:08:01.131 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1149, '2023-05-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.131 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (297,1,12,false),(297,2,21,false),(297,3,44,false),(297,4,50,false),(297,5,58,false),(297,6,26,true)
	        
2025-04-19 19:08:01.131 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.134 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 19:08:01.134 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.134 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 19:08:01.134 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1150, '2023-05-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.135 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (298,1,24,false),(298,2,38,false),(298,3,39,false),(298,4,48,false),(298,5,56,false),(298,6,4,true)
	        
2025-04-19 19:08:01.135 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.138 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 19:08:01.138 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.138 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 19:08:01.139 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1151, '2023-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.140 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (299,1,21,false),(299,2,33,false),(299,3,35,false),(299,4,62,false),(299,5,64,false),(299,6,24,true)
	        
2025-04-19 19:08:01.140 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.145 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 19:08:01.146 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.146 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 19:08:01.146 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1152, '2023-05-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.147 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (300,1,2,false),(300,2,4,false),(300,3,54,false),(300,4,61,false),(300,5,62,false),(300,6,14,true)
	        
2025-04-19 19:08:01.147 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.150 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 19:08:01.150 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.151 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 19:08:01.151 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1153, '2023-06-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.151 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (301,1,15,false),(301,2,45,false),(301,3,64,false),(301,4,67,false),(301,5,68,false),(301,6,18,true)
	        
2025-04-19 19:08:01.152 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.156 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 19:08:01.156 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.156 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 19:08:01.157 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1154, '2023-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.159 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (302,1,2,false),(302,2,31,false),(302,3,45,false),(302,4,46,false),(302,5,49,false),(302,6,20,true)
	        
2025-04-19 19:08:01.159 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.162 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 19:08:01.163 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.163 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 19:08:01.163 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1155, '2023-06-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.163 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (303,1,16,false),(303,2,21,false),(303,3,29,false),(303,4,53,false),(303,5,66,false),(303,6,2,true)
	        
2025-04-19 19:08:01.164 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.166 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 19:08:01.166 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.166 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 19:08:01.167 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1156, '2023-06-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.167 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (304,1,21,false),(304,2,32,false),(304,3,42,false),(304,4,46,false),(304,5,50,false),(304,6,4,true)
	        
2025-04-19 19:08:01.167 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.170 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 19:08:01.170 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.170 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 19:08:01.170 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1157, '2023-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.171 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (305,1,2,false),(305,2,3,false),(305,3,16,false),(305,4,23,false),(305,5,68,false),(305,6,7,true)
	        
2025-04-19 19:08:01.171 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.173 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 19:08:01.173 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.174 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 19:08:01.174 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1158, '2023-06-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.174 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (306,1,3,false),(306,2,20,false),(306,3,36,false),(306,4,42,false),(306,5,64,false),(306,6,4,true)
	        
2025-04-19 19:08:01.175 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.177 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 19:08:01.177 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.177 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 19:08:01.178 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1159, '2023-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.178 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (307,1,2,false),(307,2,12,false),(307,3,45,false),(307,4,61,false),(307,5,64,false),(307,6,26,true)
	        
2025-04-19 19:08:01.178 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.181 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 19:08:01.181 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.181 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 19:08:01.181 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1160, '2023-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.182 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (308,1,36,false),(308,2,39,false),(308,3,52,false),(308,4,57,false),(308,5,69,false),(308,6,1,true)
	        
2025-04-19 19:08:01.182 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.184 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 19:08:01.184 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.185 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 19:08:01.185 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1161, '2023-06-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.185 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (309,1,5,false),(309,2,11,false),(309,3,33,false),(309,4,35,false),(309,5,63,false),(309,6,14,true)
	        
2025-04-19 19:08:01.186 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.188 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 19:08:01.188 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.188 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 19:08:01.188 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1162, '2023-06-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.189 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (310,1,2,false),(310,2,38,false),(310,3,44,false),(310,4,50,false),(310,5,62,false),(310,6,19,true)
	        
2025-04-19 19:08:01.189 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.191 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 19:08:01.191 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.191 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 19:08:01.192 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1163, '2023-06-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.192 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (311,1,6,false),(311,2,28,false),(311,3,39,false),(311,4,43,false),(311,5,54,false),(311,6,12,true)
	        
2025-04-19 19:08:01.192 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.195 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 19:08:01.196 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.196 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 19:08:01.196 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1164, '2023-06-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.196 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (312,1,19,false),(312,2,25,false),(312,3,34,false),(312,4,57,false),(312,5,68,false),(312,6,4,true)
	        
2025-04-19 19:08:01.198 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.202 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 19:08:01.202 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.203 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 19:08:01.203 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1165, '2023-07-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.203 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (313,1,4,false),(313,2,17,false),(313,3,35,false),(313,4,49,false),(313,5,61,false),(313,6,8,true)
	        
2025-04-19 19:08:01.204 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.207 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 19:08:01.207 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.207 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 19:08:01.207 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1166, '2023-07-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.208 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (314,1,15,false),(314,2,26,false),(314,3,31,false),(314,4,38,false),(314,5,61,false),(314,6,3,true)
	        
2025-04-19 19:08:01.209 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.212 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 19:08:01.212 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.213 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 19:08:01.213 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1167, '2023-07-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.213 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (315,1,17,false),(315,2,24,false),(315,3,48,false),(315,4,62,false),(315,5,68,false),(315,6,23,true)
	        
2025-04-19 19:08:01.214 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.216 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 19:08:01.216 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.216 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 19:08:01.216 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1168, '2023-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.217 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (316,1,7,false),(316,2,23,false),(316,3,24,false),(316,4,32,false),(316,5,43,false),(316,6,18,true)
	        
2025-04-19 19:08:01.217 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.219 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 19:08:01.219 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.220 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 19:08:01.220 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1169, '2023-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.220 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (317,1,2,false),(317,2,24,false),(317,3,34,false),(317,4,53,false),(317,5,58,false),(317,6,13,true)
	        
2025-04-19 19:08:01.221 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.223 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 19:08:01.223 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.223 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 19:08:01.223 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1170, '2023-07-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.224 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (318,1,23,false),(318,2,35,false),(318,3,45,false),(318,4,66,false),(318,5,67,false),(318,6,20,true)
	        
2025-04-19 19:08:01.224 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.226 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 19:08:01.227 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.227 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 19:08:01.227 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1171, '2023-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.227 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (319,1,2,false),(319,2,9,false),(319,3,43,false),(319,4,55,false),(319,5,57,false),(319,6,18,true)
	        
2025-04-19 19:08:01.228 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.230 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 19:08:01.231 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.231 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 19:08:01.231 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1172, '2023-07-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.231 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (320,1,5,false),(320,2,8,false),(320,3,9,false),(320,4,17,false),(320,5,41,false),(320,6,21,true)
	        
2025-04-19 19:08:01.232 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.234 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 19:08:01.234 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.234 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 19:08:01.235 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1173, '2023-07-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.235 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (321,1,7,false),(321,2,10,false),(321,3,11,false),(321,4,13,false),(321,5,24,false),(321,6,24,true)
	        
2025-04-19 19:08:01.235 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.238 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 19:08:01.238 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.238 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 19:08:01.238 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1174, '2023-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.239 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (322,1,25,false),(322,2,27,false),(322,3,36,false),(322,4,37,false),(322,5,63,false),(322,6,7,true)
	        
2025-04-19 19:08:01.239 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.241 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 19:08:01.241 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.241 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 19:08:01.242 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1175, '2023-07-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.242 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (323,1,3,false),(323,2,4,false),(323,3,12,false),(323,4,28,false),(323,5,49,false),(323,6,25,true)
	        
2025-04-19 19:08:01.242 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.247 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 19:08:01.247 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.247 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 19:08:01.247 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1176, '2023-07-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.248 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (324,1,3,false),(324,2,16,false),(324,3,40,false),(324,4,48,false),(324,5,60,false),(324,6,14,true)
	        
2025-04-19 19:08:01.248 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.250 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 19:08:01.250 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.251 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 19:08:01.251 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1177, '2023-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.251 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (325,1,10,false),(325,2,25,false),(325,3,27,false),(325,4,34,false),(325,5,38,false),(325,6,2,true)
	        
2025-04-19 19:08:01.252 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.254 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 19:08:01.254 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.255 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 19:08:01.255 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1178, '2023-08-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.255 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (326,1,2,false),(326,2,11,false),(326,3,48,false),(326,4,58,false),(326,5,65,false),(326,6,13,true)
	        
2025-04-19 19:08:01.255 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.258 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 19:08:01.258 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.259 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 19:08:01.259 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1179, '2023-08-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.259 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (327,1,23,false),(327,2,24,false),(327,3,33,false),(327,4,51,false),(327,5,64,false),(327,6,5,true)
	        
2025-04-19 19:08:01.259 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.263 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 19:08:01.264 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.264 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 19:08:01.264 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1180, '2023-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.265 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (328,1,18,false),(328,2,42,false),(328,3,44,false),(328,4,62,false),(328,5,65,false),(328,6,23,true)
	        
2025-04-19 19:08:01.265 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.267 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 19:08:01.268 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.268 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 19:08:01.268 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1181, '2023-08-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.268 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (329,1,6,false),(329,2,13,false),(329,3,20,false),(329,4,35,false),(329,5,54,false),(329,6,22,true)
	        
2025-04-19 19:08:01.269 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.271 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 19:08:01.271 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.271 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 19:08:01.272 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1182, '2023-08-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.272 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (330,1,10,false),(330,2,15,false),(330,3,21,false),(330,4,67,false),(330,5,69,false),(330,6,3,true)
	        
2025-04-19 19:08:01.273 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.275 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 19:08:01.276 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.276 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 19:08:01.276 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1183, '2023-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.276 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (331,1,19,false),(331,2,21,false),(331,3,37,false),(331,4,50,false),(331,5,65,false),(331,6,26,true)
	        
2025-04-19 19:08:01.277 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.280 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 19:08:01.280 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.280 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 19:08:01.281 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1184, '2023-08-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.281 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (332,1,32,false),(332,2,34,false),(332,3,37,false),(332,4,39,false),(332,5,47,false),(332,6,3,true)
	        
2025-04-19 19:08:01.281 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.283 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 19:08:01.283 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.284 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 19:08:01.284 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1186, '2023-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.284 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (333,1,1,false),(333,2,25,false),(333,3,27,false),(333,4,38,false),(333,5,62,false),(333,6,13,true)
	        
2025-04-19 19:08:01.285 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.287 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 19:08:01.288 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.288 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 19:08:01.288 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1187, '2023-08-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.289 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (334,1,3,false),(334,2,4,false),(334,3,12,false),(334,4,22,false),(334,5,28,false),(334,6,16,true)
	        
2025-04-19 19:08:01.289 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.293 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 19:08:01.293 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.293 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 19:08:01.293 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1188, '2023-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.294 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (335,1,25,false),(335,2,30,false),(335,3,32,false),(335,4,33,false),(335,5,55,false),(335,6,20,true)
	        
2025-04-19 19:08:01.294 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.297 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 19:08:01.297 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.298 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 19:08:01.298 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1189, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.298 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (336,1,20,false),(336,2,22,false),(336,3,26,false),(336,4,28,false),(336,5,63,false),(336,6,5,true)
	        
2025-04-19 19:08:01.299 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.301 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 19:08:01.301 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.301 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 19:08:01.301 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1190, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.302 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (337,1,4,false),(337,2,6,false),(337,3,25,false),(337,4,55,false),(337,5,68,false),(337,6,26,true)
	        
2025-04-19 19:08:01.302 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.304 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 19:08:01.305 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.305 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 19:08:01.305 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1191, '2023-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.305 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (338,1,4,false),(338,2,13,false),(338,3,35,false),(338,4,61,false),(338,5,69,false),(338,6,4,true)
	        
2025-04-19 19:08:01.306 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.309 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 19:08:01.310 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.310 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 19:08:01.310 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1192, '2023-09-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.311 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (339,1,25,false),(339,2,38,false),(339,3,42,false),(339,4,66,false),(339,5,67,false),(339,6,19,true)
	        
2025-04-19 19:08:01.311 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.313 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 19:08:01.314 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.314 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 19:08:01.314 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1193, '2023-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.314 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (340,1,1,false),(340,2,26,false),(340,3,32,false),(340,4,46,false),(340,5,51,false),(340,6,13,true)
	        
2025-04-19 19:08:01.315 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.317 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 19:08:01.317 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.317 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 19:08:01.318 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1194, '2023-09-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.318 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (341,1,9,false),(341,2,14,false),(341,3,20,false),(341,4,23,false),(341,5,63,false),(341,6,1,true)
	        
2025-04-19 19:08:01.318 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.321 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 19:08:01.321 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.321 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 19:08:01.321 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1195, '2023-09-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.322 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (342,1,11,false),(342,2,19,false),(342,3,29,false),(342,4,63,false),(342,5,68,false),(342,6,25,true)
	        
2025-04-19 19:08:01.322 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.325 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 19:08:01.325 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.325 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 19:08:01.325 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1196, '2023-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.326 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (343,1,9,false),(343,2,25,false),(343,3,27,false),(343,4,53,false),(343,5,66,false),(343,6,5,true)
	        
2025-04-19 19:08:01.326 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.329 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 19:08:01.329 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.329 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 19:08:01.330 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1197, '2023-09-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.330 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (344,1,22,false),(344,2,30,false),(344,3,37,false),(344,4,44,false),(344,5,45,false),(344,6,18,true)
	        
2025-04-19 19:08:01.331 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.334 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 19:08:01.334 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.334 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 19:08:01.334 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1198, '2023-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.335 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (345,1,8,false),(345,2,11,false),(345,3,19,false),(345,4,24,false),(345,5,46,false),(345,6,5,true)
	        
2025-04-19 19:08:01.335 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.338 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 19:08:01.338 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.338 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 19:08:01.338 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1199, '2023-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.339 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (346,1,2,false),(346,2,21,false),(346,3,26,false),(346,4,40,false),(346,5,42,false),(346,6,9,true)
	        
2025-04-19 19:08:01.339 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.341 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 19:08:01.341 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.341 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 19:08:01.342 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1200, '2023-09-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.342 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (347,1,16,false),(347,2,27,false),(347,3,59,false),(347,4,62,false),(347,5,63,false),(347,6,23,true)
	        
2025-04-19 19:08:01.343 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.346 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 19:08:01.346 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.346 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 19:08:01.346 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1201, '2023-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.347 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (348,1,1,false),(348,2,12,false),(348,3,20,false),(348,4,33,false),(348,5,66,false),(348,6,21,true)
	        
2025-04-19 19:08:01.347 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.349 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 19:08:01.350 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.350 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 19:08:01.350 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1202, '2023-09-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.351 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (349,1,10,false),(349,2,12,false),(349,3,22,false),(349,4,36,false),(349,5,50,false),(349,6,4,true)
	        
2025-04-19 19:08:01.351 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.357 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 19:08:01.357 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.357 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 19:08:01.357 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1203, '2023-09-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.358 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (350,1,1,false),(350,2,7,false),(350,3,46,false),(350,4,47,false),(350,5,63,false),(350,6,7,true)
	        
2025-04-19 19:08:01.358 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.361 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 19:08:01.361 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.362 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 19:08:01.362 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1204, '2023-09-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.362 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (351,1,19,false),(351,2,30,false),(351,3,37,false),(351,4,44,false),(351,5,46,false),(351,6,22,true)
	        
2025-04-19 19:08:01.363 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.365 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 19:08:01.365 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.365 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 19:08:01.366 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1205, '2023-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.366 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (352,1,12,false),(352,2,26,false),(352,3,27,false),(352,4,43,false),(352,5,47,false),(352,6,5,true)
	        
2025-04-19 19:08:01.367 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.369 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 19:08:01.369 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.369 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 19:08:01.369 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1206, '2023-10-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.370 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (353,1,9,false),(353,2,35,false),(353,3,54,false),(353,4,63,false),(353,5,64,false),(353,6,1,true)
	        
2025-04-19 19:08:01.370 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.372 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 19:08:01.372 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.373 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 19:08:01.373 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1207, '2023-10-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.373 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (354,1,47,false),(354,2,54,false),(354,3,57,false),(354,4,60,false),(354,5,65,false),(354,6,19,true)
	        
2025-04-19 19:08:01.373 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.375 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 19:08:01.376 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.376 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 19:08:01.376 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1208, '2023-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.377 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (355,1,16,false),(355,2,34,false),(355,3,46,false),(355,4,55,false),(355,5,67,false),(355,6,14,true)
	        
2025-04-19 19:08:01.377 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.380 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 19:08:01.380 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.380 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 19:08:01.380 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1209, '2023-10-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.381 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (356,1,22,false),(356,2,24,false),(356,3,40,false),(356,4,52,false),(356,5,64,false),(356,6,10,true)
	        
2025-04-19 19:08:01.381 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.384 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 19:08:01.384 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.384 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 19:08:01.385 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1210, '2023-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.385 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (357,1,14,false),(357,2,16,false),(357,3,42,false),(357,4,48,false),(357,5,64,false),(357,6,14,true)
	        
2025-04-19 19:08:01.385 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.389 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 19:08:01.390 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.390 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 19:08:01.390 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1211, '2023-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.390 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (358,1,2,false),(358,2,27,false),(358,3,31,false),(358,4,44,false),(358,5,64,false),(358,6,18,true)
	        
2025-04-19 19:08:01.391 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.393 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 19:08:01.393 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.393 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 19:08:01.394 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1212, '2023-10-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.394 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (359,1,1,false),(359,2,4,false),(359,3,13,false),(359,4,35,false),(359,5,58,false),(359,6,24,true)
	        
2025-04-19 19:08:01.395 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.397 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 19:08:01.397 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.398 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 19:08:01.398 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1213, '2023-10-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.398 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (360,1,6,false),(360,2,15,false),(360,3,24,false),(360,4,67,false),(360,5,68,false),(360,6,11,true)
	        
2025-04-19 19:08:01.399 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.401 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 19:08:01.401 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.402 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 19:08:01.402 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1214, '2023-10-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.402 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (361,1,18,false),(361,2,21,false),(361,3,25,false),(361,4,46,false),(361,5,64,false),(361,6,21,true)
	        
2025-04-19 19:08:01.403 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.406 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 19:08:01.406 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.406 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 19:08:01.406 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1215, '2023-10-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.407 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (362,1,24,false),(362,2,27,false),(362,3,41,false),(362,4,53,false),(362,5,68,false),(362,6,2,true)
	        
2025-04-19 19:08:01.407 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.410 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 19:08:01.411 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.411 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 19:08:01.412 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1216, '2023-10-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.412 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (363,1,14,false),(363,2,24,false),(363,3,50,false),(363,4,59,false),(363,5,64,false),(363,6,2,true)
	        
2025-04-19 19:08:01.413 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.416 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 19:08:01.416 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.416 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 19:08:01.416 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1217, '2023-10-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.417 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (364,1,19,false),(364,2,22,false),(364,3,34,false),(364,4,66,false),(364,5,69,false),(364,6,5,true)
	        
2025-04-19 19:08:01.417 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.419 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 19:08:01.420 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.420 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 19:08:01.420 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1218, '2023-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.420 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (365,1,22,false),(365,2,26,false),(365,3,39,false),(365,4,47,false),(365,5,63,false),(365,6,12,true)
	        
2025-04-19 19:08:01.421 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.423 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 19:08:01.423 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.423 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 19:08:01.423 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1219, '2023-11-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.424 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (366,1,1,false),(366,2,28,false),(366,3,30,false),(366,4,34,false),(366,5,52,false),(366,6,6,true)
	        
2025-04-19 19:08:01.424 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.427 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 19:08:01.428 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.428 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 19:08:01.428 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1220, '2023-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.428 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (367,1,12,false),(367,2,25,false),(367,3,40,false),(367,4,59,false),(367,5,61,false),(367,6,26,true)
	        
2025-04-19 19:08:01.429 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.432 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 19:08:01.432 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.433 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 19:08:01.433 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1221, '2023-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.433 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (368,1,14,false),(368,2,21,false),(368,3,33,false),(368,4,39,false),(368,5,62,false),(368,6,20,true)
	        
2025-04-19 19:08:01.434 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.438 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 19:08:01.438 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.438 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 19:08:01.439 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1222, '2023-11-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.439 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (369,1,1,false),(369,2,12,false),(369,3,14,false),(369,4,24,false),(369,5,57,false),(369,6,7,true)
	        
2025-04-19 19:08:01.440 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.444 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 19:08:01.445 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.447 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 19:08:01.447 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1223, '2023-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.447 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (370,1,24,false),(370,2,33,false),(370,3,35,false),(370,4,37,false),(370,5,42,false),(370,6,21,true)
	        
2025-04-19 19:08:01.448 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.451 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 19:08:01.452 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.452 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 19:08:01.452 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1224, '2023-11-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.453 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (371,1,3,false),(371,2,4,false),(371,3,51,false),(371,4,53,false),(371,5,60,false),(371,6,6,true)
	        
2025-04-19 19:08:01.454 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.456 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 19:08:01.457 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.457 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 19:08:01.457 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1225, '2023-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.457 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (372,1,34,false),(372,2,50,false),(372,3,51,false),(372,4,61,false),(372,5,67,false),(372,6,20,true)
	        
2025-04-19 19:08:01.458 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.460 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 19:08:01.461 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.461 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 19:08:01.461 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1226, '2023-11-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.461 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (373,1,19,false),(373,2,26,false),(373,3,30,false),(373,4,39,false),(373,5,63,false),(373,6,13,true)
	        
2025-04-19 19:08:01.462 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.466 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 19:08:01.466 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.466 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 19:08:01.466 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1227, '2023-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.467 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (374,1,20,false),(374,2,24,false),(374,3,33,false),(374,4,39,false),(374,5,42,false),(374,6,21,true)
	        
2025-04-19 19:08:01.467 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.470 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 19:08:01.471 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.471 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 19:08:01.471 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1228, '2023-11-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.472 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (375,1,27,false),(375,2,33,false),(375,3,63,false),(375,4,66,false),(375,5,68,false),(375,6,9,true)
	        
2025-04-19 19:08:01.472 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.475 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 19:08:01.475 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.475 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 19:08:01.476 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1229, '2023-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.476 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (376,1,2,false),(376,2,21,false),(376,3,38,false),(376,4,61,false),(376,5,66,false),(376,6,12,true)
	        
2025-04-19 19:08:01.476 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.480 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 19:08:01.480 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.480 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 19:08:01.480 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1230, '2023-11-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.481 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (377,1,6,false),(377,2,47,false),(377,3,50,false),(377,4,61,false),(377,5,68,false),(377,6,4,true)
	        
2025-04-19 19:08:01.481 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.483 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 19:08:01.484 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.484 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 19:08:01.484 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1231, '2023-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.484 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (378,1,28,false),(378,2,35,false),(378,3,41,false),(378,4,47,false),(378,5,60,false),(378,6,3,true)
	        
2025-04-19 19:08:01.485 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.487 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 19:08:01.487 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.488 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 19:08:01.488 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1232, '2023-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.488 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (379,1,18,false),(379,2,19,false),(379,3,27,false),(379,4,28,false),(379,5,45,false),(379,6,9,true)
	        
2025-04-19 19:08:01.488 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.491 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 19:08:01.492 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.492 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 19:08:01.492 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1233, '2023-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.492 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (380,1,2,false),(380,2,12,false),(380,3,37,false),(380,4,56,false),(380,5,65,false),(380,6,21,true)
	        
2025-04-19 19:08:01.492 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.496 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 19:08:01.497 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.497 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 19:08:01.497 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1234, '2023-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.497 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (381,1,5,false),(381,2,25,false),(381,3,26,false),(381,4,40,false),(381,5,60,false),(381,6,1,true)
	        
2025-04-19 19:08:01.498 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.500 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 19:08:01.500 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.500 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 19:08:01.500 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1235, '2023-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.501 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (382,1,1,false),(382,2,24,false),(382,3,27,false),(382,4,31,false),(382,5,62,false),(382,6,20,true)
	        
2025-04-19 19:08:01.501 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.503 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 19:08:01.504 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.504 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 19:08:01.504 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1236, '2023-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.504 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (383,1,3,false),(383,2,8,false),(383,3,41,false),(383,4,56,false),(383,5,64,false),(383,6,18,true)
	        
2025-04-19 19:08:01.505 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.507 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 19:08:01.507 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.507 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 19:08:01.507 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1237, '2023-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.508 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (384,1,3,false),(384,2,9,false),(384,3,10,false),(384,4,20,false),(384,5,62,false),(384,6,25,true)
	        
2025-04-19 19:08:01.508 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.513 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 19:08:01.513 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.513 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 19:08:01.514 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1238, '2023-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.514 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (385,1,5,false),(385,2,8,false),(385,3,19,false),(385,4,34,false),(385,5,39,false),(385,6,26,true)
	        
2025-04-19 19:08:01.514 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.517 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 19:08:01.517 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.517 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 19:08:01.517 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1239, '2023-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.518 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (386,1,27,false),(386,2,35,false),(386,3,41,false),(386,4,56,false),(386,5,60,false),(386,6,16,true)
	        
2025-04-19 19:08:01.518 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.521 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 19:08:01.521 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.521 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 19:08:01.521 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1240, '2023-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.522 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (387,1,9,false),(387,2,14,false),(387,3,17,false),(387,4,18,false),(387,5,53,false),(387,6,6,true)
	        
2025-04-19 19:08:01.522 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.526 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 19:08:01.526 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.526 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 19:08:01.526 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1241, '2023-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.526 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (388,1,5,false),(388,2,12,false),(388,3,20,false),(388,4,24,false),(388,5,29,false),(388,6,4,true)
	        
2025-04-19 19:08:01.527 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.530 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 19:08:01.530 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.530 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 19:08:01.530 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1242, '2023-12-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.531 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (389,1,4,false),(389,2,11,false),(389,3,38,false),(389,4,51,false),(389,5,68,false),(389,6,5,true)
	        
2025-04-19 19:08:01.531 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.534 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 19:08:01.534 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.534 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 19:08:01.534 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1243, '2023-12-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.535 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (390,1,10,false),(390,2,11,false),(390,3,26,false),(390,4,27,false),(390,5,34,false),(390,6,7,true)
	        
2025-04-19 19:08:01.535 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.537 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 19:08:01.538 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.538 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 19:08:01.538 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1244, '2024-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.538 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (391,1,12,false),(391,2,21,false),(391,3,42,false),(391,4,44,false),(391,5,49,false),(391,6,1,true)
	        
2025-04-19 19:08:01.539 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.541 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 19:08:01.542 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.542 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 19:08:01.542 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1245, '2024-01-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.542 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (392,1,30,false),(392,2,31,false),(392,3,38,false),(392,4,48,false),(392,5,68,false),(392,6,8,true)
	        
2025-04-19 19:08:01.543 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.546 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 19:08:01.546 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.546 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 19:08:01.546 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1246, '2024-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.547 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (393,1,4,false),(393,2,31,false),(393,3,34,false),(393,4,38,false),(393,5,61,false),(393,6,13,true)
	        
2025-04-19 19:08:01.547 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.549 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 19:08:01.550 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.550 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 19:08:01.550 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1247, '2024-01-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.550 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (394,1,7,false),(394,2,17,false),(394,3,28,false),(394,4,40,false),(394,5,45,false),(394,6,2,true)
	        
2025-04-19 19:08:01.551 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.553 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 19:08:01.553 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.553 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 19:08:01.553 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1248, '2024-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.554 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (395,1,25,false),(395,2,40,false),(395,3,43,false),(395,4,48,false),(395,5,50,false),(395,6,11,true)
	        
2025-04-19 19:08:01.554 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.557 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 19:08:01.557 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.557 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 19:08:01.557 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1249, '2024-01-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.558 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (396,1,12,false),(396,2,31,false),(396,3,33,false),(396,4,51,false),(396,5,58,false),(396,6,15,true)
	        
2025-04-19 19:08:01.558 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.561 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 19:08:01.562 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.562 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 19:08:01.563 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1250, '2024-01-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.563 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (397,1,13,false),(397,2,30,false),(397,3,35,false),(397,4,49,false),(397,5,59,false),(397,6,4,true)
	        
2025-04-19 19:08:01.563 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.566 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 19:08:01.566 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.566 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 19:08:01.566 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1251, '2024-01-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.567 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (398,1,18,false),(398,2,22,false),(398,3,43,false),(398,4,61,false),(398,5,65,false),(398,6,2,true)
	        
2025-04-19 19:08:01.567 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.569 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 19:08:01.570 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.570 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 19:08:01.570 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1252, '2024-01-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.570 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (399,1,16,false),(399,2,31,false),(399,3,34,false),(399,4,47,false),(399,5,65,false),(399,6,10,true)
	        
2025-04-19 19:08:01.571 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.573 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 19:08:01.573 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.573 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 19:08:01.573 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1253, '2024-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.574 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (400,1,24,false),(400,2,25,false),(400,3,43,false),(400,4,52,false),(400,5,63,false),(400,6,21,true)
	        
2025-04-19 19:08:01.574 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.576 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 19:08:01.577 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.577 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 19:08:01.577 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1254, '2024-01-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.578 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (401,1,1,false),(401,2,5,false),(401,3,32,false),(401,4,50,false),(401,5,64,false),(401,6,8,true)
	        
2025-04-19 19:08:01.578 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.581 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 19:08:01.581 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.581 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 19:08:01.581 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1255, '2024-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.581 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (402,1,7,false),(402,2,38,false),(402,3,65,false),(402,4,66,false),(402,5,68,false),(402,6,21,true)
	        
2025-04-19 19:08:01.582 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.584 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 19:08:01.584 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.584 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 19:08:01.585 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1256, '2024-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.585 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (403,1,39,false),(403,2,41,false),(403,3,43,false),(403,4,49,false),(403,5,64,false),(403,6,4,true)
	        
2025-04-19 19:08:01.586 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.588 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 19:08:01.588 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.589 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 19:08:01.589 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1257, '2024-01-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.589 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (404,1,15,false),(404,2,18,false),(404,3,19,false),(404,4,41,false),(404,5,43,false),(404,6,14,true)
	        
2025-04-19 19:08:01.590 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.593 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 19:08:01.593 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.593 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 19:08:01.593 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1258, '2024-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.594 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (405,1,9,false),(405,2,11,false),(405,3,27,false),(405,4,59,false),(405,5,66,false),(405,6,19,true)
	        
2025-04-19 19:08:01.594 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.597 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 19:08:01.597 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.597 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 19:08:01.598 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1259, '2024-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.598 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (406,1,1,false),(406,2,2,false),(406,3,27,false),(406,4,30,false),(406,5,67,false),(406,6,9,true)
	        
2025-04-19 19:08:01.598 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.600 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 19:08:01.601 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.601 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 19:08:01.601 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1260, '2024-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.601 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (407,1,12,false),(407,2,21,false),(407,3,62,false),(407,4,67,false),(407,5,69,false),(407,6,17,true)
	        
2025-04-19 19:08:01.602 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.604 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 19:08:01.604 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.605 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 19:08:01.605 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1261, '2024-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.606 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (408,1,27,false),(408,2,28,false),(408,3,34,false),(408,4,37,false),(408,5,44,false),(408,6,8,true)
	        
2025-04-19 19:08:01.606 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.609 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 19:08:01.609 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.609 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 19:08:01.609 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1262, '2024-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.610 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (409,1,17,false),(409,2,36,false),(409,3,43,false),(409,4,53,false),(409,5,67,false),(409,6,14,true)
	        
2025-04-19 19:08:01.610 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.613 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 19:08:01.613 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.613 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 19:08:01.614 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1263, '2024-02-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.614 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (410,1,1,false),(410,2,4,false),(410,3,45,false),(410,4,47,false),(410,5,67,false),(410,6,18,true)
	        
2025-04-19 19:08:01.615 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.617 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 19:08:01.617 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.617 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 19:08:01.617 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1264, '2024-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.618 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (411,1,6,false),(411,2,28,false),(411,3,59,false),(411,4,62,false),(411,5,69,false),(411,6,21,true)
	        
2025-04-19 19:08:01.618 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.620 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 19:08:01.620 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.621 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 19:08:01.621 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1265, '2024-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.621 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (412,1,4,false),(412,2,23,false),(412,3,45,false),(412,4,50,false),(412,5,53,false),(412,6,17,true)
	        
2025-04-19 19:08:01.621 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.624 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 19:08:01.624 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.624 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 19:08:01.624 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1266, '2024-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.624 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (413,1,4,false),(413,2,27,false),(413,3,33,false),(413,4,41,false),(413,5,42,false),(413,6,14,true)
	        
2025-04-19 19:08:01.625 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.628 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 19:08:01.629 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.629 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 19:08:01.629 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1267, '2024-02-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.629 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (414,1,3,false),(414,2,8,false),(414,3,40,false),(414,4,53,false),(414,5,58,false),(414,6,3,true)
	        
2025-04-19 19:08:01.630 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.632 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 19:08:01.632 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.632 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 19:08:01.633 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1268, '2024-02-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.633 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (415,1,24,false),(415,2,29,false),(415,3,42,false),(415,4,51,false),(415,5,54,false),(415,6,16,true)
	        
2025-04-19 19:08:01.633 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.636 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 19:08:01.637 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.637 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 19:08:01.637 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1269, '2024-02-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.637 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (416,1,16,false),(416,2,26,false),(416,3,29,false),(416,4,38,false),(416,5,50,false),(416,6,6,true)
	        
2025-04-19 19:08:01.638 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.641 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 19:08:01.642 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.642 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 19:08:01.642 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1270, '2024-03-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.642 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (417,1,3,false),(417,2,18,false),(417,3,27,false),(417,4,36,false),(417,5,53,false),(417,6,12,true)
	        
2025-04-19 19:08:01.643 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.645 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 19:08:01.646 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.646 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 19:08:01.646 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1271, '2024-03-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.647 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (418,1,36,false),(418,2,42,false),(418,3,50,false),(418,4,52,false),(418,5,67,false),(418,6,26,true)
	        
2025-04-19 19:08:01.647 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:01.649 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 19:08:01.650 UTC [500] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 19:08:01.650 UTC [500] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 19:08:01.650 UTC [500] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1272, '2024-03-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 19:08:01.650 UTC [500] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (419,1,6,false),(419,2,19,false),(419,3,28,false),(419,4,44,false),(419,5,60,false),(419,6,10,true)
	        
2025-04-19 19:08:01.651 UTC [500] LOG:  statement: 
	        UPDATE user_stats 
	        SET draws_added = draws_added + 1, updated_at = NOW() 
	        WHERE user_id = 2
	        
2025-04-19 19:08:04.292 UTC [500] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:08:05.871 UTC [500] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:08:06.116 UTC [508] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:08:06.616 UTC [500] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:08:06.935 UTC [500] DEBUG:  unexpected EOF on client connection
2025-04-19 19:08:08.704 UTC [509] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:08.713 UTC [509] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:08.718 UTC [509] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:08.718 UTC [509] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:08.722 UTC [509] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:08.725 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:08.730 UTC [509] DEBUG:  building index "pg_toast_27874_index" on table "pg_toast_27874" serially
2025-04-19 19:08:08.732 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:08.732 UTC [509] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:08.732 UTC [509] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:08.733 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:08.734 UTC [509] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:08.734 UTC [509] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:08.734 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:08.735 UTC [509] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:08.735 UTC [509] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:08.735 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:08.736 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:08.737 UTC [509] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:08.737 UTC [509] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:08.738 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:08.738 UTC [509] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:08.738 UTC [509] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:08.739 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:08.743 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:08.744 UTC [509] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:08.744 UTC [509] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:08.745 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:08.746 UTC [509] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:08.746 UTC [509] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:08.749 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:08.751 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:08.752 UTC [509] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:08.752 UTC [509] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:08.753 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:08.755 UTC [509] DEBUG:  building index "pg_toast_27935_index" on table "pg_toast_27935" serially
2025-04-19 19:08:08.756 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:08.756 UTC [509] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:08.756 UTC [509] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:08.757 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:08.759 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:08.760 UTC [509] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:08.760 UTC [509] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:08.761 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:08.761 UTC [509] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:08.761 UTC [509] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:08.762 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:08.764 UTC [509] DEBUG:  building index "pg_toast_27968_index" on table "pg_toast_27968" serially
2025-04-19 19:08:08.764 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:08.765 UTC [509] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:08.765 UTC [509] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:08.765 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:08.767 UTC [509] DEBUG:  building index "pg_toast_27979_index" on table "pg_toast_27979" serially
2025-04-19 19:08:08.768 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:08.768 UTC [509] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:08.768 UTC [509] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:08.770 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:08.771 UTC [509] DEBUG:  building index "pg_toast_28002_index" on table "pg_toast_28002" serially
2025-04-19 19:08:08.771 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:08.772 UTC [509] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:08.772 UTC [509] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:08.773 UTC [509] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:08.773 UTC [509] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:08.773 UTC [509] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:08.773 UTC [509] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:08.774 UTC [509] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:08.774 UTC [509] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:08.775 UTC [509] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:08.775 UTC [509] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:08.776 UTC [509] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:08.776 UTC [509] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:08.777 UTC [509] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:08.777 UTC [509] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:08.778 UTC [509] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:08.778 UTC [509] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:08.779 UTC [509] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:08.779 UTC [509] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:08.779 UTC [509] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:08.779 UTC [509] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:08.780 UTC [509] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:08.780 UTC [509] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:08.781 UTC [509] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:08.781 UTC [509] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:08.792 UTC [509] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:09.070 UTC [509] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3EPOha/IxRzW4mgl87.MUuzDnLauJv5s440HpAuU3uI6t/ni8cdDm')
	                RETURNING id, username, email
	                
2025-04-19 19:08:09.071 UTC [509] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:09.071 UTC [509] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:09.072 UTC [509] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:08:09.088 UTC [509] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:09.089 UTC [509] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:09.092 UTC [509] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:09.099 UTC [509] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:09.099 UTC [509] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:09.103 UTC [509] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:09.107 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:09.108 UTC [509] DEBUG:  building index "pg_toast_28038_index" on table "pg_toast_28038" serially
2025-04-19 19:08:09.109 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:09.110 UTC [509] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:09.110 UTC [509] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:09.111 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:09.111 UTC [509] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:09.111 UTC [509] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:09.112 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:09.112 UTC [509] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:09.112 UTC [509] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:09.113 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:09.114 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:09.114 UTC [509] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:09.114 UTC [509] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:09.115 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:09.115 UTC [509] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:09.115 UTC [509] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:09.116 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:09.117 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:09.117 UTC [509] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:09.117 UTC [509] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:09.118 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:09.118 UTC [509] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:09.118 UTC [509] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:09.119 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:09.121 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:09.121 UTC [509] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:09.121 UTC [509] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:09.123 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:09.125 UTC [509] DEBUG:  building index "pg_toast_28099_index" on table "pg_toast_28099" serially
2025-04-19 19:08:09.127 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:09.127 UTC [509] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:09.127 UTC [509] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:09.129 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:09.132 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:09.132 UTC [509] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:09.132 UTC [509] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:09.134 UTC [509] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:09.134 UTC [509] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:09.134 UTC [509] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:09.137 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:09.139 UTC [509] DEBUG:  building index "pg_toast_28132_index" on table "pg_toast_28132" serially
2025-04-19 19:08:09.140 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:09.140 UTC [509] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:09.140 UTC [509] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:09.141 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:09.142 UTC [509] DEBUG:  building index "pg_toast_28143_index" on table "pg_toast_28143" serially
2025-04-19 19:08:09.143 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:09.143 UTC [509] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:09.143 UTC [509] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:09.144 UTC [509] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:09.145 UTC [509] DEBUG:  building index "pg_toast_28166_index" on table "pg_toast_28166" serially
2025-04-19 19:08:09.146 UTC [509] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:09.146 UTC [509] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:09.146 UTC [509] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:09.147 UTC [509] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:09.147 UTC [509] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:09.148 UTC [509] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:09.148 UTC [509] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:09.149 UTC [509] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:09.149 UTC [509] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:09.150 UTC [509] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:09.150 UTC [509] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:09.151 UTC [509] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:09.151 UTC [509] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:09.152 UTC [509] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:09.152 UTC [509] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:09.153 UTC [509] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:09.153 UTC [509] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:09.154 UTC [509] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:09.154 UTC [509] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:09.154 UTC [509] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:09.154 UTC [509] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:09.155 UTC [509] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:09.155 UTC [509] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:09.156 UTC [509] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:09.156 UTC [509] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:09.163 UTC [509] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:09.408 UTC [509] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$oAqVjQDEnFdA1fz5On8rUuK6IBS3nmlnj665XCpNYu6WPH2Bf.Oxe')
	                RETURNING id, username, email
	                
2025-04-19 19:08:09.409 UTC [509] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:09.410 UTC [509] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:09.577 UTC [509] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:08:10.678 UTC [509] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:08:22.506 UTC [509] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:08:22.780 UTC [509] DEBUG:  unexpected EOF on client connection
2025-04-19 19:08:24.618 UTC [524] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:24.627 UTC [524] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:24.634 UTC [524] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:24.634 UTC [524] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:24.640 UTC [524] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:24.644 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:24.647 UTC [524] DEBUG:  building index "pg_toast_28202_index" on table "pg_toast_28202" serially
2025-04-19 19:08:24.649 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:24.649 UTC [524] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:24.649 UTC [524] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:24.650 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:24.651 UTC [524] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:24.651 UTC [524] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:24.652 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:24.652 UTC [524] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:24.652 UTC [524] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:24.653 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:24.654 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:24.654 UTC [524] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:24.654 UTC [524] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:24.655 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:24.655 UTC [524] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:24.655 UTC [524] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:24.656 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:24.657 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:24.657 UTC [524] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:24.657 UTC [524] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:24.658 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:24.658 UTC [524] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:24.658 UTC [524] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:24.660 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:24.661 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:24.661 UTC [524] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:24.661 UTC [524] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:24.662 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:24.664 UTC [524] DEBUG:  building index "pg_toast_28263_index" on table "pg_toast_28263" serially
2025-04-19 19:08:24.665 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:24.665 UTC [524] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:24.665 UTC [524] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:24.666 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:24.667 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:24.668 UTC [524] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:24.668 UTC [524] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:24.668 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:24.669 UTC [524] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:24.669 UTC [524] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:24.670 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:24.671 UTC [524] DEBUG:  building index "pg_toast_28296_index" on table "pg_toast_28296" serially
2025-04-19 19:08:24.672 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:24.672 UTC [524] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:24.672 UTC [524] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:24.672 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:24.673 UTC [524] DEBUG:  building index "pg_toast_28307_index" on table "pg_toast_28307" serially
2025-04-19 19:08:24.674 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:24.674 UTC [524] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:24.674 UTC [524] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:24.676 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:24.676 UTC [524] DEBUG:  building index "pg_toast_28330_index" on table "pg_toast_28330" serially
2025-04-19 19:08:24.677 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:24.678 UTC [524] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:24.678 UTC [524] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:24.678 UTC [524] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:24.678 UTC [524] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:24.679 UTC [524] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:24.679 UTC [524] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:24.680 UTC [524] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:24.680 UTC [524] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:24.681 UTC [524] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:24.681 UTC [524] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:24.682 UTC [524] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:24.682 UTC [524] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:24.683 UTC [524] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:24.683 UTC [524] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:24.684 UTC [524] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:24.684 UTC [524] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:24.685 UTC [524] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:24.685 UTC [524] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:24.685 UTC [524] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:24.685 UTC [524] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:24.687 UTC [524] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:24.687 UTC [524] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:24.688 UTC [524] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:24.688 UTC [524] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:24.702 UTC [524] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:24.972 UTC [524] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Pu0VEINR.EYjPsCHmcABUeRhF9Z.kKxASONsUGVSpxshg0nvtwFAy')
	                RETURNING id, username, email
	                
2025-04-19 19:08:24.973 UTC [524] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:24.974 UTC [524] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:24.974 UTC [524] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:08:24.989 UTC [524] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:24.990 UTC [524] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:24.993 UTC [524] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:25.001 UTC [524] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:25.001 UTC [524] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:25.007 UTC [524] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:25.012 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:25.015 UTC [524] DEBUG:  building index "pg_toast_28366_index" on table "pg_toast_28366" serially
2025-04-19 19:08:25.017 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:25.018 UTC [524] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:25.018 UTC [524] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:25.019 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:25.019 UTC [524] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:25.019 UTC [524] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:25.020 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:25.020 UTC [524] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:25.020 UTC [524] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:25.021 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:25.022 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:25.022 UTC [524] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:25.022 UTC [524] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:25.023 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:25.023 UTC [524] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:25.023 UTC [524] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:25.025 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:25.027 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:25.027 UTC [524] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:25.027 UTC [524] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:25.030 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:25.031 UTC [524] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:25.031 UTC [524] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:25.032 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:25.034 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:25.034 UTC [524] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:25.034 UTC [524] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:25.035 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:25.036 UTC [524] DEBUG:  building index "pg_toast_28427_index" on table "pg_toast_28427" serially
2025-04-19 19:08:25.037 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:25.037 UTC [524] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:25.037 UTC [524] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:25.038 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:25.039 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:25.040 UTC [524] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:25.040 UTC [524] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:25.040 UTC [524] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:25.040 UTC [524] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:25.040 UTC [524] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:25.042 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:25.042 UTC [524] DEBUG:  building index "pg_toast_28460_index" on table "pg_toast_28460" serially
2025-04-19 19:08:25.043 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:25.043 UTC [524] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:25.043 UTC [524] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:25.044 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:25.045 UTC [524] DEBUG:  building index "pg_toast_28471_index" on table "pg_toast_28471" serially
2025-04-19 19:08:25.046 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:25.046 UTC [524] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:25.046 UTC [524] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:25.048 UTC [524] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:25.048 UTC [524] DEBUG:  building index "pg_toast_28494_index" on table "pg_toast_28494" serially
2025-04-19 19:08:25.049 UTC [524] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:25.050 UTC [524] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:25.050 UTC [524] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:25.051 UTC [524] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:25.051 UTC [524] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:25.054 UTC [524] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:25.054 UTC [524] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:25.055 UTC [524] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:25.055 UTC [524] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:25.056 UTC [524] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:25.056 UTC [524] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:25.057 UTC [524] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:25.057 UTC [524] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:25.058 UTC [524] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:25.058 UTC [524] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:25.059 UTC [524] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:25.059 UTC [524] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:25.060 UTC [524] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:25.060 UTC [524] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:25.060 UTC [524] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:25.060 UTC [524] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:25.062 UTC [524] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:25.062 UTC [524] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:25.062 UTC [524] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:25.062 UTC [524] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:25.084 UTC [524] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:25.339 UTC [524] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Y3bwwRMPYdlBuqjKHvyzhOBZVozhrAdqvcpIkCyPDizSmZ0od/3dm')
	                RETURNING id, username, email
	                
2025-04-19 19:08:25.340 UTC [524] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:25.340 UTC [524] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:36.145 UTC [532] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:08:36.372 UTC [532] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:08:36.821 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 19:08:38.410 UTC [524] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:08:38.868 UTC [524] DEBUG:  unexpected EOF on client connection
2025-04-19 19:08:41.231 UTC [533] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:41.249 UTC [533] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:41.259 UTC [533] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:41.259 UTC [533] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:41.267 UTC [533] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:41.275 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:41.278 UTC [533] DEBUG:  building index "pg_toast_28531_index" on table "pg_toast_28531" serially
2025-04-19 19:08:41.280 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:41.281 UTC [533] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:41.281 UTC [533] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:41.282 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:41.282 UTC [533] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:41.283 UTC [533] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:41.283 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:41.284 UTC [533] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:41.284 UTC [533] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:41.284 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:41.285 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:41.285 UTC [533] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:41.285 UTC [533] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:41.286 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:41.286 UTC [533] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:41.286 UTC [533] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:41.287 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:41.288 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:41.288 UTC [533] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:41.288 UTC [533] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:41.289 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:41.289 UTC [533] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:41.289 UTC [533] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:41.291 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:41.292 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:41.292 UTC [533] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:41.292 UTC [533] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:41.293 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:41.295 UTC [533] DEBUG:  building index "pg_toast_28592_index" on table "pg_toast_28592" serially
2025-04-19 19:08:41.296 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:41.296 UTC [533] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:41.296 UTC [533] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:41.298 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:41.299 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:41.300 UTC [533] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:41.300 UTC [533] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:41.300 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:41.300 UTC [533] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:41.300 UTC [533] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:41.302 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:41.303 UTC [533] DEBUG:  building index "pg_toast_28625_index" on table "pg_toast_28625" serially
2025-04-19 19:08:41.303 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:41.304 UTC [533] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:41.304 UTC [533] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:41.305 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:41.306 UTC [533] DEBUG:  building index "pg_toast_28636_index" on table "pg_toast_28636" serially
2025-04-19 19:08:41.307 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:41.307 UTC [533] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:41.307 UTC [533] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:41.308 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:41.309 UTC [533] DEBUG:  building index "pg_toast_28659_index" on table "pg_toast_28659" serially
2025-04-19 19:08:41.310 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:41.310 UTC [533] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:41.310 UTC [533] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:41.311 UTC [533] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:41.311 UTC [533] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:41.312 UTC [533] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:41.312 UTC [533] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:41.313 UTC [533] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:41.313 UTC [533] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:41.314 UTC [533] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:41.314 UTC [533] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:41.315 UTC [533] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:41.315 UTC [533] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:41.316 UTC [533] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:41.316 UTC [533] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:41.317 UTC [533] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:41.317 UTC [533] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:41.318 UTC [533] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 19:08:41.318 UTC [533] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:41.318 UTC [533] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:41.319 UTC [533] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:41.319 UTC [533] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:41.320 UTC [533] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:41.320 UTC [533] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:41.320 UTC [533] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:41.320 UTC [533] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:41.334 UTC [533] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:41.626 UTC [533] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Yl7Hj1DeKxAhmVC6GwnAJuWde65veIg9QBWea0.xfh4wKb29LumoG')
	                RETURNING id, username, email
	                
2025-04-19 19:08:41.626 UTC [533] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:41.627 UTC [533] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:41.627 UTC [533] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:08:41.631 UTC [533] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 19:08:41.631 UTC [533] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 19:08:41.637 UTC [533] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:41.638 UTC [533] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:41.640 UTC [533] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:41.646 UTC [533] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:41.646 UTC [533] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:41.650 UTC [533] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:41.653 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:41.654 UTC [533] DEBUG:  building index "pg_toast_28695_index" on table "pg_toast_28695" serially
2025-04-19 19:08:41.655 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:41.656 UTC [533] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:41.656 UTC [533] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:41.657 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:41.657 UTC [533] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:41.657 UTC [533] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:41.658 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:41.658 UTC [533] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:41.658 UTC [533] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:41.659 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:41.659 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:41.660 UTC [533] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:41.660 UTC [533] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:41.660 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:41.661 UTC [533] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:41.661 UTC [533] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:41.662 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:41.664 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:41.664 UTC [533] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:41.664 UTC [533] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:41.665 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:41.665 UTC [533] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:41.665 UTC [533] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:41.667 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:41.668 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:41.668 UTC [533] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:41.668 UTC [533] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:41.670 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:41.674 UTC [533] DEBUG:  building index "pg_toast_28756_index" on table "pg_toast_28756" serially
2025-04-19 19:08:41.675 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:41.676 UTC [533] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:41.676 UTC [533] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:41.678 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:41.681 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:41.681 UTC [533] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:41.681 UTC [533] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:41.682 UTC [533] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:41.682 UTC [533] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:41.682 UTC [533] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:41.683 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:41.684 UTC [533] DEBUG:  building index "pg_toast_28789_index" on table "pg_toast_28789" serially
2025-04-19 19:08:41.685 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:41.685 UTC [533] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:41.685 UTC [533] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:41.686 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:41.687 UTC [533] DEBUG:  building index "pg_toast_28800_index" on table "pg_toast_28800" serially
2025-04-19 19:08:41.688 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:41.688 UTC [533] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:41.688 UTC [533] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:41.690 UTC [533] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:41.691 UTC [533] DEBUG:  building index "pg_toast_28823_index" on table "pg_toast_28823" serially
2025-04-19 19:08:41.692 UTC [533] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:41.692 UTC [533] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:41.692 UTC [533] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:41.693 UTC [533] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:41.693 UTC [533] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:41.693 UTC [533] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:41.693 UTC [533] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:41.695 UTC [533] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:41.695 UTC [533] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:41.696 UTC [533] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:41.696 UTC [533] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:41.697 UTC [533] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:41.697 UTC [533] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:41.697 UTC [533] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:41.697 UTC [533] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:41.698 UTC [533] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:41.698 UTC [533] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:41.699 UTC [533] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:41.699 UTC [533] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:41.700 UTC [533] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:41.700 UTC [533] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:41.701 UTC [533] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:41.701 UTC [533] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:41.702 UTC [533] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:41.702 UTC [533] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:41.709 UTC [533] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:41.980 UTC [533] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$qo.RebvsVTHsfxvrpnNOBeS6Ow6sC71JC6BCJcf7lzOUs8n73AlGS')
	                RETURNING id, username, email
	                
2025-04-19 19:08:41.982 UTC [533] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:41.982 UTC [533] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:54.856 UTC [533] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:08:55.278 UTC [533] DEBUG:  unexpected EOF on client connection
2025-04-19 19:08:57.855 UTC [548] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:57.863 UTC [548] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:57.870 UTC [548] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:57.870 UTC [548] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:57.876 UTC [548] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:57.881 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:57.886 UTC [548] DEBUG:  building index "pg_toast_28859_index" on table "pg_toast_28859" serially
2025-04-19 19:08:57.888 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:57.889 UTC [548] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:57.889 UTC [548] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:57.890 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:57.891 UTC [548] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:57.891 UTC [548] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:57.892 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:57.892 UTC [548] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:57.892 UTC [548] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:57.893 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:57.894 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:57.894 UTC [548] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:57.894 UTC [548] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:57.895 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:57.896 UTC [548] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:57.896 UTC [548] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:57.897 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:57.898 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:57.899 UTC [548] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:57.899 UTC [548] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:57.900 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:57.900 UTC [548] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:57.901 UTC [548] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:57.902 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:57.903 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:57.904 UTC [548] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:57.904 UTC [548] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:57.905 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:57.907 UTC [548] DEBUG:  building index "pg_toast_28920_index" on table "pg_toast_28920" serially
2025-04-19 19:08:57.908 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:57.908 UTC [548] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:57.908 UTC [548] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:57.910 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:57.911 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:57.911 UTC [548] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:57.911 UTC [548] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:57.912 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:57.912 UTC [548] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:57.912 UTC [548] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:57.913 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:57.915 UTC [548] DEBUG:  building index "pg_toast_28953_index" on table "pg_toast_28953" serially
2025-04-19 19:08:57.915 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:57.916 UTC [548] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:57.916 UTC [548] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:57.916 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:57.918 UTC [548] DEBUG:  building index "pg_toast_28964_index" on table "pg_toast_28964" serially
2025-04-19 19:08:57.918 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:57.919 UTC [548] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:57.919 UTC [548] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:57.920 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:57.921 UTC [548] DEBUG:  building index "pg_toast_28987_index" on table "pg_toast_28987" serially
2025-04-19 19:08:57.922 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:57.923 UTC [548] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:57.923 UTC [548] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:57.924 UTC [548] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:57.924 UTC [548] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:57.925 UTC [548] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:57.925 UTC [548] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:57.926 UTC [548] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:57.926 UTC [548] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:57.927 UTC [548] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:57.927 UTC [548] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:57.927 UTC [548] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:57.927 UTC [548] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:57.928 UTC [548] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:57.928 UTC [548] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:57.929 UTC [548] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:57.929 UTC [548] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:57.930 UTC [548] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:57.930 UTC [548] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:57.931 UTC [548] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:57.931 UTC [548] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:57.932 UTC [548] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:57.932 UTC [548] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:57.933 UTC [548] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:57.933 UTC [548] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:57.950 UTC [548] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:58.278 UTC [548] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$rZ8AbjuAEdGJoTyxumLjxekZK4hrekfOM50scp0H/BQ3NnQv0ZHRu')
	                RETURNING id, username, email
	                
2025-04-19 19:08:58.278 UTC [548] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:58.279 UTC [548] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:08:58.280 UTC [548] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:08:58.297 UTC [548] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:58.299 UTC [548] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:08:58.302 UTC [548] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:08:58.306 UTC [548] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:08:58.306 UTC [548] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:08:58.426 UTC [548] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:08:58.445 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:08:58.450 UTC [548] DEBUG:  building index "pg_toast_29023_index" on table "pg_toast_29023" serially
2025-04-19 19:08:58.460 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:08:58.460 UTC [548] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:08:58.460 UTC [548] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:08:58.462 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:08:58.463 UTC [548] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:08:58.463 UTC [548] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:08:58.465 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:08:58.466 UTC [548] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:08:58.466 UTC [548] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:08:58.469 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:08:58.473 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:08:58.474 UTC [548] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:08:58.474 UTC [548] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:08:58.476 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:08:58.476 UTC [548] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:08:58.476 UTC [548] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:08:58.477 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:08:58.479 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:08:58.479 UTC [548] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:08:58.479 UTC [548] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:08:58.481 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:08:58.481 UTC [548] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:08:58.481 UTC [548] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:08:58.484 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:08:58.486 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:08:58.487 UTC [548] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:08:58.487 UTC [548] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:08:58.490 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:08:58.495 UTC [548] DEBUG:  building index "pg_toast_29084_index" on table "pg_toast_29084" serially
2025-04-19 19:08:58.499 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:08:58.499 UTC [548] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:08:58.499 UTC [548] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:08:58.501 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:08:58.507 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:08:58.507 UTC [548] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:08:58.507 UTC [548] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:08:58.510 UTC [548] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:08:58.511 UTC [548] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:08:58.511 UTC [548] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:08:58.512 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:08:58.514 UTC [548] DEBUG:  building index "pg_toast_29117_index" on table "pg_toast_29117" serially
2025-04-19 19:08:58.520 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:08:58.524 UTC [548] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:08:58.524 UTC [548] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:08:58.527 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:08:58.529 UTC [548] DEBUG:  building index "pg_toast_29128_index" on table "pg_toast_29128" serially
2025-04-19 19:08:58.538 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:08:58.541 UTC [548] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:08:58.541 UTC [548] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:08:58.547 UTC [548] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:08:58.549 UTC [548] DEBUG:  building index "pg_toast_29151_index" on table "pg_toast_29151" serially
2025-04-19 19:08:58.551 UTC [548] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:08:58.554 UTC [548] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:08:58.554 UTC [548] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:08:58.559 UTC [548] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:08:58.559 UTC [548] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:08:58.565 UTC [548] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:08:58.565 UTC [548] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:08:58.571 UTC [548] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:08:58.571 UTC [548] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:08:58.577 UTC [548] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:08:58.577 UTC [548] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:08:58.581 UTC [548] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:08:58.581 UTC [548] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:08:58.587 UTC [548] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:08:58.587 UTC [548] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:08:58.589 UTC [548] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:08:58.589 UTC [548] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:08:58.592 UTC [548] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:08:58.592 UTC [548] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:08:58.594 UTC [548] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:08:58.594 UTC [548] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:08:58.596 UTC [548] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:08:58.596 UTC [548] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:08:58.599 UTC [548] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:08:58.599 UTC [548] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:08:58.665 UTC [548] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:08:59.009 UTC [548] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AepHht4Cuw2O8llUMC4wnORfOt.DzvnHTfkYnnR0IPDv.sqxUEQB6')
	                RETURNING id, username, email
	                
2025-04-19 19:08:59.011 UTC [548] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:08:59.011 UTC [548] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:00.426 UTC [549] LOG:  statement: 
	                INSERT INTO draws (draw_number, draw_date, jackpot_amount, winners)
	                VALUES (1745089740, '2025-04-19', 1000000, 0)
	                RETURNING id
	            
2025-04-19 19:09:00.433 UTC [549] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 1, 11, false)
	                
2025-04-19 19:09:00.437 UTC [549] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 2, 22, false)
	                
2025-04-19 19:09:00.438 UTC [549] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 3, 33, false)
	                
2025-04-19 19:09:00.439 UTC [549] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 4, 44, false)
	                
2025-04-19 19:09:00.439 UTC [549] LOG:  statement: 
	                    INSERT INTO numbers (draw_id, position, number, is_powerball)
	                    VALUES (1, 5, 55, false)
	                
2025-04-19 19:09:00.440 UTC [549] LOG:  statement: 
	                INSERT INTO numbers (draw_id, position, number, is_powerball)
	                VALUES (1, 6, 26, true)
	            
2025-04-19 19:09:00.441 UTC [549] LOG:  statement: 
	                SELECT d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	                       array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	                       (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	                FROM draws d
	                JOIN numbers n ON d.id = n.draw_id
	                WHERE d.draw_number = 1745089740
	                GROUP BY d.id, d.draw_number
	            
2025-04-19 19:09:00.443 UTC [549] LOG:  statement: 
	                SELECT d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners
	                FROM draws d
	                ORDER BY d.created_at DESC
	                LIMIT 5
	            
2025-04-19 19:09:06.214 UTC [557] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:09:11.214 UTC [548] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:09:11.645 UTC [548] DEBUG:  unexpected EOF on client connection
2025-04-19 19:09:14.702 UTC [565] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:09:14.722 UTC [565] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:09:14.737 UTC [565] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:09:14.737 UTC [565] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:09:14.742 UTC [565] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:09:14.749 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:09:14.753 UTC [565] DEBUG:  building index "pg_toast_29187_index" on table "pg_toast_29187" serially
2025-04-19 19:09:14.754 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:09:14.755 UTC [565] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:09:14.755 UTC [565] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:09:14.756 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:09:14.756 UTC [565] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:09:14.756 UTC [565] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:09:14.757 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:09:14.757 UTC [565] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:09:14.758 UTC [565] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:09:14.758 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:09:14.760 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:09:14.760 UTC [565] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:09:14.760 UTC [565] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:09:14.761 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:09:14.762 UTC [565] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:09:14.762 UTC [565] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:09:14.762 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:09:14.763 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:09:14.764 UTC [565] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:09:14.764 UTC [565] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:09:14.765 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:09:14.765 UTC [565] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:09:14.765 UTC [565] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:09:14.767 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:09:14.769 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:09:14.769 UTC [565] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:09:14.769 UTC [565] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:09:14.770 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:09:14.773 UTC [565] DEBUG:  building index "pg_toast_29248_index" on table "pg_toast_29248" serially
2025-04-19 19:09:14.774 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:09:14.774 UTC [565] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:09:14.774 UTC [565] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:09:14.777 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:09:14.781 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:09:14.781 UTC [565] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:09:14.781 UTC [565] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:09:14.783 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:09:14.783 UTC [565] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:09:14.783 UTC [565] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:09:14.788 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:09:14.791 UTC [565] DEBUG:  building index "pg_toast_29281_index" on table "pg_toast_29281" serially
2025-04-19 19:09:14.794 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:09:14.794 UTC [565] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:09:14.794 UTC [565] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:09:14.795 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:09:14.797 UTC [565] DEBUG:  building index "pg_toast_29292_index" on table "pg_toast_29292" serially
2025-04-19 19:09:14.798 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:09:14.798 UTC [565] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:09:14.798 UTC [565] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:09:14.800 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:09:14.802 UTC [565] DEBUG:  building index "pg_toast_29315_index" on table "pg_toast_29315" serially
2025-04-19 19:09:14.803 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:09:14.804 UTC [565] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:09:14.804 UTC [565] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:09:14.806 UTC [565] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:09:14.806 UTC [565] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:09:14.808 UTC [565] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:09:14.808 UTC [565] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:09:14.810 UTC [565] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:09:14.810 UTC [565] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:09:14.811 UTC [565] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:09:14.811 UTC [565] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:09:14.813 UTC [565] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:09:14.813 UTC [565] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:09:14.814 UTC [565] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:09:14.814 UTC [565] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:09:14.816 UTC [565] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:09:14.816 UTC [565] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:09:14.817 UTC [565] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:09:14.817 UTC [565] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:09:14.818 UTC [565] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:09:14.818 UTC [565] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:09:14.819 UTC [565] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:09:14.819 UTC [565] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:09:14.820 UTC [565] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:09:14.820 UTC [565] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:09:14.843 UTC [565] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:15.185 UTC [565] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1heioTEz31iJ.8D64Nj.2e9MlmjhhXuDBvkHJp7P42wAB2/PjLrHq')
	                RETURNING id, username, email
	                
2025-04-19 19:09:15.188 UTC [565] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:09:15.189 UTC [565] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:15.191 UTC [565] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:09:15.219 UTC [565] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:15.222 UTC [565] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:09:15.225 UTC [565] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:09:15.254 UTC [565] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:09:15.254 UTC [565] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:09:15.259 UTC [565] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:09:15.263 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:09:15.266 UTC [565] DEBUG:  building index "pg_toast_29351_index" on table "pg_toast_29351" serially
2025-04-19 19:09:15.267 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:09:15.268 UTC [565] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:09:15.268 UTC [565] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:09:15.269 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:09:15.269 UTC [565] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:09:15.270 UTC [565] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:09:15.271 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:09:15.271 UTC [565] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:09:15.271 UTC [565] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:09:15.273 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:09:15.274 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:09:15.275 UTC [565] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:09:15.275 UTC [565] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:09:15.276 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:09:15.276 UTC [565] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:09:15.276 UTC [565] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:09:15.277 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:09:15.279 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:09:15.279 UTC [565] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:09:15.279 UTC [565] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:09:15.280 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:09:15.280 UTC [565] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:09:15.280 UTC [565] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:09:15.282 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:09:15.283 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:09:15.284 UTC [565] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:09:15.284 UTC [565] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:09:15.285 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:09:15.286 UTC [565] DEBUG:  building index "pg_toast_29412_index" on table "pg_toast_29412" serially
2025-04-19 19:09:15.287 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:09:15.287 UTC [565] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:09:15.287 UTC [565] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:09:15.288 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:09:15.290 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:09:15.290 UTC [565] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:09:15.290 UTC [565] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:09:15.291 UTC [565] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:09:15.291 UTC [565] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:09:15.291 UTC [565] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:09:15.292 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:09:15.294 UTC [565] DEBUG:  building index "pg_toast_29445_index" on table "pg_toast_29445" serially
2025-04-19 19:09:15.295 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:09:15.295 UTC [565] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:09:15.295 UTC [565] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:09:15.296 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:09:15.297 UTC [565] DEBUG:  building index "pg_toast_29456_index" on table "pg_toast_29456" serially
2025-04-19 19:09:15.298 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:09:15.298 UTC [565] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:09:15.298 UTC [565] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:09:15.299 UTC [565] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:09:15.300 UTC [565] DEBUG:  building index "pg_toast_29479_index" on table "pg_toast_29479" serially
2025-04-19 19:09:15.301 UTC [565] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:09:15.301 UTC [565] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:09:15.301 UTC [565] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:09:15.302 UTC [565] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:09:15.302 UTC [565] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:09:15.303 UTC [565] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:09:15.303 UTC [565] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:09:15.304 UTC [565] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:09:15.304 UTC [565] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:09:15.305 UTC [565] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:09:15.305 UTC [565] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:09:15.306 UTC [565] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:09:15.306 UTC [565] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:09:15.307 UTC [565] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:09:15.307 UTC [565] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:09:15.308 UTC [565] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:09:15.308 UTC [565] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:09:15.309 UTC [565] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:09:15.309 UTC [565] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:09:15.310 UTC [565] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:09:15.310 UTC [565] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:09:15.310 UTC [565] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:09:15.310 UTC [565] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:09:15.312 UTC [565] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:09:15.312 UTC [565] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:09:15.321 UTC [565] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:15.585 UTC [565] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$c1X/q4VKjzJDH2udQKC8NuEyMsw/AFL9ipDvBxOYXF0odMHgBDevy')
	                RETURNING id, username, email
	                
2025-04-19 19:09:15.586 UTC [565] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:09:15.586 UTC [565] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:26.537 UTC [565] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:09:27.425 UTC [565] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:09:27.724 UTC [565] DEBUG:  unexpected EOF on client connection
2025-04-19 19:09:29.712 UTC [573] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:09:29.718 UTC [573] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:09:29.724 UTC [573] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:09:29.724 UTC [573] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:09:29.728 UTC [573] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:09:29.731 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:09:29.736 UTC [573] DEBUG:  building index "pg_toast_29515_index" on table "pg_toast_29515" serially
2025-04-19 19:09:29.739 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:09:29.740 UTC [573] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:09:29.740 UTC [573] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:09:29.742 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:09:29.743 UTC [573] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:09:29.743 UTC [573] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:09:29.744 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:09:29.745 UTC [573] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:09:29.745 UTC [573] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:09:29.746 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:09:29.748 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:09:29.749 UTC [573] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:09:29.749 UTC [573] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:09:29.750 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:09:29.750 UTC [573] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:09:29.751 UTC [573] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:09:29.752 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:09:29.753 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:09:29.753 UTC [573] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:09:29.753 UTC [573] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:09:29.754 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:09:29.754 UTC [573] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:09:29.754 UTC [573] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:09:29.756 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:09:29.757 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:09:29.757 UTC [573] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:09:29.757 UTC [573] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:09:29.758 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:09:29.760 UTC [573] DEBUG:  building index "pg_toast_29576_index" on table "pg_toast_29576" serially
2025-04-19 19:09:29.761 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:09:29.761 UTC [573] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:09:29.761 UTC [573] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:09:29.762 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:09:29.764 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:09:29.764 UTC [573] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:09:29.764 UTC [573] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:09:29.765 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:09:29.765 UTC [573] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:09:29.765 UTC [573] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:09:29.766 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:09:29.767 UTC [573] DEBUG:  building index "pg_toast_29609_index" on table "pg_toast_29609" serially
2025-04-19 19:09:29.768 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:09:29.768 UTC [573] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:09:29.768 UTC [573] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:09:29.769 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:09:29.770 UTC [573] DEBUG:  building index "pg_toast_29620_index" on table "pg_toast_29620" serially
2025-04-19 19:09:29.771 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:09:29.771 UTC [573] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:09:29.771 UTC [573] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:09:29.772 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:09:29.774 UTC [573] DEBUG:  building index "pg_toast_29643_index" on table "pg_toast_29643" serially
2025-04-19 19:09:29.775 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:09:29.775 UTC [573] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:09:29.775 UTC [573] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:09:29.776 UTC [573] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:09:29.776 UTC [573] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:09:29.777 UTC [573] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:09:29.777 UTC [573] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:09:29.777 UTC [573] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:09:29.777 UTC [573] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:09:29.778 UTC [573] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:09:29.778 UTC [573] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:09:29.779 UTC [573] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:09:29.779 UTC [573] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:09:29.780 UTC [573] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:09:29.780 UTC [573] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:09:29.781 UTC [573] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:09:29.781 UTC [573] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:09:29.781 UTC [573] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:09:29.781 UTC [573] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:09:29.782 UTC [573] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:09:29.782 UTC [573] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:09:29.783 UTC [573] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:09:29.783 UTC [573] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:09:29.784 UTC [573] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:09:29.784 UTC [573] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:09:29.800 UTC [573] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:30.077 UTC [573] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$BrROUxgJH0T2qMA87SnYJOr/8E9.Oh4Qw.iFO19PMqi.mUIHbROoi')
	                RETURNING id, username, email
	                
2025-04-19 19:09:30.078 UTC [573] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:09:30.078 UTC [573] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:30.079 UTC [573] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:09:30.106 UTC [573] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:30.107 UTC [573] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:09:30.110 UTC [573] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:09:30.115 UTC [573] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:09:30.115 UTC [573] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:09:30.119 UTC [573] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:09:30.123 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:09:30.124 UTC [573] DEBUG:  building index "pg_toast_29679_index" on table "pg_toast_29679" serially
2025-04-19 19:09:30.125 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:09:30.125 UTC [573] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:09:30.125 UTC [573] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:09:30.126 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:09:30.126 UTC [573] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:09:30.126 UTC [573] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:09:30.127 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:09:30.127 UTC [573] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:09:30.127 UTC [573] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:09:30.128 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:09:30.128 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:09:30.129 UTC [573] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:09:30.129 UTC [573] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:09:30.129 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:09:30.130 UTC [573] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:09:30.130 UTC [573] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:09:30.130 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:09:30.131 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:09:30.131 UTC [573] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:09:30.131 UTC [573] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:09:30.132 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:09:30.132 UTC [573] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:09:30.132 UTC [573] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:09:30.133 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:09:30.134 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:09:30.135 UTC [573] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:09:30.135 UTC [573] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:09:30.136 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:09:30.137 UTC [573] DEBUG:  building index "pg_toast_29740_index" on table "pg_toast_29740" serially
2025-04-19 19:09:30.138 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:09:30.138 UTC [573] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:09:30.138 UTC [573] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:09:30.139 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:09:30.142 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:09:30.142 UTC [573] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:09:30.142 UTC [573] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:09:30.144 UTC [573] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:09:30.145 UTC [573] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:09:30.145 UTC [573] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:09:30.146 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:09:30.149 UTC [573] DEBUG:  building index "pg_toast_29773_index" on table "pg_toast_29773" serially
2025-04-19 19:09:30.150 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:09:30.150 UTC [573] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:09:30.150 UTC [573] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:09:30.151 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:09:30.152 UTC [573] DEBUG:  building index "pg_toast_29784_index" on table "pg_toast_29784" serially
2025-04-19 19:09:30.154 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:09:30.154 UTC [573] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:09:30.154 UTC [573] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:09:30.156 UTC [573] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:09:30.157 UTC [573] DEBUG:  building index "pg_toast_29807_index" on table "pg_toast_29807" serially
2025-04-19 19:09:30.158 UTC [573] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:09:30.158 UTC [573] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:09:30.158 UTC [573] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:09:30.159 UTC [573] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:09:30.159 UTC [573] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:09:30.160 UTC [573] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:09:30.160 UTC [573] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:09:30.161 UTC [573] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:09:30.161 UTC [573] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:09:30.162 UTC [573] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:09:30.162 UTC [573] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:09:30.163 UTC [573] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:09:30.163 UTC [573] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:09:30.164 UTC [573] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:09:30.164 UTC [573] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:09:30.165 UTC [573] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:09:30.165 UTC [573] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:09:30.166 UTC [573] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:09:30.166 UTC [573] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:09:30.167 UTC [573] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:09:30.167 UTC [573] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:09:30.168 UTC [573] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:09:30.168 UTC [573] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:09:30.169 UTC [573] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:09:30.169 UTC [573] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:09:30.183 UTC [573] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:30.454 UTC [573] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4wH8l8xYA17sZa4UJAWO.uCex01gPzl3Wqz24o9TR2gzpIC1vkpDG')
	                RETURNING id, username, email
	                
2025-04-19 19:09:30.456 UTC [573] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:09:30.456 UTC [573] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:30.485 UTC [573] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:09:32.266 UTC [573] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:09:33.650 UTC [573] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:09:34.293 UTC [573] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 19:09:36.278 UTC [581] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:09:36.527 UTC [581] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:09:43.435 UTC [573] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:09:43.717 UTC [573] DEBUG:  unexpected EOF on client connection
2025-04-19 19:09:45.685 UTC [589] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:09:45.693 UTC [589] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:09:45.703 UTC [589] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:09:45.703 UTC [589] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:09:45.707 UTC [589] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:09:45.710 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:09:45.713 UTC [589] DEBUG:  building index "pg_toast_29844_index" on table "pg_toast_29844" serially
2025-04-19 19:09:45.715 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:09:45.715 UTC [589] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:09:45.715 UTC [589] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:09:45.716 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:09:45.716 UTC [589] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:09:45.716 UTC [589] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:09:45.717 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:09:45.717 UTC [589] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:09:45.717 UTC [589] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:09:45.718 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:09:45.719 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:09:45.719 UTC [589] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:09:45.719 UTC [589] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:09:45.720 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:09:45.720 UTC [589] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:09:45.720 UTC [589] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:09:45.721 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:09:45.722 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:09:45.722 UTC [589] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:09:45.722 UTC [589] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:09:45.723 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:09:45.723 UTC [589] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:09:45.723 UTC [589] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:09:45.724 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:09:45.725 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:09:45.725 UTC [589] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:09:45.725 UTC [589] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:09:45.726 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:09:45.728 UTC [589] DEBUG:  building index "pg_toast_29905_index" on table "pg_toast_29905" serially
2025-04-19 19:09:45.729 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:09:45.729 UTC [589] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:09:45.729 UTC [589] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:09:45.730 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:09:45.731 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:09:45.732 UTC [589] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:09:45.732 UTC [589] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:09:45.732 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:09:45.732 UTC [589] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:09:45.732 UTC [589] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:09:45.733 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:09:45.735 UTC [589] DEBUG:  building index "pg_toast_29938_index" on table "pg_toast_29938" serially
2025-04-19 19:09:45.735 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:09:45.736 UTC [589] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:09:45.736 UTC [589] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:09:45.736 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:09:45.737 UTC [589] DEBUG:  building index "pg_toast_29949_index" on table "pg_toast_29949" serially
2025-04-19 19:09:45.738 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:09:45.738 UTC [589] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:09:45.738 UTC [589] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:09:45.740 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:09:45.741 UTC [589] DEBUG:  building index "pg_toast_29972_index" on table "pg_toast_29972" serially
2025-04-19 19:09:45.741 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:09:45.742 UTC [589] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:09:45.742 UTC [589] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:09:45.742 UTC [589] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:09:45.742 UTC [589] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:09:45.744 UTC [589] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:09:45.744 UTC [589] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:09:45.745 UTC [589] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:09:45.745 UTC [589] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:09:45.745 UTC [589] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:09:45.745 UTC [589] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:09:45.746 UTC [589] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:09:45.746 UTC [589] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:09:45.747 UTC [589] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:09:45.747 UTC [589] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:09:45.748 UTC [589] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:09:45.748 UTC [589] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:09:45.749 UTC [589] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:09:45.749 UTC [589] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:09:45.750 UTC [589] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:09:45.750 UTC [589] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:09:45.751 UTC [589] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:09:45.751 UTC [589] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:09:45.751 UTC [589] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:09:45.751 UTC [589] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:09:45.767 UTC [589] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:46.032 UTC [589] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$gnXF1IOo.e3c2gGkp30QHeNd2zf9DIcb1nE4YOzse0mylNzV6pk6.')
	                RETURNING id, username, email
	                
2025-04-19 19:09:46.033 UTC [589] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:09:46.034 UTC [589] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:46.034 UTC [589] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:09:46.045 UTC [589] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:46.046 UTC [589] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:09:46.050 UTC [589] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:09:46.055 UTC [589] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:09:46.055 UTC [589] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:09:46.058 UTC [589] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:09:46.061 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:09:46.062 UTC [589] DEBUG:  building index "pg_toast_30008_index" on table "pg_toast_30008" serially
2025-04-19 19:09:46.064 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:09:46.064 UTC [589] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:09:46.064 UTC [589] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:09:46.064 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:09:46.065 UTC [589] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:09:46.065 UTC [589] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:09:46.066 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:09:46.066 UTC [589] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:09:46.066 UTC [589] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:09:46.067 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:09:46.068 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:09:46.068 UTC [589] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:09:46.068 UTC [589] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:09:46.069 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:09:46.069 UTC [589] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:09:46.069 UTC [589] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:09:46.070 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:09:46.071 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:09:46.071 UTC [589] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:09:46.071 UTC [589] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:09:46.072 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:09:46.072 UTC [589] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:09:46.072 UTC [589] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:09:46.073 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:09:46.074 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:09:46.075 UTC [589] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:09:46.075 UTC [589] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:09:46.077 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:09:46.079 UTC [589] DEBUG:  building index "pg_toast_30069_index" on table "pg_toast_30069" serially
2025-04-19 19:09:46.080 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:09:46.080 UTC [589] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:09:46.080 UTC [589] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:09:46.081 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:09:46.082 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:09:46.083 UTC [589] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:09:46.083 UTC [589] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:09:46.084 UTC [589] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:09:46.084 UTC [589] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:09:46.084 UTC [589] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:09:46.085 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:09:46.086 UTC [589] DEBUG:  building index "pg_toast_30102_index" on table "pg_toast_30102" serially
2025-04-19 19:09:46.086 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:09:46.087 UTC [589] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:09:46.087 UTC [589] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:09:46.087 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:09:46.088 UTC [589] DEBUG:  building index "pg_toast_30113_index" on table "pg_toast_30113" serially
2025-04-19 19:09:46.089 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:09:46.089 UTC [589] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:09:46.089 UTC [589] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:09:46.091 UTC [589] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:09:46.092 UTC [589] DEBUG:  building index "pg_toast_30136_index" on table "pg_toast_30136" serially
2025-04-19 19:09:46.093 UTC [589] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:09:46.093 UTC [589] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:09:46.093 UTC [589] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:09:46.094 UTC [589] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:09:46.094 UTC [589] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:09:46.094 UTC [589] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:09:46.094 UTC [589] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:09:46.095 UTC [589] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:09:46.095 UTC [589] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:09:46.096 UTC [589] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:09:46.096 UTC [589] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:09:46.097 UTC [589] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:09:46.097 UTC [589] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:09:46.098 UTC [589] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:09:46.098 UTC [589] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:09:46.099 UTC [589] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:09:46.099 UTC [589] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:09:46.100 UTC [589] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:09:46.100 UTC [589] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:09:46.101 UTC [589] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:09:46.101 UTC [589] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:09:46.102 UTC [589] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:09:46.102 UTC [589] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:09:46.103 UTC [589] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:09:46.103 UTC [589] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:09:46.114 UTC [589] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:09:46.373 UTC [589] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$620J6r6AHdLtdn6bxTBGl.H7KQJLJW8QDXp.j36eIka5YWIIFmKE2')
	                RETURNING id, username, email
	                
2025-04-19 19:09:46.374 UTC [589] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:09:46.374 UTC [589] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:09:59.303 UTC [589] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:09:59.614 UTC [589] DEBUG:  unexpected EOF on client connection
2025-04-19 19:10:01.415 UTC [603] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:01.422 UTC [603] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:01.430 UTC [603] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:01.430 UTC [603] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:01.435 UTC [603] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:01.439 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:01.442 UTC [603] DEBUG:  building index "pg_toast_30172_index" on table "pg_toast_30172" serially
2025-04-19 19:10:01.444 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:01.444 UTC [603] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:01.444 UTC [603] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:01.445 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:01.446 UTC [603] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:01.446 UTC [603] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:01.446 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:01.446 UTC [603] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:01.447 UTC [603] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:01.447 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:01.449 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:01.449 UTC [603] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:01.449 UTC [603] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:01.450 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:01.450 UTC [603] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:01.450 UTC [603] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:01.451 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:01.452 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:01.452 UTC [603] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:01.452 UTC [603] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:01.453 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:01.453 UTC [603] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:01.453 UTC [603] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:01.455 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:01.457 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:01.457 UTC [603] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:01.457 UTC [603] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:01.458 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:01.459 UTC [603] DEBUG:  building index "pg_toast_30233_index" on table "pg_toast_30233" serially
2025-04-19 19:10:01.460 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:01.461 UTC [603] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:01.461 UTC [603] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:01.462 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:01.463 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:01.463 UTC [603] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:01.463 UTC [603] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:01.464 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:01.464 UTC [603] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:01.464 UTC [603] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:01.465 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:01.467 UTC [603] DEBUG:  building index "pg_toast_30266_index" on table "pg_toast_30266" serially
2025-04-19 19:10:01.468 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:01.468 UTC [603] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:01.468 UTC [603] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:01.469 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:01.470 UTC [603] DEBUG:  building index "pg_toast_30277_index" on table "pg_toast_30277" serially
2025-04-19 19:10:01.471 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:01.471 UTC [603] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:01.471 UTC [603] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:01.473 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:01.473 UTC [603] DEBUG:  building index "pg_toast_30300_index" on table "pg_toast_30300" serially
2025-04-19 19:10:01.474 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:01.474 UTC [603] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:01.474 UTC [603] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:01.475 UTC [603] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:01.475 UTC [603] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:01.476 UTC [603] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:01.476 UTC [603] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:01.477 UTC [603] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:01.477 UTC [603] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:01.478 UTC [603] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:01.478 UTC [603] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:01.478 UTC [603] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:01.478 UTC [603] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:01.479 UTC [603] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:01.479 UTC [603] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:01.480 UTC [603] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:01.480 UTC [603] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:01.481 UTC [603] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:01.481 UTC [603] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:01.482 UTC [603] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:01.482 UTC [603] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:01.483 UTC [603] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:01.483 UTC [603] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:01.483 UTC [603] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:01.484 UTC [603] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:01.498 UTC [603] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:01.765 UTC [603] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$K/sv7ACWPEcWg9TtxBQvW.4u.O.ErZqETB601ZfsTTyIYNTt2J1Qm')
	                RETURNING id, username, email
	                
2025-04-19 19:10:01.766 UTC [603] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:01.766 UTC [603] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:01.767 UTC [603] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:10:01.785 UTC [603] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:01.786 UTC [603] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:01.789 UTC [603] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:01.794 UTC [603] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:01.794 UTC [603] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:01.798 UTC [603] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:01.800 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:01.801 UTC [603] DEBUG:  building index "pg_toast_30336_index" on table "pg_toast_30336" serially
2025-04-19 19:10:01.803 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:01.803 UTC [603] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:01.803 UTC [603] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:01.804 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:01.804 UTC [603] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:01.804 UTC [603] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:01.805 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:01.805 UTC [603] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:01.805 UTC [603] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:01.806 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:01.807 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:01.807 UTC [603] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:01.807 UTC [603] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:01.807 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:01.808 UTC [603] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:01.808 UTC [603] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:01.808 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:01.809 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:01.809 UTC [603] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:01.809 UTC [603] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:01.810 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:01.810 UTC [603] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:01.810 UTC [603] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:01.811 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:01.813 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:01.813 UTC [603] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:01.813 UTC [603] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:01.815 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:01.816 UTC [603] DEBUG:  building index "pg_toast_30397_index" on table "pg_toast_30397" serially
2025-04-19 19:10:01.817 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:01.817 UTC [603] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:01.817 UTC [603] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:01.819 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:01.819 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:01.820 UTC [603] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:01.820 UTC [603] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:01.820 UTC [603] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:01.821 UTC [603] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:01.821 UTC [603] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:01.822 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:01.823 UTC [603] DEBUG:  building index "pg_toast_30430_index" on table "pg_toast_30430" serially
2025-04-19 19:10:01.824 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:01.824 UTC [603] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:01.824 UTC [603] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:01.824 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:01.825 UTC [603] DEBUG:  building index "pg_toast_30441_index" on table "pg_toast_30441" serially
2025-04-19 19:10:01.826 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:01.826 UTC [603] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:01.826 UTC [603] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:01.827 UTC [603] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:01.828 UTC [603] DEBUG:  building index "pg_toast_30464_index" on table "pg_toast_30464" serially
2025-04-19 19:10:01.829 UTC [603] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:01.829 UTC [603] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:01.829 UTC [603] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:01.830 UTC [603] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:01.830 UTC [603] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:01.831 UTC [603] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:01.831 UTC [603] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:01.831 UTC [603] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:01.831 UTC [603] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:01.832 UTC [603] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:01.832 UTC [603] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:01.833 UTC [603] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:01.833 UTC [603] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:01.834 UTC [603] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:01.834 UTC [603] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:01.834 UTC [603] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:01.834 UTC [603] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:01.835 UTC [603] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:01.835 UTC [603] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:01.836 UTC [603] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:01.836 UTC [603] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:01.837 UTC [603] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:01.837 UTC [603] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:01.837 UTC [603] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:01.837 UTC [603] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:01.846 UTC [603] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:02.093 UTC [603] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$vARo9lawCA9r2HD.Y.4wIeR/Sb0ZHrSHuPAj5vQvUugisFN7qjwHm')
	                RETURNING id, username, email
	                
2025-04-19 19:10:02.094 UTC [603] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:02.095 UTC [603] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:06.243 UTC [613] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:10:06.787 UTC [612] LOG:  statement: SELECT * FROM draws;
2025-04-19 19:10:15.444 UTC [603] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:10:15.772 UTC [603] DEBUG:  unexpected EOF on client connection
2025-04-19 19:10:18.824 UTC [621] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:18.834 UTC [621] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:18.843 UTC [621] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:18.843 UTC [621] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:18.848 UTC [621] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:18.853 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:18.859 UTC [621] DEBUG:  building index "pg_toast_30500_index" on table "pg_toast_30500" serially
2025-04-19 19:10:18.861 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:18.862 UTC [621] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:18.862 UTC [621] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:18.863 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:18.863 UTC [621] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:18.863 UTC [621] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:18.864 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:18.864 UTC [621] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:18.864 UTC [621] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:18.865 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:18.867 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:18.867 UTC [621] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:18.867 UTC [621] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:18.868 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:18.868 UTC [621] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:18.868 UTC [621] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:18.869 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:18.870 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:18.871 UTC [621] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:18.871 UTC [621] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:18.871 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:18.872 UTC [621] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:18.872 UTC [621] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:18.873 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:18.875 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:18.875 UTC [621] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:18.875 UTC [621] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:18.876 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:18.878 UTC [621] DEBUG:  building index "pg_toast_30561_index" on table "pg_toast_30561" serially
2025-04-19 19:10:18.880 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:18.880 UTC [621] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:18.880 UTC [621] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:18.881 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:18.883 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:18.883 UTC [621] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:18.883 UTC [621] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:18.884 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:18.884 UTC [621] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:18.884 UTC [621] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:18.885 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:18.886 UTC [621] DEBUG:  building index "pg_toast_30594_index" on table "pg_toast_30594" serially
2025-04-19 19:10:18.887 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:18.888 UTC [621] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:18.888 UTC [621] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:18.888 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:18.889 UTC [621] DEBUG:  building index "pg_toast_30605_index" on table "pg_toast_30605" serially
2025-04-19 19:10:18.890 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:18.890 UTC [621] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:18.890 UTC [621] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:18.892 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:18.893 UTC [621] DEBUG:  building index "pg_toast_30628_index" on table "pg_toast_30628" serially
2025-04-19 19:10:18.893 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:18.894 UTC [621] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:18.894 UTC [621] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:18.895 UTC [621] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:18.895 UTC [621] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:18.896 UTC [621] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:18.896 UTC [621] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:18.896 UTC [621] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:18.896 UTC [621] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:18.897 UTC [621] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:18.897 UTC [621] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:18.898 UTC [621] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:18.898 UTC [621] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:18.899 UTC [621] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:18.899 UTC [621] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:18.900 UTC [621] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:18.900 UTC [621] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:18.900 UTC [621] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:18.900 UTC [621] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:18.901 UTC [621] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:18.901 UTC [621] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:18.902 UTC [621] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:18.902 UTC [621] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:18.903 UTC [621] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:18.903 UTC [621] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:18.921 UTC [621] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:19.199 UTC [621] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$scOMGqUEWFfBmTnstPKWJePjXFhYMtYzI1EAl3BLGIse/QPLVoFRu')
	                RETURNING id, username, email
	                
2025-04-19 19:10:19.200 UTC [621] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:19.201 UTC [621] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:19.202 UTC [621] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:10:19.228 UTC [621] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:19.229 UTC [621] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:19.232 UTC [621] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:19.237 UTC [621] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:19.237 UTC [621] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:19.241 UTC [621] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:19.245 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:19.246 UTC [621] DEBUG:  building index "pg_toast_30664_index" on table "pg_toast_30664" serially
2025-04-19 19:10:19.247 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:19.247 UTC [621] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:19.247 UTC [621] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:19.248 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:19.248 UTC [621] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:19.248 UTC [621] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:19.249 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:19.249 UTC [621] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:19.249 UTC [621] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:19.250 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:19.251 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:19.251 UTC [621] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:19.251 UTC [621] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:19.252 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:19.252 UTC [621] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:19.252 UTC [621] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:19.253 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:19.255 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:19.256 UTC [621] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:19.256 UTC [621] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:19.258 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:19.258 UTC [621] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:19.258 UTC [621] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:19.261 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:19.264 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:19.264 UTC [621] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:19.264 UTC [621] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:19.267 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:19.267 UTC [621] DEBUG:  building index "pg_toast_30725_index" on table "pg_toast_30725" serially
2025-04-19 19:10:19.268 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:19.269 UTC [621] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:19.269 UTC [621] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:19.270 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:19.271 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:19.271 UTC [621] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:19.271 UTC [621] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:19.272 UTC [621] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:19.272 UTC [621] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:19.272 UTC [621] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:19.273 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:19.274 UTC [621] DEBUG:  building index "pg_toast_30758_index" on table "pg_toast_30758" serially
2025-04-19 19:10:19.275 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:19.275 UTC [621] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:19.275 UTC [621] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:19.276 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:19.277 UTC [621] DEBUG:  building index "pg_toast_30769_index" on table "pg_toast_30769" serially
2025-04-19 19:10:19.278 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:19.278 UTC [621] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:19.278 UTC [621] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:19.279 UTC [621] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:19.280 UTC [621] DEBUG:  building index "pg_toast_30792_index" on table "pg_toast_30792" serially
2025-04-19 19:10:19.281 UTC [621] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:19.281 UTC [621] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:19.281 UTC [621] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:19.282 UTC [621] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:19.282 UTC [621] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:19.283 UTC [621] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:19.283 UTC [621] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:19.284 UTC [621] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:19.284 UTC [621] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:19.284 UTC [621] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:19.284 UTC [621] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:19.285 UTC [621] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:19.285 UTC [621] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:19.286 UTC [621] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:19.286 UTC [621] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:19.287 UTC [621] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:19.287 UTC [621] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:19.288 UTC [621] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:19.288 UTC [621] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:19.289 UTC [621] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:19.289 UTC [621] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:19.289 UTC [621] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:19.289 UTC [621] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:19.290 UTC [621] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:19.290 UTC [621] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:19.297 UTC [621] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:19.542 UTC [621] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$XfbgGylGv2cX.aIY8O8VCuH6rr1VmJatJAXLSiuZRw/I5BnrMoWGO')
	                RETURNING id, username, email
	                
2025-04-19 19:10:19.543 UTC [621] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:19.543 UTC [621] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:31.976 UTC [621] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:10:32.255 UTC [621] DEBUG:  unexpected EOF on client connection
2025-04-19 19:10:34.676 UTC [636] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:34.687 UTC [636] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:34.696 UTC [636] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:34.696 UTC [636] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:34.701 UTC [636] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:34.704 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:34.710 UTC [636] DEBUG:  building index "pg_toast_30828_index" on table "pg_toast_30828" serially
2025-04-19 19:10:34.713 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:34.713 UTC [636] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:34.713 UTC [636] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:34.715 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:34.715 UTC [636] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:34.715 UTC [636] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:34.716 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:34.716 UTC [636] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:34.716 UTC [636] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:34.717 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:34.718 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:34.719 UTC [636] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:34.719 UTC [636] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:34.719 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:34.720 UTC [636] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:34.720 UTC [636] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:34.721 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:34.722 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:34.722 UTC [636] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:34.722 UTC [636] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:34.723 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:34.723 UTC [636] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:34.723 UTC [636] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:34.725 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:34.726 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:34.727 UTC [636] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:34.727 UTC [636] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:34.728 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:34.730 UTC [636] DEBUG:  building index "pg_toast_30889_index" on table "pg_toast_30889" serially
2025-04-19 19:10:34.731 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:34.731 UTC [636] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:34.731 UTC [636] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:34.732 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:34.734 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:34.734 UTC [636] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:34.734 UTC [636] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:34.735 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:34.735 UTC [636] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:34.735 UTC [636] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:34.737 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:34.738 UTC [636] DEBUG:  building index "pg_toast_30922_index" on table "pg_toast_30922" serially
2025-04-19 19:10:34.739 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:34.739 UTC [636] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:34.739 UTC [636] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:34.740 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:34.741 UTC [636] DEBUG:  building index "pg_toast_30933_index" on table "pg_toast_30933" serially
2025-04-19 19:10:34.742 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:34.742 UTC [636] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:34.742 UTC [636] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:34.744 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:34.745 UTC [636] DEBUG:  building index "pg_toast_30956_index" on table "pg_toast_30956" serially
2025-04-19 19:10:34.746 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:34.746 UTC [636] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:34.746 UTC [636] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:34.747 UTC [636] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:34.747 UTC [636] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:34.748 UTC [636] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:34.748 UTC [636] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:34.749 UTC [636] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:34.749 UTC [636] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:34.750 UTC [636] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:34.750 UTC [636] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:34.751 UTC [636] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:34.751 UTC [636] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:34.752 UTC [636] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:34.752 UTC [636] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:34.753 UTC [636] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:34.753 UTC [636] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:34.753 UTC [636] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:34.753 UTC [636] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:34.754 UTC [636] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:34.754 UTC [636] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:34.755 UTC [636] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:34.755 UTC [636] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:34.756 UTC [636] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:34.756 UTC [636] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:34.767 UTC [636] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:35.060 UTC [636] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xKaabxFzdzO.fb1kko3MzOQCv3wPlTZG/eO3Ep7ZuNLX1ShIMJrKS')
	                RETURNING id, username, email
	                
2025-04-19 19:10:35.061 UTC [636] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:35.061 UTC [636] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:35.062 UTC [636] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:10:35.076 UTC [636] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:35.077 UTC [636] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:35.081 UTC [636] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:35.085 UTC [636] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:35.085 UTC [636] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:35.090 UTC [636] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:35.093 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:35.095 UTC [636] DEBUG:  building index "pg_toast_30992_index" on table "pg_toast_30992" serially
2025-04-19 19:10:35.097 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:35.097 UTC [636] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:35.097 UTC [636] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:35.098 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:35.098 UTC [636] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:35.098 UTC [636] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:35.098 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:35.099 UTC [636] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:35.099 UTC [636] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:35.099 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:35.100 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:35.100 UTC [636] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:35.100 UTC [636] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:35.101 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:35.101 UTC [636] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:35.101 UTC [636] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:35.102 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:35.103 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:35.103 UTC [636] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:35.103 UTC [636] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:35.104 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:35.104 UTC [636] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:35.104 UTC [636] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:35.105 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:35.106 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:35.106 UTC [636] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:35.106 UTC [636] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:35.107 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:35.108 UTC [636] DEBUG:  building index "pg_toast_31053_index" on table "pg_toast_31053" serially
2025-04-19 19:10:35.109 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:35.109 UTC [636] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:35.109 UTC [636] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:35.110 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:35.111 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:35.111 UTC [636] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:35.111 UTC [636] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:35.112 UTC [636] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:35.112 UTC [636] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:35.112 UTC [636] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:35.113 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:35.114 UTC [636] DEBUG:  building index "pg_toast_31086_index" on table "pg_toast_31086" serially
2025-04-19 19:10:35.115 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:35.115 UTC [636] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:35.115 UTC [636] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:35.116 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:35.117 UTC [636] DEBUG:  building index "pg_toast_31097_index" on table "pg_toast_31097" serially
2025-04-19 19:10:35.118 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:35.118 UTC [636] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:35.118 UTC [636] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:35.119 UTC [636] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:35.121 UTC [636] DEBUG:  building index "pg_toast_31120_index" on table "pg_toast_31120" serially
2025-04-19 19:10:35.122 UTC [636] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:35.123 UTC [636] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:35.123 UTC [636] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:35.124 UTC [636] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:35.124 UTC [636] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:35.125 UTC [636] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:35.125 UTC [636] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:35.127 UTC [636] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:35.127 UTC [636] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:35.127 UTC [636] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:35.127 UTC [636] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:35.128 UTC [636] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:35.128 UTC [636] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:35.129 UTC [636] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:35.129 UTC [636] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:35.130 UTC [636] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:35.130 UTC [636] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:35.131 UTC [636] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:35.131 UTC [636] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:35.132 UTC [636] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:35.132 UTC [636] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:35.133 UTC [636] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:35.133 UTC [636] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:35.134 UTC [636] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:35.134 UTC [636] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:35.142 UTC [636] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:35.409 UTC [636] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$BxCXBPKRzuztK9ndgd1WIeI8dHdjrXtNpSlgpagzDag5ydv17Tene')
	                RETURNING id, username, email
	                
2025-04-19 19:10:35.410 UTC [636] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:35.410 UTC [636] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:36.133 UTC [637] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:10:36.383 UTC [637] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:10:47.869 UTC [636] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:10:48.174 UTC [636] DEBUG:  unexpected EOF on client connection
2025-04-19 19:10:50.261 UTC [644] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:50.277 UTC [644] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:50.285 UTC [644] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:50.285 UTC [644] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:50.289 UTC [644] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:50.292 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:50.295 UTC [644] DEBUG:  building index "pg_toast_31157_index" on table "pg_toast_31157" serially
2025-04-19 19:10:50.298 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:50.299 UTC [644] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:50.299 UTC [644] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:50.301 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:50.301 UTC [644] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:50.302 UTC [644] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:50.303 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:50.303 UTC [644] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:50.303 UTC [644] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:50.304 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:50.305 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:50.305 UTC [644] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:50.305 UTC [644] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:50.306 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:50.306 UTC [644] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:50.306 UTC [644] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:50.307 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:50.308 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:50.308 UTC [644] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:50.308 UTC [644] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:50.309 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:50.309 UTC [644] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:50.309 UTC [644] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:50.311 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:50.312 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:50.312 UTC [644] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:50.312 UTC [644] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:50.313 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:50.315 UTC [644] DEBUG:  building index "pg_toast_31218_index" on table "pg_toast_31218" serially
2025-04-19 19:10:50.316 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:50.317 UTC [644] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:50.317 UTC [644] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:50.318 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:50.319 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:50.319 UTC [644] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:50.319 UTC [644] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:50.320 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:50.320 UTC [644] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:50.320 UTC [644] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:50.321 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:50.322 UTC [644] DEBUG:  building index "pg_toast_31251_index" on table "pg_toast_31251" serially
2025-04-19 19:10:50.323 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:50.323 UTC [644] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:50.323 UTC [644] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:50.323 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:50.324 UTC [644] DEBUG:  building index "pg_toast_31262_index" on table "pg_toast_31262" serially
2025-04-19 19:10:50.325 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:50.325 UTC [644] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:50.325 UTC [644] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:50.327 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:50.328 UTC [644] DEBUG:  building index "pg_toast_31285_index" on table "pg_toast_31285" serially
2025-04-19 19:10:50.329 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:50.329 UTC [644] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:50.329 UTC [644] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:50.330 UTC [644] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:50.330 UTC [644] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:50.331 UTC [644] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:50.331 UTC [644] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:50.332 UTC [644] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:50.332 UTC [644] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:50.333 UTC [644] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:50.333 UTC [644] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:50.334 UTC [644] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:50.334 UTC [644] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:50.335 UTC [644] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:50.335 UTC [644] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:50.336 UTC [644] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:50.336 UTC [644] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:50.336 UTC [644] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:50.337 UTC [644] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:50.337 UTC [644] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:50.337 UTC [644] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:50.338 UTC [644] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:50.338 UTC [644] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:50.339 UTC [644] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:50.339 UTC [644] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:50.357 UTC [644] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:50.636 UTC [644] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$l2WPrxkcbHdzayve7TbWdOyYZd0u9XtknGAcTO8dFKphUfv7dlRRi')
	                RETURNING id, username, email
	                
2025-04-19 19:10:50.637 UTC [644] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:50.637 UTC [644] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:10:50.638 UTC [644] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:10:50.660 UTC [644] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:50.661 UTC [644] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:10:50.664 UTC [644] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:10:50.669 UTC [644] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:10:50.669 UTC [644] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:10:50.673 UTC [644] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:10:50.676 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:10:50.677 UTC [644] DEBUG:  building index "pg_toast_31321_index" on table "pg_toast_31321" serially
2025-04-19 19:10:50.678 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:10:50.678 UTC [644] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:10:50.678 UTC [644] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:10:50.679 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:10:50.679 UTC [644] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:10:50.679 UTC [644] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:10:50.680 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:10:50.680 UTC [644] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:10:50.680 UTC [644] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:10:50.681 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:10:50.682 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:10:50.682 UTC [644] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:10:50.682 UTC [644] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:10:50.682 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:10:50.683 UTC [644] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:10:50.683 UTC [644] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:10:50.683 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:10:50.684 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:10:50.684 UTC [644] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:10:50.684 UTC [644] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:10:50.685 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:10:50.686 UTC [644] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:10:50.686 UTC [644] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:10:50.686 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:10:50.687 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:10:50.688 UTC [644] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:10:50.688 UTC [644] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:10:50.689 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:10:50.690 UTC [644] DEBUG:  building index "pg_toast_31382_index" on table "pg_toast_31382" serially
2025-04-19 19:10:50.690 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:10:50.691 UTC [644] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:10:50.691 UTC [644] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:10:50.692 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:10:50.693 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:10:50.693 UTC [644] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:10:50.693 UTC [644] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:10:50.693 UTC [644] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:10:50.694 UTC [644] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:10:50.694 UTC [644] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:10:50.695 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:10:50.696 UTC [644] DEBUG:  building index "pg_toast_31415_index" on table "pg_toast_31415" serially
2025-04-19 19:10:50.697 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:10:50.697 UTC [644] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:10:50.697 UTC [644] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:10:50.697 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:10:50.698 UTC [644] DEBUG:  building index "pg_toast_31426_index" on table "pg_toast_31426" serially
2025-04-19 19:10:50.699 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:10:50.699 UTC [644] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:10:50.699 UTC [644] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:10:50.701 UTC [644] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:10:50.702 UTC [644] DEBUG:  building index "pg_toast_31449_index" on table "pg_toast_31449" serially
2025-04-19 19:10:50.702 UTC [644] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:10:50.703 UTC [644] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:10:50.703 UTC [644] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:10:50.703 UTC [644] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:10:50.703 UTC [644] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:10:50.704 UTC [644] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:10:50.704 UTC [644] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:10:50.705 UTC [644] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:10:50.705 UTC [644] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:10:50.706 UTC [644] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:10:50.706 UTC [644] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:10:50.706 UTC [644] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:10:50.706 UTC [644] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:10:50.707 UTC [644] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:10:50.707 UTC [644] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:10:50.708 UTC [644] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:10:50.708 UTC [644] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:10:50.709 UTC [644] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:10:50.709 UTC [644] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:10:50.709 UTC [644] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:10:50.709 UTC [644] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:10:50.710 UTC [644] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:10:50.710 UTC [644] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:10:50.711 UTC [644] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:10:50.711 UTC [644] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:10:50.722 UTC [644] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:10:50.984 UTC [644] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Tcdq0d8/1YCskZWTAVm6xeLcxDbJqEkZqdtLAVXXUp8EnLXX0Ky9y')
	                RETURNING id, username, email
	                
2025-04-19 19:10:50.986 UTC [644] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:10:50.987 UTC [644] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:03.882 UTC [644] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:11:04.239 UTC [644] DEBUG:  unexpected EOF on client connection
2025-04-19 19:11:06.255 UTC [659] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:11:07.187 UTC [660] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:07.201 UTC [660] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:07.210 UTC [660] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:07.210 UTC [660] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:07.217 UTC [660] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:07.222 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:07.229 UTC [660] DEBUG:  building index "pg_toast_31485_index" on table "pg_toast_31485" serially
2025-04-19 19:11:07.232 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:07.233 UTC [660] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:07.233 UTC [660] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:07.234 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:07.234 UTC [660] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:07.235 UTC [660] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:07.236 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:07.236 UTC [660] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:07.236 UTC [660] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:07.237 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:07.238 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:07.238 UTC [660] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:07.238 UTC [660] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:07.239 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:07.239 UTC [660] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:07.239 UTC [660] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:07.240 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:07.242 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:07.242 UTC [660] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:07.242 UTC [660] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:07.243 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:07.243 UTC [660] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:07.243 UTC [660] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:07.245 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:07.246 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:07.246 UTC [660] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:07.246 UTC [660] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:07.247 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:07.249 UTC [660] DEBUG:  building index "pg_toast_31546_index" on table "pg_toast_31546" serially
2025-04-19 19:11:07.250 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:07.250 UTC [660] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:07.250 UTC [660] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:07.251 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:07.253 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:07.253 UTC [660] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:07.253 UTC [660] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:07.254 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:07.254 UTC [660] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:07.254 UTC [660] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:07.255 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:07.257 UTC [660] DEBUG:  building index "pg_toast_31579_index" on table "pg_toast_31579" serially
2025-04-19 19:11:07.258 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:07.258 UTC [660] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:07.258 UTC [660] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:07.259 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:07.260 UTC [660] DEBUG:  building index "pg_toast_31590_index" on table "pg_toast_31590" serially
2025-04-19 19:11:07.261 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:07.261 UTC [660] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:07.261 UTC [660] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:07.263 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:07.266 UTC [660] DEBUG:  building index "pg_toast_31613_index" on table "pg_toast_31613" serially
2025-04-19 19:11:07.268 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:07.268 UTC [660] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:07.268 UTC [660] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:07.270 UTC [660] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:07.270 UTC [660] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:07.276 UTC [660] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:07.276 UTC [660] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:07.280 UTC [660] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:07.280 UTC [660] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:07.284 UTC [660] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:07.284 UTC [660] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:07.286 UTC [660] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:07.286 UTC [660] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:07.289 UTC [660] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:07.289 UTC [660] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:07.291 UTC [660] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:07.291 UTC [660] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:07.292 UTC [660] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:07.292 UTC [660] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:07.294 UTC [660] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:07.294 UTC [660] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:07.295 UTC [660] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:07.295 UTC [660] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:07.296 UTC [660] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:07.296 UTC [660] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:07.317 UTC [660] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:07.614 UTC [660] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Nb3qYYYzqaF5OJGy/.vEOuFUcuGbZnvERR4IIHNmisHIhBglNEKw6')
	                RETURNING id, username, email
	                
2025-04-19 19:11:07.616 UTC [660] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:07.616 UTC [660] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:07.617 UTC [660] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:11:07.632 UTC [660] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:07.634 UTC [660] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:07.637 UTC [660] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:07.643 UTC [660] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:07.643 UTC [660] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:07.647 UTC [660] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:07.651 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:07.653 UTC [660] DEBUG:  building index "pg_toast_31649_index" on table "pg_toast_31649" serially
2025-04-19 19:11:07.654 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:07.654 UTC [660] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:07.654 UTC [660] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:07.655 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:07.655 UTC [660] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:07.655 UTC [660] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:07.656 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:07.657 UTC [660] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:07.657 UTC [660] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:07.657 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:07.658 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:07.658 UTC [660] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:07.658 UTC [660] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:07.659 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:07.659 UTC [660] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:07.659 UTC [660] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:07.660 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:07.661 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:07.661 UTC [660] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:07.661 UTC [660] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:07.662 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:07.662 UTC [660] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:07.662 UTC [660] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:07.663 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:07.664 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:07.664 UTC [660] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:07.664 UTC [660] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:07.666 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:07.667 UTC [660] DEBUG:  building index "pg_toast_31710_index" on table "pg_toast_31710" serially
2025-04-19 19:11:07.667 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:07.668 UTC [660] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:07.668 UTC [660] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:07.669 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:07.673 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:07.673 UTC [660] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:07.673 UTC [660] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:07.674 UTC [660] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:07.674 UTC [660] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:07.674 UTC [660] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:07.676 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:07.677 UTC [660] DEBUG:  building index "pg_toast_31743_index" on table "pg_toast_31743" serially
2025-04-19 19:11:07.678 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:07.678 UTC [660] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:07.678 UTC [660] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:07.679 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:07.680 UTC [660] DEBUG:  building index "pg_toast_31754_index" on table "pg_toast_31754" serially
2025-04-19 19:11:07.681 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:07.681 UTC [660] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:07.681 UTC [660] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:07.683 UTC [660] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:07.683 UTC [660] DEBUG:  building index "pg_toast_31777_index" on table "pg_toast_31777" serially
2025-04-19 19:11:07.684 UTC [660] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:07.684 UTC [660] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:07.684 UTC [660] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:07.686 UTC [660] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:07.686 UTC [660] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:07.687 UTC [660] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:07.687 UTC [660] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:07.688 UTC [660] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:07.688 UTC [660] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:07.689 UTC [660] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:07.689 UTC [660] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:07.690 UTC [660] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:07.690 UTC [660] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:07.691 UTC [660] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:07.691 UTC [660] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:07.692 UTC [660] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:07.692 UTC [660] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:07.692 UTC [660] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:07.692 UTC [660] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:07.693 UTC [660] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:07.693 UTC [660] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:07.694 UTC [660] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:07.694 UTC [660] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:07.695 UTC [660] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:07.695 UTC [660] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:07.709 UTC [660] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:07.984 UTC [660] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$LfeQ/qTHuSrxHcRUM/37JuBWjZyKJTYXTob22Y.mONLknMbdgsA6y')
	                RETURNING id, username, email
	                
2025-04-19 19:11:07.985 UTC [660] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:07.985 UTC [660] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:19.919 UTC [660] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:11:20.398 UTC [660] DEBUG:  unexpected EOF on client connection
2025-04-19 19:11:22.948 UTC [668] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:22.961 UTC [668] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:22.975 UTC [668] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:22.975 UTC [668] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:22.980 UTC [668] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:22.984 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:22.988 UTC [668] DEBUG:  building index "pg_toast_31813_index" on table "pg_toast_31813" serially
2025-04-19 19:11:22.989 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:22.990 UTC [668] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:22.990 UTC [668] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:22.991 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:22.991 UTC [668] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:22.991 UTC [668] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:22.992 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:22.992 UTC [668] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:22.992 UTC [668] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:22.993 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:22.995 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:22.995 UTC [668] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:22.995 UTC [668] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:22.996 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:22.996 UTC [668] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:22.996 UTC [668] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:22.997 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:22.998 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:22.999 UTC [668] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:22.999 UTC [668] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:22.999 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:22.999 UTC [668] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:22.999 UTC [668] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:23.001 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:23.002 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:23.002 UTC [668] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:23.002 UTC [668] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:23.003 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:23.006 UTC [668] DEBUG:  building index "pg_toast_31874_index" on table "pg_toast_31874" serially
2025-04-19 19:11:23.008 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:23.008 UTC [668] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:23.008 UTC [668] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:23.010 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:23.011 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:23.011 UTC [668] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:23.011 UTC [668] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:23.012 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:23.013 UTC [668] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:23.013 UTC [668] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:23.014 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:23.015 UTC [668] DEBUG:  building index "pg_toast_31907_index" on table "pg_toast_31907" serially
2025-04-19 19:11:23.016 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:23.016 UTC [668] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:23.016 UTC [668] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:23.017 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:23.018 UTC [668] DEBUG:  building index "pg_toast_31918_index" on table "pg_toast_31918" serially
2025-04-19 19:11:23.019 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:23.019 UTC [668] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:23.019 UTC [668] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:23.021 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:23.022 UTC [668] DEBUG:  building index "pg_toast_31941_index" on table "pg_toast_31941" serially
2025-04-19 19:11:23.023 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:23.023 UTC [668] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:23.023 UTC [668] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:23.024 UTC [668] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:23.024 UTC [668] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:23.025 UTC [668] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:23.025 UTC [668] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:23.026 UTC [668] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:23.026 UTC [668] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:23.028 UTC [668] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:23.028 UTC [668] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:23.029 UTC [668] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:23.029 UTC [668] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:23.030 UTC [668] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:23.030 UTC [668] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:23.031 UTC [668] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:23.031 UTC [668] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:23.032 UTC [668] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:23.032 UTC [668] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:23.033 UTC [668] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:23.033 UTC [668] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:23.034 UTC [668] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:23.034 UTC [668] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:23.035 UTC [668] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:23.035 UTC [668] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:23.050 UTC [668] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:23.401 UTC [668] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5IAU//ithwS1aZbPsi4fXeurhaXs9ad.WHPUbScx68GOjBzdL5xpS')
	                RETURNING id, username, email
	                
2025-04-19 19:11:23.402 UTC [668] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:23.403 UTC [668] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:23.404 UTC [668] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:11:23.414 UTC [668] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:23.419 UTC [668] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:23.422 UTC [668] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:23.428 UTC [668] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:23.428 UTC [668] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:23.433 UTC [668] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:23.437 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:23.438 UTC [668] DEBUG:  building index "pg_toast_31977_index" on table "pg_toast_31977" serially
2025-04-19 19:11:23.439 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:23.439 UTC [668] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:23.439 UTC [668] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:23.440 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:23.440 UTC [668] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:23.441 UTC [668] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:23.441 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:23.442 UTC [668] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:23.442 UTC [668] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:23.443 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:23.444 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:23.444 UTC [668] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:23.444 UTC [668] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:23.445 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:23.445 UTC [668] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:23.445 UTC [668] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:23.446 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:23.447 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:23.447 UTC [668] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:23.447 UTC [668] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:23.448 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:23.449 UTC [668] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:23.449 UTC [668] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:23.450 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:23.451 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:23.451 UTC [668] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:23.451 UTC [668] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:23.455 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:23.457 UTC [668] DEBUG:  building index "pg_toast_32038_index" on table "pg_toast_32038" serially
2025-04-19 19:11:23.458 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:23.458 UTC [668] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:23.458 UTC [668] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:23.459 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:23.460 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:23.461 UTC [668] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:23.461 UTC [668] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:23.463 UTC [668] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:23.464 UTC [668] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:23.464 UTC [668] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:23.469 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:23.470 UTC [668] DEBUG:  building index "pg_toast_32071_index" on table "pg_toast_32071" serially
2025-04-19 19:11:23.471 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:23.472 UTC [668] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:23.472 UTC [668] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:23.473 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:23.474 UTC [668] DEBUG:  building index "pg_toast_32082_index" on table "pg_toast_32082" serially
2025-04-19 19:11:23.476 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:23.476 UTC [668] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:23.476 UTC [668] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:23.478 UTC [668] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:23.479 UTC [668] DEBUG:  building index "pg_toast_32105_index" on table "pg_toast_32105" serially
2025-04-19 19:11:23.480 UTC [668] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:23.480 UTC [668] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:23.481 UTC [668] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:23.482 UTC [668] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:23.482 UTC [668] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:23.483 UTC [668] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:23.483 UTC [668] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:23.485 UTC [668] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:23.485 UTC [668] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:23.497 UTC [668] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:23.497 UTC [668] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:23.500 UTC [668] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:23.500 UTC [668] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:23.503 UTC [668] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:23.503 UTC [668] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:23.504 UTC [668] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:23.504 UTC [668] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:23.506 UTC [668] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:23.506 UTC [668] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:23.507 UTC [668] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:23.507 UTC [668] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:23.509 UTC [668] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:23.509 UTC [668] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:23.510 UTC [668] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:23.510 UTC [668] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:23.521 UTC [668] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:23.875 UTC [668] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$uJJWYWKrQiBpMUzPBY0HYOXk0ZGapsKvVV2N.3oUhiDot7Xrh1VVm')
	                RETURNING id, username, email
	                
2025-04-19 19:11:23.878 UTC [668] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:23.879 UTC [668] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:36.141 UTC [683] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:11:36.340 UTC [668] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:11:36.363 UTC [683] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:11:36.652 UTC [668] DEBUG:  unexpected EOF on client connection
2025-04-19 19:11:39.299 UTC [684] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:39.312 UTC [684] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:39.318 UTC [684] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:39.318 UTC [684] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:39.323 UTC [684] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:39.327 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:39.330 UTC [684] DEBUG:  building index "pg_toast_32142_index" on table "pg_toast_32142" serially
2025-04-19 19:11:39.332 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:39.332 UTC [684] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:39.333 UTC [684] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:39.335 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:39.336 UTC [684] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:39.336 UTC [684] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:39.338 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:39.338 UTC [684] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:39.338 UTC [684] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:39.347 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:39.350 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:39.351 UTC [684] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:39.351 UTC [684] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:39.353 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:39.353 UTC [684] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:39.353 UTC [684] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:39.355 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:39.358 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:39.358 UTC [684] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:39.358 UTC [684] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:39.359 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:39.359 UTC [684] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:39.360 UTC [684] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:39.361 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:39.363 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:39.363 UTC [684] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:39.363 UTC [684] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:39.365 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:39.367 UTC [684] DEBUG:  building index "pg_toast_32203_index" on table "pg_toast_32203" serially
2025-04-19 19:11:39.369 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:39.371 UTC [684] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:39.371 UTC [684] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:39.375 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:39.377 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:39.378 UTC [684] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:39.378 UTC [684] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:39.378 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:39.379 UTC [684] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:39.379 UTC [684] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:39.380 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:39.382 UTC [684] DEBUG:  building index "pg_toast_32236_index" on table "pg_toast_32236" serially
2025-04-19 19:11:39.383 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:39.383 UTC [684] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:39.383 UTC [684] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:39.384 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:39.385 UTC [684] DEBUG:  building index "pg_toast_32247_index" on table "pg_toast_32247" serially
2025-04-19 19:11:39.386 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:39.386 UTC [684] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:39.386 UTC [684] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:39.388 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:39.389 UTC [684] DEBUG:  building index "pg_toast_32270_index" on table "pg_toast_32270" serially
2025-04-19 19:11:39.390 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:39.390 UTC [684] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:39.390 UTC [684] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:39.391 UTC [684] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:39.391 UTC [684] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:39.392 UTC [684] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:39.392 UTC [684] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:39.393 UTC [684] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:39.393 UTC [684] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:39.394 UTC [684] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:39.394 UTC [684] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:39.395 UTC [684] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:39.395 UTC [684] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:39.396 UTC [684] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:39.396 UTC [684] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:39.397 UTC [684] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:39.397 UTC [684] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:39.398 UTC [684] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 19:11:39.398 UTC [684] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:39.398 UTC [684] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:39.399 UTC [684] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:39.399 UTC [684] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:39.400 UTC [684] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:39.400 UTC [684] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:39.401 UTC [684] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:39.401 UTC [684] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:39.414 UTC [684] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:39.714 UTC [684] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4SA6RfFDIn9SLVv4Rg3OwOxFFW8UbjnHXQcwDXumfYzRfnmgivGZG')
	                RETURNING id, username, email
	                
2025-04-19 19:11:39.715 UTC [684] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:39.715 UTC [684] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:39.716 UTC [684] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:11:39.719 UTC [684] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 19:11:39.719 UTC [684] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 19:11:39.730 UTC [684] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:39.732 UTC [684] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:39.735 UTC [684] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:39.739 UTC [684] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:39.739 UTC [684] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:39.743 UTC [684] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:39.747 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:39.748 UTC [684] DEBUG:  building index "pg_toast_32306_index" on table "pg_toast_32306" serially
2025-04-19 19:11:39.750 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:39.750 UTC [684] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:39.750 UTC [684] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:39.751 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:39.751 UTC [684] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:39.751 UTC [684] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:39.752 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:39.753 UTC [684] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:39.753 UTC [684] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:39.754 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:39.754 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:39.755 UTC [684] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:39.755 UTC [684] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:39.756 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:39.756 UTC [684] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:39.756 UTC [684] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:39.758 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:39.762 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:39.763 UTC [684] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:39.763 UTC [684] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:39.765 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:39.765 UTC [684] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:39.765 UTC [684] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:39.766 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:39.767 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:39.767 UTC [684] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:39.767 UTC [684] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:39.769 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:39.770 UTC [684] DEBUG:  building index "pg_toast_32367_index" on table "pg_toast_32367" serially
2025-04-19 19:11:39.771 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:39.771 UTC [684] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:39.771 UTC [684] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:39.773 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:39.776 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:39.777 UTC [684] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:39.777 UTC [684] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:39.778 UTC [684] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:39.778 UTC [684] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:39.778 UTC [684] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:39.779 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:39.780 UTC [684] DEBUG:  building index "pg_toast_32400_index" on table "pg_toast_32400" serially
2025-04-19 19:11:39.781 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:39.782 UTC [684] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:39.782 UTC [684] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:39.783 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:39.784 UTC [684] DEBUG:  building index "pg_toast_32411_index" on table "pg_toast_32411" serially
2025-04-19 19:11:39.785 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:39.785 UTC [684] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:39.785 UTC [684] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:39.787 UTC [684] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:39.788 UTC [684] DEBUG:  building index "pg_toast_32434_index" on table "pg_toast_32434" serially
2025-04-19 19:11:39.789 UTC [684] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:39.789 UTC [684] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:39.789 UTC [684] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:39.790 UTC [684] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:39.790 UTC [684] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:39.791 UTC [684] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:39.791 UTC [684] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:39.792 UTC [684] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:39.792 UTC [684] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:39.793 UTC [684] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:39.793 UTC [684] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:39.794 UTC [684] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:39.794 UTC [684] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:39.795 UTC [684] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:39.795 UTC [684] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:39.796 UTC [684] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:39.796 UTC [684] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:39.797 UTC [684] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:39.797 UTC [684] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:39.798 UTC [684] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:39.798 UTC [684] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:39.799 UTC [684] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:39.799 UTC [684] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:39.800 UTC [684] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:39.800 UTC [684] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:39.809 UTC [684] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:40.102 UTC [684] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZSm/YPaxRdetMtxIG1UxNuppZatKlazMrI555p0sp2TKeovNXLqei')
	                RETURNING id, username, email
	                
2025-04-19 19:11:40.104 UTC [684] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:40.104 UTC [684] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:52.443 UTC [684] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:11:52.772 UTC [684] DEBUG:  unexpected EOF on client connection
2025-04-19 19:11:55.717 UTC [700] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:55.749 UTC [700] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:55.765 UTC [700] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:55.765 UTC [700] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:55.770 UTC [700] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:55.774 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:55.782 UTC [700] DEBUG:  building index "pg_toast_32470_index" on table "pg_toast_32470" serially
2025-04-19 19:11:55.785 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:55.786 UTC [700] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:55.786 UTC [700] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:55.787 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:55.789 UTC [700] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:55.789 UTC [700] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:55.791 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:55.792 UTC [700] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:55.792 UTC [700] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:55.796 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:55.799 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:55.800 UTC [700] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:55.801 UTC [700] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:55.802 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:55.802 UTC [700] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:55.802 UTC [700] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:55.803 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:55.805 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:55.805 UTC [700] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:55.805 UTC [700] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:55.806 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:55.806 UTC [700] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:55.806 UTC [700] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:55.808 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:55.809 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:55.810 UTC [700] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:55.810 UTC [700] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:55.811 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:55.813 UTC [700] DEBUG:  building index "pg_toast_32531_index" on table "pg_toast_32531" serially
2025-04-19 19:11:55.815 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:55.815 UTC [700] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:55.815 UTC [700] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:55.816 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:55.817 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:55.818 UTC [700] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:55.818 UTC [700] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:55.819 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:55.819 UTC [700] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:55.819 UTC [700] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:55.820 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:55.822 UTC [700] DEBUG:  building index "pg_toast_32564_index" on table "pg_toast_32564" serially
2025-04-19 19:11:55.822 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:55.823 UTC [700] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:55.823 UTC [700] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:55.823 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:55.825 UTC [700] DEBUG:  building index "pg_toast_32575_index" on table "pg_toast_32575" serially
2025-04-19 19:11:55.826 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:55.826 UTC [700] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:55.826 UTC [700] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:55.828 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:55.829 UTC [700] DEBUG:  building index "pg_toast_32598_index" on table "pg_toast_32598" serially
2025-04-19 19:11:55.829 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:55.830 UTC [700] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:55.830 UTC [700] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:55.831 UTC [700] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:55.831 UTC [700] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:55.832 UTC [700] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:55.832 UTC [700] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:55.833 UTC [700] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:55.833 UTC [700] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:55.834 UTC [700] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:55.834 UTC [700] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:55.835 UTC [700] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:55.835 UTC [700] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:55.836 UTC [700] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:55.836 UTC [700] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:55.837 UTC [700] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:55.837 UTC [700] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:55.839 UTC [700] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:55.839 UTC [700] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:55.840 UTC [700] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:55.841 UTC [700] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:55.842 UTC [700] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:55.842 UTC [700] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:55.844 UTC [700] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:55.844 UTC [700] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:55.867 UTC [700] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:56.206 UTC [700] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jQBYrSnE59CzKtklDAHp.OBVHfgC0VxrICvZbvBWVa0KF3tTjVA1i')
	                RETURNING id, username, email
	                
2025-04-19 19:11:56.211 UTC [700] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:56.214 UTC [700] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:11:56.218 UTC [700] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:11:56.314 UTC [700] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:56.327 UTC [700] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:11:56.347 UTC [700] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:11:56.398 UTC [700] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:11:56.398 UTC [700] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:11:56.411 UTC [700] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:11:56.417 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:11:56.420 UTC [700] DEBUG:  building index "pg_toast_32634_index" on table "pg_toast_32634" serially
2025-04-19 19:11:56.421 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:11:56.422 UTC [700] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:11:56.422 UTC [700] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:11:56.422 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:11:56.423 UTC [700] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:11:56.423 UTC [700] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:11:56.423 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:11:56.424 UTC [700] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:11:56.424 UTC [700] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:11:56.424 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:11:56.426 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:11:56.426 UTC [700] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:11:56.426 UTC [700] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:11:56.427 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:11:56.427 UTC [700] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:11:56.427 UTC [700] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:11:56.428 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:11:56.429 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:11:56.429 UTC [700] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:11:56.429 UTC [700] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:11:56.430 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:11:56.431 UTC [700] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:11:56.431 UTC [700] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:11:56.437 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:11:56.438 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:11:56.439 UTC [700] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:11:56.439 UTC [700] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:11:56.441 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:11:56.447 UTC [700] DEBUG:  building index "pg_toast_32695_index" on table "pg_toast_32695" serially
2025-04-19 19:11:56.448 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:11:56.449 UTC [700] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:11:56.449 UTC [700] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:11:56.450 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:11:56.452 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:11:56.452 UTC [700] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:11:56.452 UTC [700] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:11:56.453 UTC [700] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:11:56.454 UTC [700] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:11:56.454 UTC [700] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:11:56.455 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:11:56.457 UTC [700] DEBUG:  building index "pg_toast_32728_index" on table "pg_toast_32728" serially
2025-04-19 19:11:56.458 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:11:56.458 UTC [700] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:11:56.458 UTC [700] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:11:56.459 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:11:56.460 UTC [700] DEBUG:  building index "pg_toast_32739_index" on table "pg_toast_32739" serially
2025-04-19 19:11:56.461 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:11:56.462 UTC [700] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:11:56.462 UTC [700] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:11:56.463 UTC [700] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:11:56.464 UTC [700] DEBUG:  building index "pg_toast_32762_index" on table "pg_toast_32762" serially
2025-04-19 19:11:56.465 UTC [700] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:11:56.465 UTC [700] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:11:56.465 UTC [700] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:11:56.467 UTC [700] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:11:56.467 UTC [700] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:11:56.468 UTC [700] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:11:56.468 UTC [700] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:11:56.469 UTC [700] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:11:56.469 UTC [700] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:11:56.470 UTC [700] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:11:56.470 UTC [700] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:11:56.471 UTC [700] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:11:56.471 UTC [700] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:11:56.472 UTC [700] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:11:56.472 UTC [700] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:11:56.473 UTC [700] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:11:56.473 UTC [700] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:11:56.475 UTC [700] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:11:56.475 UTC [700] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:11:56.478 UTC [700] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:11:56.478 UTC [700] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:11:56.480 UTC [700] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:11:56.480 UTC [700] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:11:56.483 UTC [700] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:11:56.483 UTC [700] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:11:56.494 UTC [700] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:11:56.773 UTC [700] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Jbsl6Lmc9L4r5NzaStyGeubyVfW4Vz8EGzCHAp3zWSrtE/APlfsgW')
	                RETURNING id, username, email
	                
2025-04-19 19:11:56.775 UTC [700] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:11:56.775 UTC [700] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:06.252 UTC [708] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:12:08.491 UTC [700] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:12:08.815 UTC [700] DEBUG:  unexpected EOF on client connection
2025-04-19 19:12:11.384 UTC [709] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:11.391 UTC [709] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:11.402 UTC [709] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:11.402 UTC [709] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:11.407 UTC [709] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:11.412 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:11.419 UTC [709] DEBUG:  building index "pg_toast_32798_index" on table "pg_toast_32798" serially
2025-04-19 19:12:11.421 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:11.421 UTC [709] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:11.421 UTC [709] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:11.422 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:11.423 UTC [709] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:11.423 UTC [709] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:11.423 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:11.424 UTC [709] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:11.424 UTC [709] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:11.425 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:11.426 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:11.426 UTC [709] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:11.426 UTC [709] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:11.427 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:11.427 UTC [709] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:11.427 UTC [709] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:11.428 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:11.429 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:11.430 UTC [709] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:11.430 UTC [709] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:11.431 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:11.431 UTC [709] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:11.431 UTC [709] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:11.432 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:11.433 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:11.434 UTC [709] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:11.434 UTC [709] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:11.435 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:11.437 UTC [709] DEBUG:  building index "pg_toast_32859_index" on table "pg_toast_32859" serially
2025-04-19 19:12:11.438 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:11.438 UTC [709] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:11.438 UTC [709] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:11.439 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:11.440 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:11.441 UTC [709] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:11.441 UTC [709] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:11.441 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:11.442 UTC [709] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:11.442 UTC [709] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:11.443 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:11.445 UTC [709] DEBUG:  building index "pg_toast_32892_index" on table "pg_toast_32892" serially
2025-04-19 19:12:11.445 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:11.446 UTC [709] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:11.446 UTC [709] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:11.446 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:11.451 UTC [709] DEBUG:  building index "pg_toast_32903_index" on table "pg_toast_32903" serially
2025-04-19 19:12:11.452 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:11.452 UTC [709] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:11.452 UTC [709] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:11.454 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:11.455 UTC [709] DEBUG:  building index "pg_toast_32926_index" on table "pg_toast_32926" serially
2025-04-19 19:12:11.456 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:11.456 UTC [709] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:11.456 UTC [709] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:11.458 UTC [709] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:11.458 UTC [709] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:11.459 UTC [709] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:11.459 UTC [709] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:11.461 UTC [709] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:11.461 UTC [709] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:11.462 UTC [709] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:11.462 UTC [709] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:11.463 UTC [709] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:11.463 UTC [709] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:11.465 UTC [709] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:11.465 UTC [709] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:11.466 UTC [709] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:11.466 UTC [709] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:11.467 UTC [709] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:11.467 UTC [709] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:11.468 UTC [709] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:11.468 UTC [709] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:11.469 UTC [709] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:11.469 UTC [709] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:11.470 UTC [709] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:11.470 UTC [709] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:11.489 UTC [709] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:11.794 UTC [709] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.N1s8fmjqK2UyFZmDtSA6OD6cYXoLjbX8.G/UzKX6VjM3sFuYDMKa')
	                RETURNING id, username, email
	                
2025-04-19 19:12:11.795 UTC [709] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:11.796 UTC [709] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:11.797 UTC [709] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:12:11.807 UTC [709] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:11.809 UTC [709] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:11.812 UTC [709] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:11.817 UTC [709] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:11.817 UTC [709] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:11.820 UTC [709] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:11.826 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:11.828 UTC [709] DEBUG:  building index "pg_toast_32962_index" on table "pg_toast_32962" serially
2025-04-19 19:12:11.830 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:11.831 UTC [709] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:11.831 UTC [709] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:11.832 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:11.832 UTC [709] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:11.832 UTC [709] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:11.833 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:11.833 UTC [709] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:11.833 UTC [709] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:11.834 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:11.835 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:11.836 UTC [709] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:11.836 UTC [709] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:11.837 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:11.837 UTC [709] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:11.837 UTC [709] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:11.838 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:11.840 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:11.840 UTC [709] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:11.840 UTC [709] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:11.841 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:11.842 UTC [709] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:11.842 UTC [709] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:11.843 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:11.844 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:11.845 UTC [709] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:11.845 UTC [709] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:11.846 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:11.847 UTC [709] DEBUG:  building index "pg_toast_33023_index" on table "pg_toast_33023" serially
2025-04-19 19:12:11.848 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:11.848 UTC [709] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:11.849 UTC [709] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:11.850 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:11.851 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:11.851 UTC [709] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:11.851 UTC [709] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:11.852 UTC [709] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:11.852 UTC [709] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:11.852 UTC [709] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:11.853 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:11.854 UTC [709] DEBUG:  building index "pg_toast_33056_index" on table "pg_toast_33056" serially
2025-04-19 19:12:11.855 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:11.855 UTC [709] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:11.855 UTC [709] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:11.856 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:11.857 UTC [709] DEBUG:  building index "pg_toast_33067_index" on table "pg_toast_33067" serially
2025-04-19 19:12:11.859 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:11.859 UTC [709] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:11.859 UTC [709] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:11.861 UTC [709] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:11.862 UTC [709] DEBUG:  building index "pg_toast_33090_index" on table "pg_toast_33090" serially
2025-04-19 19:12:11.863 UTC [709] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:11.863 UTC [709] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:11.863 UTC [709] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:11.864 UTC [709] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:11.864 UTC [709] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:11.865 UTC [709] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:11.865 UTC [709] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:11.866 UTC [709] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:11.866 UTC [709] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:11.869 UTC [709] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:11.869 UTC [709] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:11.870 UTC [709] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:11.870 UTC [709] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:11.871 UTC [709] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:11.871 UTC [709] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:11.872 UTC [709] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:11.872 UTC [709] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:11.873 UTC [709] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:11.873 UTC [709] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:11.874 UTC [709] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:11.874 UTC [709] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:11.875 UTC [709] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:11.875 UTC [709] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:11.876 UTC [709] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:11.876 UTC [709] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:11.891 UTC [709] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:12.178 UTC [709] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jQIf/9sMjfTj5hEfc31.kuQ10pqRJ81.i/QFMC1gwSHtJBCzr94i2')
	                RETURNING id, username, email
	                
2025-04-19 19:12:12.179 UTC [709] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:12.180 UTC [709] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:24.646 UTC [709] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:12:24.948 UTC [709] DEBUG:  unexpected EOF on client connection
2025-04-19 19:12:26.708 UTC [724] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:26.723 UTC [724] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:26.730 UTC [724] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:26.730 UTC [724] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:26.734 UTC [724] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:26.737 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:26.745 UTC [724] DEBUG:  building index "pg_toast_33126_index" on table "pg_toast_33126" serially
2025-04-19 19:12:26.748 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:26.748 UTC [724] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:26.748 UTC [724] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:26.750 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:26.750 UTC [724] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:26.750 UTC [724] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:26.750 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:26.751 UTC [724] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:26.751 UTC [724] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:26.751 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:26.752 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:26.753 UTC [724] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:26.753 UTC [724] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:26.753 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:26.754 UTC [724] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:26.754 UTC [724] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:26.754 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:26.755 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:26.756 UTC [724] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:26.756 UTC [724] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:26.757 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:26.757 UTC [724] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:26.757 UTC [724] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:26.759 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:26.760 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:26.760 UTC [724] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:26.760 UTC [724] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:26.761 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:26.763 UTC [724] DEBUG:  building index "pg_toast_33187_index" on table "pg_toast_33187" serially
2025-04-19 19:12:26.764 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:26.764 UTC [724] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:26.764 UTC [724] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:26.765 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:26.766 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:26.766 UTC [724] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:26.766 UTC [724] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:26.768 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:26.768 UTC [724] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:26.768 UTC [724] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:26.770 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:26.772 UTC [724] DEBUG:  building index "pg_toast_33220_index" on table "pg_toast_33220" serially
2025-04-19 19:12:26.773 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:26.773 UTC [724] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:26.773 UTC [724] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:26.774 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:26.775 UTC [724] DEBUG:  building index "pg_toast_33231_index" on table "pg_toast_33231" serially
2025-04-19 19:12:26.776 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:26.776 UTC [724] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:26.776 UTC [724] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:26.777 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:26.779 UTC [724] DEBUG:  building index "pg_toast_33254_index" on table "pg_toast_33254" serially
2025-04-19 19:12:26.780 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:26.780 UTC [724] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:26.780 UTC [724] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:26.781 UTC [724] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:26.781 UTC [724] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:26.782 UTC [724] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:26.783 UTC [724] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:26.784 UTC [724] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:26.784 UTC [724] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:26.785 UTC [724] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:26.785 UTC [724] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:26.785 UTC [724] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:26.785 UTC [724] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:26.788 UTC [724] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:26.788 UTC [724] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:26.789 UTC [724] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:26.789 UTC [724] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:26.791 UTC [724] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:26.791 UTC [724] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:26.791 UTC [724] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:26.791 UTC [724] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:26.793 UTC [724] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:26.793 UTC [724] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:26.794 UTC [724] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:26.794 UTC [724] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:26.805 UTC [724] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:27.125 UTC [724] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$mnBZn/499pR7edV7QJJ0H.Utevwi6W7Vr5NfNEzHCNYnfweLMAH2K')
	                RETURNING id, username, email
	                
2025-04-19 19:12:27.126 UTC [724] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:27.127 UTC [724] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:27.128 UTC [724] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:12:27.139 UTC [724] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:27.140 UTC [724] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:27.144 UTC [724] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:27.151 UTC [724] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:27.151 UTC [724] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:27.155 UTC [724] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:27.160 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:27.162 UTC [724] DEBUG:  building index "pg_toast_33290_index" on table "pg_toast_33290" serially
2025-04-19 19:12:27.163 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:27.163 UTC [724] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:27.163 UTC [724] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:27.164 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:27.164 UTC [724] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:27.165 UTC [724] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:27.165 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:27.165 UTC [724] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:27.166 UTC [724] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:27.166 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:27.167 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:27.168 UTC [724] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:27.168 UTC [724] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:27.168 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:27.169 UTC [724] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:27.169 UTC [724] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:27.170 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:27.170 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:27.171 UTC [724] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:27.171 UTC [724] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:27.172 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:27.172 UTC [724] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:27.172 UTC [724] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:27.173 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:27.174 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:27.175 UTC [724] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:27.175 UTC [724] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:27.178 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:27.180 UTC [724] DEBUG:  building index "pg_toast_33351_index" on table "pg_toast_33351" serially
2025-04-19 19:12:27.182 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:27.182 UTC [724] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:27.182 UTC [724] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:27.183 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:27.184 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:27.184 UTC [724] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:27.184 UTC [724] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:27.185 UTC [724] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:27.185 UTC [724] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:27.186 UTC [724] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:27.187 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:27.188 UTC [724] DEBUG:  building index "pg_toast_33384_index" on table "pg_toast_33384" serially
2025-04-19 19:12:27.189 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:27.189 UTC [724] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:27.189 UTC [724] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:27.191 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:27.192 UTC [724] DEBUG:  building index "pg_toast_33395_index" on table "pg_toast_33395" serially
2025-04-19 19:12:27.193 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:27.194 UTC [724] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:27.194 UTC [724] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:27.195 UTC [724] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:27.196 UTC [724] DEBUG:  building index "pg_toast_33418_index" on table "pg_toast_33418" serially
2025-04-19 19:12:27.197 UTC [724] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:27.197 UTC [724] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:27.197 UTC [724] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:27.198 UTC [724] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:27.198 UTC [724] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:27.199 UTC [724] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:27.199 UTC [724] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:27.200 UTC [724] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:27.200 UTC [724] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:27.200 UTC [724] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:27.200 UTC [724] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:27.201 UTC [724] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:27.201 UTC [724] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:27.202 UTC [724] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:27.202 UTC [724] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:27.203 UTC [724] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:27.203 UTC [724] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:27.205 UTC [724] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:27.205 UTC [724] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:27.206 UTC [724] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:27.206 UTC [724] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:27.207 UTC [724] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:27.207 UTC [724] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:27.207 UTC [724] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:27.207 UTC [724] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:27.215 UTC [724] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:27.461 UTC [724] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$biCrnTPDS6Hj6quRv6X5tOygTjNBR4p2.s/6PQuzCbARD0p4H4gZe')
	                RETURNING id, username, email
	                
2025-04-19 19:12:27.464 UTC [724] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:27.465 UTC [724] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:36.148 UTC [732] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:12:36.401 UTC [732] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:12:40.546 UTC [724] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:12:40.835 UTC [724] DEBUG:  unexpected EOF on client connection
2025-04-19 19:12:42.607 UTC [733] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:42.612 UTC [733] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:42.618 UTC [733] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:42.618 UTC [733] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:42.622 UTC [733] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:42.625 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:42.628 UTC [733] DEBUG:  building index "pg_toast_33455_index" on table "pg_toast_33455" serially
2025-04-19 19:12:42.632 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:42.633 UTC [733] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:42.633 UTC [733] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:42.634 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:42.634 UTC [733] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:42.635 UTC [733] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:42.635 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:42.635 UTC [733] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:42.635 UTC [733] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:42.636 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:42.637 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:42.637 UTC [733] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:42.637 UTC [733] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:42.638 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:42.638 UTC [733] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:42.638 UTC [733] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:42.639 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:42.640 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:42.640 UTC [733] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:42.641 UTC [733] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:42.641 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:42.641 UTC [733] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:42.641 UTC [733] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:42.643 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:42.644 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:42.644 UTC [733] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:42.644 UTC [733] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:42.645 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:42.647 UTC [733] DEBUG:  building index "pg_toast_33516_index" on table "pg_toast_33516" serially
2025-04-19 19:12:42.648 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:42.649 UTC [733] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:42.649 UTC [733] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:42.650 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:42.651 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:42.651 UTC [733] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:42.651 UTC [733] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:42.652 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:42.652 UTC [733] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:42.652 UTC [733] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:42.653 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:42.654 UTC [733] DEBUG:  building index "pg_toast_33549_index" on table "pg_toast_33549" serially
2025-04-19 19:12:42.655 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:42.655 UTC [733] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:42.655 UTC [733] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:42.656 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:42.657 UTC [733] DEBUG:  building index "pg_toast_33560_index" on table "pg_toast_33560" serially
2025-04-19 19:12:42.658 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:42.659 UTC [733] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:42.659 UTC [733] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:42.660 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:42.661 UTC [733] DEBUG:  building index "pg_toast_33583_index" on table "pg_toast_33583" serially
2025-04-19 19:12:42.662 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:42.662 UTC [733] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:42.662 UTC [733] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:42.663 UTC [733] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:42.663 UTC [733] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:42.664 UTC [733] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:42.664 UTC [733] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:42.665 UTC [733] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:42.665 UTC [733] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:42.666 UTC [733] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:42.666 UTC [733] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:42.666 UTC [733] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:42.666 UTC [733] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:42.667 UTC [733] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:42.667 UTC [733] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:42.668 UTC [733] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:42.668 UTC [733] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:42.669 UTC [733] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 19:12:42.669 UTC [733] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:42.669 UTC [733] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:42.670 UTC [733] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:42.670 UTC [733] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:42.671 UTC [733] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:42.671 UTC [733] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:42.672 UTC [733] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:42.672 UTC [733] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:42.681 UTC [733] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:42.949 UTC [733] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$U23kijcQ6vADFk6xZLbNiev5/uSxW9Ir8bV/W7viDxvvHqgZCmFxK')
	                RETURNING id, username, email
	                
2025-04-19 19:12:42.949 UTC [733] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:42.950 UTC [733] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:42.951 UTC [733] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:12:42.954 UTC [733] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 19:12:42.954 UTC [733] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 19:12:42.959 UTC [733] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:42.960 UTC [733] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:42.963 UTC [733] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:42.966 UTC [733] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:42.966 UTC [733] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:42.970 UTC [733] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:42.972 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:42.973 UTC [733] DEBUG:  building index "pg_toast_33619_index" on table "pg_toast_33619" serially
2025-04-19 19:12:42.974 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:42.975 UTC [733] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:42.975 UTC [733] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:42.976 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:42.976 UTC [733] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:42.976 UTC [733] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:42.977 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:42.977 UTC [733] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:42.977 UTC [733] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:42.978 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:42.978 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:42.979 UTC [733] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:42.979 UTC [733] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:42.979 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:42.979 UTC [733] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:42.979 UTC [733] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:42.980 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:42.981 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:42.981 UTC [733] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:42.981 UTC [733] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:42.982 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:42.982 UTC [733] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:42.982 UTC [733] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:42.983 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:42.984 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:42.985 UTC [733] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:42.985 UTC [733] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:42.987 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:42.990 UTC [733] DEBUG:  building index "pg_toast_33680_index" on table "pg_toast_33680" serially
2025-04-19 19:12:42.990 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:42.991 UTC [733] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:42.991 UTC [733] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:42.992 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:42.993 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:42.993 UTC [733] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:42.993 UTC [733] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:42.994 UTC [733] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:42.994 UTC [733] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:42.994 UTC [733] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:42.995 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:42.997 UTC [733] DEBUG:  building index "pg_toast_33713_index" on table "pg_toast_33713" serially
2025-04-19 19:12:42.997 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:42.998 UTC [733] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:42.998 UTC [733] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:42.998 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:42.999 UTC [733] DEBUG:  building index "pg_toast_33724_index" on table "pg_toast_33724" serially
2025-04-19 19:12:43.000 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:43.001 UTC [733] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:43.001 UTC [733] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:43.002 UTC [733] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:43.003 UTC [733] DEBUG:  building index "pg_toast_33747_index" on table "pg_toast_33747" serially
2025-04-19 19:12:43.004 UTC [733] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:43.004 UTC [733] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:43.004 UTC [733] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:43.005 UTC [733] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:43.005 UTC [733] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:43.006 UTC [733] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:43.006 UTC [733] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:43.007 UTC [733] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:43.007 UTC [733] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:43.009 UTC [733] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:43.009 UTC [733] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:43.010 UTC [733] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:43.010 UTC [733] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:43.011 UTC [733] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:43.011 UTC [733] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:43.012 UTC [733] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:43.012 UTC [733] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:43.013 UTC [733] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:43.013 UTC [733] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:43.014 UTC [733] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:43.014 UTC [733] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:43.015 UTC [733] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:43.015 UTC [733] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:43.015 UTC [733] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:43.015 UTC [733] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:43.024 UTC [733] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:43.267 UTC [733] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AgdQZapYAJeZlmgBhPiWPuiMFv1PofhVs0YTT6rJ7esOnkzIYD7PS')
	                RETURNING id, username, email
	                
2025-04-19 19:12:43.268 UTC [733] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:43.269 UTC [733] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:56.581 UTC [733] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:12:56.957 UTC [733] DEBUG:  unexpected EOF on client connection
2025-04-19 19:12:58.953 UTC [748] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:58.960 UTC [748] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:58.970 UTC [748] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:58.970 UTC [748] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:58.974 UTC [748] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:58.978 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:58.981 UTC [748] DEBUG:  building index "pg_toast_33783_index" on table "pg_toast_33783" serially
2025-04-19 19:12:58.982 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:58.983 UTC [748] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:58.983 UTC [748] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:58.985 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:58.985 UTC [748] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:58.985 UTC [748] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:58.986 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:58.986 UTC [748] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:58.986 UTC [748] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:58.987 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:58.988 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:58.988 UTC [748] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:58.988 UTC [748] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:58.989 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:58.989 UTC [748] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:58.989 UTC [748] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:58.990 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:58.991 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:58.992 UTC [748] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:58.992 UTC [748] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:58.992 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:58.993 UTC [748] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:58.993 UTC [748] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:58.994 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:58.995 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:58.995 UTC [748] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:58.995 UTC [748] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:58.996 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:58.998 UTC [748] DEBUG:  building index "pg_toast_33844_index" on table "pg_toast_33844" serially
2025-04-19 19:12:58.998 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:58.999 UTC [748] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:58.999 UTC [748] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:59.000 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:59.001 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:59.001 UTC [748] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:59.001 UTC [748] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:59.002 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:59.002 UTC [748] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:59.002 UTC [748] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:59.003 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:59.005 UTC [748] DEBUG:  building index "pg_toast_33877_index" on table "pg_toast_33877" serially
2025-04-19 19:12:59.006 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:59.006 UTC [748] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:59.006 UTC [748] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:59.007 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:59.009 UTC [748] DEBUG:  building index "pg_toast_33888_index" on table "pg_toast_33888" serially
2025-04-19 19:12:59.010 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:59.010 UTC [748] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:59.010 UTC [748] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:59.016 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:59.018 UTC [748] DEBUG:  building index "pg_toast_33911_index" on table "pg_toast_33911" serially
2025-04-19 19:12:59.019 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:59.020 UTC [748] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:59.020 UTC [748] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:59.021 UTC [748] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:59.021 UTC [748] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:59.022 UTC [748] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:59.022 UTC [748] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:59.023 UTC [748] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:59.023 UTC [748] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:59.024 UTC [748] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:59.024 UTC [748] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:59.025 UTC [748] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:59.025 UTC [748] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:59.026 UTC [748] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:59.026 UTC [748] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:59.027 UTC [748] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:59.027 UTC [748] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:59.028 UTC [748] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:59.028 UTC [748] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:59.029 UTC [748] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:59.029 UTC [748] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:59.030 UTC [748] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:59.030 UTC [748] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:59.031 UTC [748] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:59.031 UTC [748] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:59.042 UTC [748] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:59.315 UTC [748] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$iyecq0UhZcAvZ6P7PrihYumfCaflqQp3suThTf4THapMNLOJM9de2')
	                RETURNING id, username, email
	                
2025-04-19 19:12:59.316 UTC [748] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:59.316 UTC [748] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:12:59.317 UTC [748] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:12:59.335 UTC [748] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:59.336 UTC [748] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:12:59.338 UTC [748] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:12:59.343 UTC [748] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:12:59.343 UTC [748] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:12:59.346 UTC [748] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:12:59.349 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:12:59.350 UTC [748] DEBUG:  building index "pg_toast_33947_index" on table "pg_toast_33947" serially
2025-04-19 19:12:59.352 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:12:59.352 UTC [748] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:12:59.352 UTC [748] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:12:59.354 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:12:59.354 UTC [748] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:12:59.354 UTC [748] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:12:59.355 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:12:59.356 UTC [748] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:12:59.356 UTC [748] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:12:59.357 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:12:59.359 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:12:59.359 UTC [748] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:12:59.359 UTC [748] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:12:59.361 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:12:59.361 UTC [748] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:12:59.361 UTC [748] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:12:59.362 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:12:59.363 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:12:59.363 UTC [748] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:12:59.363 UTC [748] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:12:59.364 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:12:59.364 UTC [748] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:12:59.364 UTC [748] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:12:59.365 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:12:59.366 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:12:59.366 UTC [748] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:12:59.366 UTC [748] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:12:59.367 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:12:59.368 UTC [748] DEBUG:  building index "pg_toast_34008_index" on table "pg_toast_34008" serially
2025-04-19 19:12:59.369 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:12:59.370 UTC [748] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:12:59.370 UTC [748] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:12:59.371 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:12:59.372 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:12:59.372 UTC [748] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:12:59.372 UTC [748] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:12:59.373 UTC [748] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:12:59.373 UTC [748] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:12:59.373 UTC [748] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:12:59.374 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:12:59.375 UTC [748] DEBUG:  building index "pg_toast_34041_index" on table "pg_toast_34041" serially
2025-04-19 19:12:59.376 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:12:59.376 UTC [748] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:12:59.376 UTC [748] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:12:59.377 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:12:59.378 UTC [748] DEBUG:  building index "pg_toast_34052_index" on table "pg_toast_34052" serially
2025-04-19 19:12:59.379 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:12:59.379 UTC [748] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:12:59.379 UTC [748] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:12:59.380 UTC [748] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:12:59.381 UTC [748] DEBUG:  building index "pg_toast_34075_index" on table "pg_toast_34075" serially
2025-04-19 19:12:59.382 UTC [748] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:12:59.382 UTC [748] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:12:59.382 UTC [748] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:12:59.383 UTC [748] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:12:59.383 UTC [748] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:12:59.384 UTC [748] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:12:59.384 UTC [748] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:12:59.385 UTC [748] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:12:59.385 UTC [748] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:12:59.386 UTC [748] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:12:59.386 UTC [748] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:12:59.388 UTC [748] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:12:59.388 UTC [748] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:12:59.389 UTC [748] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:12:59.389 UTC [748] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:12:59.390 UTC [748] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:12:59.390 UTC [748] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:12:59.391 UTC [748] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:12:59.391 UTC [748] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:12:59.392 UTC [748] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:12:59.392 UTC [748] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:12:59.393 UTC [748] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:12:59.393 UTC [748] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:12:59.394 UTC [748] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:12:59.394 UTC [748] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:12:59.403 UTC [748] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:12:59.658 UTC [748] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$7aNowMADH1mp/zo6PIN9feAc6EzFWkUS2U4IiSI7C.ua4/VjrKI5C')
	                RETURNING id, username, email
	                
2025-04-19 19:12:59.659 UTC [748] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:12:59.659 UTC [748] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:13:02.412 UTC [755] LOG:  statement: SELECT * FROM draws;
2025-04-19 19:13:06.247 UTC [763] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:13:12.639 UTC [748] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:13:12.923 UTC [748] DEBUG:  unexpected EOF on client connection
2025-04-19 19:13:14.683 UTC [771] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:13:14.689 UTC [771] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:13:14.696 UTC [771] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:13:14.696 UTC [771] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:13:14.701 UTC [771] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:13:14.706 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:13:14.712 UTC [771] DEBUG:  building index "pg_toast_34111_index" on table "pg_toast_34111" serially
2025-04-19 19:13:14.713 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:13:14.714 UTC [771] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:13:14.714 UTC [771] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:13:14.715 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:13:14.715 UTC [771] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:13:14.715 UTC [771] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:13:14.716 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:13:14.716 UTC [771] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:13:14.716 UTC [771] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:13:14.717 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:13:14.718 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:13:14.718 UTC [771] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:13:14.718 UTC [771] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:13:14.719 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:13:14.719 UTC [771] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:13:14.719 UTC [771] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:13:14.720 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:13:14.721 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:13:14.721 UTC [771] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:13:14.721 UTC [771] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:13:14.722 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:13:14.722 UTC [771] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:13:14.722 UTC [771] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:13:14.724 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:13:14.725 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:13:14.725 UTC [771] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:13:14.725 UTC [771] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:13:14.726 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:13:14.728 UTC [771] DEBUG:  building index "pg_toast_34172_index" on table "pg_toast_34172" serially
2025-04-19 19:13:14.728 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:13:14.729 UTC [771] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:13:14.729 UTC [771] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:13:14.730 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:13:14.731 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:13:14.731 UTC [771] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:13:14.731 UTC [771] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:13:14.732 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:13:14.732 UTC [771] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:13:14.732 UTC [771] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:13:14.733 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:13:14.734 UTC [771] DEBUG:  building index "pg_toast_34205_index" on table "pg_toast_34205" serially
2025-04-19 19:13:14.735 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:13:14.735 UTC [771] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:13:14.735 UTC [771] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:13:14.736 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:13:14.737 UTC [771] DEBUG:  building index "pg_toast_34216_index" on table "pg_toast_34216" serially
2025-04-19 19:13:14.738 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:13:14.738 UTC [771] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:13:14.738 UTC [771] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:13:14.740 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:13:14.741 UTC [771] DEBUG:  building index "pg_toast_34239_index" on table "pg_toast_34239" serially
2025-04-19 19:13:14.742 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:13:14.742 UTC [771] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:13:14.742 UTC [771] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:13:14.743 UTC [771] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:13:14.743 UTC [771] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:13:14.744 UTC [771] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:13:14.745 UTC [771] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:13:14.746 UTC [771] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:13:14.746 UTC [771] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:13:14.748 UTC [771] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:13:14.748 UTC [771] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:13:14.749 UTC [771] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:13:14.749 UTC [771] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:13:14.750 UTC [771] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:13:14.750 UTC [771] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:13:14.751 UTC [771] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:13:14.751 UTC [771] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:13:14.752 UTC [771] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:13:14.752 UTC [771] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:13:14.753 UTC [771] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:13:14.753 UTC [771] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:13:14.754 UTC [771] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:13:14.754 UTC [771] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:13:14.754 UTC [771] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:13:14.754 UTC [771] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:13:14.768 UTC [771] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:15.078 UTC [771] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5IFnUak5xVVZohhgF7N0u.wqHepf3M07BRONbwYNlawpbEAMyGB4C')
	                RETURNING id, username, email
	                
2025-04-19 19:13:15.079 UTC [771] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:13:15.080 UTC [771] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:13:15.083 UTC [771] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:13:15.122 UTC [771] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:15.124 UTC [771] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:13:15.127 UTC [771] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:13:15.139 UTC [771] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:13:15.139 UTC [771] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:13:15.142 UTC [771] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:13:15.146 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:13:15.147 UTC [771] DEBUG:  building index "pg_toast_34275_index" on table "pg_toast_34275" serially
2025-04-19 19:13:15.149 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:13:15.149 UTC [771] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:13:15.149 UTC [771] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:13:15.150 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:13:15.150 UTC [771] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:13:15.150 UTC [771] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:13:15.151 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:13:15.151 UTC [771] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:13:15.151 UTC [771] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:13:15.152 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:13:15.153 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:13:15.153 UTC [771] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:13:15.153 UTC [771] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:13:15.154 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:13:15.154 UTC [771] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:13:15.154 UTC [771] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:13:15.155 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:13:15.156 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:13:15.157 UTC [771] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:13:15.157 UTC [771] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:13:15.158 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:13:15.158 UTC [771] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:13:15.158 UTC [771] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:13:15.159 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:13:15.160 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:13:15.160 UTC [771] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:13:15.160 UTC [771] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:13:15.162 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:13:15.163 UTC [771] DEBUG:  building index "pg_toast_34336_index" on table "pg_toast_34336" serially
2025-04-19 19:13:15.164 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:13:15.165 UTC [771] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:13:15.165 UTC [771] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:13:15.166 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:13:15.167 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:13:15.167 UTC [771] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:13:15.167 UTC [771] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:13:15.169 UTC [771] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:13:15.169 UTC [771] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:13:15.169 UTC [771] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:13:15.170 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:13:15.171 UTC [771] DEBUG:  building index "pg_toast_34369_index" on table "pg_toast_34369" serially
2025-04-19 19:13:15.172 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:13:15.172 UTC [771] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:13:15.172 UTC [771] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:13:15.173 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:13:15.174 UTC [771] DEBUG:  building index "pg_toast_34380_index" on table "pg_toast_34380" serially
2025-04-19 19:13:15.175 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:13:15.175 UTC [771] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:13:15.175 UTC [771] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:13:15.178 UTC [771] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:13:15.180 UTC [771] DEBUG:  building index "pg_toast_34403_index" on table "pg_toast_34403" serially
2025-04-19 19:13:15.181 UTC [771] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:13:15.181 UTC [771] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:13:15.181 UTC [771] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:13:15.183 UTC [771] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:13:15.183 UTC [771] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:13:15.184 UTC [771] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:13:15.184 UTC [771] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:13:15.185 UTC [771] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:13:15.185 UTC [771] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:13:15.186 UTC [771] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:13:15.186 UTC [771] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:13:15.186 UTC [771] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:13:15.186 UTC [771] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:13:15.187 UTC [771] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:13:15.187 UTC [771] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:13:15.188 UTC [771] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:13:15.188 UTC [771] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:13:15.189 UTC [771] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:13:15.189 UTC [771] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:13:15.190 UTC [771] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:13:15.190 UTC [771] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:13:15.191 UTC [771] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:13:15.191 UTC [771] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:13:15.192 UTC [771] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:13:15.192 UTC [771] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:13:15.203 UTC [771] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:15.471 UTC [771] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/.iDTGuor220LRav7ycy1eyuVmbsvQp6.9jblb8PiyG0JQTIsbRCq')
	                RETURNING id, username, email
	                
2025-04-19 19:13:15.472 UTC [771] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:13:15.472 UTC [771] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:13:28.556 UTC [771] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:13:28.892 UTC [771] DEBUG:  unexpected EOF on client connection
2025-04-19 19:13:31.437 UTC [778] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:13:31.445 UTC [778] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:13:31.452 UTC [778] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:13:31.452 UTC [778] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:13:31.457 UTC [778] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:13:31.463 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:13:31.467 UTC [778] DEBUG:  building index "pg_toast_34439_index" on table "pg_toast_34439" serially
2025-04-19 19:13:31.469 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:13:31.470 UTC [778] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:13:31.470 UTC [778] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:13:31.471 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:13:31.471 UTC [778] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:13:31.471 UTC [778] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:13:31.472 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:13:31.473 UTC [778] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:13:31.473 UTC [778] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:13:31.473 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:13:31.475 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:13:31.476 UTC [778] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:13:31.476 UTC [778] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:13:31.477 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:13:31.477 UTC [778] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:13:31.477 UTC [778] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:13:31.478 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:13:31.480 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:13:31.480 UTC [778] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:13:31.480 UTC [778] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:13:31.481 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:13:31.481 UTC [778] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:13:31.481 UTC [778] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:13:31.483 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:13:31.484 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:13:31.484 UTC [778] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:13:31.484 UTC [778] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:13:31.486 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:13:31.491 UTC [778] DEBUG:  building index "pg_toast_34500_index" on table "pg_toast_34500" serially
2025-04-19 19:13:31.493 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:13:31.493 UTC [778] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:13:31.493 UTC [778] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:13:31.494 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:13:31.496 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:13:31.496 UTC [778] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:13:31.496 UTC [778] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:13:31.497 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:13:31.497 UTC [778] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:13:31.497 UTC [778] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:13:31.500 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:13:31.501 UTC [778] DEBUG:  building index "pg_toast_34533_index" on table "pg_toast_34533" serially
2025-04-19 19:13:31.502 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:13:31.503 UTC [778] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:13:31.503 UTC [778] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:13:31.504 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:13:31.505 UTC [778] DEBUG:  building index "pg_toast_34544_index" on table "pg_toast_34544" serially
2025-04-19 19:13:31.505 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:13:31.506 UTC [778] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:13:31.506 UTC [778] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:13:31.508 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:13:31.510 UTC [778] DEBUG:  building index "pg_toast_34567_index" on table "pg_toast_34567" serially
2025-04-19 19:13:31.511 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:13:31.511 UTC [778] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:13:31.511 UTC [778] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:13:31.512 UTC [778] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:13:31.512 UTC [778] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:13:31.513 UTC [778] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:13:31.513 UTC [778] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:13:31.514 UTC [778] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:13:31.514 UTC [778] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:13:31.515 UTC [778] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:13:31.515 UTC [778] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:13:31.516 UTC [778] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:13:31.516 UTC [778] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:13:31.516 UTC [778] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:13:31.516 UTC [778] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:13:31.517 UTC [778] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:13:31.517 UTC [778] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:13:31.518 UTC [778] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:13:31.518 UTC [778] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:13:31.519 UTC [778] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:13:31.519 UTC [778] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:13:31.520 UTC [778] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:13:31.520 UTC [778] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:13:31.521 UTC [778] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:13:31.521 UTC [778] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:13:31.536 UTC [778] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:31.814 UTC [778] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$HzuTUSti50LQhFIqNXOMpu8NZDY3EvQM7siFBtnovjMR53Wi/KeHO')
	                RETURNING id, username, email
	                
2025-04-19 19:13:31.815 UTC [778] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:13:31.815 UTC [778] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:13:31.816 UTC [778] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:13:31.827 UTC [778] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:31.827 UTC [778] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:13:31.831 UTC [778] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:13:31.835 UTC [778] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:13:31.835 UTC [778] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:13:31.839 UTC [778] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:13:31.843 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:13:31.844 UTC [778] DEBUG:  building index "pg_toast_34603_index" on table "pg_toast_34603" serially
2025-04-19 19:13:31.845 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:13:31.845 UTC [778] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:13:31.845 UTC [778] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:13:31.846 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:13:31.846 UTC [778] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:13:31.846 UTC [778] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:13:31.847 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:13:31.847 UTC [778] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:13:31.847 UTC [778] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:13:31.848 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:13:31.849 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:13:31.849 UTC [778] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:13:31.849 UTC [778] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:13:31.849 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:13:31.850 UTC [778] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:13:31.850 UTC [778] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:13:31.850 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:13:31.851 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:13:31.851 UTC [778] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:13:31.851 UTC [778] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:13:31.852 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:13:31.852 UTC [778] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:13:31.852 UTC [778] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:13:31.853 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:13:31.854 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:13:31.855 UTC [778] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:13:31.855 UTC [778] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:13:31.856 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:13:31.857 UTC [778] DEBUG:  building index "pg_toast_34664_index" on table "pg_toast_34664" serially
2025-04-19 19:13:31.858 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:13:31.858 UTC [778] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:13:31.858 UTC [778] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:13:31.859 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:13:31.860 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:13:31.860 UTC [778] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:13:31.860 UTC [778] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:13:31.861 UTC [778] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:13:31.861 UTC [778] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:13:31.861 UTC [778] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:13:31.862 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:13:31.864 UTC [778] DEBUG:  building index "pg_toast_34697_index" on table "pg_toast_34697" serially
2025-04-19 19:13:31.865 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:13:31.865 UTC [778] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:13:31.865 UTC [778] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:13:31.866 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:13:31.867 UTC [778] DEBUG:  building index "pg_toast_34708_index" on table "pg_toast_34708" serially
2025-04-19 19:13:31.868 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:13:31.868 UTC [778] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:13:31.868 UTC [778] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:13:31.869 UTC [778] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:13:31.871 UTC [778] DEBUG:  building index "pg_toast_34731_index" on table "pg_toast_34731" serially
2025-04-19 19:13:31.871 UTC [778] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:13:31.872 UTC [778] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:13:31.872 UTC [778] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:13:31.872 UTC [778] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:13:31.872 UTC [778] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:13:31.873 UTC [778] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:13:31.873 UTC [778] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:13:31.874 UTC [778] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:13:31.874 UTC [778] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:13:31.875 UTC [778] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:13:31.875 UTC [778] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:13:31.876 UTC [778] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:13:31.876 UTC [778] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:13:31.877 UTC [778] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:13:31.877 UTC [778] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:13:31.878 UTC [778] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:13:31.878 UTC [778] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:13:31.879 UTC [778] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:13:31.879 UTC [778] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:13:31.880 UTC [778] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:13:31.880 UTC [778] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:13:31.881 UTC [778] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:13:31.881 UTC [778] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:13:31.882 UTC [778] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:13:31.882 UTC [778] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:13:31.890 UTC [778] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:32.136 UTC [778] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$h4.WObsaGr.uvgb.N7SuVu/iKtvkup7dVLfkhQZGKlmCICj5ODi26')
	                RETURNING id, username, email
	                
2025-04-19 19:13:32.136 UTC [778] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:13:32.137 UTC [778] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:13:36.154 UTC [786] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:13:36.189 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 19:13:36.391 UTC [786] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:13:44.514 UTC [778] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:13:44.794 UTC [778] DEBUG:  unexpected EOF on client connection
2025-04-19 19:13:46.579 UTC [794] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:13:46.586 UTC [794] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:13:46.593 UTC [794] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:13:46.593 UTC [794] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:13:46.597 UTC [794] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:13:46.600 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:13:46.603 UTC [794] DEBUG:  building index "pg_toast_34768_index" on table "pg_toast_34768" serially
2025-04-19 19:13:46.604 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:13:46.605 UTC [794] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:13:46.605 UTC [794] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:13:46.606 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:13:46.606 UTC [794] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:13:46.606 UTC [794] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:13:46.607 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:13:46.607 UTC [794] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:13:46.607 UTC [794] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:13:46.608 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:13:46.609 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:13:46.609 UTC [794] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:13:46.609 UTC [794] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:13:46.610 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:13:46.610 UTC [794] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:13:46.610 UTC [794] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:13:46.611 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:13:46.612 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:13:46.612 UTC [794] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:13:46.612 UTC [794] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:13:46.613 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:13:46.614 UTC [794] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:13:46.614 UTC [794] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:13:46.618 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:13:46.620 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:13:46.620 UTC [794] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:13:46.620 UTC [794] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:13:46.622 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:13:46.623 UTC [794] DEBUG:  building index "pg_toast_34829_index" on table "pg_toast_34829" serially
2025-04-19 19:13:46.624 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:13:46.624 UTC [794] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:13:46.624 UTC [794] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:13:46.626 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:13:46.627 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:13:46.627 UTC [794] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:13:46.627 UTC [794] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:13:46.628 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:13:46.628 UTC [794] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:13:46.628 UTC [794] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:13:46.629 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:13:46.630 UTC [794] DEBUG:  building index "pg_toast_34862_index" on table "pg_toast_34862" serially
2025-04-19 19:13:46.631 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:13:46.631 UTC [794] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:13:46.631 UTC [794] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:13:46.632 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:13:46.633 UTC [794] DEBUG:  building index "pg_toast_34873_index" on table "pg_toast_34873" serially
2025-04-19 19:13:46.634 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:13:46.634 UTC [794] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:13:46.634 UTC [794] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:13:46.636 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:13:46.637 UTC [794] DEBUG:  building index "pg_toast_34896_index" on table "pg_toast_34896" serially
2025-04-19 19:13:46.638 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:13:46.638 UTC [794] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:13:46.638 UTC [794] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:13:46.639 UTC [794] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:13:46.639 UTC [794] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:13:46.640 UTC [794] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:13:46.640 UTC [794] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:13:46.641 UTC [794] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:13:46.641 UTC [794] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:13:46.642 UTC [794] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:13:46.642 UTC [794] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:13:46.643 UTC [794] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:13:46.643 UTC [794] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:13:46.644 UTC [794] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:13:46.644 UTC [794] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:13:46.645 UTC [794] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:13:46.645 UTC [794] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:13:46.645 UTC [794] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:13:46.645 UTC [794] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:13:46.646 UTC [794] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:13:46.646 UTC [794] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:13:46.647 UTC [794] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:13:46.647 UTC [794] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:13:46.648 UTC [794] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:13:46.648 UTC [794] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:13:46.665 UTC [794] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:46.955 UTC [794] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Hg8pF8CU1rx9MRCHOYqazuD.R9/mTaD85QXSEEaHPw/KsbmFDtZ.2')
	                RETURNING id, username, email
	                
2025-04-19 19:13:46.957 UTC [794] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:13:46.957 UTC [794] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:13:46.958 UTC [794] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:13:46.969 UTC [794] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:46.970 UTC [794] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:13:46.972 UTC [794] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:13:46.978 UTC [794] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:13:46.978 UTC [794] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:13:46.982 UTC [794] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:13:46.986 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:13:46.987 UTC [794] DEBUG:  building index "pg_toast_34932_index" on table "pg_toast_34932" serially
2025-04-19 19:13:46.988 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:13:46.988 UTC [794] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:13:46.988 UTC [794] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:13:46.989 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:13:46.989 UTC [794] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:13:46.989 UTC [794] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:13:46.990 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:13:46.990 UTC [794] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:13:46.990 UTC [794] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:13:46.991 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:13:46.992 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:13:46.992 UTC [794] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:13:46.992 UTC [794] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:13:46.992 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:13:46.993 UTC [794] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:13:46.993 UTC [794] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:13:46.993 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:13:46.994 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:13:46.995 UTC [794] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:13:46.995 UTC [794] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:13:46.995 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:13:46.995 UTC [794] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:13:46.995 UTC [794] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:13:46.996 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:13:46.997 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:13:46.998 UTC [794] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:13:46.998 UTC [794] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:13:46.999 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:13:47.000 UTC [794] DEBUG:  building index "pg_toast_34993_index" on table "pg_toast_34993" serially
2025-04-19 19:13:47.001 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:13:47.001 UTC [794] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:13:47.001 UTC [794] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:13:47.002 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:13:47.003 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:13:47.003 UTC [794] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:13:47.003 UTC [794] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:13:47.004 UTC [794] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:13:47.004 UTC [794] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:13:47.004 UTC [794] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:13:47.006 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:13:47.007 UTC [794] DEBUG:  building index "pg_toast_35026_index" on table "pg_toast_35026" serially
2025-04-19 19:13:47.009 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:13:47.009 UTC [794] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:13:47.009 UTC [794] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:13:47.010 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:13:47.011 UTC [794] DEBUG:  building index "pg_toast_35037_index" on table "pg_toast_35037" serially
2025-04-19 19:13:47.012 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:13:47.012 UTC [794] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:13:47.012 UTC [794] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:13:47.013 UTC [794] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:13:47.014 UTC [794] DEBUG:  building index "pg_toast_35060_index" on table "pg_toast_35060" serially
2025-04-19 19:13:47.015 UTC [794] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:13:47.015 UTC [794] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:13:47.015 UTC [794] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:13:47.016 UTC [794] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:13:47.016 UTC [794] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:13:47.017 UTC [794] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:13:47.017 UTC [794] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:13:47.018 UTC [794] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:13:47.018 UTC [794] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:13:47.019 UTC [794] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:13:47.019 UTC [794] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:13:47.020 UTC [794] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:13:47.020 UTC [794] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:13:47.021 UTC [794] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:13:47.021 UTC [794] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:13:47.022 UTC [794] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:13:47.022 UTC [794] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:13:47.022 UTC [794] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:13:47.022 UTC [794] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:13:47.023 UTC [794] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:13:47.023 UTC [794] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:13:47.024 UTC [794] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:13:47.024 UTC [794] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:13:47.025 UTC [794] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:13:47.025 UTC [794] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:13:47.032 UTC [794] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:13:47.279 UTC [794] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZVmL8q8C8P6Hb77mZ3mxY.5DARelRNAH61LmDqBAl8mD4WF4kH4Mu')
	                RETURNING id, username, email
	                
2025-04-19 19:13:47.281 UTC [794] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:13:47.281 UTC [794] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:00.387 UTC [794] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:14:00.713 UTC [794] DEBUG:  unexpected EOF on client connection
2025-04-19 19:14:03.142 UTC [802] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:03.151 UTC [802] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:03.161 UTC [802] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:03.161 UTC [802] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:03.166 UTC [802] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:03.169 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:03.172 UTC [802] DEBUG:  building index "pg_toast_35096_index" on table "pg_toast_35096" serially
2025-04-19 19:14:03.174 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:03.175 UTC [802] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:03.175 UTC [802] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:03.176 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:03.176 UTC [802] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:03.176 UTC [802] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:03.177 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:03.177 UTC [802] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:03.177 UTC [802] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:03.178 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:03.179 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:03.179 UTC [802] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:03.179 UTC [802] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:03.180 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:03.180 UTC [802] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:03.180 UTC [802] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:03.181 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:03.183 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:03.183 UTC [802] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:03.183 UTC [802] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:03.184 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:03.184 UTC [802] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:03.184 UTC [802] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:03.185 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:03.186 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:03.187 UTC [802] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:03.187 UTC [802] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:03.188 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:03.190 UTC [802] DEBUG:  building index "pg_toast_35157_index" on table "pg_toast_35157" serially
2025-04-19 19:14:03.191 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:03.192 UTC [802] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:03.192 UTC [802] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:03.193 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:03.194 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:03.195 UTC [802] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:03.195 UTC [802] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:03.195 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:03.196 UTC [802] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:03.196 UTC [802] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:03.197 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:03.198 UTC [802] DEBUG:  building index "pg_toast_35190_index" on table "pg_toast_35190" serially
2025-04-19 19:14:03.199 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:03.199 UTC [802] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:03.199 UTC [802] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:03.199 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:03.200 UTC [802] DEBUG:  building index "pg_toast_35201_index" on table "pg_toast_35201" serially
2025-04-19 19:14:03.201 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:03.202 UTC [802] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:03.202 UTC [802] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:03.204 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:03.205 UTC [802] DEBUG:  building index "pg_toast_35224_index" on table "pg_toast_35224" serially
2025-04-19 19:14:03.206 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:03.207 UTC [802] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:03.207 UTC [802] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:03.208 UTC [802] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:03.208 UTC [802] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:03.209 UTC [802] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:03.209 UTC [802] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:03.210 UTC [802] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:03.210 UTC [802] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:03.211 UTC [802] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:03.211 UTC [802] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:03.212 UTC [802] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:03.212 UTC [802] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:03.213 UTC [802] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:03.213 UTC [802] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:03.214 UTC [802] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:03.214 UTC [802] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:03.215 UTC [802] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:03.215 UTC [802] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:03.216 UTC [802] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:03.216 UTC [802] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:03.217 UTC [802] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:03.217 UTC [802] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:03.218 UTC [802] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:03.218 UTC [802] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:03.231 UTC [802] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:03.501 UTC [802] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lhgATJgpFyq0yRQaWyo1OuQlvsCunYniaQ3E22h3Ay.IFJJrx6eGm')
	                RETURNING id, username, email
	                
2025-04-19 19:14:03.502 UTC [802] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:03.503 UTC [802] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:03.503 UTC [802] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:14:03.514 UTC [802] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:03.515 UTC [802] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:03.518 UTC [802] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:03.523 UTC [802] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:03.523 UTC [802] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:03.527 UTC [802] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:03.531 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:03.532 UTC [802] DEBUG:  building index "pg_toast_35260_index" on table "pg_toast_35260" serially
2025-04-19 19:14:03.533 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:03.533 UTC [802] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:03.533 UTC [802] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:03.534 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:03.534 UTC [802] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:03.534 UTC [802] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:03.535 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:03.535 UTC [802] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:03.535 UTC [802] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:03.536 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:03.537 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:03.537 UTC [802] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:03.537 UTC [802] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:03.538 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:03.538 UTC [802] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:03.538 UTC [802] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:03.539 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:03.540 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:03.540 UTC [802] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:03.540 UTC [802] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:03.541 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:03.541 UTC [802] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:03.541 UTC [802] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:03.542 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:03.544 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:03.544 UTC [802] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:03.544 UTC [802] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:03.547 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:03.548 UTC [802] DEBUG:  building index "pg_toast_35321_index" on table "pg_toast_35321" serially
2025-04-19 19:14:03.548 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:03.549 UTC [802] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:03.549 UTC [802] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:03.550 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:03.551 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:03.551 UTC [802] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:03.551 UTC [802] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:03.552 UTC [802] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:03.552 UTC [802] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:03.552 UTC [802] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:03.553 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:03.554 UTC [802] DEBUG:  building index "pg_toast_35354_index" on table "pg_toast_35354" serially
2025-04-19 19:14:03.555 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:03.555 UTC [802] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:03.555 UTC [802] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:03.556 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:03.557 UTC [802] DEBUG:  building index "pg_toast_35365_index" on table "pg_toast_35365" serially
2025-04-19 19:14:03.557 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:03.558 UTC [802] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:03.558 UTC [802] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:03.559 UTC [802] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:03.560 UTC [802] DEBUG:  building index "pg_toast_35388_index" on table "pg_toast_35388" serially
2025-04-19 19:14:03.561 UTC [802] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:03.561 UTC [802] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:03.561 UTC [802] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:03.562 UTC [802] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:03.562 UTC [802] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:03.564 UTC [802] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:03.564 UTC [802] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:03.566 UTC [802] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:03.566 UTC [802] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:03.568 UTC [802] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:03.568 UTC [802] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:03.569 UTC [802] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:03.569 UTC [802] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:03.571 UTC [802] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:03.571 UTC [802] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:03.572 UTC [802] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:03.572 UTC [802] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:03.573 UTC [802] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:03.573 UTC [802] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:03.574 UTC [802] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:03.574 UTC [802] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:03.575 UTC [802] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:03.575 UTC [802] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:03.576 UTC [802] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:03.576 UTC [802] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:03.585 UTC [802] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:03.831 UTC [802] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Z6z4rzFkrkJFH1b50zhOauFN2RTyOCb6mOFiV./fsf4S2YbR/7Sx2')
	                RETURNING id, username, email
	                
2025-04-19 19:14:03.832 UTC [802] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:03.832 UTC [802] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:06.243 UTC [810] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:14:16.470 UTC [802] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:14:16.780 UTC [802] DEBUG:  unexpected EOF on client connection
2025-04-19 19:14:18.416 UTC [818] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:18.434 UTC [818] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:18.487 UTC [818] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:18.487 UTC [818] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:18.515 UTC [818] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:18.527 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:18.531 UTC [818] DEBUG:  building index "pg_toast_35424_index" on table "pg_toast_35424" serially
2025-04-19 19:14:18.533 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:18.533 UTC [818] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:18.533 UTC [818] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:18.534 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:18.534 UTC [818] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:18.534 UTC [818] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:18.535 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:18.535 UTC [818] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:18.535 UTC [818] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:18.536 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:18.537 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:18.537 UTC [818] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:18.537 UTC [818] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:18.538 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:18.539 UTC [818] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:18.540 UTC [818] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:18.541 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:18.542 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:18.542 UTC [818] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:18.543 UTC [818] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:18.543 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:18.543 UTC [818] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:18.543 UTC [818] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:18.545 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:18.546 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:18.546 UTC [818] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:18.546 UTC [818] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:18.548 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:18.552 UTC [818] DEBUG:  building index "pg_toast_35485_index" on table "pg_toast_35485" serially
2025-04-19 19:14:18.553 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:18.553 UTC [818] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:18.553 UTC [818] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:18.554 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:18.555 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:18.556 UTC [818] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:18.556 UTC [818] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:18.557 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:18.557 UTC [818] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:18.557 UTC [818] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:18.558 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:18.559 UTC [818] DEBUG:  building index "pg_toast_35518_index" on table "pg_toast_35518" serially
2025-04-19 19:14:18.560 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:18.561 UTC [818] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:18.561 UTC [818] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:18.562 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:18.563 UTC [818] DEBUG:  building index "pg_toast_35529_index" on table "pg_toast_35529" serially
2025-04-19 19:14:18.564 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:18.564 UTC [818] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:18.564 UTC [818] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:18.566 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:18.567 UTC [818] DEBUG:  building index "pg_toast_35552_index" on table "pg_toast_35552" serially
2025-04-19 19:14:18.568 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:18.569 UTC [818] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:18.569 UTC [818] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:18.571 UTC [818] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:18.571 UTC [818] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:18.572 UTC [818] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:18.572 UTC [818] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:18.573 UTC [818] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:18.573 UTC [818] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:18.574 UTC [818] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:18.574 UTC [818] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:18.575 UTC [818] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:18.575 UTC [818] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:18.576 UTC [818] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:18.576 UTC [818] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:18.577 UTC [818] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:18.577 UTC [818] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:18.578 UTC [818] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:18.578 UTC [818] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:18.579 UTC [818] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:18.579 UTC [818] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:18.580 UTC [818] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:18.580 UTC [818] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:18.581 UTC [818] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:18.581 UTC [818] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:18.596 UTC [818] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:18.867 UTC [818] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$X.cGJRP.zkqGjnxTogcNvOo8QNQWhFY3YRrl42ctXdxzGLn86VlQ2')
	                RETURNING id, username, email
	                
2025-04-19 19:14:18.868 UTC [818] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:18.868 UTC [818] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:18.869 UTC [818] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:14:18.883 UTC [818] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:18.884 UTC [818] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:18.887 UTC [818] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:18.891 UTC [818] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:18.891 UTC [818] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:18.895 UTC [818] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:18.898 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:18.899 UTC [818] DEBUG:  building index "pg_toast_35588_index" on table "pg_toast_35588" serially
2025-04-19 19:14:18.900 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:18.900 UTC [818] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:18.900 UTC [818] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:18.901 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:18.901 UTC [818] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:18.901 UTC [818] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:18.902 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:18.902 UTC [818] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:18.902 UTC [818] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:18.903 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:18.903 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:18.903 UTC [818] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:18.903 UTC [818] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:18.904 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:18.904 UTC [818] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:18.904 UTC [818] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:18.905 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:18.906 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:18.906 UTC [818] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:18.906 UTC [818] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:18.907 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:18.907 UTC [818] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:18.907 UTC [818] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:18.908 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:18.909 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:18.909 UTC [818] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:18.909 UTC [818] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:18.911 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:18.912 UTC [818] DEBUG:  building index "pg_toast_35649_index" on table "pg_toast_35649" serially
2025-04-19 19:14:18.913 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:18.913 UTC [818] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:18.913 UTC [818] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:18.914 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:18.915 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:18.915 UTC [818] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:18.915 UTC [818] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:18.916 UTC [818] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:18.916 UTC [818] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:18.916 UTC [818] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:18.917 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:18.918 UTC [818] DEBUG:  building index "pg_toast_35682_index" on table "pg_toast_35682" serially
2025-04-19 19:14:18.919 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:18.919 UTC [818] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:18.919 UTC [818] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:18.919 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:18.920 UTC [818] DEBUG:  building index "pg_toast_35693_index" on table "pg_toast_35693" serially
2025-04-19 19:14:18.921 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:18.921 UTC [818] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:18.921 UTC [818] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:18.923 UTC [818] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:18.924 UTC [818] DEBUG:  building index "pg_toast_35716_index" on table "pg_toast_35716" serially
2025-04-19 19:14:18.925 UTC [818] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:18.925 UTC [818] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:18.925 UTC [818] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:18.926 UTC [818] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:18.926 UTC [818] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:18.926 UTC [818] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:18.926 UTC [818] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:18.927 UTC [818] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:18.927 UTC [818] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:18.928 UTC [818] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:18.928 UTC [818] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:18.929 UTC [818] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:18.929 UTC [818] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:18.929 UTC [818] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:18.929 UTC [818] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:18.930 UTC [818] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:18.930 UTC [818] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:18.931 UTC [818] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:18.931 UTC [818] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:18.932 UTC [818] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:18.932 UTC [818] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:18.932 UTC [818] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:18.932 UTC [818] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:18.933 UTC [818] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:18.933 UTC [818] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:18.939 UTC [818] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:19.185 UTC [818] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bij1Dh16kPA8EDhm5bqd1eUCzjYjIRqf1A9eYg/j1QTI.QHtOgGBq')
	                RETURNING id, username, email
	                
2025-04-19 19:14:19.186 UTC [818] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:19.186 UTC [818] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:32.361 UTC [818] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:14:32.650 UTC [818] DEBUG:  unexpected EOF on client connection
2025-04-19 19:14:34.597 UTC [826] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:34.605 UTC [826] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:34.613 UTC [826] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:34.613 UTC [826] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:34.617 UTC [826] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:34.620 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:34.623 UTC [826] DEBUG:  building index "pg_toast_35752_index" on table "pg_toast_35752" serially
2025-04-19 19:14:34.624 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:34.625 UTC [826] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:34.625 UTC [826] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:34.626 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:34.626 UTC [826] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:34.626 UTC [826] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:34.627 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:34.627 UTC [826] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:34.627 UTC [826] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:34.628 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:34.629 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:34.629 UTC [826] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:34.629 UTC [826] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:34.630 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:34.630 UTC [826] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:34.630 UTC [826] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:34.631 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:34.632 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:34.632 UTC [826] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:34.632 UTC [826] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:34.633 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:34.633 UTC [826] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:34.633 UTC [826] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:34.634 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:34.635 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:34.635 UTC [826] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:34.635 UTC [826] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:34.638 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:34.642 UTC [826] DEBUG:  building index "pg_toast_35813_index" on table "pg_toast_35813" serially
2025-04-19 19:14:34.643 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:34.643 UTC [826] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:34.643 UTC [826] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:34.644 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:34.645 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:34.646 UTC [826] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:34.646 UTC [826] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:34.646 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:34.647 UTC [826] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:34.647 UTC [826] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:34.648 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:34.649 UTC [826] DEBUG:  building index "pg_toast_35846_index" on table "pg_toast_35846" serially
2025-04-19 19:14:34.650 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:34.650 UTC [826] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:34.650 UTC [826] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:34.651 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:34.652 UTC [826] DEBUG:  building index "pg_toast_35857_index" on table "pg_toast_35857" serially
2025-04-19 19:14:34.654 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:34.654 UTC [826] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:34.654 UTC [826] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:34.656 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:34.657 UTC [826] DEBUG:  building index "pg_toast_35880_index" on table "pg_toast_35880" serially
2025-04-19 19:14:34.658 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:34.658 UTC [826] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:34.658 UTC [826] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:34.659 UTC [826] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:34.659 UTC [826] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:34.660 UTC [826] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:34.660 UTC [826] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:34.660 UTC [826] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:34.660 UTC [826] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:34.661 UTC [826] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:34.661 UTC [826] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:34.662 UTC [826] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:34.662 UTC [826] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:34.663 UTC [826] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:34.663 UTC [826] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:34.664 UTC [826] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:34.664 UTC [826] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:34.664 UTC [826] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:34.664 UTC [826] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:34.665 UTC [826] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:34.665 UTC [826] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:34.666 UTC [826] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:34.666 UTC [826] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:34.667 UTC [826] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:34.667 UTC [826] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:34.677 UTC [826] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:34.946 UTC [826] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$wowJVRsyMpxKAcSh464myeiL0XG7tJSY9eyfvOagKvAZ1OlA6kxtK')
	                RETURNING id, username, email
	                
2025-04-19 19:14:34.948 UTC [826] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:34.950 UTC [826] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:34.951 UTC [826] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:14:34.969 UTC [826] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:34.970 UTC [826] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:34.974 UTC [826] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:34.980 UTC [826] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:34.980 UTC [826] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:34.984 UTC [826] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:34.989 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:34.990 UTC [826] DEBUG:  building index "pg_toast_35916_index" on table "pg_toast_35916" serially
2025-04-19 19:14:34.991 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:34.991 UTC [826] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:34.991 UTC [826] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:34.992 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:34.992 UTC [826] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:34.992 UTC [826] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:34.993 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:34.993 UTC [826] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:34.993 UTC [826] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:34.994 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:34.994 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:34.995 UTC [826] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:34.995 UTC [826] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:34.995 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:34.995 UTC [826] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:34.995 UTC [826] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:34.996 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:34.997 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:34.997 UTC [826] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:34.997 UTC [826] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:34.998 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:34.998 UTC [826] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:34.998 UTC [826] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:35.001 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:35.002 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:35.002 UTC [826] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:35.002 UTC [826] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:35.004 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:35.006 UTC [826] DEBUG:  building index "pg_toast_35977_index" on table "pg_toast_35977" serially
2025-04-19 19:14:35.007 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:35.007 UTC [826] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:35.007 UTC [826] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:35.009 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:35.010 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:35.011 UTC [826] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:35.011 UTC [826] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:35.020 UTC [826] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:35.020 UTC [826] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:35.020 UTC [826] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:35.024 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:35.027 UTC [826] DEBUG:  building index "pg_toast_36010_index" on table "pg_toast_36010" serially
2025-04-19 19:14:35.029 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:35.029 UTC [826] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:35.029 UTC [826] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:35.030 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:35.032 UTC [826] DEBUG:  building index "pg_toast_36021_index" on table "pg_toast_36021" serially
2025-04-19 19:14:35.033 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:35.033 UTC [826] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:35.033 UTC [826] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:35.039 UTC [826] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:35.042 UTC [826] DEBUG:  building index "pg_toast_36044_index" on table "pg_toast_36044" serially
2025-04-19 19:14:35.043 UTC [826] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:35.043 UTC [826] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:35.043 UTC [826] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:35.044 UTC [826] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:35.044 UTC [826] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:35.045 UTC [826] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:35.045 UTC [826] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:35.045 UTC [826] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:35.045 UTC [826] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:35.047 UTC [826] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:35.047 UTC [826] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:35.047 UTC [826] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:35.047 UTC [826] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:35.048 UTC [826] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:35.048 UTC [826] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:35.049 UTC [826] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:35.049 UTC [826] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:35.050 UTC [826] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:35.050 UTC [826] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:35.051 UTC [826] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:35.051 UTC [826] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:35.052 UTC [826] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:35.052 UTC [826] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:35.052 UTC [826] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:35.052 UTC [826] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:35.060 UTC [826] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:35.313 UTC [826] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$mhTaaj9xorfDp./wSz5XL.OHMmREaWV.kpfU8xatwm/aEDq/km19S')
	                RETURNING id, username, email
	                
2025-04-19 19:14:35.314 UTC [826] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:35.314 UTC [826] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:36.158 UTC [834] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:14:36.407 UTC [834] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:14:48.285 UTC [826] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:14:48.574 UTC [826] DEBUG:  unexpected EOF on client connection
2025-04-19 19:14:50.367 UTC [841] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:50.378 UTC [841] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:50.383 UTC [841] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:50.383 UTC [841] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:50.387 UTC [841] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:50.391 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:50.397 UTC [841] DEBUG:  building index "pg_toast_36081_index" on table "pg_toast_36081" serially
2025-04-19 19:14:50.400 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:50.400 UTC [841] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:50.400 UTC [841] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:50.401 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:50.402 UTC [841] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:50.402 UTC [841] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:50.402 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:50.402 UTC [841] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:50.402 UTC [841] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:50.403 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:50.404 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:50.404 UTC [841] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:50.404 UTC [841] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:50.405 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:50.405 UTC [841] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:50.405 UTC [841] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:50.406 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:50.407 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:50.407 UTC [841] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:50.407 UTC [841] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:50.408 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:50.408 UTC [841] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:50.408 UTC [841] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:50.409 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:50.410 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:50.410 UTC [841] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:50.410 UTC [841] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:50.411 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:50.413 UTC [841] DEBUG:  building index "pg_toast_36142_index" on table "pg_toast_36142" serially
2025-04-19 19:14:50.414 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:50.414 UTC [841] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:50.414 UTC [841] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:50.415 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:50.416 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:50.416 UTC [841] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:50.416 UTC [841] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:50.417 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:50.417 UTC [841] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:50.417 UTC [841] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:50.418 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:50.419 UTC [841] DEBUG:  building index "pg_toast_36175_index" on table "pg_toast_36175" serially
2025-04-19 19:14:50.420 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:50.420 UTC [841] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:50.420 UTC [841] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:50.421 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:50.422 UTC [841] DEBUG:  building index "pg_toast_36186_index" on table "pg_toast_36186" serially
2025-04-19 19:14:50.423 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:50.423 UTC [841] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:50.423 UTC [841] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:50.424 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:50.425 UTC [841] DEBUG:  building index "pg_toast_36209_index" on table "pg_toast_36209" serially
2025-04-19 19:14:50.426 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:50.426 UTC [841] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:50.426 UTC [841] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:50.427 UTC [841] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:50.427 UTC [841] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:50.428 UTC [841] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:50.428 UTC [841] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:50.429 UTC [841] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:50.429 UTC [841] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:50.430 UTC [841] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:50.430 UTC [841] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:50.431 UTC [841] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:50.431 UTC [841] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:50.431 UTC [841] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:50.431 UTC [841] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:50.432 UTC [841] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:50.432 UTC [841] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:50.433 UTC [841] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:50.433 UTC [841] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:50.434 UTC [841] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:50.434 UTC [841] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:50.434 UTC [841] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:50.434 UTC [841] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:50.435 UTC [841] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:50.435 UTC [841] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:50.445 UTC [841] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:50.711 UTC [841] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$XJ81cc/6bi4xjt/Pbbdj2O0GHMi44Ym5.ISii1OfBPwC5HKFGu8iS')
	                RETURNING id, username, email
	                
2025-04-19 19:14:50.712 UTC [841] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:50.712 UTC [841] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:14:50.713 UTC [841] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:14:50.733 UTC [841] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:50.735 UTC [841] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:14:50.740 UTC [841] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:14:50.745 UTC [841] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:14:50.745 UTC [841] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:14:50.749 UTC [841] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:14:50.753 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:14:50.754 UTC [841] DEBUG:  building index "pg_toast_36245_index" on table "pg_toast_36245" serially
2025-04-19 19:14:50.755 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:14:50.755 UTC [841] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:14:50.755 UTC [841] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:14:50.755 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:14:50.756 UTC [841] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:14:50.756 UTC [841] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:14:50.756 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:14:50.756 UTC [841] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:14:50.756 UTC [841] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:14:50.757 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:14:50.758 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:14:50.758 UTC [841] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:14:50.758 UTC [841] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:14:50.759 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:14:50.759 UTC [841] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:14:50.759 UTC [841] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:14:50.760 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:14:50.760 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:14:50.761 UTC [841] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:14:50.761 UTC [841] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:14:50.761 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:14:50.761 UTC [841] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:14:50.761 UTC [841] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:14:50.762 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:14:50.763 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:14:50.763 UTC [841] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:14:50.763 UTC [841] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:14:50.765 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:14:50.766 UTC [841] DEBUG:  building index "pg_toast_36306_index" on table "pg_toast_36306" serially
2025-04-19 19:14:50.767 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:14:50.767 UTC [841] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:14:50.767 UTC [841] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:14:50.768 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:14:50.769 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:14:50.769 UTC [841] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:14:50.769 UTC [841] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:14:50.770 UTC [841] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:14:50.770 UTC [841] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:14:50.770 UTC [841] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:14:50.771 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:14:50.772 UTC [841] DEBUG:  building index "pg_toast_36339_index" on table "pg_toast_36339" serially
2025-04-19 19:14:50.772 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:14:50.773 UTC [841] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:14:50.773 UTC [841] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:14:50.773 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:14:50.774 UTC [841] DEBUG:  building index "pg_toast_36350_index" on table "pg_toast_36350" serially
2025-04-19 19:14:50.775 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:14:50.775 UTC [841] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:14:50.775 UTC [841] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:14:50.777 UTC [841] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:14:50.778 UTC [841] DEBUG:  building index "pg_toast_36373_index" on table "pg_toast_36373" serially
2025-04-19 19:14:50.778 UTC [841] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:14:50.778 UTC [841] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:14:50.778 UTC [841] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:14:50.779 UTC [841] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:14:50.779 UTC [841] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:14:50.780 UTC [841] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:14:50.780 UTC [841] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:14:50.781 UTC [841] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:14:50.781 UTC [841] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:14:50.781 UTC [841] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:14:50.781 UTC [841] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:14:50.782 UTC [841] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:14:50.782 UTC [841] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:14:50.783 UTC [841] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:14:50.783 UTC [841] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:14:50.784 UTC [841] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:14:50.784 UTC [841] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:14:50.785 UTC [841] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:14:50.785 UTC [841] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:14:50.785 UTC [841] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:14:50.785 UTC [841] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:14:50.786 UTC [841] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:14:50.786 UTC [841] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:14:50.787 UTC [841] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:14:50.787 UTC [841] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:14:50.799 UTC [841] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:14:51.145 UTC [841] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Q8B7tOkLx3QRPJpozzgMBu6yjJYq9Bb13uxeSmi/YCuN.8l1qRoc2')
	                RETURNING id, username, email
	                
2025-04-19 19:14:51.147 UTC [841] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:14:51.148 UTC [841] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:04.582 UTC [841] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:15:04.916 UTC [841] DEBUG:  unexpected EOF on client connection
2025-04-19 19:15:06.240 UTC [856] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:15:07.697 UTC [857] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:07.705 UTC [857] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:07.715 UTC [857] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:07.715 UTC [857] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:07.728 UTC [857] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:07.733 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:07.737 UTC [857] DEBUG:  building index "pg_toast_36409_index" on table "pg_toast_36409" serially
2025-04-19 19:15:07.738 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:07.739 UTC [857] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:07.739 UTC [857] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:07.740 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:07.740 UTC [857] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:07.740 UTC [857] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:07.741 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:07.741 UTC [857] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:07.741 UTC [857] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:07.742 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:07.743 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:07.743 UTC [857] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:07.743 UTC [857] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:07.744 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:07.744 UTC [857] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:07.744 UTC [857] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:07.745 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:07.746 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:07.747 UTC [857] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:07.747 UTC [857] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:07.747 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:07.748 UTC [857] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:07.748 UTC [857] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:07.749 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:07.751 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:07.751 UTC [857] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:07.751 UTC [857] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:07.752 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:07.754 UTC [857] DEBUG:  building index "pg_toast_36470_index" on table "pg_toast_36470" serially
2025-04-19 19:15:07.755 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:07.756 UTC [857] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:07.756 UTC [857] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:07.757 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:07.758 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:07.759 UTC [857] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:07.759 UTC [857] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:07.760 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:07.760 UTC [857] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:07.760 UTC [857] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:07.761 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:07.764 UTC [857] DEBUG:  building index "pg_toast_36503_index" on table "pg_toast_36503" serially
2025-04-19 19:15:07.765 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:07.766 UTC [857] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:07.766 UTC [857] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:07.766 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:07.768 UTC [857] DEBUG:  building index "pg_toast_36514_index" on table "pg_toast_36514" serially
2025-04-19 19:15:07.769 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:07.769 UTC [857] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:07.769 UTC [857] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:07.771 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:07.772 UTC [857] DEBUG:  building index "pg_toast_36537_index" on table "pg_toast_36537" serially
2025-04-19 19:15:07.773 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:07.774 UTC [857] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:07.774 UTC [857] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:07.775 UTC [857] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:07.775 UTC [857] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:07.776 UTC [857] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:07.776 UTC [857] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:07.777 UTC [857] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:07.777 UTC [857] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:07.777 UTC [857] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:07.778 UTC [857] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:07.778 UTC [857] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:07.778 UTC [857] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:07.779 UTC [857] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:07.779 UTC [857] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:07.780 UTC [857] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:07.780 UTC [857] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:07.781 UTC [857] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:07.781 UTC [857] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:07.782 UTC [857] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:07.782 UTC [857] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:07.782 UTC [857] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:07.782 UTC [857] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:07.783 UTC [857] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:07.783 UTC [857] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:07.794 UTC [857] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:08.071 UTC [857] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$U3ambsqY0tDcLQhVkTXH3ufLrP52cCXitBDHhfQPvIDMTaHpT2Mt.')
	                RETURNING id, username, email
	                
2025-04-19 19:15:08.072 UTC [857] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:08.073 UTC [857] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:08.074 UTC [857] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:15:08.086 UTC [857] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:08.087 UTC [857] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:08.090 UTC [857] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:08.096 UTC [857] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:08.096 UTC [857] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:08.101 UTC [857] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:08.105 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:08.106 UTC [857] DEBUG:  building index "pg_toast_36573_index" on table "pg_toast_36573" serially
2025-04-19 19:15:08.107 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:08.107 UTC [857] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:08.107 UTC [857] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:08.108 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:08.108 UTC [857] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:08.108 UTC [857] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:08.109 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:08.109 UTC [857] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:08.109 UTC [857] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:08.109 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:08.110 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:08.110 UTC [857] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:08.110 UTC [857] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:08.111 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:08.111 UTC [857] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:08.111 UTC [857] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:08.114 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:08.115 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:08.115 UTC [857] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:08.115 UTC [857] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:08.116 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:08.116 UTC [857] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:08.116 UTC [857] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:08.117 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:08.118 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:08.118 UTC [857] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:08.118 UTC [857] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:08.119 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:08.120 UTC [857] DEBUG:  building index "pg_toast_36634_index" on table "pg_toast_36634" serially
2025-04-19 19:15:08.121 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:08.121 UTC [857] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:08.121 UTC [857] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:08.123 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:08.124 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:08.124 UTC [857] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:08.124 UTC [857] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:08.125 UTC [857] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:08.125 UTC [857] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:08.125 UTC [857] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:08.126 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:08.127 UTC [857] DEBUG:  building index "pg_toast_36667_index" on table "pg_toast_36667" serially
2025-04-19 19:15:08.128 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:08.128 UTC [857] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:08.128 UTC [857] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:08.129 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:08.130 UTC [857] DEBUG:  building index "pg_toast_36678_index" on table "pg_toast_36678" serially
2025-04-19 19:15:08.131 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:08.131 UTC [857] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:08.131 UTC [857] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:08.132 UTC [857] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:08.133 UTC [857] DEBUG:  building index "pg_toast_36701_index" on table "pg_toast_36701" serially
2025-04-19 19:15:08.134 UTC [857] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:08.134 UTC [857] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:08.134 UTC [857] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:08.135 UTC [857] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:08.135 UTC [857] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:08.136 UTC [857] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:08.136 UTC [857] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:08.137 UTC [857] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:08.137 UTC [857] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:08.137 UTC [857] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:08.137 UTC [857] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:08.139 UTC [857] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:08.139 UTC [857] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:08.140 UTC [857] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:08.140 UTC [857] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:08.142 UTC [857] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:08.142 UTC [857] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:08.144 UTC [857] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:08.144 UTC [857] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:08.146 UTC [857] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:08.146 UTC [857] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:08.148 UTC [857] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:08.148 UTC [857] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:08.149 UTC [857] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:08.149 UTC [857] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:08.158 UTC [857] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:08.441 UTC [857] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$U1ZY5p36.OnOxZeucijI5uYamL1BE8sP67.piY74dOo9sCrKv.FqS')
	                RETURNING id, username, email
	                
2025-04-19 19:15:08.442 UTC [857] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:08.443 UTC [857] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:20.786 UTC [857] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:15:21.105 UTC [857] DEBUG:  unexpected EOF on client connection
2025-04-19 19:15:23.551 UTC [865] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:23.558 UTC [865] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:23.564 UTC [865] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:23.564 UTC [865] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:23.572 UTC [865] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:23.577 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:23.580 UTC [865] DEBUG:  building index "pg_toast_36737_index" on table "pg_toast_36737" serially
2025-04-19 19:15:23.581 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:23.582 UTC [865] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:23.582 UTC [865] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:23.583 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:23.583 UTC [865] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:23.583 UTC [865] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:23.584 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:23.584 UTC [865] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:23.584 UTC [865] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:23.585 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:23.586 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:23.586 UTC [865] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:23.586 UTC [865] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:23.587 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:23.587 UTC [865] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:23.587 UTC [865] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:23.588 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:23.589 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:23.589 UTC [865] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:23.589 UTC [865] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:23.590 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:23.590 UTC [865] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:23.590 UTC [865] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:23.591 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:23.592 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:23.593 UTC [865] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:23.593 UTC [865] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:23.594 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:23.595 UTC [865] DEBUG:  building index "pg_toast_36798_index" on table "pg_toast_36798" serially
2025-04-19 19:15:23.596 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:23.596 UTC [865] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:23.596 UTC [865] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:23.597 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:23.598 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:23.599 UTC [865] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:23.599 UTC [865] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:23.599 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:23.600 UTC [865] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:23.600 UTC [865] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:23.601 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:23.602 UTC [865] DEBUG:  building index "pg_toast_36831_index" on table "pg_toast_36831" serially
2025-04-19 19:15:23.602 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:23.603 UTC [865] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:23.603 UTC [865] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:23.603 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:23.605 UTC [865] DEBUG:  building index "pg_toast_36842_index" on table "pg_toast_36842" serially
2025-04-19 19:15:23.605 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:23.606 UTC [865] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:23.606 UTC [865] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:23.607 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:23.608 UTC [865] DEBUG:  building index "pg_toast_36865_index" on table "pg_toast_36865" serially
2025-04-19 19:15:23.609 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:23.609 UTC [865] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:23.609 UTC [865] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:23.611 UTC [865] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:23.611 UTC [865] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:23.612 UTC [865] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:23.612 UTC [865] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:23.613 UTC [865] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:23.613 UTC [865] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:23.614 UTC [865] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:23.614 UTC [865] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:23.615 UTC [865] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:23.615 UTC [865] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:23.615 UTC [865] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:23.615 UTC [865] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:23.616 UTC [865] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:23.616 UTC [865] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:23.617 UTC [865] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:23.617 UTC [865] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:23.618 UTC [865] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:23.618 UTC [865] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:23.619 UTC [865] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:23.619 UTC [865] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:23.621 UTC [865] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:23.621 UTC [865] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:23.640 UTC [865] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:23.912 UTC [865] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6sBkgHPh/KvcIoUiCkdes.EHphfnxKcpmgk1VHNevxmi9roHAouhG')
	                RETURNING id, username, email
	                
2025-04-19 19:15:23.913 UTC [865] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:23.914 UTC [865] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:23.916 UTC [865] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:15:23.932 UTC [865] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:23.933 UTC [865] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:23.936 UTC [865] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:23.941 UTC [865] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:23.941 UTC [865] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:23.946 UTC [865] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:23.950 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:23.951 UTC [865] DEBUG:  building index "pg_toast_36901_index" on table "pg_toast_36901" serially
2025-04-19 19:15:23.953 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:23.953 UTC [865] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:23.953 UTC [865] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:23.954 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:23.955 UTC [865] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:23.955 UTC [865] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:23.956 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:23.956 UTC [865] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:23.956 UTC [865] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:23.957 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:23.957 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:23.958 UTC [865] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:23.958 UTC [865] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:23.959 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:23.959 UTC [865] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:23.959 UTC [865] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:23.959 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:23.960 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:23.960 UTC [865] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:23.960 UTC [865] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:23.961 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:23.961 UTC [865] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:23.961 UTC [865] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:23.962 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:23.963 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:23.963 UTC [865] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:23.963 UTC [865] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:23.964 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:23.966 UTC [865] DEBUG:  building index "pg_toast_36962_index" on table "pg_toast_36962" serially
2025-04-19 19:15:23.966 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:23.967 UTC [865] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:23.967 UTC [865] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:23.968 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:23.969 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:23.969 UTC [865] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:23.969 UTC [865] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:23.970 UTC [865] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:23.970 UTC [865] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:23.970 UTC [865] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:23.971 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:23.972 UTC [865] DEBUG:  building index "pg_toast_36995_index" on table "pg_toast_36995" serially
2025-04-19 19:15:23.973 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:23.973 UTC [865] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:23.973 UTC [865] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:23.974 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:23.975 UTC [865] DEBUG:  building index "pg_toast_37006_index" on table "pg_toast_37006" serially
2025-04-19 19:15:23.975 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:23.976 UTC [865] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:23.976 UTC [865] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:23.977 UTC [865] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:23.978 UTC [865] DEBUG:  building index "pg_toast_37029_index" on table "pg_toast_37029" serially
2025-04-19 19:15:23.979 UTC [865] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:23.979 UTC [865] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:23.979 UTC [865] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:23.980 UTC [865] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:23.980 UTC [865] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:23.981 UTC [865] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:23.981 UTC [865] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:23.982 UTC [865] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:23.982 UTC [865] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:23.982 UTC [865] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:23.982 UTC [865] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:23.983 UTC [865] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:23.983 UTC [865] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:23.984 UTC [865] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:23.984 UTC [865] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:23.985 UTC [865] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:23.985 UTC [865] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:23.986 UTC [865] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:23.986 UTC [865] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:23.987 UTC [865] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:23.987 UTC [865] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:23.988 UTC [865] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:23.988 UTC [865] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:23.989 UTC [865] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:23.989 UTC [865] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:24.001 UTC [865] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:24.264 UTC [865] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4gLNhRd6Mwbepmn7XmPY.euSPBD/kAH6Z7K.BdbqUA03Es6GBui1a')
	                RETURNING id, username, email
	                
2025-04-19 19:15:24.265 UTC [865] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:24.266 UTC [865] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:36.177 UTC [873] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:15:36.393 UTC [873] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:15:37.135 UTC [865] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:15:37.410 UTC [865] DEBUG:  unexpected EOF on client connection
2025-04-19 19:15:39.427 UTC [881] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:39.434 UTC [881] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:39.444 UTC [881] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:39.444 UTC [881] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:39.449 UTC [881] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:39.453 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:39.456 UTC [881] DEBUG:  building index "pg_toast_37066_index" on table "pg_toast_37066" serially
2025-04-19 19:15:39.458 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:39.459 UTC [881] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:39.459 UTC [881] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:39.462 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:39.462 UTC [881] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:39.463 UTC [881] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:39.464 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:39.464 UTC [881] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:39.464 UTC [881] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:39.465 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:39.466 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:39.467 UTC [881] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:39.467 UTC [881] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:39.467 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:39.468 UTC [881] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:39.468 UTC [881] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:39.468 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:39.470 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:39.470 UTC [881] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:39.470 UTC [881] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:39.471 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:39.471 UTC [881] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:39.471 UTC [881] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:39.473 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:39.474 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:39.474 UTC [881] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:39.474 UTC [881] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:39.475 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:39.477 UTC [881] DEBUG:  building index "pg_toast_37127_index" on table "pg_toast_37127" serially
2025-04-19 19:15:39.478 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:39.478 UTC [881] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:39.478 UTC [881] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:39.479 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:39.480 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:39.480 UTC [881] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:39.480 UTC [881] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:39.481 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:39.481 UTC [881] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:39.481 UTC [881] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:39.482 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:39.483 UTC [881] DEBUG:  building index "pg_toast_37160_index" on table "pg_toast_37160" serially
2025-04-19 19:15:39.484 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:39.484 UTC [881] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:39.484 UTC [881] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:39.485 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:39.486 UTC [881] DEBUG:  building index "pg_toast_37171_index" on table "pg_toast_37171" serially
2025-04-19 19:15:39.487 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:39.487 UTC [881] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:39.487 UTC [881] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:39.488 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:39.489 UTC [881] DEBUG:  building index "pg_toast_37194_index" on table "pg_toast_37194" serially
2025-04-19 19:15:39.490 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:39.490 UTC [881] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:39.490 UTC [881] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:39.491 UTC [881] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:39.491 UTC [881] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:39.492 UTC [881] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:39.492 UTC [881] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:39.493 UTC [881] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:39.493 UTC [881] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:39.494 UTC [881] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:39.494 UTC [881] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:39.494 UTC [881] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:39.494 UTC [881] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:39.495 UTC [881] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:39.495 UTC [881] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:39.496 UTC [881] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:39.496 UTC [881] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:39.497 UTC [881] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:39.497 UTC [881] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:39.498 UTC [881] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:39.498 UTC [881] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:39.499 UTC [881] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:39.499 UTC [881] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:39.499 UTC [881] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:39.499 UTC [881] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:39.512 UTC [881] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:39.776 UTC [881] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$NdfcpAqgZyQlwd.LLvqbjOHUPfKPPf5L/7inkn2olgPcagtd6Vz8y')
	                RETURNING id, username, email
	                
2025-04-19 19:15:39.777 UTC [881] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:39.777 UTC [881] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:39.778 UTC [881] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:15:39.789 UTC [881] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:39.790 UTC [881] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:39.792 UTC [881] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:39.796 UTC [881] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:39.796 UTC [881] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:39.800 UTC [881] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:39.803 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:39.804 UTC [881] DEBUG:  building index "pg_toast_37230_index" on table "pg_toast_37230" serially
2025-04-19 19:15:39.805 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:39.805 UTC [881] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:39.805 UTC [881] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:39.806 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:39.806 UTC [881] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:39.806 UTC [881] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:39.807 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:39.807 UTC [881] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:39.807 UTC [881] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:39.808 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:39.808 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:39.809 UTC [881] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:39.809 UTC [881] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:39.809 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:39.810 UTC [881] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:39.810 UTC [881] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:39.810 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:39.811 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:39.811 UTC [881] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:39.811 UTC [881] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:39.812 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:39.812 UTC [881] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:39.812 UTC [881] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:39.814 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:39.814 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:39.815 UTC [881] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:39.815 UTC [881] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:39.816 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:39.818 UTC [881] DEBUG:  building index "pg_toast_37291_index" on table "pg_toast_37291" serially
2025-04-19 19:15:39.818 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:39.819 UTC [881] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:39.819 UTC [881] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:39.820 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:39.821 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:39.821 UTC [881] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:39.821 UTC [881] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:39.822 UTC [881] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:39.823 UTC [881] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:39.823 UTC [881] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:39.824 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:39.826 UTC [881] DEBUG:  building index "pg_toast_37324_index" on table "pg_toast_37324" serially
2025-04-19 19:15:39.827 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:39.827 UTC [881] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:39.827 UTC [881] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:39.828 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:39.829 UTC [881] DEBUG:  building index "pg_toast_37335_index" on table "pg_toast_37335" serially
2025-04-19 19:15:39.829 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:39.830 UTC [881] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:39.830 UTC [881] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:39.831 UTC [881] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:39.832 UTC [881] DEBUG:  building index "pg_toast_37358_index" on table "pg_toast_37358" serially
2025-04-19 19:15:39.833 UTC [881] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:39.833 UTC [881] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:39.833 UTC [881] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:39.834 UTC [881] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:39.834 UTC [881] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:39.835 UTC [881] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:39.835 UTC [881] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:39.835 UTC [881] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:39.835 UTC [881] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:39.836 UTC [881] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:39.836 UTC [881] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:39.837 UTC [881] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:39.837 UTC [881] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:39.838 UTC [881] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:39.838 UTC [881] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:39.839 UTC [881] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:39.839 UTC [881] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:39.840 UTC [881] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:39.840 UTC [881] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:39.840 UTC [881] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:39.840 UTC [881] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:39.842 UTC [881] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:39.842 UTC [881] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:39.844 UTC [881] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:39.844 UTC [881] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:39.852 UTC [881] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:40.132 UTC [881] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.t149ZfIO7AoRKbzdD8t5Oea5V953jF67VniT4qyv.7fa3RdEavpO')
	                RETURNING id, username, email
	                
2025-04-19 19:15:40.133 UTC [881] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:40.134 UTC [881] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:52.995 UTC [881] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:15:53.283 UTC [881] DEBUG:  unexpected EOF on client connection
2025-04-19 19:15:55.194 UTC [889] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:55.203 UTC [889] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:55.211 UTC [889] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:55.211 UTC [889] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:55.215 UTC [889] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:55.219 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:55.222 UTC [889] DEBUG:  building index "pg_toast_37394_index" on table "pg_toast_37394" serially
2025-04-19 19:15:55.224 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:55.225 UTC [889] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:55.225 UTC [889] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:55.226 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:55.226 UTC [889] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:55.226 UTC [889] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:55.227 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:55.227 UTC [889] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:55.227 UTC [889] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:55.228 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:55.228 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:55.229 UTC [889] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:55.229 UTC [889] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:55.229 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:55.230 UTC [889] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:55.230 UTC [889] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:55.232 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:55.233 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:55.233 UTC [889] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:55.233 UTC [889] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:55.234 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:55.234 UTC [889] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:55.234 UTC [889] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:55.236 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:55.237 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:55.237 UTC [889] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:55.237 UTC [889] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:55.238 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:55.240 UTC [889] DEBUG:  building index "pg_toast_37455_index" on table "pg_toast_37455" serially
2025-04-19 19:15:55.241 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:55.241 UTC [889] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:55.241 UTC [889] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:55.242 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:55.243 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:55.244 UTC [889] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:55.244 UTC [889] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:55.245 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:55.245 UTC [889] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:55.245 UTC [889] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:55.246 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:55.247 UTC [889] DEBUG:  building index "pg_toast_37488_index" on table "pg_toast_37488" serially
2025-04-19 19:15:55.248 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:55.248 UTC [889] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:55.248 UTC [889] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:55.249 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:55.250 UTC [889] DEBUG:  building index "pg_toast_37499_index" on table "pg_toast_37499" serially
2025-04-19 19:15:55.251 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:55.251 UTC [889] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:55.251 UTC [889] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:55.253 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:55.253 UTC [889] DEBUG:  building index "pg_toast_37522_index" on table "pg_toast_37522" serially
2025-04-19 19:15:55.254 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:55.254 UTC [889] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:55.254 UTC [889] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:55.255 UTC [889] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:55.255 UTC [889] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:55.256 UTC [889] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:55.256 UTC [889] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:55.257 UTC [889] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:55.257 UTC [889] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:55.258 UTC [889] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:55.258 UTC [889] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:55.259 UTC [889] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:55.259 UTC [889] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:55.260 UTC [889] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:55.260 UTC [889] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:55.261 UTC [889] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:55.261 UTC [889] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:55.261 UTC [889] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:55.261 UTC [889] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:55.262 UTC [889] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:55.262 UTC [889] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:55.263 UTC [889] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:55.263 UTC [889] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:55.264 UTC [889] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:55.264 UTC [889] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:55.275 UTC [889] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:55.560 UTC [889] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jBhz9vDMwTRtoKlI2BUqQe/0FIz/IAsUK1NV0GCOOypDbxeKvMTCm')
	                RETURNING id, username, email
	                
2025-04-19 19:15:55.561 UTC [889] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:55.561 UTC [889] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:15:55.563 UTC [889] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:15:55.591 UTC [889] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:55.592 UTC [889] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:15:55.595 UTC [889] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:15:55.600 UTC [889] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:15:55.600 UTC [889] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:15:55.605 UTC [889] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:15:55.608 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:15:55.609 UTC [889] DEBUG:  building index "pg_toast_37558_index" on table "pg_toast_37558" serially
2025-04-19 19:15:55.611 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:15:55.611 UTC [889] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:15:55.611 UTC [889] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:15:55.612 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:15:55.612 UTC [889] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:15:55.612 UTC [889] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:15:55.612 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:15:55.613 UTC [889] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:15:55.613 UTC [889] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:15:55.617 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:15:55.618 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:15:55.619 UTC [889] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:15:55.619 UTC [889] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:15:55.619 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:15:55.619 UTC [889] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:15:55.619 UTC [889] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:15:55.620 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:15:55.621 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:15:55.621 UTC [889] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:15:55.621 UTC [889] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:15:55.622 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:15:55.622 UTC [889] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:15:55.622 UTC [889] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:15:55.623 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:15:55.624 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:15:55.624 UTC [889] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:15:55.624 UTC [889] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:15:55.627 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:15:55.628 UTC [889] DEBUG:  building index "pg_toast_37619_index" on table "pg_toast_37619" serially
2025-04-19 19:15:55.630 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:15:55.631 UTC [889] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:15:55.631 UTC [889] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:15:55.632 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:15:55.633 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:15:55.634 UTC [889] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:15:55.634 UTC [889] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:15:55.634 UTC [889] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:15:55.635 UTC [889] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:15:55.635 UTC [889] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:15:55.636 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:15:55.637 UTC [889] DEBUG:  building index "pg_toast_37652_index" on table "pg_toast_37652" serially
2025-04-19 19:15:55.638 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:15:55.638 UTC [889] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:15:55.638 UTC [889] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:15:55.639 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:15:55.640 UTC [889] DEBUG:  building index "pg_toast_37663_index" on table "pg_toast_37663" serially
2025-04-19 19:15:55.641 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:15:55.641 UTC [889] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:15:55.641 UTC [889] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:15:55.644 UTC [889] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:15:55.647 UTC [889] DEBUG:  building index "pg_toast_37686_index" on table "pg_toast_37686" serially
2025-04-19 19:15:55.648 UTC [889] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:15:55.648 UTC [889] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:15:55.648 UTC [889] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:15:55.649 UTC [889] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:15:55.649 UTC [889] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:15:55.650 UTC [889] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:15:55.650 UTC [889] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:15:55.651 UTC [889] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:15:55.651 UTC [889] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:15:55.653 UTC [889] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:15:55.653 UTC [889] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:15:55.654 UTC [889] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:15:55.654 UTC [889] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:15:55.655 UTC [889] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:15:55.656 UTC [889] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:15:55.656 UTC [889] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:15:55.656 UTC [889] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:15:55.657 UTC [889] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:15:55.657 UTC [889] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:15:55.658 UTC [889] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:15:55.658 UTC [889] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:15:55.659 UTC [889] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:15:55.659 UTC [889] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:15:55.660 UTC [889] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:15:55.660 UTC [889] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:15:55.668 UTC [889] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:15:55.913 UTC [889] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lQnfC.YEUkYAZFFNudEEw.TH8EMgssjbQrT54E9/uABOXIRJ7g1TS')
	                RETURNING id, username, email
	                
2025-04-19 19:15:55.914 UTC [889] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:15:55.915 UTC [889] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:06.279 UTC [897] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:16:09.023 UTC [889] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:16:09.303 UTC [889] DEBUG:  unexpected EOF on client connection
2025-04-19 19:16:10.983 UTC [905] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:11.000 UTC [905] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:11.017 UTC [905] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:11.017 UTC [905] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:11.026 UTC [905] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:11.030 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:11.033 UTC [905] DEBUG:  building index "pg_toast_37722_index" on table "pg_toast_37722" serially
2025-04-19 19:16:11.034 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:11.035 UTC [905] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:11.035 UTC [905] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:11.036 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:11.037 UTC [905] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:11.037 UTC [905] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:11.038 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:11.038 UTC [905] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:11.038 UTC [905] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:11.039 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:11.041 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:11.041 UTC [905] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:11.041 UTC [905] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:11.041 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:11.042 UTC [905] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:11.042 UTC [905] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:11.042 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:11.043 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:11.044 UTC [905] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:11.044 UTC [905] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:11.044 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:11.045 UTC [905] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:11.045 UTC [905] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:11.046 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:11.047 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:11.047 UTC [905] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:11.047 UTC [905] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:11.048 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:11.050 UTC [905] DEBUG:  building index "pg_toast_37783_index" on table "pg_toast_37783" serially
2025-04-19 19:16:11.052 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:11.052 UTC [905] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:11.052 UTC [905] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:11.053 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:11.054 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:11.054 UTC [905] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:11.054 UTC [905] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:11.056 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:11.056 UTC [905] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:11.056 UTC [905] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:11.057 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:11.058 UTC [905] DEBUG:  building index "pg_toast_37816_index" on table "pg_toast_37816" serially
2025-04-19 19:16:11.059 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:11.060 UTC [905] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:11.060 UTC [905] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:11.060 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:11.062 UTC [905] DEBUG:  building index "pg_toast_37827_index" on table "pg_toast_37827" serially
2025-04-19 19:16:11.063 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:11.063 UTC [905] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:11.063 UTC [905] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:11.064 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:11.067 UTC [905] DEBUG:  building index "pg_toast_37850_index" on table "pg_toast_37850" serially
2025-04-19 19:16:11.069 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:11.069 UTC [905] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:11.070 UTC [905] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:11.071 UTC [905] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:11.071 UTC [905] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:11.074 UTC [905] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:11.074 UTC [905] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:11.075 UTC [905] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:11.075 UTC [905] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:11.076 UTC [905] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:11.076 UTC [905] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:11.078 UTC [905] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:11.078 UTC [905] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:11.080 UTC [905] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:11.080 UTC [905] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:11.082 UTC [905] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:11.082 UTC [905] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:11.083 UTC [905] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:11.083 UTC [905] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:11.084 UTC [905] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:11.084 UTC [905] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:11.085 UTC [905] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:11.085 UTC [905] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:11.086 UTC [905] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:11.086 UTC [905] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:11.101 UTC [905] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:11.368 UTC [905] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bWkvF5GO0AYa3QT7UafrhOFYob7GJ9QTEppTgHmIUEdKuwLPSbdT6')
	                RETURNING id, username, email
	                
2025-04-19 19:16:11.369 UTC [905] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:11.370 UTC [905] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:11.370 UTC [905] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:16:11.390 UTC [905] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:11.391 UTC [905] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:11.395 UTC [905] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:11.399 UTC [905] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:11.399 UTC [905] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:11.403 UTC [905] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:11.406 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:11.407 UTC [905] DEBUG:  building index "pg_toast_37886_index" on table "pg_toast_37886" serially
2025-04-19 19:16:11.408 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:11.408 UTC [905] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:11.408 UTC [905] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:11.409 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:11.409 UTC [905] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:11.409 UTC [905] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:11.410 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:11.410 UTC [905] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:11.410 UTC [905] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:11.411 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:11.412 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:11.413 UTC [905] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:11.413 UTC [905] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:11.414 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:11.414 UTC [905] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:11.414 UTC [905] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:11.415 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:11.417 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:11.417 UTC [905] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:11.417 UTC [905] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:11.423 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:11.423 UTC [905] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:11.423 UTC [905] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:11.426 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:11.428 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:11.428 UTC [905] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:11.429 UTC [905] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:11.430 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:11.431 UTC [905] DEBUG:  building index "pg_toast_37947_index" on table "pg_toast_37947" serially
2025-04-19 19:16:11.431 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:11.432 UTC [905] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:11.432 UTC [905] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:11.433 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:11.434 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:11.434 UTC [905] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:11.434 UTC [905] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:11.435 UTC [905] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:11.435 UTC [905] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:11.435 UTC [905] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:11.436 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:11.437 UTC [905] DEBUG:  building index "pg_toast_37980_index" on table "pg_toast_37980" serially
2025-04-19 19:16:11.438 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:11.438 UTC [905] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:11.438 UTC [905] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:11.439 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:11.440 UTC [905] DEBUG:  building index "pg_toast_37991_index" on table "pg_toast_37991" serially
2025-04-19 19:16:11.442 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:11.442 UTC [905] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:11.442 UTC [905] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:11.444 UTC [905] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:11.445 UTC [905] DEBUG:  building index "pg_toast_38014_index" on table "pg_toast_38014" serially
2025-04-19 19:16:11.445 UTC [905] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:11.445 UTC [905] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:11.446 UTC [905] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:11.447 UTC [905] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:11.447 UTC [905] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:11.447 UTC [905] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:11.447 UTC [905] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:11.448 UTC [905] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:11.448 UTC [905] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:11.449 UTC [905] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:11.449 UTC [905] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:11.450 UTC [905] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:11.450 UTC [905] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:11.451 UTC [905] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:11.451 UTC [905] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:11.452 UTC [905] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:11.452 UTC [905] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:11.452 UTC [905] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:11.453 UTC [905] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:11.453 UTC [905] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:11.453 UTC [905] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:11.454 UTC [905] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:11.454 UTC [905] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:11.455 UTC [905] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:11.455 UTC [905] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:11.465 UTC [905] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:11.733 UTC [905] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$B.B7/ynFYF2OqK6c8OS2GO7KyBvENdxh3zk2afRWvcrkYEHSzXsbe')
	                RETURNING id, username, email
	                
2025-04-19 19:16:11.734 UTC [905] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:11.735 UTC [905] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:24.873 UTC [905] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:16:25.174 UTC [905] DEBUG:  unexpected EOF on client connection
2025-04-19 19:16:26.779 UTC [913] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:26.785 UTC [913] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:26.791 UTC [913] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:26.791 UTC [913] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:26.795 UTC [913] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:26.798 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:26.803 UTC [913] DEBUG:  building index "pg_toast_38050_index" on table "pg_toast_38050" serially
2025-04-19 19:16:26.806 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:26.806 UTC [913] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:26.806 UTC [913] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:26.807 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:26.807 UTC [913] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:26.808 UTC [913] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:26.808 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:26.808 UTC [913] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:26.808 UTC [913] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:26.809 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:26.810 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:26.810 UTC [913] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:26.810 UTC [913] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:26.811 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:26.811 UTC [913] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:26.811 UTC [913] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:26.812 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:26.813 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:26.813 UTC [913] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:26.813 UTC [913] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:26.814 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:26.814 UTC [913] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:26.814 UTC [913] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:26.816 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:26.817 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:26.817 UTC [913] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:26.817 UTC [913] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:26.819 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:26.820 UTC [913] DEBUG:  building index "pg_toast_38111_index" on table "pg_toast_38111" serially
2025-04-19 19:16:26.821 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:26.821 UTC [913] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:26.821 UTC [913] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:26.823 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:26.824 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:26.824 UTC [913] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:26.824 UTC [913] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:26.825 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:26.825 UTC [913] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:26.825 UTC [913] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:26.826 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:26.828 UTC [913] DEBUG:  building index "pg_toast_38144_index" on table "pg_toast_38144" serially
2025-04-19 19:16:26.829 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:26.829 UTC [913] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:26.829 UTC [913] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:26.830 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:26.832 UTC [913] DEBUG:  building index "pg_toast_38155_index" on table "pg_toast_38155" serially
2025-04-19 19:16:26.833 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:26.833 UTC [913] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:26.833 UTC [913] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:26.835 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:26.836 UTC [913] DEBUG:  building index "pg_toast_38178_index" on table "pg_toast_38178" serially
2025-04-19 19:16:26.837 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:26.837 UTC [913] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:26.837 UTC [913] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:26.838 UTC [913] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:26.838 UTC [913] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:26.839 UTC [913] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:26.839 UTC [913] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:26.840 UTC [913] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:26.840 UTC [913] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:26.841 UTC [913] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:26.841 UTC [913] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:26.842 UTC [913] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:26.842 UTC [913] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:26.843 UTC [913] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:26.843 UTC [913] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:26.843 UTC [913] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:26.843 UTC [913] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:26.844 UTC [913] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:26.844 UTC [913] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:26.845 UTC [913] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:26.845 UTC [913] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:26.846 UTC [913] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:26.846 UTC [913] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:26.847 UTC [913] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:26.847 UTC [913] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:26.856 UTC [913] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:27.215 UTC [913] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$aijYl92BqhPCMi4Z60DMrerB9skPzggsV4wtXaU/nazp0v0EOoHlC')
	                RETURNING id, username, email
	                
2025-04-19 19:16:27.216 UTC [913] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:27.217 UTC [913] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:27.218 UTC [913] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:16:27.236 UTC [913] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:27.238 UTC [913] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:27.241 UTC [913] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:27.249 UTC [913] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:27.249 UTC [913] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:27.253 UTC [913] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:27.256 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:27.258 UTC [913] DEBUG:  building index "pg_toast_38214_index" on table "pg_toast_38214" serially
2025-04-19 19:16:27.259 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:27.260 UTC [913] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:27.260 UTC [913] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:27.261 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:27.261 UTC [913] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:27.261 UTC [913] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:27.262 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:27.262 UTC [913] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:27.262 UTC [913] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:27.263 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:27.263 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:27.264 UTC [913] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:27.264 UTC [913] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:27.264 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:27.265 UTC [913] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:27.265 UTC [913] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:27.266 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:27.267 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:27.267 UTC [913] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:27.267 UTC [913] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:27.269 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:27.269 UTC [913] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:27.270 UTC [913] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:27.281 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:27.286 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:27.287 UTC [913] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:27.287 UTC [913] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:27.291 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:27.292 UTC [913] DEBUG:  building index "pg_toast_38275_index" on table "pg_toast_38275" serially
2025-04-19 19:16:27.293 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:27.294 UTC [913] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:27.294 UTC [913] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:27.295 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:27.296 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:27.296 UTC [913] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:27.296 UTC [913] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:27.297 UTC [913] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:27.297 UTC [913] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:27.297 UTC [913] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:27.300 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:27.303 UTC [913] DEBUG:  building index "pg_toast_38308_index" on table "pg_toast_38308" serially
2025-04-19 19:16:27.304 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:27.304 UTC [913] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:27.304 UTC [913] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:27.306 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:27.310 UTC [913] DEBUG:  building index "pg_toast_38319_index" on table "pg_toast_38319" serially
2025-04-19 19:16:27.311 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:27.312 UTC [913] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:27.312 UTC [913] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:27.313 UTC [913] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:27.314 UTC [913] DEBUG:  building index "pg_toast_38342_index" on table "pg_toast_38342" serially
2025-04-19 19:16:27.315 UTC [913] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:27.315 UTC [913] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:27.315 UTC [913] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:27.316 UTC [913] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:27.316 UTC [913] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:27.317 UTC [913] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:27.317 UTC [913] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:27.318 UTC [913] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:27.318 UTC [913] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:27.319 UTC [913] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:27.319 UTC [913] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:27.319 UTC [913] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:27.319 UTC [913] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:27.320 UTC [913] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:27.320 UTC [913] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:27.321 UTC [913] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:27.321 UTC [913] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:27.322 UTC [913] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:27.322 UTC [913] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:27.322 UTC [913] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:27.322 UTC [913] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:27.323 UTC [913] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:27.323 UTC [913] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:27.324 UTC [913] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:27.324 UTC [913] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:27.332 UTC [913] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:27.578 UTC [913] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kH75msI12/Y/t3jcSrX/F.3GuJj3R/wrmyiP0BfGnLTbAutsLTs0W')
	                RETURNING id, username, email
	                
2025-04-19 19:16:27.579 UTC [913] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:27.580 UTC [913] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:36.184 UTC [921] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:16:36.426 UTC [921] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:16:40.714 UTC [913] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:16:40.989 UTC [913] DEBUG:  unexpected EOF on client connection
2025-04-19 19:16:42.579 UTC [929] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:42.584 UTC [929] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:42.590 UTC [929] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:42.590 UTC [929] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:42.594 UTC [929] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:42.600 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:42.603 UTC [929] DEBUG:  building index "pg_toast_38379_index" on table "pg_toast_38379" serially
2025-04-19 19:16:42.605 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:42.605 UTC [929] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:42.605 UTC [929] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:42.606 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:42.606 UTC [929] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:42.606 UTC [929] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:42.607 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:42.607 UTC [929] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:42.607 UTC [929] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:42.608 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:42.609 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:42.609 UTC [929] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:42.609 UTC [929] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:42.610 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:42.610 UTC [929] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:42.610 UTC [929] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:42.611 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:42.612 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:42.612 UTC [929] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:42.612 UTC [929] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:42.613 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:42.613 UTC [929] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:42.613 UTC [929] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:42.615 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:42.616 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:42.616 UTC [929] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:42.616 UTC [929] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:42.617 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:42.618 UTC [929] DEBUG:  building index "pg_toast_38440_index" on table "pg_toast_38440" serially
2025-04-19 19:16:42.619 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:42.619 UTC [929] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:42.619 UTC [929] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:42.621 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:42.622 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:42.622 UTC [929] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:42.622 UTC [929] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:42.623 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:42.623 UTC [929] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:42.623 UTC [929] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:42.624 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:42.625 UTC [929] DEBUG:  building index "pg_toast_38473_index" on table "pg_toast_38473" serially
2025-04-19 19:16:42.626 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:42.626 UTC [929] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:42.626 UTC [929] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:42.627 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:42.628 UTC [929] DEBUG:  building index "pg_toast_38484_index" on table "pg_toast_38484" serially
2025-04-19 19:16:42.628 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:42.629 UTC [929] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:42.629 UTC [929] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:42.630 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:42.631 UTC [929] DEBUG:  building index "pg_toast_38507_index" on table "pg_toast_38507" serially
2025-04-19 19:16:42.632 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:42.632 UTC [929] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:42.632 UTC [929] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:42.632 UTC [929] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:42.633 UTC [929] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:42.633 UTC [929] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:42.633 UTC [929] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:42.634 UTC [929] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:42.634 UTC [929] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:42.635 UTC [929] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:42.635 UTC [929] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:42.636 UTC [929] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:42.636 UTC [929] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:42.636 UTC [929] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:42.636 UTC [929] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:42.637 UTC [929] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:42.637 UTC [929] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:42.638 UTC [929] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:42.638 UTC [929] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:42.639 UTC [929] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:42.639 UTC [929] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:42.640 UTC [929] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:42.640 UTC [929] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:42.640 UTC [929] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:42.640 UTC [929] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:42.653 UTC [929] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:42.918 UTC [929] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xoTUBqdtdPu9F2mbjWmideyE9CS722pAbmjZw.c8M0BjTbhjBFBgK')
	                RETURNING id, username, email
	                
2025-04-19 19:16:42.919 UTC [929] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:42.919 UTC [929] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:42.920 UTC [929] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:16:42.929 UTC [929] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:42.930 UTC [929] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:42.932 UTC [929] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:42.936 UTC [929] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:42.936 UTC [929] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:42.939 UTC [929] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:42.942 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:42.943 UTC [929] DEBUG:  building index "pg_toast_38543_index" on table "pg_toast_38543" serially
2025-04-19 19:16:42.944 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:42.944 UTC [929] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:42.944 UTC [929] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:42.945 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:42.945 UTC [929] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:42.945 UTC [929] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:42.946 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:42.946 UTC [929] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:42.946 UTC [929] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:42.947 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:42.948 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:42.948 UTC [929] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:42.948 UTC [929] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:42.949 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:42.949 UTC [929] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:42.949 UTC [929] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:42.949 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:42.950 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:42.950 UTC [929] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:42.950 UTC [929] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:42.951 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:42.951 UTC [929] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:42.951 UTC [929] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:42.952 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:42.953 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:42.953 UTC [929] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:42.953 UTC [929] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:42.954 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:42.956 UTC [929] DEBUG:  building index "pg_toast_38604_index" on table "pg_toast_38604" serially
2025-04-19 19:16:42.957 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:42.958 UTC [929] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:42.958 UTC [929] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:42.959 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:42.959 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:42.960 UTC [929] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:42.960 UTC [929] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:42.960 UTC [929] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:42.961 UTC [929] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:42.961 UTC [929] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:42.961 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:42.962 UTC [929] DEBUG:  building index "pg_toast_38637_index" on table "pg_toast_38637" serially
2025-04-19 19:16:42.963 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:42.963 UTC [929] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:42.963 UTC [929] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:42.964 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:42.965 UTC [929] DEBUG:  building index "pg_toast_38648_index" on table "pg_toast_38648" serially
2025-04-19 19:16:42.966 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:42.966 UTC [929] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:42.966 UTC [929] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:42.967 UTC [929] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:42.968 UTC [929] DEBUG:  building index "pg_toast_38671_index" on table "pg_toast_38671" serially
2025-04-19 19:16:42.969 UTC [929] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:42.969 UTC [929] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:42.969 UTC [929] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:42.970 UTC [929] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:42.970 UTC [929] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:42.971 UTC [929] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:42.971 UTC [929] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:42.971 UTC [929] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:42.971 UTC [929] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:42.972 UTC [929] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:42.972 UTC [929] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:42.973 UTC [929] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:42.973 UTC [929] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:42.974 UTC [929] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:42.974 UTC [929] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:42.974 UTC [929] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:42.974 UTC [929] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:42.975 UTC [929] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:42.975 UTC [929] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:42.976 UTC [929] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:42.976 UTC [929] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:42.977 UTC [929] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:42.977 UTC [929] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:42.978 UTC [929] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:42.978 UTC [929] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:42.984 UTC [929] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:43.229 UTC [929] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$wCCgf8.NTg.A8tZ2FeJpQ.kfe8.PIGTvUE9Yi.HOYNDUYWGWYX9Pu')
	                RETURNING id, username, email
	                
2025-04-19 19:16:43.230 UTC [929] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:43.230 UTC [929] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:56.583 UTC [929] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:16:56.888 UTC [929] DEBUG:  unexpected EOF on client connection
2025-04-19 19:16:58.629 UTC [944] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:58.638 UTC [944] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:58.643 UTC [944] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:58.643 UTC [944] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:58.647 UTC [944] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:58.650 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:58.653 UTC [944] DEBUG:  building index "pg_toast_38707_index" on table "pg_toast_38707" serially
2025-04-19 19:16:58.655 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:58.656 UTC [944] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:58.656 UTC [944] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:58.657 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:58.657 UTC [944] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:58.657 UTC [944] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:58.658 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:58.658 UTC [944] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:58.658 UTC [944] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:58.659 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:58.660 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:58.660 UTC [944] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:58.660 UTC [944] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:58.661 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:58.661 UTC [944] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:58.661 UTC [944] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:58.662 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:58.663 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:58.663 UTC [944] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:58.663 UTC [944] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:58.664 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:58.664 UTC [944] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:58.664 UTC [944] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:58.665 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:58.666 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:58.667 UTC [944] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:58.667 UTC [944] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:58.668 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:58.669 UTC [944] DEBUG:  building index "pg_toast_38768_index" on table "pg_toast_38768" serially
2025-04-19 19:16:58.670 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:58.670 UTC [944] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:58.670 UTC [944] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:58.671 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:58.673 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:58.673 UTC [944] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:58.673 UTC [944] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:58.674 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:58.674 UTC [944] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:58.674 UTC [944] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:58.675 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:58.676 UTC [944] DEBUG:  building index "pg_toast_38801_index" on table "pg_toast_38801" serially
2025-04-19 19:16:58.677 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:58.677 UTC [944] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:58.677 UTC [944] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:58.678 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:58.679 UTC [944] DEBUG:  building index "pg_toast_38812_index" on table "pg_toast_38812" serially
2025-04-19 19:16:58.679 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:58.680 UTC [944] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:58.680 UTC [944] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:58.681 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:58.682 UTC [944] DEBUG:  building index "pg_toast_38835_index" on table "pg_toast_38835" serially
2025-04-19 19:16:58.683 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:58.683 UTC [944] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:58.683 UTC [944] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:58.684 UTC [944] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:58.684 UTC [944] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:58.685 UTC [944] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:58.685 UTC [944] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:58.686 UTC [944] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:58.686 UTC [944] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:58.686 UTC [944] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:58.686 UTC [944] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:58.687 UTC [944] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:58.687 UTC [944] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:58.688 UTC [944] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:58.688 UTC [944] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:58.689 UTC [944] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:58.689 UTC [944] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:58.689 UTC [944] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:58.689 UTC [944] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:58.690 UTC [944] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:58.690 UTC [944] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:58.691 UTC [944] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:58.691 UTC [944] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:58.691 UTC [944] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:58.691 UTC [944] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:58.705 UTC [944] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:58.972 UTC [944] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$8klzeecDyUDPdKB4qOCw.eDVRjwp2H5407QyVmXb6H5gLEZqKZlrW')
	                RETURNING id, username, email
	                
2025-04-19 19:16:58.973 UTC [944] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:58.973 UTC [944] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:16:58.979 UTC [944] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:16:58.987 UTC [944] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:58.988 UTC [944] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:16:58.990 UTC [944] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:16:58.994 UTC [944] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:16:58.994 UTC [944] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:16:58.998 UTC [944] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:16:59.000 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:16:59.001 UTC [944] DEBUG:  building index "pg_toast_38871_index" on table "pg_toast_38871" serially
2025-04-19 19:16:59.002 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:16:59.003 UTC [944] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:16:59.003 UTC [944] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:16:59.003 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:16:59.003 UTC [944] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:16:59.003 UTC [944] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:16:59.004 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:16:59.004 UTC [944] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:16:59.004 UTC [944] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:16:59.005 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:16:59.006 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:16:59.006 UTC [944] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:16:59.006 UTC [944] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:16:59.007 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:16:59.007 UTC [944] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:16:59.007 UTC [944] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:16:59.008 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:16:59.009 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:16:59.009 UTC [944] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:16:59.009 UTC [944] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:16:59.010 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:16:59.010 UTC [944] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:16:59.010 UTC [944] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:16:59.011 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:16:59.012 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:16:59.012 UTC [944] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:16:59.012 UTC [944] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:16:59.013 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:16:59.014 UTC [944] DEBUG:  building index "pg_toast_38932_index" on table "pg_toast_38932" serially
2025-04-19 19:16:59.014 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:16:59.015 UTC [944] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:16:59.015 UTC [944] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:16:59.016 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:16:59.016 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:16:59.017 UTC [944] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:16:59.017 UTC [944] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:16:59.017 UTC [944] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:16:59.018 UTC [944] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:16:59.018 UTC [944] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:16:59.018 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:16:59.019 UTC [944] DEBUG:  building index "pg_toast_38965_index" on table "pg_toast_38965" serially
2025-04-19 19:16:59.020 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:16:59.020 UTC [944] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:16:59.020 UTC [944] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:16:59.021 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:16:59.022 UTC [944] DEBUG:  building index "pg_toast_38976_index" on table "pg_toast_38976" serially
2025-04-19 19:16:59.023 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:16:59.023 UTC [944] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:16:59.023 UTC [944] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:16:59.024 UTC [944] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:16:59.025 UTC [944] DEBUG:  building index "pg_toast_38999_index" on table "pg_toast_38999" serially
2025-04-19 19:16:59.025 UTC [944] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:16:59.026 UTC [944] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:16:59.026 UTC [944] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:16:59.026 UTC [944] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:16:59.026 UTC [944] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:16:59.027 UTC [944] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:16:59.027 UTC [944] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:16:59.028 UTC [944] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:16:59.028 UTC [944] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:16:59.029 UTC [944] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:16:59.029 UTC [944] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:16:59.030 UTC [944] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:16:59.030 UTC [944] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:16:59.030 UTC [944] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:16:59.030 UTC [944] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:16:59.031 UTC [944] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:16:59.031 UTC [944] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:16:59.032 UTC [944] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:16:59.032 UTC [944] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:16:59.033 UTC [944] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:16:59.033 UTC [944] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:16:59.033 UTC [944] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:16:59.033 UTC [944] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:16:59.034 UTC [944] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:16:59.034 UTC [944] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:16:59.040 UTC [944] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:16:59.283 UTC [944] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Jrsqk9f29PV7jX2JVpIR0e9hKaf4A6BxkTaeajSbkeQNXdNXI8PPu')
	                RETURNING id, username, email
	                
2025-04-19 19:16:59.284 UTC [944] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:16:59.284 UTC [944] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:17:06.284 UTC [945] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:17:12.550 UTC [944] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:17:12.823 UTC [944] DEBUG:  unexpected EOF on client connection
2025-04-19 19:17:14.425 UTC [953] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:17:14.433 UTC [953] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:17:14.438 UTC [953] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:17:14.438 UTC [953] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:17:14.442 UTC [953] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:17:14.445 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:17:14.448 UTC [953] DEBUG:  building index "pg_toast_39035_index" on table "pg_toast_39035" serially
2025-04-19 19:17:14.450 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:17:14.450 UTC [953] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:17:14.450 UTC [953] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:17:14.451 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:17:14.451 UTC [953] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:17:14.451 UTC [953] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:17:14.452 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:17:14.452 UTC [953] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:17:14.452 UTC [953] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:17:14.453 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:17:14.454 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:17:14.454 UTC [953] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:17:14.454 UTC [953] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:17:14.455 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:17:14.455 UTC [953] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:17:14.455 UTC [953] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:17:14.455 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:17:14.456 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:17:14.457 UTC [953] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:17:14.457 UTC [953] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:17:14.457 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:17:14.458 UTC [953] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:17:14.458 UTC [953] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:17:14.459 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:17:14.461 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:17:14.461 UTC [953] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:17:14.461 UTC [953] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:17:14.462 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:17:14.465 UTC [953] DEBUG:  building index "pg_toast_39096_index" on table "pg_toast_39096" serially
2025-04-19 19:17:14.466 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:17:14.467 UTC [953] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:17:14.467 UTC [953] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:17:14.468 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:17:14.469 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:17:14.469 UTC [953] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:17:14.469 UTC [953] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:17:14.470 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:17:14.470 UTC [953] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:17:14.470 UTC [953] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:17:14.471 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:17:14.472 UTC [953] DEBUG:  building index "pg_toast_39129_index" on table "pg_toast_39129" serially
2025-04-19 19:17:14.473 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:17:14.473 UTC [953] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:17:14.473 UTC [953] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:17:14.474 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:17:14.475 UTC [953] DEBUG:  building index "pg_toast_39140_index" on table "pg_toast_39140" serially
2025-04-19 19:17:14.476 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:17:14.476 UTC [953] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:17:14.476 UTC [953] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:17:14.477 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:17:14.478 UTC [953] DEBUG:  building index "pg_toast_39163_index" on table "pg_toast_39163" serially
2025-04-19 19:17:14.479 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:17:14.479 UTC [953] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:17:14.479 UTC [953] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:17:14.480 UTC [953] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:17:14.480 UTC [953] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:17:14.481 UTC [953] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:17:14.481 UTC [953] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:17:14.482 UTC [953] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:17:14.482 UTC [953] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:17:14.483 UTC [953] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:17:14.483 UTC [953] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:17:14.484 UTC [953] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:17:14.484 UTC [953] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:17:14.484 UTC [953] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:17:14.484 UTC [953] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:17:14.485 UTC [953] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:17:14.485 UTC [953] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:17:14.486 UTC [953] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:17:14.486 UTC [953] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:17:14.487 UTC [953] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:17:14.487 UTC [953] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:17:14.487 UTC [953] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:17:14.487 UTC [953] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:17:14.488 UTC [953] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:17:14.488 UTC [953] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:17:14.498 UTC [953] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:14.766 UTC [953] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$L0S0qjNGcabbio0gxemDQeeAg6AZsgeXyj2boFzqU/COS9Q3ZwMrC')
	                RETURNING id, username, email
	                
2025-04-19 19:17:14.767 UTC [953] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:17:14.768 UTC [953] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:17:14.768 UTC [953] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:17:14.776 UTC [953] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:14.777 UTC [953] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:17:14.780 UTC [953] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:17:14.787 UTC [953] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:17:14.787 UTC [953] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:17:14.790 UTC [953] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:17:14.794 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:17:14.795 UTC [953] DEBUG:  building index "pg_toast_39199_index" on table "pg_toast_39199" serially
2025-04-19 19:17:14.796 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:17:14.796 UTC [953] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:17:14.796 UTC [953] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:17:14.797 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:17:14.797 UTC [953] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:17:14.797 UTC [953] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:17:14.797 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:17:14.798 UTC [953] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:17:14.798 UTC [953] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:17:14.798 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:17:14.799 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:17:14.799 UTC [953] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:17:14.799 UTC [953] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:17:14.800 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:17:14.800 UTC [953] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:17:14.800 UTC [953] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:17:14.801 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:17:14.801 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:17:14.802 UTC [953] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:17:14.802 UTC [953] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:17:14.802 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:17:14.802 UTC [953] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:17:14.802 UTC [953] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:17:14.804 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:17:14.805 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:17:14.805 UTC [953] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:17:14.805 UTC [953] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:17:14.806 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:17:14.807 UTC [953] DEBUG:  building index "pg_toast_39260_index" on table "pg_toast_39260" serially
2025-04-19 19:17:14.808 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:17:14.808 UTC [953] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:17:14.808 UTC [953] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:17:14.809 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:17:14.810 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:17:14.810 UTC [953] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:17:14.810 UTC [953] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:17:14.811 UTC [953] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:17:14.811 UTC [953] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:17:14.811 UTC [953] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:17:14.812 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:17:14.813 UTC [953] DEBUG:  building index "pg_toast_39293_index" on table "pg_toast_39293" serially
2025-04-19 19:17:14.814 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:17:14.814 UTC [953] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:17:14.814 UTC [953] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:17:14.814 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:17:14.816 UTC [953] DEBUG:  building index "pg_toast_39304_index" on table "pg_toast_39304" serially
2025-04-19 19:17:14.816 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:17:14.816 UTC [953] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:17:14.816 UTC [953] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:17:14.818 UTC [953] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:17:14.819 UTC [953] DEBUG:  building index "pg_toast_39327_index" on table "pg_toast_39327" serially
2025-04-19 19:17:14.819 UTC [953] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:17:14.819 UTC [953] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:17:14.819 UTC [953] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:17:14.820 UTC [953] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:17:14.820 UTC [953] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:17:14.821 UTC [953] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:17:14.821 UTC [953] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:17:14.822 UTC [953] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:17:14.822 UTC [953] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:17:14.823 UTC [953] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:17:14.823 UTC [953] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:17:14.823 UTC [953] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:17:14.823 UTC [953] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:17:14.824 UTC [953] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:17:14.824 UTC [953] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:17:14.825 UTC [953] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:17:14.825 UTC [953] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:17:14.826 UTC [953] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:17:14.826 UTC [953] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:17:14.826 UTC [953] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:17:14.826 UTC [953] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:17:14.827 UTC [953] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:17:14.827 UTC [953] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:17:14.828 UTC [953] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:17:14.828 UTC [953] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:17:14.834 UTC [953] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:15.079 UTC [953] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$B5nvCrWhr5/liY6RkelkZOSvvi3f8fbtEnoQ1IgN2aibfRQoGo/OC')
	                RETURNING id, username, email
	                
2025-04-19 19:17:15.080 UTC [953] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:17:15.081 UTC [953] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:17:28.409 UTC [953] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:17:28.684 UTC [953] DEBUG:  unexpected EOF on client connection
2025-04-19 19:17:30.381 UTC [968] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:17:30.390 UTC [968] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:17:30.395 UTC [968] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:17:30.395 UTC [968] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:17:30.399 UTC [968] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:17:30.403 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:17:30.410 UTC [968] DEBUG:  building index "pg_toast_39363_index" on table "pg_toast_39363" serially
2025-04-19 19:17:30.411 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:17:30.412 UTC [968] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:17:30.412 UTC [968] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:17:30.413 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:17:30.413 UTC [968] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:17:30.413 UTC [968] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:17:30.414 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:17:30.414 UTC [968] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:17:30.414 UTC [968] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:17:30.415 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:17:30.416 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:17:30.416 UTC [968] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:17:30.416 UTC [968] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:17:30.417 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:17:30.417 UTC [968] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:17:30.417 UTC [968] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:17:30.418 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:17:30.419 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:17:30.419 UTC [968] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:17:30.419 UTC [968] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:17:30.420 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:17:30.420 UTC [968] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:17:30.420 UTC [968] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:17:30.422 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:17:30.423 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:17:30.423 UTC [968] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:17:30.423 UTC [968] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:17:30.424 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:17:30.426 UTC [968] DEBUG:  building index "pg_toast_39424_index" on table "pg_toast_39424" serially
2025-04-19 19:17:30.426 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:17:30.426 UTC [968] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:17:30.426 UTC [968] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:17:30.428 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:17:30.429 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:17:30.429 UTC [968] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:17:30.429 UTC [968] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:17:30.430 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:17:30.430 UTC [968] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:17:30.430 UTC [968] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:17:30.431 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:17:30.432 UTC [968] DEBUG:  building index "pg_toast_39457_index" on table "pg_toast_39457" serially
2025-04-19 19:17:30.433 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:17:30.433 UTC [968] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:17:30.433 UTC [968] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:17:30.434 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:17:30.435 UTC [968] DEBUG:  building index "pg_toast_39468_index" on table "pg_toast_39468" serially
2025-04-19 19:17:30.435 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:17:30.436 UTC [968] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:17:30.436 UTC [968] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:17:30.437 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:17:30.438 UTC [968] DEBUG:  building index "pg_toast_39491_index" on table "pg_toast_39491" serially
2025-04-19 19:17:30.439 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:17:30.439 UTC [968] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:17:30.439 UTC [968] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:17:30.440 UTC [968] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:17:30.440 UTC [968] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:17:30.441 UTC [968] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:17:30.441 UTC [968] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:17:30.442 UTC [968] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:17:30.442 UTC [968] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:17:30.443 UTC [968] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:17:30.443 UTC [968] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:17:30.444 UTC [968] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:17:30.444 UTC [968] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:17:30.444 UTC [968] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:17:30.444 UTC [968] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:17:30.445 UTC [968] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:17:30.445 UTC [968] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:17:30.446 UTC [968] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:17:30.446 UTC [968] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:17:30.447 UTC [968] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:17:30.447 UTC [968] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:17:30.448 UTC [968] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:17:30.448 UTC [968] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:17:30.449 UTC [968] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:17:30.449 UTC [968] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:17:30.460 UTC [968] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:30.751 UTC [968] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$s5QCb0Vs4uoOJxw8Rl2gCu7ThAF98P42B02poUzLk5RnCLDY2Z2Gm')
	                RETURNING id, username, email
	                
2025-04-19 19:17:30.752 UTC [968] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:17:30.752 UTC [968] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:17:30.753 UTC [968] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:17:30.768 UTC [968] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:30.768 UTC [968] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:17:30.771 UTC [968] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:17:30.776 UTC [968] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:17:30.776 UTC [968] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:17:30.779 UTC [968] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:17:30.781 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:17:30.782 UTC [968] DEBUG:  building index "pg_toast_39527_index" on table "pg_toast_39527" serially
2025-04-19 19:17:30.784 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:17:30.784 UTC [968] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:17:30.784 UTC [968] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:17:30.784 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:17:30.785 UTC [968] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:17:30.785 UTC [968] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:17:30.785 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:17:30.786 UTC [968] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:17:30.786 UTC [968] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:17:30.786 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:17:30.787 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:17:30.787 UTC [968] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:17:30.787 UTC [968] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:17:30.788 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:17:30.788 UTC [968] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:17:30.788 UTC [968] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:17:30.789 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:17:30.790 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:17:30.790 UTC [968] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:17:30.790 UTC [968] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:17:30.791 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:17:30.791 UTC [968] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:17:30.791 UTC [968] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:17:30.792 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:17:30.793 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:17:30.793 UTC [968] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:17:30.793 UTC [968] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:17:30.794 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:17:30.796 UTC [968] DEBUG:  building index "pg_toast_39588_index" on table "pg_toast_39588" serially
2025-04-19 19:17:30.796 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:17:30.797 UTC [968] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:17:30.797 UTC [968] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:17:30.798 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:17:30.799 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:17:30.799 UTC [968] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:17:30.799 UTC [968] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:17:30.800 UTC [968] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:17:30.800 UTC [968] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:17:30.800 UTC [968] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:17:30.801 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:17:30.802 UTC [968] DEBUG:  building index "pg_toast_39621_index" on table "pg_toast_39621" serially
2025-04-19 19:17:30.803 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:17:30.804 UTC [968] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:17:30.804 UTC [968] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:17:30.804 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:17:30.806 UTC [968] DEBUG:  building index "pg_toast_39632_index" on table "pg_toast_39632" serially
2025-04-19 19:17:30.806 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:17:30.807 UTC [968] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:17:30.807 UTC [968] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:17:30.809 UTC [968] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:17:30.810 UTC [968] DEBUG:  building index "pg_toast_39655_index" on table "pg_toast_39655" serially
2025-04-19 19:17:30.810 UTC [968] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:17:30.810 UTC [968] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:17:30.810 UTC [968] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:17:30.812 UTC [968] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:17:30.812 UTC [968] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:17:30.813 UTC [968] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:17:30.813 UTC [968] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:17:30.813 UTC [968] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:17:30.813 UTC [968] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:17:30.814 UTC [968] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:17:30.814 UTC [968] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:17:30.815 UTC [968] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:17:30.815 UTC [968] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:17:30.816 UTC [968] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:17:30.816 UTC [968] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:17:30.818 UTC [968] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:17:30.818 UTC [968] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:17:30.818 UTC [968] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:17:30.818 UTC [968] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:17:30.819 UTC [968] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:17:30.819 UTC [968] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:17:30.820 UTC [968] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:17:30.820 UTC [968] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:17:30.821 UTC [968] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:17:30.821 UTC [968] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:17:30.828 UTC [968] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:31.072 UTC [968] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RLo/3BzseVfuEXUTdtASNOG29o4DhL79uu.z4puiR/KMU4mhah/6O')
	                RETURNING id, username, email
	                
2025-04-19 19:17:31.074 UTC [968] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:17:31.074 UTC [968] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:17:36.288 UTC [969] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:17:36.523 UTC [969] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:17:44.253 UTC [968] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:17:44.560 UTC [968] DEBUG:  unexpected EOF on client connection
2025-04-19 19:17:46.292 UTC [977] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:17:46.299 UTC [977] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:17:46.310 UTC [977] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:17:46.310 UTC [977] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:17:46.316 UTC [977] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:17:46.322 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:17:46.325 UTC [977] DEBUG:  building index "pg_toast_39692_index" on table "pg_toast_39692" serially
2025-04-19 19:17:46.326 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:17:46.326 UTC [977] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:17:46.326 UTC [977] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:17:46.327 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:17:46.328 UTC [977] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:17:46.328 UTC [977] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:17:46.328 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:17:46.329 UTC [977] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:17:46.329 UTC [977] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:17:46.329 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:17:46.330 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:17:46.330 UTC [977] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:17:46.331 UTC [977] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:17:46.331 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:17:46.331 UTC [977] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:17:46.331 UTC [977] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:17:46.332 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:17:46.333 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:17:46.333 UTC [977] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:17:46.333 UTC [977] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:17:46.334 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:17:46.334 UTC [977] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:17:46.334 UTC [977] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:17:46.336 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:17:46.337 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:17:46.337 UTC [977] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:17:46.337 UTC [977] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:17:46.338 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:17:46.342 UTC [977] DEBUG:  building index "pg_toast_39753_index" on table "pg_toast_39753" serially
2025-04-19 19:17:46.343 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:17:46.344 UTC [977] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:17:46.344 UTC [977] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:17:46.345 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:17:46.346 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:17:46.346 UTC [977] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:17:46.346 UTC [977] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:17:46.347 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:17:46.347 UTC [977] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:17:46.347 UTC [977] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:17:46.348 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:17:46.349 UTC [977] DEBUG:  building index "pg_toast_39786_index" on table "pg_toast_39786" serially
2025-04-19 19:17:46.350 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:17:46.350 UTC [977] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:17:46.350 UTC [977] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:17:46.351 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:17:46.352 UTC [977] DEBUG:  building index "pg_toast_39797_index" on table "pg_toast_39797" serially
2025-04-19 19:17:46.353 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:17:46.353 UTC [977] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:17:46.353 UTC [977] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:17:46.355 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:17:46.356 UTC [977] DEBUG:  building index "pg_toast_39820_index" on table "pg_toast_39820" serially
2025-04-19 19:17:46.357 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:17:46.357 UTC [977] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:17:46.357 UTC [977] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:17:46.358 UTC [977] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:17:46.358 UTC [977] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:17:46.359 UTC [977] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:17:46.359 UTC [977] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:17:46.360 UTC [977] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:17:46.360 UTC [977] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:17:46.360 UTC [977] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:17:46.360 UTC [977] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:17:46.361 UTC [977] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:17:46.361 UTC [977] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:17:46.362 UTC [977] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:17:46.362 UTC [977] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:17:46.363 UTC [977] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:17:46.363 UTC [977] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:17:46.364 UTC [977] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:17:46.364 UTC [977] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:17:46.365 UTC [977] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:17:46.365 UTC [977] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:17:46.366 UTC [977] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:17:46.366 UTC [977] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:17:46.370 UTC [977] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:17:46.370 UTC [977] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:17:46.392 UTC [977] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:46.656 UTC [977] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$La9FxaFgpZ9lZSUZXVvQJefKhva0MaTOETedYVw.gks3.VdSdswgO')
	                RETURNING id, username, email
	                
2025-04-19 19:17:46.657 UTC [977] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:17:46.657 UTC [977] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:17:46.658 UTC [977] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:17:46.672 UTC [977] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:46.673 UTC [977] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:17:46.675 UTC [977] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:17:46.679 UTC [977] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:17:46.679 UTC [977] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:17:46.683 UTC [977] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:17:46.686 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:17:46.687 UTC [977] DEBUG:  building index "pg_toast_39856_index" on table "pg_toast_39856" serially
2025-04-19 19:17:46.688 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:17:46.688 UTC [977] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:17:46.688 UTC [977] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:17:46.689 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:17:46.689 UTC [977] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:17:46.689 UTC [977] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:17:46.690 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:17:46.690 UTC [977] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:17:46.690 UTC [977] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:17:46.691 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:17:46.691 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:17:46.692 UTC [977] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:17:46.692 UTC [977] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:17:46.692 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:17:46.692 UTC [977] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:17:46.692 UTC [977] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:17:46.693 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:17:46.694 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:17:46.694 UTC [977] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:17:46.694 UTC [977] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:17:46.695 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:17:46.695 UTC [977] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:17:46.695 UTC [977] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:17:46.696 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:17:46.697 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:17:46.697 UTC [977] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:17:46.697 UTC [977] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:17:46.698 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:17:46.699 UTC [977] DEBUG:  building index "pg_toast_39917_index" on table "pg_toast_39917" serially
2025-04-19 19:17:46.700 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:17:46.700 UTC [977] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:17:46.700 UTC [977] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:17:46.701 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:17:46.702 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:17:46.702 UTC [977] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:17:46.702 UTC [977] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:17:46.703 UTC [977] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:17:46.703 UTC [977] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:17:46.703 UTC [977] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:17:46.704 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:17:46.705 UTC [977] DEBUG:  building index "pg_toast_39950_index" on table "pg_toast_39950" serially
2025-04-19 19:17:46.705 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:17:46.706 UTC [977] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:17:46.706 UTC [977] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:17:46.706 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:17:46.707 UTC [977] DEBUG:  building index "pg_toast_39961_index" on table "pg_toast_39961" serially
2025-04-19 19:17:46.708 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:17:46.708 UTC [977] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:17:46.708 UTC [977] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:17:46.710 UTC [977] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:17:46.710 UTC [977] DEBUG:  building index "pg_toast_39984_index" on table "pg_toast_39984" serially
2025-04-19 19:17:46.711 UTC [977] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:17:46.711 UTC [977] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:17:46.711 UTC [977] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:17:46.712 UTC [977] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:17:46.712 UTC [977] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:17:46.713 UTC [977] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:17:46.713 UTC [977] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:17:46.713 UTC [977] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:17:46.713 UTC [977] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:17:46.714 UTC [977] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:17:46.714 UTC [977] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:17:46.715 UTC [977] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:17:46.715 UTC [977] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:17:46.716 UTC [977] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:17:46.716 UTC [977] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:17:46.717 UTC [977] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:17:46.717 UTC [977] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:17:46.718 UTC [977] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:17:46.718 UTC [977] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:17:46.719 UTC [977] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:17:46.719 UTC [977] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:17:46.720 UTC [977] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:17:46.720 UTC [977] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:17:46.720 UTC [977] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:17:46.720 UTC [977] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:17:46.732 UTC [977] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:17:47.001 UTC [977] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$c65IThERSHD8ocv/2NVRiOzcQl0WVvTnycdBnOcTKQVt3va4VkDDi')
	                RETURNING id, username, email
	                
2025-04-19 19:17:47.002 UTC [977] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:17:47.003 UTC [977] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:00.167 UTC [977] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:18:00.452 UTC [977] DEBUG:  unexpected EOF on client connection
2025-04-19 19:18:02.009 UTC [992] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:02.015 UTC [992] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:02.024 UTC [992] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:02.024 UTC [992] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:02.027 UTC [992] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:02.030 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:02.033 UTC [992] DEBUG:  building index "pg_toast_40020_index" on table "pg_toast_40020" serially
2025-04-19 19:18:02.035 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:02.035 UTC [992] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:02.035 UTC [992] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:02.036 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:02.036 UTC [992] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:02.036 UTC [992] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:02.037 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:02.037 UTC [992] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:02.037 UTC [992] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:02.038 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:02.039 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:02.039 UTC [992] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:02.039 UTC [992] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:02.040 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:02.040 UTC [992] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:02.040 UTC [992] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:02.040 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:02.041 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:02.042 UTC [992] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:02.042 UTC [992] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:02.042 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:02.043 UTC [992] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:02.043 UTC [992] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:02.044 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:02.045 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:02.045 UTC [992] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:02.045 UTC [992] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:02.046 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:02.048 UTC [992] DEBUG:  building index "pg_toast_40081_index" on table "pg_toast_40081" serially
2025-04-19 19:18:02.049 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:02.049 UTC [992] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:02.049 UTC [992] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:02.050 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:02.051 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:02.051 UTC [992] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:02.051 UTC [992] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:02.052 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:02.052 UTC [992] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:02.052 UTC [992] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:02.053 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:02.054 UTC [992] DEBUG:  building index "pg_toast_40114_index" on table "pg_toast_40114" serially
2025-04-19 19:18:02.055 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:02.055 UTC [992] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:02.055 UTC [992] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:02.056 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:02.057 UTC [992] DEBUG:  building index "pg_toast_40125_index" on table "pg_toast_40125" serially
2025-04-19 19:18:02.058 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:02.058 UTC [992] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:02.058 UTC [992] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:02.059 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:02.060 UTC [992] DEBUG:  building index "pg_toast_40148_index" on table "pg_toast_40148" serially
2025-04-19 19:18:02.062 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:02.062 UTC [992] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:02.062 UTC [992] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:02.063 UTC [992] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:02.063 UTC [992] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:02.064 UTC [992] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:02.064 UTC [992] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:02.065 UTC [992] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:02.065 UTC [992] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:02.066 UTC [992] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:02.066 UTC [992] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:02.067 UTC [992] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:02.067 UTC [992] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:02.068 UTC [992] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:02.068 UTC [992] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:02.069 UTC [992] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:02.069 UTC [992] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:02.070 UTC [992] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:02.070 UTC [992] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:02.070 UTC [992] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:02.070 UTC [992] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:02.071 UTC [992] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:02.071 UTC [992] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:02.072 UTC [992] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:02.072 UTC [992] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:02.086 UTC [992] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:02.350 UTC [992] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Pb20A0LRzatFC2rL9ZjgZ.8Dwfbb//2yR1GzuOddO4ptFaqjuOrxG')
	                RETURNING id, username, email
	                
2025-04-19 19:18:02.351 UTC [992] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:02.351 UTC [992] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:02.352 UTC [992] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:18:02.360 UTC [992] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:02.361 UTC [992] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:02.363 UTC [992] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:02.367 UTC [992] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:02.367 UTC [992] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:02.374 UTC [992] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:02.378 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:02.379 UTC [992] DEBUG:  building index "pg_toast_40184_index" on table "pg_toast_40184" serially
2025-04-19 19:18:02.380 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:02.381 UTC [992] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:02.381 UTC [992] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:02.381 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:02.381 UTC [992] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:02.381 UTC [992] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:02.382 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:02.382 UTC [992] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:02.382 UTC [992] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:02.383 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:02.384 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:02.384 UTC [992] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:02.384 UTC [992] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:02.384 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:02.385 UTC [992] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:02.385 UTC [992] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:02.385 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:02.386 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:02.386 UTC [992] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:02.386 UTC [992] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:02.387 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:02.387 UTC [992] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:02.387 UTC [992] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:02.388 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:02.389 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:02.389 UTC [992] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:02.389 UTC [992] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:02.390 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:02.391 UTC [992] DEBUG:  building index "pg_toast_40245_index" on table "pg_toast_40245" serially
2025-04-19 19:18:02.391 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:02.392 UTC [992] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:02.392 UTC [992] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:02.393 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:02.394 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:02.394 UTC [992] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:02.394 UTC [992] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:02.394 UTC [992] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:02.395 UTC [992] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:02.395 UTC [992] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:02.396 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:02.397 UTC [992] DEBUG:  building index "pg_toast_40278_index" on table "pg_toast_40278" serially
2025-04-19 19:18:02.398 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:02.398 UTC [992] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:02.398 UTC [992] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:02.399 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:02.400 UTC [992] DEBUG:  building index "pg_toast_40289_index" on table "pg_toast_40289" serially
2025-04-19 19:18:02.401 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:02.401 UTC [992] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:02.401 UTC [992] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:02.402 UTC [992] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:02.403 UTC [992] DEBUG:  building index "pg_toast_40312_index" on table "pg_toast_40312" serially
2025-04-19 19:18:02.404 UTC [992] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:02.404 UTC [992] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:02.404 UTC [992] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:02.405 UTC [992] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:02.405 UTC [992] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:02.406 UTC [992] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:02.406 UTC [992] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:02.406 UTC [992] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:02.406 UTC [992] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:02.407 UTC [992] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:02.407 UTC [992] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:02.408 UTC [992] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:02.408 UTC [992] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:02.409 UTC [992] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:02.409 UTC [992] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:02.410 UTC [992] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:02.410 UTC [992] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:02.411 UTC [992] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:02.411 UTC [992] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:02.412 UTC [992] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:02.412 UTC [992] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:02.413 UTC [992] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:02.413 UTC [992] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:02.414 UTC [992] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:02.414 UTC [992] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:02.421 UTC [992] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:02.665 UTC [992] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$RNUisjQrFTm4NL6LKBLTiOBUkbVMyGsunvZcRZoSOGXhBuqbryPWW')
	                RETURNING id, username, email
	                
2025-04-19 19:18:02.666 UTC [992] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:02.666 UTC [992] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:06.269 UTC [993] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:18:16.016 UTC [992] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:18:16.301 UTC [992] DEBUG:  unexpected EOF on client connection
2025-04-19 19:18:18.195 UTC [1008] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:18.201 UTC [1008] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:18.207 UTC [1008] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:18.207 UTC [1008] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:18.213 UTC [1008] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:18.216 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:18.219 UTC [1008] DEBUG:  building index "pg_toast_40348_index" on table "pg_toast_40348" serially
2025-04-19 19:18:18.220 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:18.221 UTC [1008] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:18.221 UTC [1008] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:18.222 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:18.222 UTC [1008] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:18.222 UTC [1008] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:18.223 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:18.223 UTC [1008] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:18.223 UTC [1008] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:18.224 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:18.225 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:18.225 UTC [1008] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:18.225 UTC [1008] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:18.226 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:18.226 UTC [1008] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:18.226 UTC [1008] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:18.227 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:18.228 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:18.228 UTC [1008] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:18.228 UTC [1008] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:18.229 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:18.229 UTC [1008] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:18.229 UTC [1008] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:18.231 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:18.232 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:18.232 UTC [1008] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:18.232 UTC [1008] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:18.233 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:18.235 UTC [1008] DEBUG:  building index "pg_toast_40409_index" on table "pg_toast_40409" serially
2025-04-19 19:18:18.236 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:18.236 UTC [1008] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:18.236 UTC [1008] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:18.237 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:18.239 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:18.239 UTC [1008] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:18.239 UTC [1008] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:18.240 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:18.240 UTC [1008] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:18.240 UTC [1008] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:18.241 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:18.243 UTC [1008] DEBUG:  building index "pg_toast_40442_index" on table "pg_toast_40442" serially
2025-04-19 19:18:18.244 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:18.245 UTC [1008] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:18.245 UTC [1008] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:18.245 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:18.246 UTC [1008] DEBUG:  building index "pg_toast_40453_index" on table "pg_toast_40453" serially
2025-04-19 19:18:18.247 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:18.247 UTC [1008] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:18.248 UTC [1008] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:18.249 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:18.250 UTC [1008] DEBUG:  building index "pg_toast_40476_index" on table "pg_toast_40476" serially
2025-04-19 19:18:18.251 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:18.251 UTC [1008] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:18.251 UTC [1008] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:18.252 UTC [1008] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:18.252 UTC [1008] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:18.253 UTC [1008] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:18.253 UTC [1008] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:18.254 UTC [1008] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:18.254 UTC [1008] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:18.255 UTC [1008] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:18.255 UTC [1008] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:18.256 UTC [1008] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:18.256 UTC [1008] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:18.257 UTC [1008] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:18.257 UTC [1008] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:18.258 UTC [1008] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:18.258 UTC [1008] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:18.259 UTC [1008] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:18.259 UTC [1008] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:18.260 UTC [1008] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:18.260 UTC [1008] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:18.261 UTC [1008] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:18.261 UTC [1008] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:18.261 UTC [1008] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:18.261 UTC [1008] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:18.275 UTC [1008] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:18.545 UTC [1008] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$YC1bOJSMIZG2f6YQKygokeoNSN.Ihhfvs9WLM8HiCWe/WfEei7Zo6')
	                RETURNING id, username, email
	                
2025-04-19 19:18:18.546 UTC [1008] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:18.547 UTC [1008] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:18.548 UTC [1008] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:18:18.556 UTC [1008] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:18.557 UTC [1008] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:18.562 UTC [1008] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:18.566 UTC [1008] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:18.566 UTC [1008] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:18.569 UTC [1008] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:18.572 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:18.573 UTC [1008] DEBUG:  building index "pg_toast_40512_index" on table "pg_toast_40512" serially
2025-04-19 19:18:18.574 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:18.574 UTC [1008] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:18.574 UTC [1008] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:18.575 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:18.575 UTC [1008] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:18.575 UTC [1008] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:18.576 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:18.576 UTC [1008] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:18.576 UTC [1008] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:18.577 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:18.577 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:18.578 UTC [1008] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:18.578 UTC [1008] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:18.579 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:18.579 UTC [1008] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:18.579 UTC [1008] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:18.579 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:18.580 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:18.580 UTC [1008] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:18.580 UTC [1008] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:18.581 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:18.581 UTC [1008] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:18.581 UTC [1008] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:18.582 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:18.583 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:18.583 UTC [1008] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:18.583 UTC [1008] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:18.584 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:18.585 UTC [1008] DEBUG:  building index "pg_toast_40573_index" on table "pg_toast_40573" serially
2025-04-19 19:18:18.586 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:18.586 UTC [1008] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:18.586 UTC [1008] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:18.587 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:18.588 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:18.588 UTC [1008] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:18.588 UTC [1008] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:18.589 UTC [1008] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:18.589 UTC [1008] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:18.589 UTC [1008] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:18.590 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:18.591 UTC [1008] DEBUG:  building index "pg_toast_40606_index" on table "pg_toast_40606" serially
2025-04-19 19:18:18.592 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:18.593 UTC [1008] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:18.593 UTC [1008] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:18.593 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:18.594 UTC [1008] DEBUG:  building index "pg_toast_40617_index" on table "pg_toast_40617" serially
2025-04-19 19:18:18.595 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:18.595 UTC [1008] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:18.595 UTC [1008] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:18.597 UTC [1008] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:18.597 UTC [1008] DEBUG:  building index "pg_toast_40640_index" on table "pg_toast_40640" serially
2025-04-19 19:18:18.598 UTC [1008] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:18.598 UTC [1008] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:18.598 UTC [1008] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:18.599 UTC [1008] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:18.599 UTC [1008] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:18.600 UTC [1008] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:18.600 UTC [1008] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:18.601 UTC [1008] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:18.601 UTC [1008] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:18.601 UTC [1008] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:18.601 UTC [1008] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:18.602 UTC [1008] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:18.602 UTC [1008] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:18.603 UTC [1008] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:18.603 UTC [1008] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:18.603 UTC [1008] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:18.603 UTC [1008] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:18.604 UTC [1008] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:18.604 UTC [1008] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:18.605 UTC [1008] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:18.605 UTC [1008] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:18.606 UTC [1008] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:18.606 UTC [1008] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:18.606 UTC [1008] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:18.606 UTC [1008] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:18.617 UTC [1008] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:18.862 UTC [1008] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$zGmHFBGd28WKWjWgBCkXIu6jVkcD4sTQx3vmrOu7LVvWilfP6Ive2')
	                RETURNING id, username, email
	                
2025-04-19 19:18:18.863 UTC [1008] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:18.863 UTC [1008] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:31.986 UTC [1008] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:18:32.270 UTC [1008] DEBUG:  unexpected EOF on client connection
2025-04-19 19:18:34.181 UTC [1015] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:34.188 UTC [1015] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:34.195 UTC [1015] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:34.195 UTC [1015] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:34.199 UTC [1015] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:34.203 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:34.206 UTC [1015] DEBUG:  building index "pg_toast_40676_index" on table "pg_toast_40676" serially
2025-04-19 19:18:34.208 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:34.210 UTC [1015] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:34.210 UTC [1015] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:34.212 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:34.213 UTC [1015] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:34.213 UTC [1015] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:34.214 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:34.214 UTC [1015] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:34.214 UTC [1015] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:34.215 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:34.216 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:34.216 UTC [1015] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:34.216 UTC [1015] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:34.217 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:34.218 UTC [1015] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:34.218 UTC [1015] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:34.218 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:34.219 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:34.220 UTC [1015] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:34.220 UTC [1015] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:34.220 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:34.221 UTC [1015] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:34.221 UTC [1015] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:34.222 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:34.223 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:34.223 UTC [1015] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:34.223 UTC [1015] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:34.225 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:34.227 UTC [1015] DEBUG:  building index "pg_toast_40737_index" on table "pg_toast_40737" serially
2025-04-19 19:18:34.228 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:34.228 UTC [1015] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:34.228 UTC [1015] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:34.229 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:34.230 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:34.230 UTC [1015] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:34.230 UTC [1015] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:34.231 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:34.231 UTC [1015] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:34.231 UTC [1015] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:34.233 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:34.234 UTC [1015] DEBUG:  building index "pg_toast_40770_index" on table "pg_toast_40770" serially
2025-04-19 19:18:34.235 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:34.235 UTC [1015] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:34.235 UTC [1015] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:34.236 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:34.237 UTC [1015] DEBUG:  building index "pg_toast_40781_index" on table "pg_toast_40781" serially
2025-04-19 19:18:34.238 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:34.238 UTC [1015] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:34.238 UTC [1015] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:34.240 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:34.242 UTC [1015] DEBUG:  building index "pg_toast_40804_index" on table "pg_toast_40804" serially
2025-04-19 19:18:34.243 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:34.243 UTC [1015] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:34.243 UTC [1015] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:34.244 UTC [1015] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:34.244 UTC [1015] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:34.246 UTC [1015] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:34.246 UTC [1015] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:34.248 UTC [1015] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:34.248 UTC [1015] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:34.251 UTC [1015] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:34.251 UTC [1015] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:34.252 UTC [1015] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:34.252 UTC [1015] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:34.253 UTC [1015] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:34.253 UTC [1015] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:34.254 UTC [1015] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:34.254 UTC [1015] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:34.255 UTC [1015] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:34.255 UTC [1015] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:34.255 UTC [1015] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:34.256 UTC [1015] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:34.256 UTC [1015] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:34.256 UTC [1015] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:34.257 UTC [1015] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:34.257 UTC [1015] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:34.270 UTC [1015] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:34.563 UTC [1015] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Bq5.gPRTPNXmpNHuBoR.rO/8qq2ht.KDPAEn7MKrzBex0XLmlgAsO')
	                RETURNING id, username, email
	                
2025-04-19 19:18:34.564 UTC [1015] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:34.564 UTC [1015] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:34.565 UTC [1015] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:18:34.577 UTC [1015] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:34.579 UTC [1015] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:34.582 UTC [1015] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:34.586 UTC [1015] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:34.586 UTC [1015] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:34.591 UTC [1015] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:34.594 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:34.595 UTC [1015] DEBUG:  building index "pg_toast_40840_index" on table "pg_toast_40840" serially
2025-04-19 19:18:34.596 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:34.596 UTC [1015] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:34.596 UTC [1015] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:34.597 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:34.597 UTC [1015] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:34.597 UTC [1015] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:34.598 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:34.598 UTC [1015] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:34.598 UTC [1015] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:34.599 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:34.599 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:34.600 UTC [1015] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:34.600 UTC [1015] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:34.600 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:34.601 UTC [1015] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:34.601 UTC [1015] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:34.601 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:34.602 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:34.602 UTC [1015] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:34.602 UTC [1015] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:34.603 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:34.603 UTC [1015] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:34.603 UTC [1015] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:34.604 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:34.605 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:34.605 UTC [1015] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:34.605 UTC [1015] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:34.607 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:34.607 UTC [1015] DEBUG:  building index "pg_toast_40901_index" on table "pg_toast_40901" serially
2025-04-19 19:18:34.608 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:34.608 UTC [1015] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:34.608 UTC [1015] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:34.610 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:34.611 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:34.611 UTC [1015] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:34.611 UTC [1015] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:34.611 UTC [1015] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:34.612 UTC [1015] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:34.612 UTC [1015] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:34.613 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:34.614 UTC [1015] DEBUG:  building index "pg_toast_40934_index" on table "pg_toast_40934" serially
2025-04-19 19:18:34.615 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:34.615 UTC [1015] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:34.615 UTC [1015] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:34.616 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:34.619 UTC [1015] DEBUG:  building index "pg_toast_40945_index" on table "pg_toast_40945" serially
2025-04-19 19:18:34.620 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:34.620 UTC [1015] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:34.620 UTC [1015] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:34.623 UTC [1015] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:34.624 UTC [1015] DEBUG:  building index "pg_toast_40968_index" on table "pg_toast_40968" serially
2025-04-19 19:18:34.625 UTC [1015] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:34.625 UTC [1015] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:34.625 UTC [1015] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:34.626 UTC [1015] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:34.626 UTC [1015] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:34.627 UTC [1015] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:34.627 UTC [1015] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:34.628 UTC [1015] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:34.628 UTC [1015] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:34.629 UTC [1015] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:34.629 UTC [1015] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:34.630 UTC [1015] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:34.630 UTC [1015] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:34.631 UTC [1015] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:34.631 UTC [1015] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:34.632 UTC [1015] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:34.632 UTC [1015] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:34.633 UTC [1015] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:34.633 UTC [1015] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:34.634 UTC [1015] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:34.634 UTC [1015] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:34.635 UTC [1015] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:34.635 UTC [1015] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:34.636 UTC [1015] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:34.636 UTC [1015] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:34.643 UTC [1015] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:34.897 UTC [1015] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$KWHwQIT.CUNoGH5XGSRWmePkzFuk4g9Dj0fmkcoFPJBkOJ/yphpqC')
	                RETURNING id, username, email
	                
2025-04-19 19:18:34.898 UTC [1015] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:34.898 UTC [1015] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:36.282 UTC [1016] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:18:36.398 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 19:18:36.534 UTC [1016] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:18:47.887 UTC [1015] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:18:48.170 UTC [1015] DEBUG:  unexpected EOF on client connection
2025-04-19 19:18:49.935 UTC [1031] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:49.946 UTC [1031] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:49.951 UTC [1031] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:49.951 UTC [1031] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:49.955 UTC [1031] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:49.959 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:49.961 UTC [1031] DEBUG:  building index "pg_toast_41005_index" on table "pg_toast_41005" serially
2025-04-19 19:18:49.963 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:49.963 UTC [1031] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:49.963 UTC [1031] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:49.964 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:49.964 UTC [1031] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:49.964 UTC [1031] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:49.965 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:49.966 UTC [1031] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:49.966 UTC [1031] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:49.967 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:49.969 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:49.969 UTC [1031] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:49.969 UTC [1031] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:49.970 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:49.970 UTC [1031] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:49.970 UTC [1031] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:49.971 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:49.972 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:49.972 UTC [1031] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:49.972 UTC [1031] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:49.973 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:49.973 UTC [1031] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:49.973 UTC [1031] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:49.974 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:49.975 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:49.976 UTC [1031] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:49.976 UTC [1031] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:49.977 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:49.978 UTC [1031] DEBUG:  building index "pg_toast_41066_index" on table "pg_toast_41066" serially
2025-04-19 19:18:49.979 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:49.979 UTC [1031] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:49.979 UTC [1031] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:49.980 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:49.981 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:49.982 UTC [1031] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:49.982 UTC [1031] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:49.982 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:49.982 UTC [1031] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:49.982 UTC [1031] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:49.983 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:49.985 UTC [1031] DEBUG:  building index "pg_toast_41099_index" on table "pg_toast_41099" serially
2025-04-19 19:18:49.985 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:49.985 UTC [1031] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:49.986 UTC [1031] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:49.986 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:49.987 UTC [1031] DEBUG:  building index "pg_toast_41110_index" on table "pg_toast_41110" serially
2025-04-19 19:18:49.988 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:49.988 UTC [1031] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:49.988 UTC [1031] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:49.990 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:49.990 UTC [1031] DEBUG:  building index "pg_toast_41133_index" on table "pg_toast_41133" serially
2025-04-19 19:18:49.991 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:49.991 UTC [1031] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:49.991 UTC [1031] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:49.992 UTC [1031] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:49.992 UTC [1031] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:49.993 UTC [1031] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:49.993 UTC [1031] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:49.994 UTC [1031] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:49.994 UTC [1031] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:49.994 UTC [1031] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:49.994 UTC [1031] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:49.995 UTC [1031] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:49.995 UTC [1031] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:49.996 UTC [1031] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:49.996 UTC [1031] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:49.997 UTC [1031] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:49.997 UTC [1031] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:49.997 UTC [1031] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:49.997 UTC [1031] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:49.998 UTC [1031] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:49.998 UTC [1031] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:49.999 UTC [1031] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:49.999 UTC [1031] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:50.000 UTC [1031] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:50.000 UTC [1031] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:50.013 UTC [1031] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:50.285 UTC [1031] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$0ZvVIgzrKfLK4VCEL6cKi.0CkmSNWKEkkNUJJXpqGExNj.u8CGkNe')
	                RETURNING id, username, email
	                
2025-04-19 19:18:50.286 UTC [1031] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:50.286 UTC [1031] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:18:50.287 UTC [1031] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:18:50.295 UTC [1031] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:50.296 UTC [1031] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:18:50.298 UTC [1031] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:18:50.303 UTC [1031] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:18:50.303 UTC [1031] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:18:50.308 UTC [1031] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:18:50.315 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:18:50.316 UTC [1031] DEBUG:  building index "pg_toast_41169_index" on table "pg_toast_41169" serially
2025-04-19 19:18:50.317 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:18:50.317 UTC [1031] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:18:50.317 UTC [1031] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:18:50.318 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:18:50.318 UTC [1031] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:18:50.318 UTC [1031] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:18:50.319 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:18:50.320 UTC [1031] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:18:50.320 UTC [1031] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:18:50.320 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:18:50.321 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:18:50.321 UTC [1031] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:18:50.321 UTC [1031] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:18:50.322 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:18:50.322 UTC [1031] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:18:50.322 UTC [1031] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:18:50.324 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:18:50.325 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:18:50.325 UTC [1031] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:18:50.325 UTC [1031] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:18:50.326 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:18:50.326 UTC [1031] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:18:50.326 UTC [1031] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:18:50.327 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:18:50.328 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:18:50.328 UTC [1031] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:18:50.328 UTC [1031] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:18:50.329 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:18:50.330 UTC [1031] DEBUG:  building index "pg_toast_41230_index" on table "pg_toast_41230" serially
2025-04-19 19:18:50.331 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:18:50.331 UTC [1031] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:18:50.331 UTC [1031] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:18:50.333 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:18:50.334 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:18:50.334 UTC [1031] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:18:50.334 UTC [1031] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:18:50.335 UTC [1031] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:18:50.335 UTC [1031] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:18:50.335 UTC [1031] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:18:50.337 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:18:50.341 UTC [1031] DEBUG:  building index "pg_toast_41263_index" on table "pg_toast_41263" serially
2025-04-19 19:18:50.343 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:18:50.343 UTC [1031] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:18:50.343 UTC [1031] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:18:50.345 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:18:50.347 UTC [1031] DEBUG:  building index "pg_toast_41274_index" on table "pg_toast_41274" serially
2025-04-19 19:18:50.349 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:18:50.349 UTC [1031] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:18:50.349 UTC [1031] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:18:50.352 UTC [1031] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:18:50.355 UTC [1031] DEBUG:  building index "pg_toast_41297_index" on table "pg_toast_41297" serially
2025-04-19 19:18:50.356 UTC [1031] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:18:50.357 UTC [1031] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:18:50.357 UTC [1031] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:18:50.358 UTC [1031] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:18:50.358 UTC [1031] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:18:50.359 UTC [1031] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:18:50.359 UTC [1031] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:18:50.360 UTC [1031] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:18:50.360 UTC [1031] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:18:50.361 UTC [1031] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:18:50.361 UTC [1031] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:18:50.363 UTC [1031] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:18:50.363 UTC [1031] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:18:50.365 UTC [1031] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:18:50.365 UTC [1031] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:18:50.369 UTC [1031] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:18:50.369 UTC [1031] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:18:50.371 UTC [1031] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:18:50.371 UTC [1031] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:18:50.376 UTC [1031] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:18:50.377 UTC [1031] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:18:50.379 UTC [1031] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:18:50.379 UTC [1031] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:18:50.381 UTC [1031] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:18:50.381 UTC [1031] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:18:50.402 UTC [1031] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:18:50.682 UTC [1031] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$KHBfiCRA1hX3Fsj6yqxWbe77a/1M0Rj9z4ESN/KfyaSDbByD9OCKq')
	                RETURNING id, username, email
	                
2025-04-19 19:18:50.684 UTC [1031] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:18:50.684 UTC [1031] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:03.852 UTC [1031] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:19:04.151 UTC [1031] DEBUG:  unexpected EOF on client connection
2025-04-19 19:19:05.982 UTC [1039] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:05.992 UTC [1039] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:05.998 UTC [1039] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:05.998 UTC [1039] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:06.003 UTC [1039] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:06.008 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:06.013 UTC [1039] DEBUG:  building index "pg_toast_41333_index" on table "pg_toast_41333" serially
2025-04-19 19:19:06.018 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:06.019 UTC [1039] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:06.019 UTC [1039] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:06.020 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:06.020 UTC [1039] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:06.020 UTC [1039] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:06.021 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:06.021 UTC [1039] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:06.021 UTC [1039] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:06.022 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:06.023 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:06.023 UTC [1039] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:06.023 UTC [1039] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:06.024 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:06.024 UTC [1039] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:06.024 UTC [1039] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:06.025 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:06.026 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:06.026 UTC [1039] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:06.027 UTC [1039] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:06.027 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:06.027 UTC [1039] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:06.027 UTC [1039] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:06.029 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:06.030 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:06.031 UTC [1039] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:06.031 UTC [1039] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:06.032 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:06.034 UTC [1039] DEBUG:  building index "pg_toast_41394_index" on table "pg_toast_41394" serially
2025-04-19 19:19:06.035 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:06.035 UTC [1039] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:06.035 UTC [1039] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:06.036 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:06.037 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:06.037 UTC [1039] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:06.037 UTC [1039] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:06.038 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:06.038 UTC [1039] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:06.038 UTC [1039] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:06.039 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:06.040 UTC [1039] DEBUG:  building index "pg_toast_41427_index" on table "pg_toast_41427" serially
2025-04-19 19:19:06.041 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:06.041 UTC [1039] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:06.041 UTC [1039] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:06.042 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:06.043 UTC [1039] DEBUG:  building index "pg_toast_41438_index" on table "pg_toast_41438" serially
2025-04-19 19:19:06.044 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:06.044 UTC [1039] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:06.044 UTC [1039] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:06.045 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:06.046 UTC [1039] DEBUG:  building index "pg_toast_41461_index" on table "pg_toast_41461" serially
2025-04-19 19:19:06.047 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:06.047 UTC [1039] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:06.047 UTC [1039] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:06.048 UTC [1039] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:06.048 UTC [1039] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:06.049 UTC [1039] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:06.049 UTC [1039] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:06.050 UTC [1039] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:06.050 UTC [1039] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:06.051 UTC [1039] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:06.051 UTC [1039] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:06.052 UTC [1039] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:06.052 UTC [1039] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:06.053 UTC [1039] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:06.053 UTC [1039] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:06.054 UTC [1039] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:06.054 UTC [1039] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:06.054 UTC [1039] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:06.054 UTC [1039] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:06.055 UTC [1039] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:06.055 UTC [1039] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:06.056 UTC [1039] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:06.056 UTC [1039] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:06.057 UTC [1039] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:06.057 UTC [1039] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:06.071 UTC [1039] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:06.338 UTC [1039] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZcHFQWbYO/kCaLOZEuywse3EeGqwowiJcXF6iGcYQfqUr92XVsAba')
	                RETURNING id, username, email
	                
2025-04-19 19:19:06.339 UTC [1039] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:06.340 UTC [1039] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:06.341 UTC [1039] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:19:06.351 UTC [1039] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:06.353 UTC [1039] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:06.355 UTC [1040] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:19:06.360 UTC [1039] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:06.365 UTC [1039] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:06.365 UTC [1039] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:06.372 UTC [1039] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:06.380 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:06.381 UTC [1039] DEBUG:  building index "pg_toast_41497_index" on table "pg_toast_41497" serially
2025-04-19 19:19:06.383 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:06.383 UTC [1039] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:06.383 UTC [1039] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:06.384 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:06.384 UTC [1039] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:06.384 UTC [1039] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:06.385 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:06.385 UTC [1039] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:06.385 UTC [1039] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:06.386 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:06.386 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:06.387 UTC [1039] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:06.387 UTC [1039] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:06.388 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:06.388 UTC [1039] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:06.388 UTC [1039] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:06.388 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:06.389 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:06.389 UTC [1039] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:06.389 UTC [1039] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:06.390 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:06.390 UTC [1039] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:06.390 UTC [1039] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:06.391 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:06.392 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:06.392 UTC [1039] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:06.392 UTC [1039] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:06.393 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:06.394 UTC [1039] DEBUG:  building index "pg_toast_41558_index" on table "pg_toast_41558" serially
2025-04-19 19:19:06.395 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:06.395 UTC [1039] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:06.395 UTC [1039] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:06.396 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:06.397 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:06.397 UTC [1039] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:06.397 UTC [1039] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:06.398 UTC [1039] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:06.398 UTC [1039] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:06.398 UTC [1039] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:06.401 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:06.403 UTC [1039] DEBUG:  building index "pg_toast_41591_index" on table "pg_toast_41591" serially
2025-04-19 19:19:06.406 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:06.407 UTC [1039] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:06.407 UTC [1039] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:06.408 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:06.409 UTC [1039] DEBUG:  building index "pg_toast_41602_index" on table "pg_toast_41602" serially
2025-04-19 19:19:06.410 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:06.410 UTC [1039] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:06.410 UTC [1039] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:06.411 UTC [1039] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:06.412 UTC [1039] DEBUG:  building index "pg_toast_41625_index" on table "pg_toast_41625" serially
2025-04-19 19:19:06.413 UTC [1039] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:06.413 UTC [1039] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:06.413 UTC [1039] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:06.414 UTC [1039] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:06.414 UTC [1039] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:06.415 UTC [1039] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:06.415 UTC [1039] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:06.416 UTC [1039] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:06.416 UTC [1039] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:06.417 UTC [1039] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:06.417 UTC [1039] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:06.418 UTC [1039] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:06.418 UTC [1039] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:06.419 UTC [1039] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:06.419 UTC [1039] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:06.420 UTC [1039] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:06.420 UTC [1039] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:06.421 UTC [1039] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:06.421 UTC [1039] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:06.421 UTC [1039] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:06.421 UTC [1039] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:06.422 UTC [1039] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:06.422 UTC [1039] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:06.423 UTC [1039] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:06.423 UTC [1039] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:06.429 UTC [1039] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:06.675 UTC [1039] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$7to8HbTWJugdsRFpX7Z4nuFVkkX90XZ7BjFlpAxOo9Tysx4XdeSZm')
	                RETURNING id, username, email
	                
2025-04-19 19:19:06.676 UTC [1039] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:06.676 UTC [1039] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:19.757 UTC [1039] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:19:20.032 UTC [1039] DEBUG:  unexpected EOF on client connection
2025-04-19 19:19:22.760 UTC [1055] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:22.772 UTC [1055] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:22.789 UTC [1055] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:22.789 UTC [1055] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:22.798 UTC [1055] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:22.802 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:22.805 UTC [1055] DEBUG:  building index "pg_toast_41661_index" on table "pg_toast_41661" serially
2025-04-19 19:19:22.807 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:22.808 UTC [1055] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:22.808 UTC [1055] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:22.809 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:22.809 UTC [1055] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:22.809 UTC [1055] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:22.810 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:22.810 UTC [1055] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:22.810 UTC [1055] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:22.811 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:22.812 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:22.812 UTC [1055] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:22.812 UTC [1055] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:22.813 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:22.813 UTC [1055] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:22.813 UTC [1055] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:22.814 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:22.815 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:22.816 UTC [1055] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:22.816 UTC [1055] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:22.816 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:22.817 UTC [1055] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:22.817 UTC [1055] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:22.818 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:22.820 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:22.820 UTC [1055] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:22.820 UTC [1055] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:22.821 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:22.823 UTC [1055] DEBUG:  building index "pg_toast_41722_index" on table "pg_toast_41722" serially
2025-04-19 19:19:22.824 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:22.825 UTC [1055] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:22.825 UTC [1055] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:22.826 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:22.827 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:22.828 UTC [1055] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:22.828 UTC [1055] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:22.829 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:22.830 UTC [1055] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:22.830 UTC [1055] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:22.831 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:22.832 UTC [1055] DEBUG:  building index "pg_toast_41755_index" on table "pg_toast_41755" serially
2025-04-19 19:19:22.833 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:22.834 UTC [1055] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:22.834 UTC [1055] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:22.834 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:22.835 UTC [1055] DEBUG:  building index "pg_toast_41766_index" on table "pg_toast_41766" serially
2025-04-19 19:19:22.836 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:22.837 UTC [1055] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:22.837 UTC [1055] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:22.839 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:22.840 UTC [1055] DEBUG:  building index "pg_toast_41789_index" on table "pg_toast_41789" serially
2025-04-19 19:19:22.841 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:22.841 UTC [1055] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:22.841 UTC [1055] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:22.842 UTC [1055] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:22.842 UTC [1055] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:22.843 UTC [1055] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:22.843 UTC [1055] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:22.844 UTC [1055] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:22.844 UTC [1055] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:22.845 UTC [1055] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:22.845 UTC [1055] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:22.846 UTC [1055] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:22.846 UTC [1055] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:22.848 UTC [1055] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:22.848 UTC [1055] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:22.852 UTC [1055] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:22.852 UTC [1055] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:22.854 UTC [1055] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:22.854 UTC [1055] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:22.855 UTC [1055] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:22.855 UTC [1055] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:22.857 UTC [1055] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:22.857 UTC [1055] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:22.858 UTC [1055] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:22.858 UTC [1055] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:22.869 UTC [1055] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:23.171 UTC [1055] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$x9iiXvpV5oru/x9MDfHl7./D9jjVJAvd9RTu4zY/FQsq3NxOkfx/C')
	                RETURNING id, username, email
	                
2025-04-19 19:19:23.172 UTC [1055] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:23.172 UTC [1055] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:23.173 UTC [1055] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:19:23.192 UTC [1055] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:23.194 UTC [1055] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:23.198 UTC [1055] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:23.204 UTC [1055] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:23.204 UTC [1055] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:23.209 UTC [1055] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:23.218 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:23.220 UTC [1055] DEBUG:  building index "pg_toast_41825_index" on table "pg_toast_41825" serially
2025-04-19 19:19:23.222 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:23.222 UTC [1055] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:23.222 UTC [1055] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:23.223 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:23.223 UTC [1055] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:23.223 UTC [1055] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:23.225 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:23.225 UTC [1055] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:23.225 UTC [1055] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:23.226 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:23.227 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:23.227 UTC [1055] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:23.227 UTC [1055] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:23.229 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:23.229 UTC [1055] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:23.229 UTC [1055] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:23.230 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:23.231 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:23.231 UTC [1055] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:23.231 UTC [1055] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:23.233 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:23.233 UTC [1055] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:23.233 UTC [1055] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:23.235 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:23.236 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:23.236 UTC [1055] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:23.236 UTC [1055] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:23.238 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:23.241 UTC [1055] DEBUG:  building index "pg_toast_41886_index" on table "pg_toast_41886" serially
2025-04-19 19:19:23.243 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:23.243 UTC [1055] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:23.243 UTC [1055] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:23.245 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:23.247 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:23.247 UTC [1055] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:23.247 UTC [1055] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:23.248 UTC [1055] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:23.248 UTC [1055] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:23.248 UTC [1055] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:23.251 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:23.252 UTC [1055] DEBUG:  building index "pg_toast_41919_index" on table "pg_toast_41919" serially
2025-04-19 19:19:23.252 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:23.253 UTC [1055] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:23.253 UTC [1055] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:23.254 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:23.255 UTC [1055] DEBUG:  building index "pg_toast_41930_index" on table "pg_toast_41930" serially
2025-04-19 19:19:23.256 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:23.256 UTC [1055] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:23.256 UTC [1055] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:23.258 UTC [1055] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:23.259 UTC [1055] DEBUG:  building index "pg_toast_41953_index" on table "pg_toast_41953" serially
2025-04-19 19:19:23.260 UTC [1055] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:23.260 UTC [1055] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:23.260 UTC [1055] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:23.261 UTC [1055] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:23.261 UTC [1055] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:23.262 UTC [1055] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:23.262 UTC [1055] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:23.263 UTC [1055] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:23.263 UTC [1055] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:23.264 UTC [1055] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:23.264 UTC [1055] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:23.265 UTC [1055] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:23.265 UTC [1055] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:23.266 UTC [1055] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:23.266 UTC [1055] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:23.267 UTC [1055] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:23.267 UTC [1055] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:23.268 UTC [1055] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:23.268 UTC [1055] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:23.269 UTC [1055] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:23.269 UTC [1055] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:23.270 UTC [1055] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:23.270 UTC [1055] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:23.271 UTC [1055] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:23.271 UTC [1055] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:23.283 UTC [1055] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:23.560 UTC [1055] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$icGPbBwmJzZkhk4nBYA7MuzGN7Y8I24WmtdlxXcgLUgoYWDQeqq2O')
	                RETURNING id, username, email
	                
2025-04-19 19:19:23.561 UTC [1055] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:23.561 UTC [1055] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:36.119 UTC [1055] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:19:36.282 UTC [1063] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:19:36.407 UTC [1055] DEBUG:  unexpected EOF on client connection
2025-04-19 19:19:36.503 UTC [1063] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:19:38.025 UTC [1064] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:38.030 UTC [1064] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:38.038 UTC [1064] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:38.038 UTC [1064] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:38.041 UTC [1064] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:38.045 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:38.047 UTC [1064] DEBUG:  building index "pg_toast_41990_index" on table "pg_toast_41990" serially
2025-04-19 19:19:38.048 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:38.049 UTC [1064] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:38.049 UTC [1064] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:38.050 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:38.050 UTC [1064] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:38.050 UTC [1064] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:38.050 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:38.051 UTC [1064] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:38.051 UTC [1064] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:38.052 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:38.053 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:38.053 UTC [1064] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:38.053 UTC [1064] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:38.054 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:38.054 UTC [1064] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:38.054 UTC [1064] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:38.055 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:38.056 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:38.056 UTC [1064] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:38.056 UTC [1064] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:38.057 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:38.057 UTC [1064] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:38.057 UTC [1064] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:38.058 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:38.059 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:38.060 UTC [1064] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:38.060 UTC [1064] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:38.061 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:38.063 UTC [1064] DEBUG:  building index "pg_toast_42051_index" on table "pg_toast_42051" serially
2025-04-19 19:19:38.065 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:38.065 UTC [1064] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:38.065 UTC [1064] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:38.066 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:38.067 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:38.067 UTC [1064] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:38.067 UTC [1064] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:38.068 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:38.068 UTC [1064] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:38.068 UTC [1064] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:38.069 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:38.070 UTC [1064] DEBUG:  building index "pg_toast_42084_index" on table "pg_toast_42084" serially
2025-04-19 19:19:38.072 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:38.072 UTC [1064] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:38.072 UTC [1064] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:38.073 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:38.074 UTC [1064] DEBUG:  building index "pg_toast_42095_index" on table "pg_toast_42095" serially
2025-04-19 19:19:38.075 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:38.075 UTC [1064] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:38.075 UTC [1064] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:38.077 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:38.077 UTC [1064] DEBUG:  building index "pg_toast_42118_index" on table "pg_toast_42118" serially
2025-04-19 19:19:38.078 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:38.078 UTC [1064] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:38.078 UTC [1064] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:38.079 UTC [1064] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:38.079 UTC [1064] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:38.080 UTC [1064] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:38.080 UTC [1064] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:38.081 UTC [1064] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:38.081 UTC [1064] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:38.082 UTC [1064] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:38.082 UTC [1064] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:38.082 UTC [1064] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:38.082 UTC [1064] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:38.083 UTC [1064] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:38.083 UTC [1064] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:38.084 UTC [1064] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:38.084 UTC [1064] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:38.085 UTC [1064] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 19:19:38.085 UTC [1064] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:38.085 UTC [1064] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:38.086 UTC [1064] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:38.086 UTC [1064] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:38.086 UTC [1064] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:38.086 UTC [1064] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:38.087 UTC [1064] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:38.087 UTC [1064] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:38.096 UTC [1064] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:38.361 UTC [1064] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$BIEr6EQRkpXBgxqOjYnhOuljWmBgrervHP04WvcgZ3fYxuxp7s4Si')
	                RETURNING id, username, email
	                
2025-04-19 19:19:38.362 UTC [1064] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:38.362 UTC [1064] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:38.363 UTC [1064] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:19:38.368 UTC [1064] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 19:19:38.368 UTC [1064] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 19:19:38.382 UTC [1064] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:38.383 UTC [1064] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:38.386 UTC [1064] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:38.390 UTC [1064] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:38.390 UTC [1064] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:38.397 UTC [1064] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:38.400 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:38.401 UTC [1064] DEBUG:  building index "pg_toast_42154_index" on table "pg_toast_42154" serially
2025-04-19 19:19:38.402 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:38.402 UTC [1064] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:38.402 UTC [1064] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:38.403 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:38.403 UTC [1064] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:38.403 UTC [1064] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:38.404 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:38.404 UTC [1064] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:38.404 UTC [1064] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:38.405 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:38.406 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:38.406 UTC [1064] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:38.406 UTC [1064] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:38.407 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:38.407 UTC [1064] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:38.407 UTC [1064] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:38.407 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:38.408 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:38.409 UTC [1064] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:38.409 UTC [1064] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:38.409 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:38.410 UTC [1064] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:38.410 UTC [1064] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:38.411 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:38.412 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:38.412 UTC [1064] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:38.412 UTC [1064] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:38.413 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:38.414 UTC [1064] DEBUG:  building index "pg_toast_42215_index" on table "pg_toast_42215" serially
2025-04-19 19:19:38.415 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:38.415 UTC [1064] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:38.415 UTC [1064] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:38.417 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:38.417 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:38.418 UTC [1064] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:38.418 UTC [1064] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:38.418 UTC [1064] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:38.419 UTC [1064] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:38.419 UTC [1064] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:38.420 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:38.421 UTC [1064] DEBUG:  building index "pg_toast_42248_index" on table "pg_toast_42248" serially
2025-04-19 19:19:38.421 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:38.422 UTC [1064] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:38.422 UTC [1064] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:38.422 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:38.424 UTC [1064] DEBUG:  building index "pg_toast_42259_index" on table "pg_toast_42259" serially
2025-04-19 19:19:38.424 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:38.424 UTC [1064] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:38.424 UTC [1064] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:38.426 UTC [1064] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:38.427 UTC [1064] DEBUG:  building index "pg_toast_42282_index" on table "pg_toast_42282" serially
2025-04-19 19:19:38.428 UTC [1064] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:38.428 UTC [1064] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:38.428 UTC [1064] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:38.429 UTC [1064] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:38.429 UTC [1064] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:38.429 UTC [1064] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:38.429 UTC [1064] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:38.430 UTC [1064] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:38.430 UTC [1064] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:38.431 UTC [1064] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:38.431 UTC [1064] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:38.432 UTC [1064] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:38.432 UTC [1064] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:38.433 UTC [1064] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:38.433 UTC [1064] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:38.433 UTC [1064] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:38.433 UTC [1064] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:38.434 UTC [1064] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:38.434 UTC [1064] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:38.435 UTC [1064] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:38.435 UTC [1064] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:38.436 UTC [1064] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:38.436 UTC [1064] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:38.437 UTC [1064] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:38.437 UTC [1064] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:38.444 UTC [1064] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:38.693 UTC [1064] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$j2m6.KZKd2G09cvMMlDLbOQYbhWcoSxFuI.Cn7tMd7qtAQUqwOFda')
	                RETURNING id, username, email
	                
2025-04-19 19:19:38.694 UTC [1064] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:38.694 UTC [1064] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:51.973 UTC [1064] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:19:52.248 UTC [1064] DEBUG:  unexpected EOF on client connection
2025-04-19 19:19:53.828 UTC [1079] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:53.837 UTC [1079] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:53.845 UTC [1079] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:53.845 UTC [1079] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:53.849 UTC [1079] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:53.852 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:53.855 UTC [1079] DEBUG:  building index "pg_toast_42318_index" on table "pg_toast_42318" serially
2025-04-19 19:19:53.856 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:53.857 UTC [1079] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:53.857 UTC [1079] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:53.858 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:53.858 UTC [1079] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:53.858 UTC [1079] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:53.859 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:53.859 UTC [1079] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:53.859 UTC [1079] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:53.860 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:53.861 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:53.862 UTC [1079] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:53.862 UTC [1079] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:53.863 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:53.864 UTC [1079] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:53.864 UTC [1079] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:53.865 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:53.867 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:53.867 UTC [1079] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:53.867 UTC [1079] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:53.869 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:53.869 UTC [1079] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:53.869 UTC [1079] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:53.871 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:53.872 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:53.872 UTC [1079] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:53.872 UTC [1079] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:53.873 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:53.875 UTC [1079] DEBUG:  building index "pg_toast_42379_index" on table "pg_toast_42379" serially
2025-04-19 19:19:53.876 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:53.876 UTC [1079] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:53.876 UTC [1079] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:53.877 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:53.878 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:53.878 UTC [1079] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:53.878 UTC [1079] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:53.879 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:53.879 UTC [1079] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:53.879 UTC [1079] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:53.880 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:53.881 UTC [1079] DEBUG:  building index "pg_toast_42412_index" on table "pg_toast_42412" serially
2025-04-19 19:19:53.882 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:53.882 UTC [1079] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:53.883 UTC [1079] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:53.883 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:53.884 UTC [1079] DEBUG:  building index "pg_toast_42423_index" on table "pg_toast_42423" serially
2025-04-19 19:19:53.886 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:53.886 UTC [1079] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:53.886 UTC [1079] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:53.888 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:53.890 UTC [1079] DEBUG:  building index "pg_toast_42446_index" on table "pg_toast_42446" serially
2025-04-19 19:19:53.891 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:53.891 UTC [1079] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:53.891 UTC [1079] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:53.892 UTC [1079] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:53.892 UTC [1079] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:53.892 UTC [1079] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:53.892 UTC [1079] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:53.893 UTC [1079] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:53.893 UTC [1079] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:53.894 UTC [1079] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:53.894 UTC [1079] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:53.895 UTC [1079] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:53.895 UTC [1079] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:53.896 UTC [1079] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:53.896 UTC [1079] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:53.897 UTC [1079] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:53.897 UTC [1079] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:53.898 UTC [1079] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:53.898 UTC [1079] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:53.898 UTC [1079] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:53.898 UTC [1079] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:53.899 UTC [1079] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:53.899 UTC [1079] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:53.900 UTC [1079] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:53.900 UTC [1079] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:53.910 UTC [1079] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:54.178 UTC [1079] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$CIVFrjrKlrZRWsWfDHMS5.egyEQR.m.UGHGhZSKQpHEAL/zX3WVrW')
	                RETURNING id, username, email
	                
2025-04-19 19:19:54.179 UTC [1079] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:54.180 UTC [1079] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:19:54.181 UTC [1079] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:19:54.191 UTC [1079] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:54.193 UTC [1079] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:19:54.197 UTC [1079] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:19:54.209 UTC [1079] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:19:54.209 UTC [1079] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:19:54.213 UTC [1079] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:19:54.216 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:19:54.217 UTC [1079] DEBUG:  building index "pg_toast_42482_index" on table "pg_toast_42482" serially
2025-04-19 19:19:54.218 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:19:54.219 UTC [1079] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:19:54.219 UTC [1079] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:19:54.219 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:19:54.219 UTC [1079] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:19:54.219 UTC [1079] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:19:54.220 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:19:54.220 UTC [1079] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:19:54.220 UTC [1079] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:19:54.221 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:19:54.222 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:19:54.222 UTC [1079] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:19:54.222 UTC [1079] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:19:54.223 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:19:54.223 UTC [1079] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:19:54.223 UTC [1079] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:19:54.224 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:19:54.225 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:19:54.225 UTC [1079] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:19:54.225 UTC [1079] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:19:54.226 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:19:54.226 UTC [1079] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:19:54.226 UTC [1079] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:19:54.227 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:19:54.228 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:19:54.228 UTC [1079] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:19:54.228 UTC [1079] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:19:54.229 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:19:54.230 UTC [1079] DEBUG:  building index "pg_toast_42543_index" on table "pg_toast_42543" serially
2025-04-19 19:19:54.230 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:19:54.231 UTC [1079] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:19:54.231 UTC [1079] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:19:54.232 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:19:54.233 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:19:54.233 UTC [1079] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:19:54.233 UTC [1079] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:19:54.234 UTC [1079] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:19:54.234 UTC [1079] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:19:54.234 UTC [1079] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:19:54.235 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:19:54.236 UTC [1079] DEBUG:  building index "pg_toast_42576_index" on table "pg_toast_42576" serially
2025-04-19 19:19:54.237 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:19:54.237 UTC [1079] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:19:54.237 UTC [1079] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:19:54.237 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:19:54.239 UTC [1079] DEBUG:  building index "pg_toast_42587_index" on table "pg_toast_42587" serially
2025-04-19 19:19:54.239 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:19:54.240 UTC [1079] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:19:54.240 UTC [1079] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:19:54.241 UTC [1079] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:19:54.242 UTC [1079] DEBUG:  building index "pg_toast_42610_index" on table "pg_toast_42610" serially
2025-04-19 19:19:54.243 UTC [1079] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:19:54.243 UTC [1079] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:19:54.243 UTC [1079] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:19:54.244 UTC [1079] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:19:54.244 UTC [1079] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:19:54.244 UTC [1079] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:19:54.244 UTC [1079] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:19:54.245 UTC [1079] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:19:54.245 UTC [1079] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:19:54.246 UTC [1079] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:19:54.246 UTC [1079] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:19:54.247 UTC [1079] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:19:54.247 UTC [1079] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:19:54.247 UTC [1079] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:19:54.247 UTC [1079] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:19:54.248 UTC [1079] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:19:54.248 UTC [1079] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:19:54.249 UTC [1079] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:19:54.249 UTC [1079] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:19:54.250 UTC [1079] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:19:54.250 UTC [1079] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:19:54.251 UTC [1079] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:19:54.251 UTC [1079] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:19:54.251 UTC [1079] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:19:54.251 UTC [1079] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:19:54.258 UTC [1079] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:19:54.527 UTC [1079] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ff93IWxMa44KUxSF1YqThu.Ay/w0PanL847cQQXNqH/4LlWpUVxeW')
	                RETURNING id, username, email
	                
2025-04-19 19:19:54.528 UTC [1079] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:19:54.528 UTC [1079] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:06.382 UTC [1087] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:20:07.817 UTC [1079] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:20:08.130 UTC [1079] DEBUG:  unexpected EOF on client connection
2025-04-19 19:20:09.759 UTC [1095] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:09.764 UTC [1095] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:09.769 UTC [1095] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:09.769 UTC [1095] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:09.773 UTC [1095] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:09.776 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:09.779 UTC [1095] DEBUG:  building index "pg_toast_42646_index" on table "pg_toast_42646" serially
2025-04-19 19:20:09.781 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:09.781 UTC [1095] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:09.781 UTC [1095] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:09.782 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:09.782 UTC [1095] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:09.782 UTC [1095] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:09.783 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:09.783 UTC [1095] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:09.783 UTC [1095] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:09.784 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:09.785 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:09.785 UTC [1095] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:09.785 UTC [1095] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:09.786 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:09.786 UTC [1095] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:09.786 UTC [1095] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:09.787 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:09.789 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:09.789 UTC [1095] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:09.789 UTC [1095] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:09.790 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:09.790 UTC [1095] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:09.791 UTC [1095] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:09.792 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:09.793 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:09.794 UTC [1095] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:09.794 UTC [1095] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:09.795 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:09.796 UTC [1095] DEBUG:  building index "pg_toast_42707_index" on table "pg_toast_42707" serially
2025-04-19 19:20:09.797 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:09.797 UTC [1095] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:09.798 UTC [1095] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:09.799 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:09.799 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:09.800 UTC [1095] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:09.800 UTC [1095] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:09.800 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:09.801 UTC [1095] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:09.801 UTC [1095] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:09.802 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:09.803 UTC [1095] DEBUG:  building index "pg_toast_42740_index" on table "pg_toast_42740" serially
2025-04-19 19:20:09.803 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:09.804 UTC [1095] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:09.804 UTC [1095] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:09.804 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:09.806 UTC [1095] DEBUG:  building index "pg_toast_42751_index" on table "pg_toast_42751" serially
2025-04-19 19:20:09.807 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:09.807 UTC [1095] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:09.807 UTC [1095] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:09.808 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:09.809 UTC [1095] DEBUG:  building index "pg_toast_42774_index" on table "pg_toast_42774" serially
2025-04-19 19:20:09.810 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:09.810 UTC [1095] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:09.810 UTC [1095] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:09.811 UTC [1095] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:09.811 UTC [1095] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:09.812 UTC [1095] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:09.812 UTC [1095] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:09.813 UTC [1095] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:09.813 UTC [1095] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:09.814 UTC [1095] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:09.814 UTC [1095] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:09.815 UTC [1095] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:09.815 UTC [1095] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:09.816 UTC [1095] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:09.816 UTC [1095] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:09.817 UTC [1095] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:09.817 UTC [1095] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:09.817 UTC [1095] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:09.817 UTC [1095] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:09.818 UTC [1095] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:09.818 UTC [1095] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:09.819 UTC [1095] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:09.819 UTC [1095] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:09.820 UTC [1095] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:09.820 UTC [1095] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:09.828 UTC [1095] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:10.094 UTC [1095] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$rJJixdKYc7rET7D8Dbdkh.XiPgo/YrQoihgPbwpnZu9EVgbQEXQsK')
	                RETURNING id, username, email
	                
2025-04-19 19:20:10.095 UTC [1095] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:10.095 UTC [1095] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:10.096 UTC [1095] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:20:10.104 UTC [1095] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:10.104 UTC [1095] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:10.107 UTC [1095] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:10.112 UTC [1095] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:10.112 UTC [1095] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:10.116 UTC [1095] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:10.119 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:10.120 UTC [1095] DEBUG:  building index "pg_toast_42810_index" on table "pg_toast_42810" serially
2025-04-19 19:20:10.120 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:10.121 UTC [1095] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:10.121 UTC [1095] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:10.121 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:10.122 UTC [1095] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:10.122 UTC [1095] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:10.122 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:10.122 UTC [1095] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:10.122 UTC [1095] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:10.123 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:10.124 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:10.124 UTC [1095] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:10.124 UTC [1095] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:10.125 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:10.125 UTC [1095] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:10.125 UTC [1095] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:10.126 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:10.127 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:10.127 UTC [1095] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:10.127 UTC [1095] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:10.128 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:10.128 UTC [1095] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:10.128 UTC [1095] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:10.129 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:10.130 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:10.130 UTC [1095] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:10.130 UTC [1095] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:10.131 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:10.132 UTC [1095] DEBUG:  building index "pg_toast_42871_index" on table "pg_toast_42871" serially
2025-04-19 19:20:10.133 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:10.133 UTC [1095] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:10.133 UTC [1095] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:10.134 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:10.135 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:10.135 UTC [1095] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:10.135 UTC [1095] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:10.136 UTC [1095] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:10.136 UTC [1095] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:10.136 UTC [1095] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:10.137 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:10.138 UTC [1095] DEBUG:  building index "pg_toast_42904_index" on table "pg_toast_42904" serially
2025-04-19 19:20:10.139 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:10.139 UTC [1095] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:10.139 UTC [1095] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:10.140 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:10.141 UTC [1095] DEBUG:  building index "pg_toast_42915_index" on table "pg_toast_42915" serially
2025-04-19 19:20:10.142 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:10.142 UTC [1095] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:10.142 UTC [1095] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:10.143 UTC [1095] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:10.144 UTC [1095] DEBUG:  building index "pg_toast_42938_index" on table "pg_toast_42938" serially
2025-04-19 19:20:10.145 UTC [1095] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:10.145 UTC [1095] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:10.145 UTC [1095] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:10.145 UTC [1095] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:10.145 UTC [1095] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:10.146 UTC [1095] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:10.146 UTC [1095] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:10.147 UTC [1095] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:10.147 UTC [1095] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:10.148 UTC [1095] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:10.148 UTC [1095] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:10.148 UTC [1095] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:10.148 UTC [1095] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:10.149 UTC [1095] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:10.149 UTC [1095] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:10.150 UTC [1095] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:10.150 UTC [1095] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:10.152 UTC [1095] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:10.152 UTC [1095] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:10.152 UTC [1095] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:10.152 UTC [1095] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:10.153 UTC [1095] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:10.153 UTC [1095] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:10.154 UTC [1095] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:10.154 UTC [1095] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:10.160 UTC [1095] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:10.408 UTC [1095] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ajz5cBDYJ7fbTCOq2fYhEuzQSZcg0oS6L0qKy6tYEUGoeZSepxkV.')
	                RETURNING id, username, email
	                
2025-04-19 19:20:10.409 UTC [1095] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:10.409 UTC [1095] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:23.722 UTC [1095] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:20:23.994 UTC [1095] DEBUG:  unexpected EOF on client connection
2025-04-19 19:20:25.737 UTC [1103] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:25.743 UTC [1103] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:25.750 UTC [1103] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:25.750 UTC [1103] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:25.753 UTC [1103] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:25.756 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:25.759 UTC [1103] DEBUG:  building index "pg_toast_42974_index" on table "pg_toast_42974" serially
2025-04-19 19:20:25.760 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:25.761 UTC [1103] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:25.761 UTC [1103] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:25.762 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:25.762 UTC [1103] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:25.762 UTC [1103] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:25.763 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:25.764 UTC [1103] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:25.764 UTC [1103] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:25.765 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:25.766 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:25.766 UTC [1103] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:25.766 UTC [1103] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:25.767 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:25.767 UTC [1103] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:25.767 UTC [1103] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:25.768 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:25.769 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:25.769 UTC [1103] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:25.769 UTC [1103] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:25.770 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:25.770 UTC [1103] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:25.770 UTC [1103] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:25.771 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:25.772 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:25.772 UTC [1103] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:25.772 UTC [1103] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:25.773 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:25.775 UTC [1103] DEBUG:  building index "pg_toast_43035_index" on table "pg_toast_43035" serially
2025-04-19 19:20:25.776 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:25.776 UTC [1103] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:25.776 UTC [1103] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:25.777 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:25.778 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:25.778 UTC [1103] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:25.778 UTC [1103] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:25.779 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:25.779 UTC [1103] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:25.779 UTC [1103] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:25.780 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:25.781 UTC [1103] DEBUG:  building index "pg_toast_43068_index" on table "pg_toast_43068" serially
2025-04-19 19:20:25.782 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:25.782 UTC [1103] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:25.782 UTC [1103] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:25.783 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:25.784 UTC [1103] DEBUG:  building index "pg_toast_43079_index" on table "pg_toast_43079" serially
2025-04-19 19:20:25.785 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:25.785 UTC [1103] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:25.785 UTC [1103] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:25.786 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:25.787 UTC [1103] DEBUG:  building index "pg_toast_43102_index" on table "pg_toast_43102" serially
2025-04-19 19:20:25.788 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:25.788 UTC [1103] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:25.788 UTC [1103] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:25.789 UTC [1103] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:25.789 UTC [1103] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:25.790 UTC [1103] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:25.790 UTC [1103] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:25.791 UTC [1103] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:25.791 UTC [1103] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:25.791 UTC [1103] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:25.791 UTC [1103] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:25.792 UTC [1103] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:25.792 UTC [1103] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:25.793 UTC [1103] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:25.793 UTC [1103] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:25.794 UTC [1103] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:25.794 UTC [1103] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:25.794 UTC [1103] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:25.794 UTC [1103] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:25.795 UTC [1103] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:25.795 UTC [1103] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:25.796 UTC [1103] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:25.796 UTC [1103] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:25.797 UTC [1103] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:25.797 UTC [1103] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:25.807 UTC [1103] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:26.072 UTC [1103] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$FuhQni9yDKBfhWE8PuGYuubpseni3VpfF20p3Ij5JxrRRjvnJ/1ZW')
	                RETURNING id, username, email
	                
2025-04-19 19:20:26.074 UTC [1103] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:26.074 UTC [1103] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:26.075 UTC [1103] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:20:26.086 UTC [1103] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:26.087 UTC [1103] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:26.089 UTC [1103] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:26.093 UTC [1103] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:26.093 UTC [1103] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:26.096 UTC [1103] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:26.100 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:26.100 UTC [1103] DEBUG:  building index "pg_toast_43138_index" on table "pg_toast_43138" serially
2025-04-19 19:20:26.102 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:26.102 UTC [1103] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:26.102 UTC [1103] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:26.103 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:26.103 UTC [1103] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:26.103 UTC [1103] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:26.103 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:26.103 UTC [1103] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:26.103 UTC [1103] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:26.104 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:26.105 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:26.105 UTC [1103] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:26.105 UTC [1103] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:26.106 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:26.106 UTC [1103] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:26.106 UTC [1103] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:26.107 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:26.107 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:26.108 UTC [1103] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:26.108 UTC [1103] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:26.108 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:26.108 UTC [1103] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:26.108 UTC [1103] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:26.109 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:26.110 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:26.110 UTC [1103] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:26.110 UTC [1103] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:26.111 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:26.112 UTC [1103] DEBUG:  building index "pg_toast_43199_index" on table "pg_toast_43199" serially
2025-04-19 19:20:26.113 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:26.113 UTC [1103] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:26.113 UTC [1103] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:26.114 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:26.115 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:26.115 UTC [1103] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:26.115 UTC [1103] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:26.116 UTC [1103] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:26.116 UTC [1103] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:26.116 UTC [1103] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:26.117 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:26.118 UTC [1103] DEBUG:  building index "pg_toast_43232_index" on table "pg_toast_43232" serially
2025-04-19 19:20:26.119 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:26.119 UTC [1103] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:26.119 UTC [1103] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:26.120 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:26.121 UTC [1103] DEBUG:  building index "pg_toast_43243_index" on table "pg_toast_43243" serially
2025-04-19 19:20:26.121 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:26.122 UTC [1103] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:26.122 UTC [1103] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:26.123 UTC [1103] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:26.124 UTC [1103] DEBUG:  building index "pg_toast_43266_index" on table "pg_toast_43266" serially
2025-04-19 19:20:26.124 UTC [1103] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:26.124 UTC [1103] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:26.124 UTC [1103] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:26.125 UTC [1103] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:26.125 UTC [1103] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:26.126 UTC [1103] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:26.126 UTC [1103] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:26.127 UTC [1103] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:26.127 UTC [1103] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:26.128 UTC [1103] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:26.128 UTC [1103] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:26.129 UTC [1103] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:26.129 UTC [1103] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:26.130 UTC [1103] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:26.130 UTC [1103] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:26.131 UTC [1103] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:26.131 UTC [1103] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:26.132 UTC [1103] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:26.132 UTC [1103] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:26.133 UTC [1103] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:26.133 UTC [1103] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:26.133 UTC [1103] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:26.133 UTC [1103] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:26.134 UTC [1103] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:26.134 UTC [1103] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:26.144 UTC [1103] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:26.389 UTC [1103] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$j2i6Dc6T4xyeRE63rcuvRea4q1oMwAtKfYp7lRYxW9Wb54txxVpbm')
	                RETURNING id, username, email
	                
2025-04-19 19:20:26.389 UTC [1103] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:26.390 UTC [1103] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:36.303 UTC [1111] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 19:20:36.565 UTC [1111] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 19:20:39.597 UTC [1103] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:20:39.873 UTC [1103] DEBUG:  unexpected EOF on client connection
2025-04-19 19:20:41.402 UTC [1119] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:41.410 UTC [1119] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:41.415 UTC [1119] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:41.415 UTC [1119] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:41.418 UTC [1119] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:41.421 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:41.424 UTC [1119] DEBUG:  building index "pg_toast_43303_index" on table "pg_toast_43303" serially
2025-04-19 19:20:41.425 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:41.425 UTC [1119] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:41.425 UTC [1119] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:41.426 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:41.426 UTC [1119] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:41.426 UTC [1119] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:41.427 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:41.427 UTC [1119] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:41.427 UTC [1119] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:41.428 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:41.429 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:41.429 UTC [1119] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:41.429 UTC [1119] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:41.430 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:41.430 UTC [1119] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:41.430 UTC [1119] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:41.430 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:41.431 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:41.432 UTC [1119] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:41.432 UTC [1119] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:41.432 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:41.433 UTC [1119] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:41.433 UTC [1119] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:41.434 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:41.435 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:41.435 UTC [1119] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:41.435 UTC [1119] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:41.436 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:41.438 UTC [1119] DEBUG:  building index "pg_toast_43364_index" on table "pg_toast_43364" serially
2025-04-19 19:20:41.438 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:41.439 UTC [1119] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:41.439 UTC [1119] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:41.440 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:41.441 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:41.441 UTC [1119] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:41.441 UTC [1119] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:41.442 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:41.442 UTC [1119] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:41.442 UTC [1119] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:41.443 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:41.444 UTC [1119] DEBUG:  building index "pg_toast_43397_index" on table "pg_toast_43397" serially
2025-04-19 19:20:41.445 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:41.445 UTC [1119] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:41.445 UTC [1119] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:41.445 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:41.446 UTC [1119] DEBUG:  building index "pg_toast_43408_index" on table "pg_toast_43408" serially
2025-04-19 19:20:41.447 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:41.447 UTC [1119] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:41.447 UTC [1119] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:41.449 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:41.450 UTC [1119] DEBUG:  building index "pg_toast_43431_index" on table "pg_toast_43431" serially
2025-04-19 19:20:41.451 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:41.452 UTC [1119] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:41.452 UTC [1119] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:41.455 UTC [1119] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:41.455 UTC [1119] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:41.457 UTC [1119] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:41.457 UTC [1119] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:41.458 UTC [1119] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:41.458 UTC [1119] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:41.459 UTC [1119] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:41.459 UTC [1119] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:41.460 UTC [1119] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:41.460 UTC [1119] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:41.461 UTC [1119] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:41.461 UTC [1119] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:41.463 UTC [1119] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:41.463 UTC [1119] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:41.463 UTC [1119] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:41.463 UTC [1119] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:41.464 UTC [1119] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:41.464 UTC [1119] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:41.465 UTC [1119] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:41.465 UTC [1119] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:41.466 UTC [1119] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:41.466 UTC [1119] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:41.474 UTC [1119] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:41.745 UTC [1119] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$rwOZqvuvpoHrTRwhENXr7uC7gQUpinuvHluV4/fh0Flldm4YSUYEm')
	                RETURNING id, username, email
	                
2025-04-19 19:20:41.748 UTC [1119] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:41.748 UTC [1119] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:41.749 UTC [1119] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:20:41.760 UTC [1119] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:41.761 UTC [1119] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:41.764 UTC [1119] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:41.768 UTC [1119] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:41.768 UTC [1119] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:41.771 UTC [1119] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:41.774 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:41.775 UTC [1119] DEBUG:  building index "pg_toast_43467_index" on table "pg_toast_43467" serially
2025-04-19 19:20:41.776 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:41.776 UTC [1119] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:41.776 UTC [1119] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:41.777 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:41.777 UTC [1119] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:41.777 UTC [1119] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:41.778 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:41.778 UTC [1119] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:41.778 UTC [1119] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:41.779 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:41.780 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:41.780 UTC [1119] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:41.780 UTC [1119] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:41.781 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:41.781 UTC [1119] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:41.781 UTC [1119] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:41.781 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:41.782 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:41.782 UTC [1119] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:41.782 UTC [1119] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:41.783 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:41.783 UTC [1119] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:41.783 UTC [1119] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:41.784 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:41.785 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:41.785 UTC [1119] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:41.785 UTC [1119] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:41.786 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:41.787 UTC [1119] DEBUG:  building index "pg_toast_43528_index" on table "pg_toast_43528" serially
2025-04-19 19:20:41.788 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:41.788 UTC [1119] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:41.788 UTC [1119] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:41.789 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:41.790 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:41.790 UTC [1119] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:41.790 UTC [1119] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:41.791 UTC [1119] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:41.791 UTC [1119] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:41.791 UTC [1119] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:41.792 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:41.793 UTC [1119] DEBUG:  building index "pg_toast_43561_index" on table "pg_toast_43561" serially
2025-04-19 19:20:41.793 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:41.794 UTC [1119] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:41.794 UTC [1119] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:41.794 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:41.795 UTC [1119] DEBUG:  building index "pg_toast_43572_index" on table "pg_toast_43572" serially
2025-04-19 19:20:41.796 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:41.796 UTC [1119] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:41.796 UTC [1119] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:41.797 UTC [1119] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:41.798 UTC [1119] DEBUG:  building index "pg_toast_43595_index" on table "pg_toast_43595" serially
2025-04-19 19:20:41.799 UTC [1119] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:41.799 UTC [1119] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:41.799 UTC [1119] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:41.800 UTC [1119] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:41.800 UTC [1119] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:41.801 UTC [1119] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:41.801 UTC [1119] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:41.802 UTC [1119] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:41.802 UTC [1119] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:41.802 UTC [1119] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:41.802 UTC [1119] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:41.803 UTC [1119] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:41.803 UTC [1119] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:41.804 UTC [1119] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:41.804 UTC [1119] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:41.804 UTC [1119] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:41.804 UTC [1119] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:41.805 UTC [1119] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:41.805 UTC [1119] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:41.806 UTC [1119] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:41.806 UTC [1119] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:41.807 UTC [1119] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:41.807 UTC [1119] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:41.808 UTC [1119] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:41.808 UTC [1119] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:41.817 UTC [1119] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:42.067 UTC [1119] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$gnK66EzJqMANvXmtBlaB2up433QyXTWngZIDLMohHv5G4MnueOmxa')
	                RETURNING id, username, email
	                
2025-04-19 19:20:42.068 UTC [1119] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:42.069 UTC [1119] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:55.778 UTC [1119] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:20:56.239 UTC [1119] DEBUG:  unexpected EOF on client connection
2025-04-19 19:20:59.251 UTC [1127] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:59.262 UTC [1127] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:59.269 UTC [1127] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:59.269 UTC [1127] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:59.277 UTC [1127] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:59.283 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:59.288 UTC [1127] DEBUG:  building index "pg_toast_43631_index" on table "pg_toast_43631" serially
2025-04-19 19:20:59.291 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:59.292 UTC [1127] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:59.292 UTC [1127] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:59.293 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:59.293 UTC [1127] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:59.293 UTC [1127] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:59.294 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:59.295 UTC [1127] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:59.295 UTC [1127] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:59.296 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:59.297 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:59.297 UTC [1127] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:59.297 UTC [1127] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:59.298 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:59.298 UTC [1127] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:59.298 UTC [1127] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:59.299 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:59.300 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:59.300 UTC [1127] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:59.301 UTC [1127] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:59.301 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:59.302 UTC [1127] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:59.302 UTC [1127] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:59.303 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:59.306 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:59.307 UTC [1127] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:59.307 UTC [1127] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:59.310 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:59.313 UTC [1127] DEBUG:  building index "pg_toast_43692_index" on table "pg_toast_43692" serially
2025-04-19 19:20:59.314 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:59.314 UTC [1127] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:59.314 UTC [1127] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:59.315 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:59.317 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:59.317 UTC [1127] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:59.317 UTC [1127] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:59.319 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:59.319 UTC [1127] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:59.319 UTC [1127] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:59.320 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:59.321 UTC [1127] DEBUG:  building index "pg_toast_43725_index" on table "pg_toast_43725" serially
2025-04-19 19:20:59.322 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:59.323 UTC [1127] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:59.323 UTC [1127] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:59.323 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:59.324 UTC [1127] DEBUG:  building index "pg_toast_43736_index" on table "pg_toast_43736" serially
2025-04-19 19:20:59.325 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:59.326 UTC [1127] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:59.326 UTC [1127] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:59.327 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:59.329 UTC [1127] DEBUG:  building index "pg_toast_43759_index" on table "pg_toast_43759" serially
2025-04-19 19:20:59.330 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:59.330 UTC [1127] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:59.330 UTC [1127] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:59.331 UTC [1127] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:59.331 UTC [1127] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:59.332 UTC [1127] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:59.332 UTC [1127] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:59.333 UTC [1127] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:59.333 UTC [1127] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:59.334 UTC [1127] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:59.334 UTC [1127] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:59.335 UTC [1127] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:59.335 UTC [1127] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:59.336 UTC [1127] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:59.336 UTC [1127] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:59.337 UTC [1127] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:59.337 UTC [1127] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:59.338 UTC [1127] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:59.338 UTC [1127] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:59.338 UTC [1127] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:59.339 UTC [1127] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:59.340 UTC [1127] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:59.340 UTC [1127] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:59.341 UTC [1127] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:59.341 UTC [1127] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:59.359 UTC [1127] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:59.748 UTC [1127] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$z.dDraJc4ixqVk6IgWS5j.iVIkAmy2y6wm6grmnvVJFayAr7D2VBi')
	                RETURNING id, username, email
	                
2025-04-19 19:20:59.750 UTC [1127] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:20:59.751 UTC [1127] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:20:59.756 UTC [1127] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:20:59.783 UTC [1127] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:20:59.785 UTC [1127] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:20:59.788 UTC [1127] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:20:59.794 UTC [1127] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:20:59.794 UTC [1127] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:20:59.797 UTC [1127] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:20:59.800 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:20:59.802 UTC [1127] DEBUG:  building index "pg_toast_43795_index" on table "pg_toast_43795" serially
2025-04-19 19:20:59.803 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:20:59.803 UTC [1127] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:20:59.803 UTC [1127] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:20:59.804 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:20:59.804 UTC [1127] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:20:59.804 UTC [1127] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:20:59.805 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:20:59.805 UTC [1127] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:20:59.805 UTC [1127] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:20:59.806 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:20:59.807 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:20:59.807 UTC [1127] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:20:59.807 UTC [1127] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:20:59.808 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:20:59.808 UTC [1127] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:20:59.808 UTC [1127] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:20:59.809 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:20:59.810 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:20:59.810 UTC [1127] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:20:59.810 UTC [1127] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:20:59.811 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:20:59.811 UTC [1127] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:20:59.811 UTC [1127] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:20:59.812 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:20:59.813 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:20:59.813 UTC [1127] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:20:59.813 UTC [1127] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:20:59.815 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:20:59.816 UTC [1127] DEBUG:  building index "pg_toast_43856_index" on table "pg_toast_43856" serially
2025-04-19 19:20:59.817 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:20:59.818 UTC [1127] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:20:59.818 UTC [1127] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:20:59.820 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:20:59.822 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:20:59.822 UTC [1127] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:20:59.823 UTC [1127] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:20:59.824 UTC [1127] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:20:59.824 UTC [1127] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:20:59.824 UTC [1127] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:20:59.825 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:20:59.826 UTC [1127] DEBUG:  building index "pg_toast_43889_index" on table "pg_toast_43889" serially
2025-04-19 19:20:59.827 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:20:59.827 UTC [1127] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:20:59.827 UTC [1127] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:20:59.828 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:20:59.829 UTC [1127] DEBUG:  building index "pg_toast_43900_index" on table "pg_toast_43900" serially
2025-04-19 19:20:59.830 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:20:59.830 UTC [1127] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:20:59.830 UTC [1127] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:20:59.832 UTC [1127] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:20:59.833 UTC [1127] DEBUG:  building index "pg_toast_43923_index" on table "pg_toast_43923" serially
2025-04-19 19:20:59.833 UTC [1127] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:20:59.834 UTC [1127] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:20:59.834 UTC [1127] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:20:59.835 UTC [1127] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:20:59.835 UTC [1127] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:20:59.835 UTC [1127] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:20:59.835 UTC [1127] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:20:59.836 UTC [1127] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:20:59.837 UTC [1127] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:20:59.837 UTC [1127] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:20:59.837 UTC [1127] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:20:59.838 UTC [1127] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:20:59.838 UTC [1127] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:20:59.839 UTC [1127] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:20:59.839 UTC [1127] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:20:59.840 UTC [1127] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:20:59.840 UTC [1127] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:20:59.841 UTC [1127] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:20:59.841 UTC [1127] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:20:59.842 UTC [1127] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:20:59.842 UTC [1127] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:20:59.842 UTC [1127] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:20:59.842 UTC [1127] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:20:59.843 UTC [1127] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:20:59.843 UTC [1127] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:20:59.852 UTC [1127] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:21:00.102 UTC [1127] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cl/8VwAVsr2IEyZdDs8IoegA1UWU94RL88iki0bd4xFIJSR33a9ta')
	                RETURNING id, username, email
	                
2025-04-19 19:21:00.103 UTC [1127] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:21:00.103 UTC [1127] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:21:06.384 UTC [1135] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 19:21:11.896 UTC [1127] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 19:21:12.192 UTC [1127] DEBUG:  unexpected EOF on client connection
2025-04-19 19:21:15.095 UTC [1143] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:21:15.112 UTC [1143] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:21:15.121 UTC [1143] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:21:15.121 UTC [1143] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:21:15.131 UTC [1143] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:21:15.137 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:21:15.141 UTC [1143] DEBUG:  building index "pg_toast_43959_index" on table "pg_toast_43959" serially
2025-04-19 19:21:15.144 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:21:15.144 UTC [1143] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:21:15.144 UTC [1143] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:21:15.146 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:21:15.146 UTC [1143] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:21:15.146 UTC [1143] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:21:15.148 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:21:15.149 UTC [1143] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:21:15.149 UTC [1143] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:21:15.152 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:21:15.155 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:21:15.156 UTC [1143] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:21:15.156 UTC [1143] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:21:15.157 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:21:15.157 UTC [1143] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:21:15.157 UTC [1143] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:21:15.158 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:21:15.160 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:21:15.160 UTC [1143] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:21:15.160 UTC [1143] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:21:15.161 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:21:15.162 UTC [1143] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:21:15.162 UTC [1143] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:21:15.164 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:21:15.165 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:21:15.165 UTC [1143] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:21:15.165 UTC [1143] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:21:15.167 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:21:15.169 UTC [1143] DEBUG:  building index "pg_toast_44020_index" on table "pg_toast_44020" serially
2025-04-19 19:21:15.170 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:21:15.170 UTC [1143] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:21:15.170 UTC [1143] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:21:15.172 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:21:15.173 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:21:15.173 UTC [1143] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:21:15.173 UTC [1143] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:21:15.175 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:21:15.175 UTC [1143] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:21:15.175 UTC [1143] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:21:15.176 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:21:15.178 UTC [1143] DEBUG:  building index "pg_toast_44053_index" on table "pg_toast_44053" serially
2025-04-19 19:21:15.179 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:21:15.180 UTC [1143] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:21:15.180 UTC [1143] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:21:15.180 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:21:15.182 UTC [1143] DEBUG:  building index "pg_toast_44064_index" on table "pg_toast_44064" serially
2025-04-19 19:21:15.183 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:21:15.183 UTC [1143] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:21:15.183 UTC [1143] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:21:15.185 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:21:15.186 UTC [1143] DEBUG:  building index "pg_toast_44087_index" on table "pg_toast_44087" serially
2025-04-19 19:21:15.187 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:21:15.187 UTC [1143] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:21:15.187 UTC [1143] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:21:15.188 UTC [1143] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:21:15.188 UTC [1143] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:21:15.189 UTC [1143] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:21:15.189 UTC [1143] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:21:15.190 UTC [1143] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:21:15.190 UTC [1143] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:21:15.191 UTC [1143] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:21:15.191 UTC [1143] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:21:15.192 UTC [1143] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:21:15.192 UTC [1143] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:21:15.193 UTC [1143] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:21:15.193 UTC [1143] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:21:15.194 UTC [1143] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:21:15.194 UTC [1143] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:21:15.196 UTC [1143] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:21:15.196 UTC [1143] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:21:15.196 UTC [1143] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:21:15.196 UTC [1143] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:21:15.198 UTC [1143] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:21:15.198 UTC [1143] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:21:15.199 UTC [1143] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:21:15.199 UTC [1143] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:21:15.226 UTC [1143] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:21:15.547 UTC [1143] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$LzCIxsmaOPfdz0CrROg6YuD49qdJdlw/mEZuwgUlbluXlb1TzneO6')
	                RETURNING id, username, email
	                
2025-04-19 19:21:15.550 UTC [1143] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:21:15.551 UTC [1143] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:21:15.553 UTC [1143] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 19:21:15.584 UTC [1143] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:21:15.592 UTC [1143] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 19:21:15.604 UTC [1143] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 19:21:15.621 UTC [1143] NOTICE:  drop cascades to 2 other objects
2025-04-19 19:21:15.621 UTC [1143] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 19:21:15.630 UTC [1143] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 19:21:15.634 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 19:21:15.647 UTC [1143] DEBUG:  building index "pg_toast_44123_index" on table "pg_toast_44123" serially
2025-04-19 19:21:15.650 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 19:21:15.651 UTC [1143] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 19:21:15.651 UTC [1143] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 19:21:15.653 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 19:21:15.653 UTC [1143] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 19:21:15.653 UTC [1143] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 19:21:15.655 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 19:21:15.655 UTC [1143] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 19:21:15.655 UTC [1143] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 19:21:15.657 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 19:21:15.658 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 19:21:15.659 UTC [1143] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 19:21:15.659 UTC [1143] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 19:21:15.660 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 19:21:15.660 UTC [1143] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 19:21:15.660 UTC [1143] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 19:21:15.661 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 19:21:15.662 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 19:21:15.662 UTC [1143] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 19:21:15.662 UTC [1143] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 19:21:15.663 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 19:21:15.664 UTC [1143] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 19:21:15.664 UTC [1143] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 19:21:15.666 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 19:21:15.668 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 19:21:15.668 UTC [1143] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 19:21:15.668 UTC [1143] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 19:21:15.671 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 19:21:15.673 UTC [1143] DEBUG:  building index "pg_toast_44184_index" on table "pg_toast_44184" serially
2025-04-19 19:21:15.673 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 19:21:15.674 UTC [1143] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 19:21:15.674 UTC [1143] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 19:21:15.675 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 19:21:15.676 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 19:21:15.676 UTC [1143] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 19:21:15.676 UTC [1143] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 19:21:15.677 UTC [1143] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 19:21:15.677 UTC [1143] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 19:21:15.677 UTC [1143] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 19:21:15.678 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 19:21:15.679 UTC [1143] DEBUG:  building index "pg_toast_44217_index" on table "pg_toast_44217" serially
2025-04-19 19:21:15.680 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 19:21:15.681 UTC [1143] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 19:21:15.681 UTC [1143] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 19:21:15.682 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 19:21:15.686 UTC [1143] DEBUG:  building index "pg_toast_44228_index" on table "pg_toast_44228" serially
2025-04-19 19:21:15.688 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 19:21:15.689 UTC [1143] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 19:21:15.689 UTC [1143] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 19:21:15.717 UTC [1143] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 19:21:15.724 UTC [1143] DEBUG:  building index "pg_toast_44251_index" on table "pg_toast_44251" serially
2025-04-19 19:21:15.729 UTC [1143] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 19:21:15.737 UTC [1143] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 19:21:15.737 UTC [1143] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 19:21:15.739 UTC [1143] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 19:21:15.739 UTC [1143] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 19:21:15.740 UTC [1143] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 19:21:15.740 UTC [1143] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 19:21:15.742 UTC [1143] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 19:21:15.742 UTC [1143] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 19:21:15.744 UTC [1143] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 19:21:15.744 UTC [1143] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 19:21:15.745 UTC [1143] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 19:21:15.745 UTC [1143] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 19:21:15.750 UTC [1143] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 19:21:15.750 UTC [1143] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 19:21:15.752 UTC [1143] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 19:21:15.752 UTC [1143] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 19:21:15.754 UTC [1143] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 19:21:15.755 UTC [1143] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 19:21:15.757 UTC [1143] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 19:21:15.758 UTC [1143] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 19:21:15.765 UTC [1143] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 19:21:15.765 UTC [1143] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 19:21:15.771 UTC [1143] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 19:21:15.771 UTC [1143] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 19:21:15.789 UTC [1143] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 19:21:16.046 UTC [1143] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$sa6XCWhpYcVZH.LL6/wxCeRIZtwZvE8IGB5S/Ls5c6BBI/aOM2f6O')
	                RETURNING id, username, email
	                
2025-04-19 19:21:16.047 UTC [1143] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 19:21:16.047 UTC [1143] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 19:21:23.552 UTC [1143] DEBUG:  unexpected EOF on client connection
2025-04-19 19:21:23.841 UTC [1] LOG:  received fast shutdown request
2025-04-19 19:21:23.844 UTC [1] LOG:  aborting any active transactions
2025-04-19 19:21:23.844 UTC [149] FATAL:  terminating connection due to administrator command
2025-04-19 19:21:23.844 UTC [64] DEBUG:  logical replication launcher shutting down
2025-04-19 19:21:23.844 UTC [62] DEBUG:  autovacuum launcher shutting down
2025-04-19 19:21:23.846 UTC [158] FATAL:  terminating connection due to administrator command
2025-04-19 19:21:23.853 UTC [1] LOG:  background worker "logical replication launcher" (PID 64) exited with exit code 1
2025-04-19 19:21:23.858 UTC [59] LOG:  shutting down
2025-04-19 19:21:23.860 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 19:21:23.976 UTC [1] LOG:  database system is shut down

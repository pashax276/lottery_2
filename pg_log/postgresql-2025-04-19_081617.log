2025-04-19 08:16:17.231 UTC [41] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 08:16:17.233 UTC [41] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 08:16:17.235 UTC [43] LOG:  database system was shut down at 2025-04-19 08:16:17 UTC
2025-04-19 08:16:17.235 UTC [43] DEBUG:  checkpoint record is at 0/17055D8
2025-04-19 08:16:17.235 UTC [43] DEBUG:  redo record is at 0/17055D8; shutdown true
2025-04-19 08:16:17.235 UTC [43] DEBUG:  next transaction ID: 734; next OID: 13824
2025-04-19 08:16:17.235 UTC [43] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 08:16:17.235 UTC [43] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 08:16:17.235 UTC [43] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 08:16:17.235 UTC [43] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 08:16:17.235 UTC [43] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 08:16:17.235 UTC [43] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 08:16:17.235 UTC [43] DEBUG:  starting up replication slots
2025-04-19 08:16:17.235 UTC [43] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 08:16:17.236 UTC [43] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 08:16:17.236 UTC [43] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 08:16:17.238 UTC [41] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 08:16:17.238 UTC [41] LOG:  database system is ready to accept connections
2025-04-19 08:16:17.238 UTC [47] DEBUG:  autovacuum launcher started
2025-04-19 08:16:17.238 UTC [49] DEBUG:  logical replication launcher started
2025-04-19 08:16:17.329 UTC [52] LOG:  statement: SELECT 1 FROM pg_database WHERE datname = 'powerball' ;
2025-04-19 08:16:17.334 UTC [54] LOG:  statement: CREATE DATABASE "powerball" ;
2025-04-19 08:16:17.334 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 08:16:17.379 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 08:16:17.383 UTC [41] LOG:  received fast shutdown request
2025-04-19 08:16:17.384 UTC [41] LOG:  aborting any active transactions
2025-04-19 08:16:17.385 UTC [49] DEBUG:  logical replication launcher shutting down
2025-04-19 08:16:17.385 UTC [47] DEBUG:  autovacuum launcher shutting down
2025-04-19 08:16:17.386 UTC [41] LOG:  background worker "logical replication launcher" (PID 49) exited with exit code 1
2025-04-19 08:16:17.386 UTC [44] LOG:  shutting down
2025-04-19 08:16:17.387 UTC [44] DEBUG:  performing replication slot checkpoint
2025-04-19 08:16:17.391 UTC [41] LOG:  database system is shut down
2025-04-19 08:16:17.392 UTC [42] DEBUG:  logger shutting down
2025-04-19 08:16:17.496 UTC [1] LOG:  starting PostgreSQL 14.17 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
2025-04-19 08:16:17.496 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2025-04-19 08:16:17.496 UTC [1] LOG:  listening on IPv6 address "::", port 5432
2025-04-19 08:16:17.499 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2025-04-19 08:16:17.501 UTC [58] LOG:  database system was shut down at 2025-04-19 08:16:17 UTC
2025-04-19 08:16:17.501 UTC [58] DEBUG:  checkpoint record is at 0/1705EA0
2025-04-19 08:16:17.502 UTC [58] DEBUG:  redo record is at 0/1705EA0; shutdown true
2025-04-19 08:16:17.502 UTC [58] DEBUG:  next transaction ID: 735; next OID: 16385
2025-04-19 08:16:17.502 UTC [58] DEBUG:  next MultiXactId: 1; next MultiXactOffset: 0
2025-04-19 08:16:17.502 UTC [58] DEBUG:  oldest unfrozen transaction ID: 727, in database 1
2025-04-19 08:16:17.502 UTC [58] DEBUG:  oldest MultiXactId: 1, in database 1
2025-04-19 08:16:17.502 UTC [58] DEBUG:  commit timestamp Xid oldest/newest: 0/0
2025-04-19 08:16:17.502 UTC [58] DEBUG:  transaction ID wrap limit is 2147484374, limited by database with OID 1
2025-04-19 08:16:17.502 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 08:16:17.502 UTC [58] DEBUG:  starting up replication slots
2025-04-19 08:16:17.502 UTC [58] DEBUG:  xmin required by slots: data 0, catalog 0
2025-04-19 08:16:17.502 UTC [58] DEBUG:  MultiXactId wrap limit is 2147483648, limited by database with OID 1
2025-04-19 08:16:17.502 UTC [58] DEBUG:  MultiXact member stop limit is now 4294914944 based on MultiXact 1
2025-04-19 08:16:17.504 UTC [1] DEBUG:  starting background worker process "logical replication launcher"
2025-04-19 08:16:17.504 UTC [62] DEBUG:  autovacuum launcher started
2025-04-19 08:16:17.504 UTC [1] LOG:  database system is ready to accept connections
2025-04-19 08:16:17.504 UTC [64] DEBUG:  logical replication launcher started
2025-04-19 08:16:29.474 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "user_checks" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "user_checks" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "prediction_numbers" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "prediction_numbers" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "predictions" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "predictions" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "expected_combinations" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "expected_combinations" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "numbers" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "numbers" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "draws" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "draws" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "users" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "users" does not exist, skipping
2025-04-19 08:16:29.475 UTC [72] DEBUG:  relation "user_stats" does not exist
2025-04-19 08:16:29.475 UTC [72] NOTICE:  table "user_stats" does not exist, skipping
2025-04-19 08:16:29.476 UTC [72] DEBUG:  relation "analysis_results" does not exist
2025-04-19 08:16:29.476 UTC [72] NOTICE:  table "analysis_results" does not exist, skipping
2025-04-19 08:16:29.476 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:16:29.482 UTC [72] DEBUG:  building index "pg_toast_16386_index" on table "pg_toast_16386" serially
2025-04-19 08:16:29.485 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:16:29.485 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:16:29.485 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:16:29.487 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:16:29.487 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:16:29.487 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:16:29.488 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:16:29.489 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:16:29.489 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:16:29.490 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:16:29.491 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:16:29.492 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:16:29.492 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:16:29.493 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:16:29.493 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:16:29.494 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:16:29.496 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:16:29.501 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:16:29.501 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:16:29.501 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:16:29.502 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:16:29.503 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:16:29.503 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:16:29.506 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:16:29.507 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:16:29.507 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:16:29.507 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:16:29.509 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:16:29.514 UTC [72] DEBUG:  building index "pg_toast_16447_index" on table "pg_toast_16447" serially
2025-04-19 08:16:29.515 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:16:29.515 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:16:29.515 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:16:29.516 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:16:29.518 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:16:29.518 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:16:29.518 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:16:29.519 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:16:29.519 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:16:29.519 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:16:29.521 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:16:29.522 UTC [72] DEBUG:  building index "pg_toast_16480_index" on table "pg_toast_16480" serially
2025-04-19 08:16:29.523 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:16:29.523 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:16:29.523 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:16:29.524 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:16:29.525 UTC [72] DEBUG:  building index "pg_toast_16491_index" on table "pg_toast_16491" serially
2025-04-19 08:16:29.526 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:16:29.526 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:16:29.526 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:16:29.528 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:16:29.530 UTC [72] DEBUG:  building index "pg_toast_16514_index" on table "pg_toast_16514" serially
2025-04-19 08:16:29.531 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:16:29.531 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:16:29.531 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:16:29.532 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:16:29.532 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:16:29.533 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:16:29.534 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:16:29.535 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:16:29.535 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:16:29.536 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:16:29.536 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:16:29.537 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:16:29.537 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:16:29.538 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:16:29.538 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:16:29.539 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:16:29.539 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:16:29.540 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:16:29.540 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:16:29.541 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:16:29.541 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:16:29.542 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:16:29.542 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:16:29.543 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:16:29.543 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:16:29.556 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:16:29.835 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$2elD66UnzqNJ6r5bm2E61uiVb4BNplBmv8OVV/zylg3fD46jzHi0y')
	                RETURNING id, username, email
	                
2025-04-19 08:16:29.836 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:16:29.837 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:16:29.838 UTC [72] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:16:29.847 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:16:29.850 UTC [72] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:16:29.855 UTC [72] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:16:29.860 UTC [72] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:16:29.860 UTC [72] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:16:29.865 UTC [72] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:16:29.869 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:16:29.870 UTC [72] DEBUG:  building index "pg_toast_16550_index" on table "pg_toast_16550" serially
2025-04-19 08:16:29.871 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:16:29.871 UTC [72] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:16:29.871 UTC [72] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:16:29.872 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:16:29.872 UTC [72] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:16:29.872 UTC [72] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:16:29.873 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:16:29.873 UTC [72] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:16:29.873 UTC [72] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:16:29.874 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:16:29.875 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:16:29.875 UTC [72] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:16:29.875 UTC [72] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:16:29.876 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:16:29.876 UTC [72] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:16:29.876 UTC [72] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:16:29.877 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:16:29.877 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:16:29.878 UTC [72] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:16:29.878 UTC [72] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:16:29.878 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:16:29.879 UTC [72] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:16:29.879 UTC [72] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:16:29.880 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:16:29.881 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:16:29.881 UTC [72] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:16:29.881 UTC [72] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:16:29.882 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:16:29.883 UTC [72] DEBUG:  building index "pg_toast_16611_index" on table "pg_toast_16611" serially
2025-04-19 08:16:29.883 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:16:29.884 UTC [72] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:16:29.884 UTC [72] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:16:29.885 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:16:29.886 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:16:29.886 UTC [72] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:16:29.886 UTC [72] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:16:29.886 UTC [72] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:16:29.887 UTC [72] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:16:29.887 UTC [72] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:16:29.888 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:16:29.889 UTC [72] DEBUG:  building index "pg_toast_16644_index" on table "pg_toast_16644" serially
2025-04-19 08:16:29.889 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:16:29.890 UTC [72] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:16:29.890 UTC [72] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:16:29.890 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:16:29.891 UTC [72] DEBUG:  building index "pg_toast_16655_index" on table "pg_toast_16655" serially
2025-04-19 08:16:29.892 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:16:29.892 UTC [72] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:16:29.892 UTC [72] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:16:29.894 UTC [72] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:16:29.894 UTC [72] DEBUG:  building index "pg_toast_16678_index" on table "pg_toast_16678" serially
2025-04-19 08:16:29.895 UTC [72] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:16:29.895 UTC [72] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:16:29.895 UTC [72] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:16:29.896 UTC [72] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:16:29.896 UTC [72] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:16:29.897 UTC [72] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:16:29.897 UTC [72] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:16:29.898 UTC [72] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:16:29.898 UTC [72] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:16:29.898 UTC [72] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:16:29.898 UTC [72] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:16:29.899 UTC [72] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:16:29.899 UTC [72] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:16:29.900 UTC [72] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:16:29.900 UTC [72] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:16:29.901 UTC [72] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:16:29.901 UTC [72] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:16:29.902 UTC [72] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:16:29.902 UTC [72] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:16:29.903 UTC [72] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:16:29.903 UTC [72] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:16:29.904 UTC [72] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:16:29.904 UTC [72] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:16:29.905 UTC [72] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:16:29.905 UTC [72] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:16:29.912 UTC [72] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:16:30.194 UTC [72] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$9GyuotvJR1lfR2qYOVCtqenR5uJupfqJgNiBB0l55I6J1W9UE6Z..')
	                RETURNING id, username, email
	                
2025-04-19 08:16:30.195 UTC [72] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:16:30.196 UTC [72] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:16:42.269 UTC [72] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:16:42.704 UTC [72] DEBUG:  unexpected EOF on client connection
2025-04-19 08:16:45.260 UTC [80] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:16:45.277 UTC [80] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:16:45.287 UTC [80] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:16:45.287 UTC [80] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:16:45.293 UTC [80] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:16:45.303 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:16:45.306 UTC [80] DEBUG:  building index "pg_toast_16714_index" on table "pg_toast_16714" serially
2025-04-19 08:16:45.309 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:16:45.309 UTC [80] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:16:45.309 UTC [80] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:16:45.310 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:16:45.311 UTC [80] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:16:45.311 UTC [80] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:16:45.312 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:16:45.312 UTC [80] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:16:45.312 UTC [80] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:16:45.313 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:16:45.314 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:16:45.315 UTC [80] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:16:45.315 UTC [80] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:16:45.316 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:16:45.316 UTC [80] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:16:45.316 UTC [80] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:16:45.317 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:16:45.318 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:16:45.319 UTC [80] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:16:45.319 UTC [80] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:16:45.320 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:16:45.320 UTC [80] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:16:45.320 UTC [80] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:16:45.322 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:16:45.323 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:16:45.323 UTC [80] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:16:45.323 UTC [80] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:16:45.324 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:16:45.326 UTC [80] DEBUG:  building index "pg_toast_16775_index" on table "pg_toast_16775" serially
2025-04-19 08:16:45.328 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:16:45.328 UTC [80] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:16:45.328 UTC [80] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:16:45.329 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:16:45.331 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:16:45.331 UTC [80] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:16:45.331 UTC [80] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:16:45.332 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:16:45.333 UTC [80] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:16:45.333 UTC [80] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:16:45.336 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:16:45.338 UTC [80] DEBUG:  building index "pg_toast_16808_index" on table "pg_toast_16808" serially
2025-04-19 08:16:45.339 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:16:45.339 UTC [80] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:16:45.339 UTC [80] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:16:45.340 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:16:45.342 UTC [80] DEBUG:  building index "pg_toast_16819_index" on table "pg_toast_16819" serially
2025-04-19 08:16:45.343 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:16:45.343 UTC [80] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:16:45.343 UTC [80] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:16:45.345 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:16:45.346 UTC [80] DEBUG:  building index "pg_toast_16842_index" on table "pg_toast_16842" serially
2025-04-19 08:16:45.348 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:16:45.348 UTC [80] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:16:45.348 UTC [80] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:16:45.349 UTC [80] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:16:45.349 UTC [80] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:16:45.351 UTC [80] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:16:45.351 UTC [80] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:16:45.352 UTC [80] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:16:45.352 UTC [80] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:16:45.353 UTC [80] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:16:45.353 UTC [80] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:16:45.354 UTC [80] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:16:45.354 UTC [80] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:16:45.355 UTC [80] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:16:45.355 UTC [80] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:16:45.356 UTC [80] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:16:45.356 UTC [80] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:16:45.357 UTC [80] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:16:45.357 UTC [80] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:16:45.358 UTC [80] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:16:45.358 UTC [80] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:16:45.359 UTC [80] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:16:45.359 UTC [80] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:16:45.360 UTC [80] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:16:45.360 UTC [80] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:16:45.372 UTC [80] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:16:45.673 UTC [80] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$nRJMcXszMBZ19Z5yq.gYxO7Xazbpcy2xWEIINGpDHZX4XKgKYrJ6S')
	                RETURNING id, username, email
	                
2025-04-19 08:16:45.674 UTC [80] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:16:45.674 UTC [80] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:16:45.675 UTC [80] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:16:45.685 UTC [80] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:16:45.686 UTC [80] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:16:45.690 UTC [80] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:16:45.696 UTC [80] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:16:45.696 UTC [80] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:16:45.701 UTC [80] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:16:45.710 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:16:45.712 UTC [80] DEBUG:  building index "pg_toast_16878_index" on table "pg_toast_16878" serially
2025-04-19 08:16:45.714 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:16:45.714 UTC [80] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:16:45.714 UTC [80] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:16:45.715 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:16:45.715 UTC [80] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:16:45.715 UTC [80] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:16:45.716 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:16:45.716 UTC [80] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:16:45.716 UTC [80] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:16:45.717 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:16:45.718 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:16:45.719 UTC [80] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:16:45.719 UTC [80] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:16:45.720 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:16:45.720 UTC [80] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:16:45.720 UTC [80] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:16:45.721 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:16:45.723 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:16:45.723 UTC [80] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:16:45.723 UTC [80] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:16:45.727 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:16:45.728 UTC [80] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:16:45.728 UTC [80] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:16:45.731 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:16:45.733 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:16:45.733 UTC [80] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:16:45.733 UTC [80] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:16:45.739 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:16:45.743 UTC [80] DEBUG:  building index "pg_toast_16939_index" on table "pg_toast_16939" serially
2025-04-19 08:16:45.745 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:16:45.746 UTC [80] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:16:45.746 UTC [80] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:16:45.749 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:16:45.751 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:16:45.751 UTC [80] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:16:45.751 UTC [80] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:16:45.752 UTC [80] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:16:45.752 UTC [80] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:16:45.752 UTC [80] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:16:45.753 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:16:45.755 UTC [80] DEBUG:  building index "pg_toast_16972_index" on table "pg_toast_16972" serially
2025-04-19 08:16:45.756 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:16:45.756 UTC [80] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:16:45.756 UTC [80] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:16:45.757 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:16:45.758 UTC [80] DEBUG:  building index "pg_toast_16983_index" on table "pg_toast_16983" serially
2025-04-19 08:16:45.759 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:16:45.760 UTC [80] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:16:45.760 UTC [80] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:16:45.761 UTC [80] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:16:45.763 UTC [80] DEBUG:  building index "pg_toast_17006_index" on table "pg_toast_17006" serially
2025-04-19 08:16:45.763 UTC [80] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:16:45.763 UTC [80] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:16:45.763 UTC [80] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:16:45.765 UTC [80] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:16:45.765 UTC [80] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:16:45.766 UTC [80] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:16:45.766 UTC [80] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:16:45.767 UTC [80] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:16:45.767 UTC [80] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:16:45.768 UTC [80] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:16:45.768 UTC [80] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:16:45.769 UTC [80] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:16:45.769 UTC [80] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:16:45.770 UTC [80] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:16:45.770 UTC [80] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:16:45.771 UTC [80] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:16:45.771 UTC [80] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:16:45.772 UTC [80] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:16:45.772 UTC [80] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:16:45.773 UTC [80] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:16:45.773 UTC [80] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:16:45.774 UTC [80] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:16:45.774 UTC [80] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:16:45.775 UTC [80] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:16:45.775 UTC [80] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:16:45.783 UTC [80] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:16:46.046 UTC [80] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ZZnUpzcxf69WfxhHHOOUqercuN.e6.1SeiR/kFdPzvJC4Vo.sa/12')
	                RETURNING id, username, email
	                
2025-04-19 08:16:46.047 UTC [80] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:16:46.047 UTC [80] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:16:52.172 UTC [88] LOG:  statement: set search_path to 'public';
2025-04-19 08:16:52.175 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:16:52.192 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:16:52.193 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:16:58.398 UTC [80] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:16:58.725 UTC [80] DEBUG:  unexpected EOF on client connection
2025-04-19 08:17:00.708 UTC [96] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:00.714 UTC [96] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:00.722 UTC [96] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:00.722 UTC [96] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:00.732 UTC [96] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:00.738 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:00.741 UTC [96] DEBUG:  building index "pg_toast_17042_index" on table "pg_toast_17042" serially
2025-04-19 08:17:00.745 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:00.746 UTC [96] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:00.746 UTC [96] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:00.748 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:00.748 UTC [96] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:00.748 UTC [96] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:00.750 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:00.750 UTC [96] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:00.750 UTC [96] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:00.752 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:00.753 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:00.754 UTC [96] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:00.754 UTC [96] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:00.754 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:00.755 UTC [96] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:00.755 UTC [96] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:00.755 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:00.756 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:00.756 UTC [96] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:00.756 UTC [96] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:00.757 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:00.757 UTC [96] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:00.757 UTC [96] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:00.758 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:00.759 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:00.760 UTC [96] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:00.760 UTC [96] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:00.761 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:00.762 UTC [96] DEBUG:  building index "pg_toast_17103_index" on table "pg_toast_17103" serially
2025-04-19 08:17:00.763 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:00.763 UTC [96] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:00.763 UTC [96] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:00.764 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:00.765 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:00.766 UTC [96] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:00.766 UTC [96] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:00.766 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:00.767 UTC [96] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:00.767 UTC [96] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:00.768 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:00.769 UTC [96] DEBUG:  building index "pg_toast_17136_index" on table "pg_toast_17136" serially
2025-04-19 08:17:00.770 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:00.770 UTC [96] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:00.770 UTC [96] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:00.771 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:00.772 UTC [96] DEBUG:  building index "pg_toast_17147_index" on table "pg_toast_17147" serially
2025-04-19 08:17:00.773 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:00.773 UTC [96] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:00.773 UTC [96] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:00.774 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:00.776 UTC [96] DEBUG:  building index "pg_toast_17170_index" on table "pg_toast_17170" serially
2025-04-19 08:17:00.777 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:00.778 UTC [96] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:00.778 UTC [96] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:00.778 UTC [96] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:00.779 UTC [96] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:00.779 UTC [96] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:00.779 UTC [96] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:00.780 UTC [96] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:00.780 UTC [96] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:00.781 UTC [96] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:00.781 UTC [96] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:00.782 UTC [96] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:00.782 UTC [96] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:00.783 UTC [96] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:00.783 UTC [96] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:00.784 UTC [96] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:00.784 UTC [96] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:00.785 UTC [96] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:00.785 UTC [96] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:00.785 UTC [96] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:00.785 UTC [96] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:00.786 UTC [96] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:00.786 UTC [96] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:00.787 UTC [96] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:00.787 UTC [96] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:00.806 UTC [96] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:00.901 UTC [97] LOG:  statement: set search_path to 'public';
2025-04-19 08:17:00.902 UTC [97] LOG:  statement: SELECT * FROM user_stats LIMIT 100
2025-04-19 08:17:00.924 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:17:00.935 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:17:00.939 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:17:01.146 UTC [96] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kSJHRJhezaIkwLe/chrhs.mpuIlfPQi27z7jl8Ghb9pE7Hpoeuyze')
	                RETURNING id, username, email
	                
2025-04-19 08:17:01.147 UTC [96] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:01.148 UTC [96] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:01.155 UTC [96] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:17:01.168 UTC [96] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:01.171 UTC [96] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:01.176 UTC [96] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:01.181 UTC [96] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:01.181 UTC [96] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:01.185 UTC [96] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:01.194 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:01.205 UTC [96] DEBUG:  building index "pg_toast_17206_index" on table "pg_toast_17206" serially
2025-04-19 08:17:01.207 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:01.208 UTC [96] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:01.208 UTC [96] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:01.209 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:01.210 UTC [96] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:01.210 UTC [96] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:01.211 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:01.211 UTC [96] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:01.211 UTC [96] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:01.212 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:01.213 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:01.213 UTC [96] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:01.213 UTC [96] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:01.214 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:01.214 UTC [96] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:01.214 UTC [96] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:01.215 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:01.216 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:01.216 UTC [96] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:01.216 UTC [96] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:01.217 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:01.217 UTC [96] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:01.217 UTC [96] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:01.219 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:01.220 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:01.220 UTC [96] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:01.220 UTC [96] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:01.222 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:01.223 UTC [96] DEBUG:  building index "pg_toast_17267_index" on table "pg_toast_17267" serially
2025-04-19 08:17:01.223 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:01.223 UTC [96] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:01.224 UTC [96] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:01.224 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:01.226 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:01.227 UTC [96] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:01.227 UTC [96] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:01.228 UTC [96] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:01.228 UTC [96] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:01.228 UTC [96] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:01.229 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:01.231 UTC [96] DEBUG:  building index "pg_toast_17300_index" on table "pg_toast_17300" serially
2025-04-19 08:17:01.232 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:01.232 UTC [96] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:01.232 UTC [96] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:01.233 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:01.234 UTC [96] DEBUG:  building index "pg_toast_17311_index" on table "pg_toast_17311" serially
2025-04-19 08:17:01.235 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:01.235 UTC [96] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:01.235 UTC [96] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:01.237 UTC [96] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:01.238 UTC [96] DEBUG:  building index "pg_toast_17334_index" on table "pg_toast_17334" serially
2025-04-19 08:17:01.239 UTC [96] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:01.239 UTC [96] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:01.239 UTC [96] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:01.240 UTC [96] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:01.240 UTC [96] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:01.241 UTC [96] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:01.241 UTC [96] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:01.242 UTC [96] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:01.242 UTC [96] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:01.243 UTC [96] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:01.243 UTC [96] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:01.243 UTC [96] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:01.243 UTC [96] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:01.244 UTC [96] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:01.244 UTC [96] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:01.245 UTC [96] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:01.245 UTC [96] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:01.246 UTC [96] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:01.246 UTC [96] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:01.246 UTC [96] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:01.246 UTC [96] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:01.247 UTC [96] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:01.247 UTC [96] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:01.248 UTC [96] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:01.248 UTC [96] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:01.257 UTC [96] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:01.521 UTC [96] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$/gp9edza949kFGntENVHfO3zEQ9UY8AzG5n5.Z9N3jIcKkBLdVYlm')
	                RETURNING id, username, email
	                
2025-04-19 08:17:01.522 UTC [96] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:01.522 UTC [96] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:01.993 UTC [97] LOG:  statement: SELECT * FROM users LIMIT 100
2025-04-19 08:17:02.052 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:17:02.057 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:17:02.069 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:17:14.413 UTC [96] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:17:14.714 UTC [96] DEBUG:  unexpected EOF on client connection
2025-04-19 08:17:16.558 UTC [105] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:16.568 UTC [105] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:16.576 UTC [105] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:16.576 UTC [105] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:16.581 UTC [105] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:16.591 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:16.597 UTC [105] DEBUG:  building index "pg_toast_17370_index" on table "pg_toast_17370" serially
2025-04-19 08:17:16.601 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:16.602 UTC [105] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:16.602 UTC [105] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:16.604 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:16.605 UTC [105] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:16.605 UTC [105] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:16.606 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:16.606 UTC [105] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:16.606 UTC [105] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:16.607 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:16.609 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:16.609 UTC [105] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:16.609 UTC [105] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:16.610 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:16.610 UTC [105] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:16.610 UTC [105] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:16.611 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:16.612 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:16.612 UTC [105] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:16.612 UTC [105] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:16.613 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:16.613 UTC [105] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:16.613 UTC [105] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:16.614 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:16.615 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:16.616 UTC [105] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:16.616 UTC [105] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:16.617 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:16.618 UTC [105] DEBUG:  building index "pg_toast_17431_index" on table "pg_toast_17431" serially
2025-04-19 08:17:16.619 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:16.619 UTC [105] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:16.619 UTC [105] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:16.620 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:16.621 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:16.622 UTC [105] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:16.622 UTC [105] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:16.623 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:16.623 UTC [105] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:16.623 UTC [105] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:16.624 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:16.625 UTC [105] DEBUG:  building index "pg_toast_17464_index" on table "pg_toast_17464" serially
2025-04-19 08:17:16.626 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:16.626 UTC [105] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:16.626 UTC [105] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:16.627 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:16.629 UTC [105] DEBUG:  building index "pg_toast_17475_index" on table "pg_toast_17475" serially
2025-04-19 08:17:16.630 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:16.631 UTC [105] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:16.631 UTC [105] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:16.633 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:16.634 UTC [105] DEBUG:  building index "pg_toast_17498_index" on table "pg_toast_17498" serially
2025-04-19 08:17:16.635 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:16.636 UTC [105] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:16.636 UTC [105] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:16.636 UTC [105] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:16.636 UTC [105] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:16.638 UTC [105] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:16.638 UTC [105] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:16.639 UTC [105] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:16.639 UTC [105] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:16.640 UTC [105] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:16.640 UTC [105] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:16.641 UTC [105] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:16.641 UTC [105] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:16.645 UTC [105] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:16.645 UTC [105] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:16.646 UTC [105] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:16.646 UTC [105] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:16.647 UTC [105] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:16.647 UTC [105] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:16.649 UTC [105] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:16.649 UTC [105] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:16.650 UTC [105] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:16.650 UTC [105] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:16.654 UTC [105] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:16.654 UTC [105] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:16.689 UTC [105] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:16.979 UTC [105] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ogqWqOHy/g3U2R0D4Ne93.CeiQRNp74u0sSvaXqBwgSsFNTFixSDe')
	                RETURNING id, username, email
	                
2025-04-19 08:17:16.980 UTC [105] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:16.980 UTC [105] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:16.981 UTC [105] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:17:16.991 UTC [105] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:16.992 UTC [105] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:16.995 UTC [105] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:16.999 UTC [105] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:16.999 UTC [105] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:17.007 UTC [105] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:17.011 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:17.012 UTC [105] DEBUG:  building index "pg_toast_17534_index" on table "pg_toast_17534" serially
2025-04-19 08:17:17.014 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:17.014 UTC [105] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:17.014 UTC [105] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:17.015 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:17.015 UTC [105] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:17.015 UTC [105] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:17.016 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:17.016 UTC [105] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:17.017 UTC [105] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:17.018 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:17.019 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:17.020 UTC [105] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:17.020 UTC [105] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:17.021 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:17.021 UTC [105] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:17.022 UTC [105] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:17.023 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:17.025 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:17.025 UTC [105] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:17.025 UTC [105] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:17.026 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:17.027 UTC [105] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:17.027 UTC [105] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:17.029 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:17.030 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:17.031 UTC [105] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:17.031 UTC [105] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:17.033 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:17.034 UTC [105] DEBUG:  building index "pg_toast_17595_index" on table "pg_toast_17595" serially
2025-04-19 08:17:17.034 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:17.035 UTC [105] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:17.035 UTC [105] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:17.036 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:17.037 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:17.037 UTC [105] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:17.037 UTC [105] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:17.038 UTC [105] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:17.038 UTC [105] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:17.038 UTC [105] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:17.039 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:17.040 UTC [105] DEBUG:  building index "pg_toast_17628_index" on table "pg_toast_17628" serially
2025-04-19 08:17:17.041 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:17.041 UTC [105] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:17.041 UTC [105] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:17.042 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:17.043 UTC [105] DEBUG:  building index "pg_toast_17639_index" on table "pg_toast_17639" serially
2025-04-19 08:17:17.043 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:17.044 UTC [105] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:17.044 UTC [105] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:17.045 UTC [105] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:17.046 UTC [105] DEBUG:  building index "pg_toast_17662_index" on table "pg_toast_17662" serially
2025-04-19 08:17:17.047 UTC [105] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:17.047 UTC [105] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:17.047 UTC [105] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:17.048 UTC [105] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:17.048 UTC [105] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:17.049 UTC [105] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:17.049 UTC [105] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:17.050 UTC [105] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:17.050 UTC [105] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:17.050 UTC [105] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:17.050 UTC [105] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:17.051 UTC [105] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:17.051 UTC [105] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:17.052 UTC [105] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:17.052 UTC [105] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:17.053 UTC [105] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:17.053 UTC [105] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:17.054 UTC [105] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:17.054 UTC [105] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:17.055 UTC [105] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:17.055 UTC [105] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:17.056 UTC [105] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:17.056 UTC [105] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:17.056 UTC [105] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:17.056 UTC [105] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:17.064 UTC [105] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:17.316 UTC [105] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yxr2e0zDMjvKizixHMo6h.FQ3Nn5QALeWO2TqaK3WtmT9zx6i1bAa')
	                RETURNING id, username, email
	                
2025-04-19 08:17:17.317 UTC [105] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:17.317 UTC [105] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:17.553 UTC [113] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:17:27.629 UTC [105] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:17:27.933 UTC [105] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:17:30.318 UTC [105] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:17:30.627 UTC [105] DEBUG:  unexpected EOF on client connection
2025-04-19 08:17:32.546 UTC [121] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:32.553 UTC [121] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:32.559 UTC [121] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:32.559 UTC [121] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:32.563 UTC [121] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:32.567 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:32.573 UTC [121] DEBUG:  building index "pg_toast_17698_index" on table "pg_toast_17698" serially
2025-04-19 08:17:32.575 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:32.576 UTC [121] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:32.576 UTC [121] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:32.577 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:32.577 UTC [121] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:32.577 UTC [121] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:32.579 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:32.580 UTC [121] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:32.580 UTC [121] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:32.582 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:32.587 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:32.587 UTC [121] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:32.587 UTC [121] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:32.595 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:32.597 UTC [121] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:32.598 UTC [121] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:32.603 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:32.610 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:32.611 UTC [121] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:32.611 UTC [121] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:32.615 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:32.615 UTC [121] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:32.615 UTC [121] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:32.619 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:32.621 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:32.621 UTC [121] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:32.621 UTC [121] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:32.623 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:32.625 UTC [121] DEBUG:  building index "pg_toast_17759_index" on table "pg_toast_17759" serially
2025-04-19 08:17:32.627 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:32.627 UTC [121] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:32.627 UTC [121] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:32.629 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:32.631 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:32.631 UTC [121] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:32.631 UTC [121] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:32.632 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:32.633 UTC [121] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:32.633 UTC [121] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:32.634 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:32.636 UTC [121] DEBUG:  building index "pg_toast_17792_index" on table "pg_toast_17792" serially
2025-04-19 08:17:32.637 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:32.637 UTC [121] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:32.637 UTC [121] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:32.638 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:32.640 UTC [121] DEBUG:  building index "pg_toast_17803_index" on table "pg_toast_17803" serially
2025-04-19 08:17:32.641 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:32.641 UTC [121] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:32.642 UTC [121] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:32.643 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:32.644 UTC [121] DEBUG:  building index "pg_toast_17826_index" on table "pg_toast_17826" serially
2025-04-19 08:17:32.645 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:32.646 UTC [121] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:32.646 UTC [121] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:32.647 UTC [121] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:32.647 UTC [121] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:32.649 UTC [121] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:32.649 UTC [121] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:32.650 UTC [121] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:32.650 UTC [121] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:32.652 UTC [121] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:32.652 UTC [121] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:32.653 UTC [121] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:32.653 UTC [121] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:32.655 UTC [121] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:32.655 UTC [121] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:32.656 UTC [121] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:32.656 UTC [121] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:32.657 UTC [121] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:32.657 UTC [121] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:32.658 UTC [121] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:32.658 UTC [121] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:32.659 UTC [121] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:32.659 UTC [121] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:32.660 UTC [121] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:32.660 UTC [121] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:32.677 UTC [121] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:32.951 UTC [121] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$fGxvCIv3DGuuo08FAqkePOuew1FErNNjr8zXHTBT8puZkUHzvav5O')
	                RETURNING id, username, email
	                
2025-04-19 08:17:32.952 UTC [121] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:32.952 UTC [121] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:32.953 UTC [121] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:17:32.969 UTC [121] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:32.973 UTC [121] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:32.977 UTC [121] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:32.987 UTC [121] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:32.987 UTC [121] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:32.990 UTC [121] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:32.994 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:32.995 UTC [121] DEBUG:  building index "pg_toast_17862_index" on table "pg_toast_17862" serially
2025-04-19 08:17:32.996 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:32.997 UTC [121] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:32.997 UTC [121] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:32.998 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:32.998 UTC [121] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:32.998 UTC [121] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:32.998 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:32.999 UTC [121] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:32.999 UTC [121] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:32.999 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:33.000 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:33.000 UTC [121] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:33.000 UTC [121] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:33.001 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:33.001 UTC [121] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:33.001 UTC [121] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:33.002 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:33.003 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:33.003 UTC [121] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:33.003 UTC [121] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:33.004 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:33.004 UTC [121] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:33.004 UTC [121] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:33.007 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:33.009 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:33.009 UTC [121] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:33.010 UTC [121] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:33.012 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:33.014 UTC [121] DEBUG:  building index "pg_toast_17923_index" on table "pg_toast_17923" serially
2025-04-19 08:17:33.017 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:33.017 UTC [121] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:33.017 UTC [121] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:33.019 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:33.020 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:33.020 UTC [121] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:33.020 UTC [121] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:33.022 UTC [121] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:33.022 UTC [121] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:33.022 UTC [121] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:33.023 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:33.024 UTC [121] DEBUG:  building index "pg_toast_17956_index" on table "pg_toast_17956" serially
2025-04-19 08:17:33.025 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:33.026 UTC [121] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:33.026 UTC [121] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:33.026 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:33.027 UTC [121] DEBUG:  building index "pg_toast_17967_index" on table "pg_toast_17967" serially
2025-04-19 08:17:33.028 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:33.028 UTC [121] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:33.028 UTC [121] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:33.029 UTC [121] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:33.030 UTC [121] DEBUG:  building index "pg_toast_17990_index" on table "pg_toast_17990" serially
2025-04-19 08:17:33.031 UTC [121] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:33.032 UTC [121] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:33.032 UTC [121] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:33.032 UTC [121] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:33.032 UTC [121] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:33.033 UTC [121] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:33.033 UTC [121] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:33.034 UTC [121] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:33.034 UTC [121] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:33.035 UTC [121] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:33.035 UTC [121] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:33.036 UTC [121] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:33.036 UTC [121] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:33.037 UTC [121] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:33.037 UTC [121] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:33.038 UTC [121] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:33.038 UTC [121] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:33.038 UTC [121] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:33.038 UTC [121] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:33.039 UTC [121] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:33.039 UTC [121] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:33.040 UTC [121] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:33.040 UTC [121] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:33.041 UTC [121] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:33.041 UTC [121] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:33.050 UTC [121] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:33.304 UTC [121] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$NJRGQ5tZWFjrU.noZ4Nmp.28cZTlXih/NU6MV/Vz8MvjCLtXyeZDW')
	                RETURNING id, username, email
	                
2025-04-19 08:17:33.305 UTC [121] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:33.305 UTC [121] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:42.436 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.444 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:17:42.448 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:17:42.449 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (853, '2018-09-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.456 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (1,1,11,false),(1,2,54,false),(1,3,55,false),(1,4,61,false),(1,5,66,false),(1,6,9,true)
	        
2025-04-19 08:17:42.461 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:17:42.472 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 853
2025-04-19 08:17:42.476 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.477 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:17:42.479 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:17:42.479 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (854, '2018-09-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.480 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (2,1,2,false),(2,2,18,false),(2,3,19,false),(2,4,24,false),(2,5,34,false),(2,6,3,true)
	        
2025-04-19 08:17:42.481 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:17:42.486 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 854
2025-04-19 08:17:42.491 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.492 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:17:42.492 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:17:42.492 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (855, '2018-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.493 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (3,1,4,false),(3,2,39,false),(3,3,48,false),(3,4,50,false),(3,5,51,false),(3,6,11,true)
	        
2025-04-19 08:17:42.494 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:17:42.497 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 855
2025-04-19 08:17:42.499 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.500 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:17:42.500 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:17:42.500 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (856, '2018-09-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.501 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (4,1,1,false),(4,2,2,false),(4,3,7,false),(4,4,30,false),(4,5,50,false),(4,6,8,true)
	        
2025-04-19 08:17:42.501 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:17:42.507 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 856
2025-04-19 08:17:42.509 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.509 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:17:42.510 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:17:42.510 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (857, '2018-10-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.510 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (5,1,41,false),(5,2,53,false),(5,3,59,false),(5,4,63,false),(5,5,66,false),(5,6,3,true)
	        
2025-04-19 08:17:42.511 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:17:42.513 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 857
2025-04-19 08:17:42.516 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.516 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:17:42.517 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:17:42.517 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (858, '2018-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.517 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (6,1,8,false),(6,2,23,false),(6,3,27,false),(6,4,42,false),(6,5,60,false),(6,6,7,true)
	        
2025-04-19 08:17:42.518 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:17:42.521 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 858
2025-04-19 08:17:42.524 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.525 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:17:42.525 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:17:42.525 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (859, '2018-10-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.526 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (7,1,8,false),(7,2,12,false),(7,3,13,false),(7,4,19,false),(7,5,27,false),(7,6,4,true)
	        
2025-04-19 08:17:42.526 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:17:42.529 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 859
2025-04-19 08:17:42.531 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.532 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:17:42.532 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:17:42.533 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (860, '2018-11-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.533 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (8,1,15,false),(8,2,21,false),(8,3,24,false),(8,4,32,false),(8,5,65,false),(8,6,11,true)
	        
2025-04-19 08:17:42.534 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:17:42.537 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 860
2025-04-19 08:17:42.540 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.540 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:17:42.540 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:17:42.540 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (861, '2018-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.541 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (9,1,6,false),(9,2,8,false),(9,3,20,false),(9,4,52,false),(9,5,68,false),(9,6,5,true)
	        
2025-04-19 08:17:42.541 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:17:42.544 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 861
2025-04-19 08:17:42.547 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.547 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:17:42.547 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:17:42.548 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (862, '2018-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.548 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (10,1,9,false),(10,2,11,false),(10,3,36,false),(10,4,37,false),(10,5,38,false),(10,6,11,true)
	        
2025-04-19 08:17:42.549 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:17:42.552 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 862
2025-04-19 08:17:42.554 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.556 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:17:42.557 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:17:42.557 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (863, '2018-12-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.558 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (11,1,14,false),(11,2,32,false),(11,3,34,false),(11,4,46,false),(11,5,61,false),(11,6,10,true)
	        
2025-04-19 08:17:42.560 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:17:42.565 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 863
2025-04-19 08:17:42.568 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.569 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:17:42.569 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:17:42.570 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (864, '2019-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.570 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (12,1,14,false),(12,2,29,false),(12,3,31,false),(12,4,56,false),(12,5,61,false),(12,6,1,true)
	        
2025-04-19 08:17:42.571 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:17:42.575 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 864
2025-04-19 08:17:42.577 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.577 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:17:42.578 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:17:42.578 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (865, '2019-01-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.578 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (13,1,8,false),(13,2,12,false),(13,3,20,false),(13,4,21,false),(13,5,32,false),(13,6,10,true)
	        
2025-04-19 08:17:42.579 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:17:42.582 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 865
2025-04-19 08:17:42.585 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.586 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:17:42.586 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:17:42.586 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (866, '2019-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.587 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (14,1,2,false),(14,2,12,false),(14,3,16,false),(14,4,29,false),(14,5,54,false),(14,6,6,true)
	        
2025-04-19 08:17:42.588 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:17:42.594 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 866
2025-04-19 08:17:42.598 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.599 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:17:42.599 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:17:42.600 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (867, '2019-02-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.600 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (15,1,29,false),(15,2,30,false),(15,3,41,false),(15,4,48,false),(15,5,64,false),(15,6,1,true)
	        
2025-04-19 08:17:42.601 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:17:42.606 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 867
2025-04-19 08:17:42.608 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.609 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:17:42.609 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:17:42.609 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (868, '2019-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.610 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (16,1,27,false),(16,2,49,false),(16,3,50,false),(16,4,51,false),(16,5,52,false),(16,6,2,true)
	        
2025-04-19 08:17:42.610 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:17:42.613 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 868
2025-04-19 08:17:42.615 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.616 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:17:42.616 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:17:42.616 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (869, '2019-03-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.617 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (17,1,30,false),(17,2,34,false),(17,3,39,false),(17,4,53,false),(17,5,67,false),(17,6,11,true)
	        
2025-04-19 08:17:42.617 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:17:42.620 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 869
2025-04-19 08:17:42.623 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.623 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:17:42.624 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:17:42.624 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (870, '2019-03-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.624 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (18,1,24,false),(18,2,25,false),(18,3,52,false),(18,4,60,false),(18,5,66,false),(18,6,5,true)
	        
2025-04-19 08:17:42.625 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:17:42.629 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 870
2025-04-19 08:17:42.632 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.633 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:17:42.634 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:17:42.635 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (871, '2019-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.636 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (19,1,21,false),(19,2,52,false),(19,3,54,false),(19,4,64,false),(19,5,68,false),(19,6,4,true)
	        
2025-04-19 08:17:42.638 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:17:42.644 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 871
2025-04-19 08:17:42.648 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.649 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:17:42.649 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:17:42.649 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (872, '2019-04-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.650 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (20,1,15,false),(20,2,33,false),(20,3,43,false),(20,4,59,false),(20,5,60,false),(20,6,8,true)
	        
2025-04-19 08:17:42.650 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:17:42.654 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 872
2025-04-19 08:17:42.657 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.657 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:17:42.658 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:17:42.658 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (873, '2019-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.658 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (21,1,12,false),(21,2,21,false),(21,3,23,false),(21,4,39,false),(21,5,67,false),(21,6,6,true)
	        
2025-04-19 08:17:42.659 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:17:42.661 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 873
2025-04-19 08:17:42.663 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.664 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:17:42.664 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:17:42.664 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (874, '2019-04-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.665 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (22,1,4,false),(22,2,17,false),(22,3,26,false),(22,4,32,false),(22,5,49,false),(22,6,10,true)
	        
2025-04-19 08:17:42.665 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:17:42.668 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 874
2025-04-19 08:17:42.669 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.670 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:17:42.670 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:17:42.670 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (875, '2019-04-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.671 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (23,1,3,false),(23,2,27,false),(23,3,30,false),(23,4,63,false),(23,5,65,false),(23,6,1,true)
	        
2025-04-19 08:17:42.671 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:17:42.674 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 875
2025-04-19 08:17:42.676 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.677 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:17:42.677 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:17:42.677 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (876, '2019-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.677 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (24,1,6,false),(24,2,32,false),(24,3,35,false),(24,4,36,false),(24,5,65,false),(24,6,4,true)
	        
2025-04-19 08:17:42.678 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:17:42.680 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 876
2025-04-19 08:17:42.683 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.684 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:17:42.684 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:17:42.685 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (877, '2019-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.685 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (25,1,2,false),(25,2,29,false),(25,3,41,false),(25,4,45,false),(25,5,62,false),(25,6,6,true)
	        
2025-04-19 08:17:42.686 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:17:42.690 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 877
2025-04-19 08:17:42.694 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.698 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:17:42.698 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:17:42.699 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (878, '2019-05-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.699 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (26,1,6,false),(26,2,16,false),(26,3,23,false),(26,4,30,false),(26,5,61,false),(26,6,2,true)
	        
2025-04-19 08:17:42.700 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:17:42.711 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 878
2025-04-19 08:17:42.714 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.714 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:17:42.715 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:17:42.715 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (879, '2019-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.715 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (27,1,1,false),(27,2,45,false),(27,3,53,false),(27,4,64,false),(27,5,66,false),(27,6,3,true)
	        
2025-04-19 08:17:42.716 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:17:42.720 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 879
2025-04-19 08:17:42.724 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.724 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:17:42.725 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:17:42.725 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (880, '2019-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.725 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (28,1,7,false),(28,2,17,false),(28,3,33,false),(28,4,61,false),(28,5,68,false),(28,6,4,true)
	        
2025-04-19 08:17:42.726 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:17:42.729 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 880
2025-04-19 08:17:42.732 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.733 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:17:42.733 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:17:42.733 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (881, '2019-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.733 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (29,1,7,false),(29,2,10,false),(29,3,20,false),(29,4,44,false),(29,5,57,false),(29,6,3,true)
	        
2025-04-19 08:17:42.734 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:17:42.738 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 881
2025-04-19 08:17:42.741 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.742 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:17:42.742 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:17:42.742 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (882, '2019-05-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.743 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (30,1,1,false),(30,2,2,false),(30,3,39,false),(30,4,43,false),(30,5,66,false),(30,6,2,true)
	        
2025-04-19 08:17:42.743 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:17:42.747 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 882
2025-04-19 08:17:42.750 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.750 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:17:42.750 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:17:42.751 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (883, '2019-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.751 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (31,1,3,false),(31,2,32,false),(31,3,34,false),(31,4,42,false),(31,5,61,false),(31,6,7,true)
	        
2025-04-19 08:17:42.752 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:17:42.756 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 883
2025-04-19 08:17:42.758 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.759 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:17:42.759 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:17:42.759 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (884, '2019-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.759 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (32,1,6,false),(32,2,15,false),(32,3,34,false),(32,4,45,false),(32,5,52,false),(32,6,8,true)
	        
2025-04-19 08:17:42.760 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:17:42.763 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 884
2025-04-19 08:17:42.765 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.765 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:17:42.765 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:17:42.765 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (885, '2019-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.766 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (33,1,17,false),(33,2,23,false),(33,3,28,false),(33,4,34,false),(33,5,38,false),(33,6,8,true)
	        
2025-04-19 08:17:42.766 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:17:42.769 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 885
2025-04-19 08:17:42.771 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.772 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:17:42.772 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:17:42.772 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (886, '2019-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.773 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (34,1,4,false),(34,2,18,false),(34,3,21,false),(34,4,26,false),(34,5,38,false),(34,6,1,true)
	        
2025-04-19 08:17:42.773 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:17:42.776 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 886
2025-04-19 08:17:42.778 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.778 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:17:42.778 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:17:42.779 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (887, '2019-06-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.779 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (35,1,13,false),(35,2,17,false),(35,3,24,false),(35,4,59,false),(35,5,62,false),(35,6,8,true)
	        
2025-04-19 08:17:42.779 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:17:42.782 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 887
2025-04-19 08:17:42.784 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.784 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:17:42.784 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:17:42.784 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (888, '2019-07-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.785 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (36,1,4,false),(36,2,8,false),(36,3,23,false),(36,4,46,false),(36,5,65,false),(36,6,1,true)
	        
2025-04-19 08:17:42.786 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:17:42.789 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 888
2025-04-19 08:17:42.791 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.792 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:17:42.792 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:17:42.792 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (889, '2019-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.792 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (37,1,7,false),(37,2,9,false),(37,3,26,false),(37,4,44,false),(37,5,68,false),(37,6,3,true)
	        
2025-04-19 08:17:42.793 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:17:42.796 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 889
2025-04-19 08:17:42.798 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.798 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:17:42.798 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:17:42.798 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (890, '2019-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.799 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (38,1,19,false),(38,2,43,false),(38,3,47,false),(38,4,60,false),(38,5,68,false),(38,6,10,true)
	        
2025-04-19 08:17:42.799 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:17:42.802 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 890
2025-04-19 08:17:42.804 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.804 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:17:42.805 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:17:42.805 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (891, '2019-07-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.806 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (39,1,1,false),(39,2,19,false),(39,3,31,false),(39,4,48,false),(39,5,61,false),(39,6,6,true)
	        
2025-04-19 08:17:42.806 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:17:42.810 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 891
2025-04-19 08:17:42.811 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.812 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:17:42.812 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:17:42.812 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (892, '2019-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.813 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (40,1,14,false),(40,2,37,false),(40,3,47,false),(40,4,55,false),(40,5,67,false),(40,6,6,true)
	        
2025-04-19 08:17:42.813 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:17:42.816 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 892
2025-04-19 08:17:42.818 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.818 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:17:42.818 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:17:42.818 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (893, '2019-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.819 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (41,1,8,false),(41,2,32,false),(41,3,47,false),(41,4,53,false),(41,5,59,false),(41,6,3,true)
	        
2025-04-19 08:17:42.819 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:17:42.823 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 893
2025-04-19 08:17:42.825 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.825 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:17:42.825 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:17:42.826 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (894, '2019-08-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.826 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (42,1,35,false),(42,2,41,false),(42,3,44,false),(42,4,58,false),(42,5,59,false),(42,6,3,true)
	        
2025-04-19 08:17:42.827 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:17:42.829 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 894
2025-04-19 08:17:42.832 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.832 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:17:42.833 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:17:42.833 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (895, '2019-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.834 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (43,1,10,false),(43,2,13,false),(43,3,30,false),(43,4,51,false),(43,5,69,false),(43,6,10,true)
	        
2025-04-19 08:17:42.835 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:17:42.839 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 895
2025-04-19 08:17:42.842 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.842 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:17:42.843 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:17:42.843 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (896, '2019-08-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.843 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (44,1,5,false),(44,2,12,false),(44,3,20,false),(44,4,21,false),(44,5,47,false),(44,6,1,true)
	        
2025-04-19 08:17:42.844 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:17:42.847 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 896
2025-04-19 08:17:42.850 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.850 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:17:42.850 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:17:42.851 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (897, '2019-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.851 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (45,1,4,false),(45,2,8,false),(45,3,30,false),(45,4,52,false),(45,5,59,false),(45,6,2,true)
	        
2025-04-19 08:17:42.851 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:17:42.856 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 897
2025-04-19 08:17:42.858 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.859 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:17:42.859 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:17:42.859 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (898, '2019-09-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.859 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (46,1,11,false),(46,2,20,false),(46,3,41,false),(46,4,42,false),(46,5,56,false),(46,6,6,true)
	        
2025-04-19 08:17:42.860 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:17:42.862 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 898
2025-04-19 08:17:42.864 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.865 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:17:42.865 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:17:42.865 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (899, '2019-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.865 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (47,1,6,false),(47,2,17,false),(47,3,24,false),(47,4,53,false),(47,5,57,false),(47,6,3,true)
	        
2025-04-19 08:17:42.866 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:17:42.868 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 899
2025-04-19 08:17:42.870 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.871 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:17:42.872 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:17:42.872 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (900, '2019-09-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.874 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (48,1,11,false),(48,2,27,false),(48,3,31,false),(48,4,36,false),(48,5,67,false),(48,6,11,true)
	        
2025-04-19 08:17:42.875 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:17:42.878 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 900
2025-04-19 08:17:42.880 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.881 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:17:42.881 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:17:42.881 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (901, '2019-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.882 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (49,1,15,false),(49,2,23,false),(49,3,34,false),(49,4,51,false),(49,5,55,false),(49,6,4,true)
	        
2025-04-19 08:17:42.882 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:17:42.887 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 901
2025-04-19 08:17:42.891 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.891 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:17:42.891 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:17:42.892 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (902, '2019-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.892 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (50,1,4,false),(50,2,8,false),(50,3,10,false),(50,4,43,false),(50,5,53,false),(50,6,7,true)
	        
2025-04-19 08:17:42.892 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:17:42.896 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 902
2025-04-19 08:17:42.898 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.899 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:17:42.899 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:17:42.899 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (903, '2019-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.900 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (51,1,6,false),(51,2,14,false),(51,3,36,false),(51,4,51,false),(51,5,54,false),(51,6,4,true)
	        
2025-04-19 08:17:42.900 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:17:42.904 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 903
2025-04-19 08:17:42.907 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.907 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:17:42.908 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:17:42.908 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (904, '2019-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.908 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (52,1,5,false),(52,2,18,false),(52,3,33,false),(52,4,43,false),(52,5,65,false),(52,6,2,true)
	        
2025-04-19 08:17:42.909 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:17:42.911 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 904
2025-04-19 08:17:42.913 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.913 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:17:42.914 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:17:42.914 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (905, '2019-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.914 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (53,1,1,false),(53,2,5,false),(53,3,25,false),(53,4,63,false),(53,5,67,false),(53,6,3,true)
	        
2025-04-19 08:17:42.915 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:17:42.917 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 905
2025-04-19 08:17:42.919 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.919 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:17:42.920 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:17:42.920 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (906, '2019-10-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.920 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (54,1,3,false),(54,2,20,false),(54,3,48,false),(54,4,54,false),(54,5,59,false),(54,6,4,true)
	        
2025-04-19 08:17:42.921 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:17:42.924 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 906
2025-04-19 08:17:42.926 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.927 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:17:42.927 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:17:42.927 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (907, '2019-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.928 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (55,1,23,false),(55,2,26,false),(55,3,27,false),(55,4,28,false),(55,5,66,false),(55,6,11,true)
	        
2025-04-19 08:17:42.928 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:17:42.931 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 907
2025-04-19 08:17:42.933 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.934 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:17:42.934 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:17:42.934 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (908, '2019-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.934 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (56,1,24,false),(56,2,29,false),(56,3,42,false),(56,4,44,false),(56,5,63,false),(56,6,10,true)
	        
2025-04-19 08:17:42.935 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:17:42.937 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 908
2025-04-19 08:17:42.940 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.941 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:17:42.941 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:17:42.941 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (909, '2019-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.942 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (57,1,14,false),(57,2,18,false),(57,3,26,false),(57,4,39,false),(57,5,68,false),(57,6,9,true)
	        
2025-04-19 08:17:42.942 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:17:42.945 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 909
2025-04-19 08:17:42.949 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.949 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:17:42.949 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:17:42.950 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (910, '2020-01-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.950 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (58,1,1,false),(58,2,11,false),(58,3,21,false),(58,4,25,false),(58,5,54,false),(58,6,7,true)
	        
2025-04-19 08:17:42.951 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:17:42.955 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 910
2025-04-19 08:17:42.958 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.958 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:17:42.958 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:17:42.959 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (911, '2020-01-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.959 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (59,1,3,false),(59,2,21,false),(59,3,23,false),(59,4,31,false),(59,5,59,false),(59,6,3,true)
	        
2025-04-19 08:17:42.960 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:17:42.963 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 911
2025-04-19 08:17:42.965 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.966 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:17:42.966 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:17:42.966 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (912, '2020-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.967 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (60,1,11,false),(60,2,33,false),(60,3,44,false),(60,4,59,false),(60,5,67,false),(60,6,8,true)
	        
2025-04-19 08:17:42.967 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:17:42.970 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 912
2025-04-19 08:17:42.972 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.973 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:17:42.973 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:17:42.973 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (913, '2020-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.974 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (61,1,9,false),(61,2,12,false),(61,3,15,false),(61,4,31,false),(61,5,60,false),(61,6,2,true)
	        
2025-04-19 08:17:42.974 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:17:42.977 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 913
2025-04-19 08:17:42.979 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.979 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:17:42.979 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:17:42.980 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (914, '2020-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.980 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (62,1,23,false),(62,2,30,false),(62,3,35,false),(62,4,41,false),(62,5,57,false),(62,6,2,true)
	        
2025-04-19 08:17:42.981 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:17:42.984 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 914
2025-04-19 08:17:42.986 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.986 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:17:42.987 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:17:42.987 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (915, '2020-02-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.987 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (63,1,35,false),(63,2,49,false),(63,3,50,false),(63,4,59,false),(63,5,66,false),(63,6,6,true)
	        
2025-04-19 08:17:42.988 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:17:42.991 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 915
2025-04-19 08:17:42.994 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:42.995 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:17:42.995 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:17:42.995 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (916, '2020-02-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:42.996 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (64,1,16,false),(64,2,32,false),(64,3,35,false),(64,4,36,false),(64,5,46,false),(64,6,3,true)
	        
2025-04-19 08:17:42.996 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:17:43.000 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 916
2025-04-19 08:17:43.002 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.002 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:17:43.002 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:17:43.003 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (917, '2020-02-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.003 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (65,1,25,false),(65,2,37,false),(65,3,39,false),(65,4,61,false),(65,5,62,false),(65,6,11,true)
	        
2025-04-19 08:17:43.004 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:17:43.007 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 917
2025-04-19 08:17:43.009 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.009 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:17:43.010 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:17:43.010 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (918, '2020-03-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.010 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (66,1,4,false),(66,2,29,false),(66,3,49,false),(66,4,50,false),(66,5,67,false),(66,6,2,true)
	        
2025-04-19 08:17:43.011 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:17:43.013 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 918
2025-04-19 08:17:43.015 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.016 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:17:43.016 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:17:43.016 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (919, '2020-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.017 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (67,1,9,false),(67,2,23,false),(67,3,26,false),(67,4,30,false),(67,5,32,false),(67,6,8,true)
	        
2025-04-19 08:17:43.017 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:17:43.019 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 919
2025-04-19 08:17:43.022 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.023 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:17:43.023 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:17:43.023 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (920, '2020-03-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.024 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (68,1,15,false),(68,2,27,false),(68,3,44,false),(68,4,59,false),(68,5,63,false),(68,6,8,true)
	        
2025-04-19 08:17:43.024 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:17:43.027 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 920
2025-04-19 08:17:43.029 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.029 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:17:43.029 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:17:43.030 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (921, '2020-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.030 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (69,1,7,false),(69,2,40,false),(69,3,48,false),(69,4,55,false),(69,5,66,false),(69,6,11,true)
	        
2025-04-19 08:17:43.030 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:17:43.033 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 921
2025-04-19 08:17:43.035 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.035 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:17:43.035 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:17:43.036 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (922, '2020-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.036 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (70,1,8,false),(70,2,31,false),(70,3,39,false),(70,4,40,false),(70,5,43,false),(70,6,4,true)
	        
2025-04-19 08:17:43.037 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:17:43.040 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 922
2025-04-19 08:17:43.043 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.043 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:17:43.043 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:17:43.044 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (923, '2020-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.044 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (71,1,2,false),(71,2,37,false),(71,3,39,false),(71,4,48,false),(71,5,54,false),(71,6,5,true)
	        
2025-04-19 08:17:43.044 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:17:43.047 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 923
2025-04-19 08:17:43.049 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.050 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:17:43.050 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:17:43.050 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (924, '2020-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.051 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (72,1,10,false),(72,2,12,false),(72,3,33,false),(72,4,36,false),(72,5,41,false),(72,6,2,true)
	        
2025-04-19 08:17:43.051 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:17:43.054 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 924
2025-04-19 08:17:43.057 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.057 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:17:43.057 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:17:43.058 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (925, '2020-05-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.058 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (73,1,8,false),(73,2,12,false),(73,3,26,false),(73,4,39,false),(73,5,42,false),(73,6,11,true)
	        
2025-04-19 08:17:43.059 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:17:43.061 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 925
2025-04-19 08:17:43.063 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.064 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:17:43.064 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:17:43.064 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (926, '2020-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.064 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (74,1,18,false),(74,2,34,false),(74,3,40,false),(74,4,42,false),(74,5,50,false),(74,6,9,true)
	        
2025-04-19 08:17:43.065 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:17:43.067 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 926
2025-04-19 08:17:43.069 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.070 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:17:43.070 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:17:43.070 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (927, '2020-06-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.071 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (75,1,2,false),(75,2,12,false),(75,3,32,false),(75,4,50,false),(75,5,65,false),(75,6,5,true)
	        
2025-04-19 08:17:43.072 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:17:43.075 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 927
2025-04-19 08:17:43.077 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.077 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:17:43.077 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:17:43.078 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (928, '2020-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.078 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (76,1,7,false),(76,2,10,false),(76,3,63,false),(76,4,64,false),(76,5,68,false),(76,6,10,true)
	        
2025-04-19 08:17:43.079 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:17:43.081 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 928
2025-04-19 08:17:43.083 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.084 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:17:43.084 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:17:43.084 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (929, '2020-06-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.085 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (77,1,10,false),(77,2,31,false),(77,3,41,false),(77,4,63,false),(77,5,67,false),(77,6,5,true)
	        
2025-04-19 08:17:43.085 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:17:43.088 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 929
2025-04-19 08:17:43.090 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.091 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:17:43.091 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:17:43.091 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (930, '2020-06-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.092 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (78,1,9,false),(78,2,36,false),(78,3,49,false),(78,4,56,false),(78,5,62,false),(78,6,8,true)
	        
2025-04-19 08:17:43.092 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:17:43.095 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 930
2025-04-19 08:17:43.096 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.097 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:17:43.097 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:17:43.097 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (931, '2020-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.098 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (79,1,16,false),(79,2,21,false),(79,3,27,false),(79,4,60,false),(79,5,61,false),(79,6,6,true)
	        
2025-04-19 08:17:43.098 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:17:43.101 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 931
2025-04-19 08:17:43.103 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.103 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:17:43.103 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:17:43.104 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (932, '2020-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.104 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (80,1,3,false),(80,2,10,false),(80,3,34,false),(80,4,36,false),(80,5,62,false),(80,6,5,true)
	        
2025-04-19 08:17:43.105 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:17:43.108 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 932
2025-04-19 08:17:43.110 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.111 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:17:43.111 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:17:43.111 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (933, '2020-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.112 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (81,1,14,false),(81,2,19,false),(81,3,61,false),(81,4,62,false),(81,5,64,false),(81,6,4,true)
	        
2025-04-19 08:17:43.113 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:17:43.118 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 933
2025-04-19 08:17:43.121 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.121 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:17:43.122 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:17:43.123 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (934, '2020-07-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.123 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (82,1,27,false),(82,2,47,false),(82,3,61,false),(82,4,62,false),(82,5,69,false),(82,6,4,true)
	        
2025-04-19 08:17:43.124 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:17:43.127 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 934
2025-04-19 08:17:43.130 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.130 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:17:43.131 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:17:43.131 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (935, '2020-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.131 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (83,1,13,false),(83,2,16,false),(83,3,32,false),(83,4,58,false),(83,5,59,false),(83,6,9,true)
	        
2025-04-19 08:17:43.132 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:17:43.135 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 935
2025-04-19 08:17:43.139 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.140 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:17:43.140 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:17:43.140 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (936, '2020-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.141 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (84,1,5,false),(84,2,12,false),(84,3,34,false),(84,4,45,false),(84,5,56,false),(84,6,3,true)
	        
2025-04-19 08:17:43.141 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:17:43.145 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 936
2025-04-19 08:17:43.148 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.148 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:17:43.148 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:17:43.149 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (937, '2020-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.149 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (85,1,8,false),(85,2,12,false),(85,3,19,false),(85,4,47,false),(85,5,58,false),(85,6,2,true)
	        
2025-04-19 08:17:43.149 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:17:43.152 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 937
2025-04-19 08:17:43.154 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.155 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:17:43.155 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:17:43.155 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (938, '2020-08-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.156 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (86,1,5,false),(86,2,21,false),(86,3,22,false),(86,4,29,false),(86,5,43,false),(86,6,10,true)
	        
2025-04-19 08:17:43.156 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:17:43.159 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 938
2025-04-19 08:17:43.162 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.162 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:17:43.163 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:17:43.163 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (939, '2020-09-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.163 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (87,1,15,false),(87,2,21,false),(87,3,22,false),(87,4,27,false),(87,5,47,false),(87,6,7,true)
	        
2025-04-19 08:17:43.164 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:17:43.166 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 939
2025-04-19 08:17:43.168 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.169 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:17:43.169 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:17:43.169 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (940, '2020-09-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.170 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (88,1,16,false),(88,2,17,false),(88,3,20,false),(88,4,53,false),(88,5,67,false),(88,6,4,true)
	        
2025-04-19 08:17:43.170 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:17:43.174 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 940
2025-04-19 08:17:43.176 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.176 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:17:43.176 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:17:43.177 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (941, '2020-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.177 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (89,1,10,false),(89,2,17,false),(89,3,31,false),(89,4,51,false),(89,5,53,false),(89,6,1,true)
	        
2025-04-19 08:17:43.177 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:17:43.180 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 941
2025-04-19 08:17:43.183 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.183 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:17:43.184 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:17:43.184 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (942, '2020-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.184 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (90,1,8,false),(90,2,17,false),(90,3,49,false),(90,4,52,false),(90,5,59,false),(90,6,1,true)
	        
2025-04-19 08:17:43.185 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:17:43.189 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 942
2025-04-19 08:17:43.191 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.191 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:17:43.191 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:17:43.192 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (943, '2020-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.192 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (91,1,21,false),(91,2,37,false),(91,3,52,false),(91,4,53,false),(91,5,58,false),(91,6,5,true)
	        
2025-04-19 08:17:43.192 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:17:43.195 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 943
2025-04-19 08:17:43.197 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.197 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:17:43.197 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:17:43.197 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (944, '2020-10-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.198 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (92,1,18,false),(92,2,20,false),(92,3,27,false),(92,4,45,false),(92,5,65,false),(92,6,6,true)
	        
2025-04-19 08:17:43.198 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:17:43.201 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 944
2025-04-19 08:17:43.204 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.204 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:17:43.204 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:17:43.204 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (945, '2020-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.205 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (93,1,4,false),(93,2,5,false),(93,3,17,false),(93,4,43,false),(93,5,52,false),(93,6,5,true)
	        
2025-04-19 08:17:43.206 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:17:43.209 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 945
2025-04-19 08:17:43.210 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.211 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:17:43.211 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:17:43.211 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (946, '2020-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.212 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (94,1,51,false),(94,2,54,false),(94,3,57,false),(94,4,60,false),(94,5,69,false),(94,6,11,true)
	        
2025-04-19 08:17:43.212 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:17:43.215 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 946
2025-04-19 08:17:43.218 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.218 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:17:43.219 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:17:43.219 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (947, '2020-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.219 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (95,1,28,false),(95,2,31,false),(95,3,40,false),(95,4,41,false),(95,5,46,false),(95,6,4,true)
	        
2025-04-19 08:17:43.220 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:17:43.227 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 947
2025-04-19 08:17:43.229 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.230 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:17:43.230 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:17:43.230 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (948, '2020-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.231 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (96,1,3,false),(96,2,4,false),(96,3,6,false),(96,4,48,false),(96,5,53,false),(96,6,10,true)
	        
2025-04-19 08:17:43.231 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:17:43.235 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 948
2025-04-19 08:17:43.237 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.238 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:17:43.238 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:17:43.238 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (949, '2020-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.239 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (97,1,11,false),(97,2,14,false),(97,3,31,false),(97,4,47,false),(97,5,48,false),(97,6,4,true)
	        
2025-04-19 08:17:43.239 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:17:43.242 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 949
2025-04-19 08:17:43.244 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.245 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:17:43.245 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:17:43.245 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (950, '2020-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.246 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (98,1,4,false),(98,2,23,false),(98,3,37,false),(98,4,61,false),(98,5,67,false),(98,6,7,true)
	        
2025-04-19 08:17:43.246 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:17:43.249 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 950
2025-04-19 08:17:43.250 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.251 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:17:43.251 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:17:43.251 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (951, '2020-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.252 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (99,1,6,false),(99,2,13,false),(99,3,38,false),(99,4,39,false),(99,5,53,false),(99,6,6,true)
	        
2025-04-19 08:17:43.252 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:17:43.256 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 951
2025-04-19 08:17:43.258 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.258 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:17:43.259 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:17:43.259 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (952, '2021-01-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.259 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (100,1,3,false),(100,2,4,false),(100,3,11,false),(100,4,41,false),(100,5,67,false),(100,6,5,true)
	        
2025-04-19 08:17:43.260 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:17:43.262 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 952
2025-04-19 08:17:43.265 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.265 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:17:43.266 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:17:43.266 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (953, '2021-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.266 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (101,1,1,false),(101,2,20,false),(101,3,22,false),(101,4,60,false),(101,5,66,false),(101,6,3,true)
	        
2025-04-19 08:17:43.267 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:17:43.270 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 953
2025-04-19 08:17:43.273 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.274 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:17:43.274 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:17:43.274 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (954, '2021-01-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.275 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (102,1,14,false),(102,2,20,false),(102,3,39,false),(102,4,65,false),(102,5,67,false),(102,6,2,true)
	        
2025-04-19 08:17:43.275 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:17:43.279 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 954
2025-04-19 08:17:43.281 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.281 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:17:43.281 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:17:43.281 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (955, '2021-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.282 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (103,1,17,false),(103,2,33,false),(103,3,35,false),(103,4,42,false),(103,5,52,false),(103,6,9,true)
	        
2025-04-19 08:17:43.282 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:17:43.285 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 955
2025-04-19 08:17:43.287 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.288 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:17:43.288 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:17:43.288 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (956, '2021-01-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.289 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (104,1,1,false),(104,2,2,false),(104,3,7,false),(104,4,52,false),(104,5,61,false),(104,6,4,true)
	        
2025-04-19 08:17:43.289 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:17:43.292 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 956
2025-04-19 08:17:43.294 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.294 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:17:43.295 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:17:43.295 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (957, '2021-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.295 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (105,1,5,false),(105,2,37,false),(105,3,40,false),(105,4,64,false),(105,5,66,false),(105,6,5,true)
	        
2025-04-19 08:17:43.296 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:17:43.298 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 957
2025-04-19 08:17:43.300 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.301 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:17:43.301 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:17:43.301 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (958, '2021-02-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.301 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (106,1,1,false),(106,2,16,false),(106,3,48,false),(106,4,49,false),(106,5,65,false),(106,6,8,true)
	        
2025-04-19 08:17:43.302 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:17:43.305 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 958
2025-04-19 08:17:43.307 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.307 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:17:43.308 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:17:43.308 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (959, '2021-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.308 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (107,1,15,false),(107,2,39,false),(107,3,58,false),(107,4,63,false),(107,5,67,false),(107,6,7,true)
	        
2025-04-19 08:17:43.309 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:17:43.311 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 959
2025-04-19 08:17:43.313 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.313 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:17:43.313 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:17:43.314 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (960, '2021-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.314 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (108,1,1,false),(108,2,15,false),(108,3,21,false),(108,4,32,false),(108,5,46,false),(108,6,1,true)
	        
2025-04-19 08:17:43.314 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:17:43.318 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 960
2025-04-19 08:17:43.320 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.321 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:17:43.321 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:17:43.321 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (961, '2021-02-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.322 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (109,1,4,false),(109,2,8,false),(109,3,22,false),(109,4,32,false),(109,5,58,false),(109,6,4,true)
	        
2025-04-19 08:17:43.322 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:17:43.325 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 961
2025-04-19 08:17:43.327 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.328 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:17:43.328 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:17:43.328 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (962, '2021-03-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.329 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (110,1,5,false),(110,2,11,false),(110,3,51,false),(110,4,56,false),(110,5,61,false),(110,6,2,true)
	        
2025-04-19 08:17:43.330 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:17:43.332 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 962
2025-04-19 08:17:43.334 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.335 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:17:43.335 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:17:43.335 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (963, '2021-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.335 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (111,1,1,false),(111,2,6,false),(111,3,22,false),(111,4,42,false),(111,5,61,false),(111,6,4,true)
	        
2025-04-19 08:17:43.336 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:17:43.339 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 963
2025-04-19 08:17:43.341 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.342 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:17:43.342 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:17:43.342 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (964, '2021-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.343 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (112,1,6,false),(112,2,14,false),(112,3,38,false),(112,4,39,false),(112,5,65,false),(112,6,6,true)
	        
2025-04-19 08:17:43.343 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:17:43.346 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 964
2025-04-19 08:17:43.348 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.348 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:17:43.348 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:17:43.348 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (965, '2021-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.349 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (113,1,1,false),(113,2,12,false),(113,3,17,false),(113,4,39,false),(113,5,53,false),(113,6,5,true)
	        
2025-04-19 08:17:43.349 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:17:43.352 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 965
2025-04-19 08:17:43.354 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.355 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:17:43.355 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:17:43.355 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (966, '2021-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.356 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (114,1,14,false),(114,2,16,false),(114,3,23,false),(114,4,50,false),(114,5,53,false),(114,6,3,true)
	        
2025-04-19 08:17:43.356 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:17:43.359 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 966
2025-04-19 08:17:43.361 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.361 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:17:43.361 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:17:43.361 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (967, '2021-04-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.362 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (115,1,21,false),(115,2,25,false),(115,3,32,false),(115,4,63,false),(115,5,67,false),(115,6,6,true)
	        
2025-04-19 08:17:43.362 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:17:43.365 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 967
2025-04-19 08:17:43.367 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.367 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:17:43.367 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:17:43.368 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (968, '2021-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.368 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (116,1,35,false),(116,2,36,false),(116,3,47,false),(116,4,61,false),(116,5,63,false),(116,6,3,true)
	        
2025-04-19 08:17:43.369 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:17:43.372 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 968
2025-04-19 08:17:43.374 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.374 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:17:43.375 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:17:43.375 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (969, '2021-05-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.375 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (117,1,16,false),(117,2,23,false),(117,3,28,false),(117,4,40,false),(117,5,63,false),(117,6,1,true)
	        
2025-04-19 08:17:43.376 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:17:43.378 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 969
2025-04-19 08:17:43.380 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.381 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:17:43.381 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:17:43.381 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (970, '2021-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.381 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (118,1,12,false),(118,2,17,false),(118,3,20,false),(118,4,21,false),(118,5,26,false),(118,6,8,true)
	        
2025-04-19 08:17:43.382 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:17:43.385 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 970
2025-04-19 08:17:43.387 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.387 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:17:43.388 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:17:43.388 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (971, '2021-05-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.388 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (119,1,11,false),(119,2,13,false),(119,3,55,false),(119,4,56,false),(119,5,69,false),(119,6,4,true)
	        
2025-04-19 08:17:43.389 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:17:43.392 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 971
2025-04-19 08:17:43.394 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.394 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:17:43.394 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:17:43.395 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (972, '2021-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.395 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (120,1,3,false),(120,2,19,false),(120,3,27,false),(120,4,37,false),(120,5,40,false),(120,6,8,true)
	        
2025-04-19 08:17:43.395 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:17:43.399 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 972
2025-04-19 08:17:43.401 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.401 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:17:43.401 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:17:43.402 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (973, '2021-06-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.402 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (121,1,19,false),(121,2,28,false),(121,3,46,false),(121,4,50,false),(121,5,54,false),(121,6,9,true)
	        
2025-04-19 08:17:43.403 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:17:43.406 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 973
2025-04-19 08:17:43.408 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.409 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:17:43.409 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:17:43.409 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (974, '2021-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.410 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (122,1,8,false),(122,2,25,false),(122,3,34,false),(122,4,38,false),(122,5,41,false),(122,6,10,true)
	        
2025-04-19 08:17:43.410 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:17:43.413 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 974
2025-04-19 08:17:43.415 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.415 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:17:43.416 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:17:43.416 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (975, '2021-06-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.416 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (123,1,13,false),(123,2,20,false),(123,3,40,false),(123,4,51,false),(123,5,63,false),(123,6,1,true)
	        
2025-04-19 08:17:43.417 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:17:43.419 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 975
2025-04-19 08:17:43.423 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.423 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:17:43.423 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:17:43.424 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (976, '2021-07-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.424 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (124,1,8,false),(124,2,21,false),(124,3,30,false),(124,4,49,false),(124,5,57,false),(124,6,8,true)
	        
2025-04-19 08:17:43.425 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:17:43.428 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 976
2025-04-19 08:17:43.430 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.431 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:17:43.431 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:17:43.431 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (977, '2021-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.432 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (125,1,1,false),(125,2,5,false),(125,3,29,false),(125,4,54,false),(125,5,62,false),(125,6,3,true)
	        
2025-04-19 08:17:43.432 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:17:43.435 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 977
2025-04-19 08:17:43.437 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.437 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:17:43.438 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:17:43.438 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (978, '2021-07-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.438 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (126,1,33,false),(126,2,46,false),(126,3,52,false),(126,4,59,false),(126,5,62,false),(126,6,10,true)
	        
2025-04-19 08:17:43.439 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:17:43.442 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 978
2025-04-19 08:17:43.444 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.444 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:17:43.445 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:17:43.445 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (979, '2021-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.445 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (127,1,15,false),(127,2,22,false),(127,3,38,false),(127,4,54,false),(127,5,66,false),(127,6,3,true)
	        
2025-04-19 08:17:43.446 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:17:43.449 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 979
2025-04-19 08:17:43.451 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.451 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:17:43.452 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:17:43.452 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (980, '2021-07-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.452 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (128,1,27,false),(128,2,28,false),(128,3,44,false),(128,4,67,false),(128,5,68,false),(128,6,11,true)
	        
2025-04-19 08:17:43.453 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:17:43.457 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 980
2025-04-19 08:17:43.459 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.460 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:17:43.460 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:17:43.460 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (981, '2021-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.461 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (129,1,1,false),(129,2,4,false),(129,3,11,false),(129,4,59,false),(129,5,67,false),(129,6,10,true)
	        
2025-04-19 08:17:43.462 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:17:43.465 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 981
2025-04-19 08:17:43.468 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.468 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:17:43.469 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:17:43.469 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (982, '2021-07-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.469 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (130,1,25,false),(130,2,30,false),(130,3,53,false),(130,4,59,false),(130,5,60,false),(130,6,5,true)
	        
2025-04-19 08:17:43.470 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:17:43.474 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 982
2025-04-19 08:17:43.476 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.476 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:17:43.477 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:17:43.477 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (983, '2021-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.477 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (131,1,1,false),(131,2,21,false),(131,3,22,false),(131,4,34,false),(131,5,47,false),(131,6,4,true)
	        
2025-04-19 08:17:43.478 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:17:43.480 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 983
2025-04-19 08:17:43.483 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.483 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:17:43.483 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:17:43.483 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (984, '2021-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.484 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (132,1,16,false),(132,2,28,false),(132,3,36,false),(132,4,39,false),(132,5,59,false),(132,6,4,true)
	        
2025-04-19 08:17:43.484 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:17:43.488 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 984
2025-04-19 08:17:43.490 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.491 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:17:43.491 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:17:43.491 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (985, '2021-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.492 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (133,1,3,false),(133,2,15,false),(133,3,45,false),(133,4,51,false),(133,5,61,false),(133,6,8,true)
	        
2025-04-19 08:17:43.492 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:17:43.495 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 985
2025-04-19 08:17:43.497 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.497 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:17:43.498 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:17:43.498 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (986, '2021-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.498 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (134,1,32,false),(134,2,35,false),(134,3,40,false),(134,4,52,false),(134,5,54,false),(134,6,1,true)
	        
2025-04-19 08:17:43.499 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:17:43.501 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 986
2025-04-19 08:17:43.503 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.503 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:17:43.504 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:17:43.504 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (987, '2021-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.504 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (135,1,5,false),(135,2,36,false),(135,3,39,false),(135,4,45,false),(135,5,57,false),(135,6,11,true)
	        
2025-04-19 08:17:43.505 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:17:43.508 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 987
2025-04-19 08:17:43.510 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.510 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:17:43.510 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:17:43.511 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (988, '2021-09-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.511 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (136,1,20,false),(136,2,40,false),(136,3,47,false),(136,4,55,false),(136,5,63,false),(136,6,5,true)
	        
2025-04-19 08:17:43.511 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:17:43.514 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 988
2025-04-19 08:17:43.516 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.517 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:17:43.517 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:17:43.517 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (989, '2021-09-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.518 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (137,1,2,false),(137,2,7,false),(137,3,11,false),(137,4,17,false),(137,5,32,false),(137,6,11,true)
	        
2025-04-19 08:17:43.518 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:17:43.521 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 989
2025-04-19 08:17:43.524 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.525 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:17:43.525 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:17:43.525 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (990, '2021-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.526 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (138,1,28,false),(138,2,38,false),(138,3,42,false),(138,4,47,false),(138,5,52,false),(138,6,1,true)
	        
2025-04-19 08:17:43.526 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:17:43.529 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 990
2025-04-19 08:17:43.531 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.531 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:17:43.532 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:17:43.532 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (991, '2021-10-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.532 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (139,1,1,false),(139,2,17,false),(139,3,52,false),(139,4,58,false),(139,5,64,false),(139,6,1,true)
	        
2025-04-19 08:17:43.533 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:17:43.536 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 991
2025-04-19 08:17:43.538 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.539 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:17:43.539 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:17:43.539 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (992, '2021-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.540 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (140,1,12,false),(140,2,17,false),(140,3,30,false),(140,4,45,false),(140,5,62,false),(140,6,5,true)
	        
2025-04-19 08:17:43.540 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:17:43.543 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 992
2025-04-19 08:17:43.545 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.545 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:17:43.546 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:17:43.546 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (993, '2021-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.546 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (141,1,30,false),(141,2,31,false),(141,3,41,false),(141,4,42,false),(141,5,48,false),(141,6,3,true)
	        
2025-04-19 08:17:43.547 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:17:43.549 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 993
2025-04-19 08:17:43.552 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.552 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:17:43.552 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:17:43.552 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (994, '2021-10-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.553 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (142,1,7,false),(142,2,29,false),(142,3,36,false),(142,4,41,false),(142,5,43,false),(142,6,5,true)
	        
2025-04-19 08:17:43.553 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:17:43.556 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 994
2025-04-19 08:17:43.559 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.559 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:17:43.559 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:17:43.560 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (995, '2021-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.560 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (143,1,9,false),(143,2,25,false),(143,3,34,false),(143,4,44,false),(143,5,45,false),(143,6,8,true)
	        
2025-04-19 08:17:43.561 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:17:43.564 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 995
2025-04-19 08:17:43.566 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.567 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:17:43.567 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:17:43.567 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (996, '2021-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.568 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (144,1,8,false),(144,2,30,false),(144,3,48,false),(144,4,57,false),(144,5,64,false),(144,6,9,true)
	        
2025-04-19 08:17:43.568 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:17:43.572 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 996
2025-04-19 08:17:43.574 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.575 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:17:43.575 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:17:43.575 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (997, '2021-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.576 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (145,1,21,false),(145,2,46,false),(145,3,47,false),(145,4,57,false),(145,5,62,false),(145,6,8,true)
	        
2025-04-19 08:17:43.576 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:17:43.579 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 997
2025-04-19 08:17:43.581 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.582 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:17:43.582 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:17:43.582 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (998, '2021-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.582 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (146,1,8,false),(146,2,15,false),(146,3,26,false),(146,4,35,false),(146,5,45,false),(146,6,9,true)
	        
2025-04-19 08:17:43.583 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:17:43.585 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 998
2025-04-19 08:17:43.587 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.588 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:17:43.588 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:17:43.589 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (999, '2021-11-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.589 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (147,1,3,false),(147,2,16,false),(147,3,48,false),(147,4,52,false),(147,5,60,false),(147,6,1,true)
	        
2025-04-19 08:17:43.590 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:17:43.593 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 999
2025-04-19 08:17:43.595 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.595 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:17:43.596 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:17:43.596 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1000, '2021-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.596 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (148,1,8,false),(148,2,32,false),(148,3,55,false),(148,4,64,false),(148,5,66,false),(148,6,10,true)
	        
2025-04-19 08:17:43.597 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:17:43.599 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1000
2025-04-19 08:17:43.601 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.602 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:17:43.602 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:17:43.602 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1001, '2021-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.602 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (149,1,10,false),(149,2,40,false),(149,3,45,false),(149,4,56,false),(149,5,67,false),(149,6,2,true)
	        
2025-04-19 08:17:43.603 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:17:43.607 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1001
2025-04-19 08:17:43.609 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.609 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:17:43.610 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:17:43.610 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1002, '2021-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.610 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (150,1,3,false),(150,2,21,false),(150,3,38,false),(150,4,50,false),(150,5,59,false),(150,6,6,true)
	        
2025-04-19 08:17:43.611 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:17:43.613 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1002
2025-04-19 08:17:43.615 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.616 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:17:43.616 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:17:43.616 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1003, '2021-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.617 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (151,1,3,false),(151,2,25,false),(151,3,44,false),(151,4,53,false),(151,5,64,false),(151,6,10,true)
	        
2025-04-19 08:17:43.617 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:17:43.620 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1003
2025-04-19 08:17:43.622 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.623 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:17:43.623 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:17:43.623 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1004, '2021-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.624 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (152,1,10,false),(152,2,30,false),(152,3,37,false),(152,4,53,false),(152,5,59,false),(152,6,4,true)
	        
2025-04-19 08:17:43.624 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:17:43.627 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1004
2025-04-19 08:17:43.629 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.629 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:17:43.630 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:17:43.630 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1005, '2021-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.631 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (153,1,2,false),(153,2,6,false),(153,3,24,false),(153,4,51,false),(153,5,61,false),(153,6,1,true)
	        
2025-04-19 08:17:43.631 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:17:43.634 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1005
2025-04-19 08:17:43.636 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.636 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:17:43.637 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:17:43.637 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1006, '2021-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.637 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (154,1,2,false),(154,2,13,false),(154,3,23,false),(154,4,34,false),(154,5,66,false),(154,6,2,true)
	        
2025-04-19 08:17:43.638 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:17:43.641 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1006
2025-04-19 08:17:43.643 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.643 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:17:43.643 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:17:43.644 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1007, '2021-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.644 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (155,1,27,false),(155,2,29,false),(155,3,45,false),(155,4,55,false),(155,5,58,false),(155,6,2,true)
	        
2025-04-19 08:17:43.644 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:17:43.647 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1007
2025-04-19 08:17:43.649 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.649 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:17:43.649 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:17:43.650 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1008, '2021-12-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.650 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (156,1,2,false),(156,2,6,false),(156,3,9,false),(156,4,33,false),(156,5,39,false),(156,6,11,true)
	        
2025-04-19 08:17:43.651 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:17:43.654 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1008
2025-04-19 08:17:43.657 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.657 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:17:43.658 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:17:43.658 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1009, '2022-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.658 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (157,1,6,false),(157,2,12,false),(157,3,39,false),(157,4,48,false),(157,5,50,false),(157,6,7,true)
	        
2025-04-19 08:17:43.659 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:17:43.662 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1009
2025-04-19 08:17:43.664 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.664 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:17:43.664 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:17:43.665 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1010, '2022-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.665 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (158,1,14,false),(158,2,17,false),(158,3,18,false),(158,4,21,false),(158,5,27,false),(158,6,9,true)
	        
2025-04-19 08:17:43.665 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:17:43.668 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1010
2025-04-19 08:17:43.670 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.671 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:17:43.671 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:17:43.671 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1011, '2022-01-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.672 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (159,1,11,false),(159,2,15,false),(159,3,43,false),(159,4,55,false),(159,5,61,false),(159,6,10,true)
	        
2025-04-19 08:17:43.672 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:17:43.676 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1011
2025-04-19 08:17:43.678 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.678 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:17:43.678 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:17:43.679 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1012, '2022-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.679 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (160,1,2,false),(160,2,15,false),(160,3,38,false),(160,4,54,false),(160,5,65,false),(160,6,11,true)
	        
2025-04-19 08:17:43.680 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:17:43.682 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1012
2025-04-19 08:17:43.684 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.685 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:17:43.685 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:17:43.685 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1013, '2022-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.686 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (161,1,5,false),(161,2,15,false),(161,3,38,false),(161,4,47,false),(161,5,65,false),(161,6,10,true)
	        
2025-04-19 08:17:43.686 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:17:43.689 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1013
2025-04-19 08:17:43.691 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.692 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:17:43.692 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:17:43.692 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1014, '2022-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.693 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (162,1,8,false),(162,2,10,false),(162,3,21,false),(162,4,41,false),(162,5,62,false),(162,6,7,true)
	        
2025-04-19 08:17:43.693 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:17:43.696 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1014
2025-04-19 08:17:43.698 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.698 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:17:43.698 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:17:43.698 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1015, '2022-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.699 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (163,1,3,false),(163,2,10,false),(163,3,15,false),(163,4,33,false),(163,5,42,false),(163,6,11,true)
	        
2025-04-19 08:17:43.699 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:17:43.702 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1015
2025-04-19 08:17:43.704 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.704 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:17:43.704 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:17:43.705 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1016, '2022-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.705 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (164,1,2,false),(164,2,36,false),(164,3,37,false),(164,4,45,false),(164,5,69,false),(164,6,3,true)
	        
2025-04-19 08:17:43.706 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:17:43.708 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1016
2025-04-19 08:17:43.710 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.711 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:17:43.711 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:17:43.711 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1017, '2022-03-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.712 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (165,1,10,false),(165,2,43,false),(165,3,55,false),(165,4,59,false),(165,5,67,false),(165,6,2,true)
	        
2025-04-19 08:17:43.712 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:17:43.715 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1017
2025-04-19 08:17:43.717 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.717 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:17:43.717 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:17:43.717 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1018, '2022-03-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.718 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (166,1,13,false),(166,2,22,false),(166,3,34,false),(166,4,51,false),(166,5,67,false),(166,6,10,true)
	        
2025-04-19 08:17:43.718 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:17:43.721 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1018
2025-04-19 08:17:43.724 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.725 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:17:43.725 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:17:43.725 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1019, '2022-03-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.726 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (167,1,19,false),(167,2,20,false),(167,3,37,false),(167,4,39,false),(167,5,61,false),(167,6,8,true)
	        
2025-04-19 08:17:43.726 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:17:43.729 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1019
2025-04-19 08:17:43.731 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.731 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:17:43.732 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:17:43.732 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1020, '2022-03-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.732 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (168,1,21,false),(168,2,28,false),(168,3,32,false),(168,4,44,false),(168,5,49,false),(168,6,6,true)
	        
2025-04-19 08:17:43.733 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:17:43.735 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1020
2025-04-19 08:17:43.737 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.737 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:17:43.738 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:17:43.738 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1021, '2022-03-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.739 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (169,1,8,false),(169,2,9,false),(169,3,18,false),(169,4,48,false),(169,5,52,false),(169,6,6,true)
	        
2025-04-19 08:17:43.739 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:17:43.742 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1021
2025-04-19 08:17:43.744 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.744 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:17:43.744 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:17:43.745 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1022, '2022-03-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.745 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (170,1,2,false),(170,2,10,false),(170,3,50,false),(170,4,59,false),(170,5,61,false),(170,6,6,true)
	        
2025-04-19 08:17:43.745 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:17:43.748 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1022
2025-04-19 08:17:43.750 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.750 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:17:43.751 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:17:43.751 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1023, '2022-03-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.751 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (171,1,11,false),(171,2,18,false),(171,3,39,false),(171,4,58,false),(171,5,62,false),(171,6,3,true)
	        
2025-04-19 08:17:43.752 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:17:43.755 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1023
2025-04-19 08:17:43.757 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.758 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:17:43.758 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:17:43.758 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1024, '2022-03-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.758 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (172,1,3,false),(172,2,7,false),(172,3,21,false),(172,4,31,false),(172,5,37,false),(172,6,11,true)
	        
2025-04-19 08:17:43.759 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:17:43.761 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1024
2025-04-19 08:17:43.763 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.764 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:17:43.764 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:17:43.764 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1025, '2022-04-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.765 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (173,1,2,false),(173,2,32,false),(173,3,39,false),(173,4,46,false),(173,5,69,false),(173,6,6,true)
	        
2025-04-19 08:17:43.765 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:17:43.768 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1025
2025-04-19 08:17:43.770 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.771 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:17:43.771 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:17:43.772 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1026, '2022-04-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.772 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (174,1,5,false),(174,2,7,false),(174,3,24,false),(174,4,31,false),(174,5,34,false),(174,6,4,true)
	        
2025-04-19 08:17:43.773 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:17:43.775 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1026
2025-04-19 08:17:43.777 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.778 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:17:43.778 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:17:43.778 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1027, '2022-04-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.778 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (175,1,10,false),(175,2,39,false),(175,3,47,false),(175,4,49,false),(175,5,56,false),(175,6,8,true)
	        
2025-04-19 08:17:43.779 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:17:43.782 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1027
2025-04-19 08:17:43.784 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.784 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:17:43.784 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:17:43.785 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1028, '2022-04-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.785 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (176,1,12,false),(176,2,18,false),(176,3,20,false),(176,4,39,false),(176,5,61,false),(176,6,10,true)
	        
2025-04-19 08:17:43.785 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:17:43.790 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1028
2025-04-19 08:17:43.792 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.792 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:17:43.793 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:17:43.793 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1029, '2022-04-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.793 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (177,1,11,false),(177,2,36,false),(177,3,61,false),(177,4,62,false),(177,5,68,false),(177,6,4,true)
	        
2025-04-19 08:17:43.794 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:17:43.796 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1029
2025-04-19 08:17:43.799 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.799 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:17:43.800 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:17:43.800 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1030, '2022-04-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.800 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (178,1,14,false),(178,2,21,false),(178,3,37,false),(178,4,44,false),(178,5,63,false),(178,6,1,true)
	        
2025-04-19 08:17:43.801 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:17:43.804 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1030
2025-04-19 08:17:43.807 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.807 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:17:43.807 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:17:43.808 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1031, '2022-05-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.808 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (179,1,18,false),(179,2,27,false),(179,3,33,false),(179,4,39,false),(179,5,44,false),(179,6,8,true)
	        
2025-04-19 08:17:43.808 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:17:43.811 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1031
2025-04-19 08:17:43.813 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.813 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:17:43.814 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:17:43.814 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1032, '2022-05-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.814 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (180,1,4,false),(180,2,5,false),(180,3,6,false),(180,4,28,false),(180,5,67,false),(180,6,10,true)
	        
2025-04-19 08:17:43.815 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:17:43.817 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1032
2025-04-19 08:17:43.819 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.819 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:17:43.820 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:17:43.820 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1033, '2022-05-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.820 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (181,1,18,false),(181,2,30,false),(181,3,35,false),(181,4,52,false),(181,5,56,false),(181,6,5,true)
	        
2025-04-19 08:17:43.821 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:17:43.824 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1033
2025-04-19 08:17:43.826 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.827 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:17:43.827 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:17:43.827 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1034, '2022-05-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.828 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (182,1,6,false),(182,2,40,false),(182,3,41,false),(182,4,45,false),(182,5,52,false),(182,6,9,true)
	        
2025-04-19 08:17:43.828 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:17:43.831 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1034
2025-04-19 08:17:43.833 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.834 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:17:43.834 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:17:43.834 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1035, '2022-05-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.835 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (183,1,14,false),(183,2,15,false),(183,3,25,false),(183,4,52,false),(183,5,58,false),(183,6,11,true)
	        
2025-04-19 08:17:43.835 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:17:43.839 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1035
2025-04-19 08:17:43.841 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.842 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:17:43.842 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:17:43.842 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1036, '2022-06-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.843 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (184,1,11,false),(184,2,41,false),(184,3,56,false),(184,4,57,false),(184,5,63,false),(184,6,2,true)
	        
2025-04-19 08:17:43.843 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:17:43.846 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1036
2025-04-19 08:17:43.848 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.849 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:17:43.849 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:17:43.849 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1037, '2022-06-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.850 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (185,1,2,false),(185,2,10,false),(185,3,35,false),(185,4,44,false),(185,5,46,false),(185,6,4,true)
	        
2025-04-19 08:17:43.850 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:17:43.853 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1037
2025-04-19 08:17:43.856 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.857 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:17:43.857 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:17:43.857 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1038, '2022-06-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.858 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (186,1,22,false),(186,2,39,false),(186,3,43,false),(186,4,62,false),(186,5,64,false),(186,6,7,true)
	        
2025-04-19 08:17:43.858 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:17:43.861 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1038
2025-04-19 08:17:43.865 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.865 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:17:43.866 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:17:43.866 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1039, '2022-06-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.867 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (187,1,18,false),(187,2,20,false),(187,3,26,false),(187,4,53,false),(187,5,69,false),(187,6,5,true)
	        
2025-04-19 08:17:43.867 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:17:43.871 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1039
2025-04-19 08:17:43.874 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.874 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:17:43.875 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:17:43.875 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1040, '2022-06-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.875 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (188,1,19,false),(188,2,28,false),(188,3,41,false),(188,4,42,false),(188,5,51,false),(188,6,7,true)
	        
2025-04-19 08:17:43.876 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:17:43.878 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1040
2025-04-19 08:17:43.880 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.880 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:17:43.881 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:17:43.881 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1041, '2022-06-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.882 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (189,1,6,false),(189,2,12,false),(189,3,20,false),(189,4,27,false),(189,5,32,false),(189,6,4,true)
	        
2025-04-19 08:17:43.883 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:17:43.886 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1041
2025-04-19 08:17:43.891 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.892 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:17:43.893 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:17:43.893 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1042, '2022-07-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.895 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (190,1,15,false),(190,2,16,false),(190,3,24,false),(190,4,31,false),(190,5,56,false),(190,6,4,true)
	        
2025-04-19 08:17:43.898 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:17:43.901 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1042
2025-04-19 08:17:43.904 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.905 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:17:43.905 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:17:43.906 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1043, '2022-07-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.906 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (191,1,4,false),(191,2,26,false),(191,3,34,false),(191,4,37,false),(191,5,52,false),(191,6,9,true)
	        
2025-04-19 08:17:43.907 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:17:43.909 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1043
2025-04-19 08:17:43.911 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.912 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:17:43.912 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:17:43.912 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1044, '2022-07-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.912 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (192,1,22,false),(192,2,23,false),(192,3,36,false),(192,4,47,false),(192,5,63,false),(192,6,2,true)
	        
2025-04-19 08:17:43.913 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:17:43.916 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1044
2025-04-19 08:17:43.918 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.918 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:17:43.918 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:17:43.918 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1045, '2022-07-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.919 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (193,1,14,false),(193,2,34,false),(193,3,36,false),(193,4,50,false),(193,5,58,false),(193,6,5,true)
	        
2025-04-19 08:17:43.919 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:17:43.923 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1045
2025-04-19 08:17:43.925 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.925 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:17:43.926 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:17:43.926 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1046, '2022-07-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.926 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (194,1,25,false),(194,2,37,false),(194,3,38,false),(194,4,39,false),(194,5,65,false),(194,6,5,true)
	        
2025-04-19 08:17:43.927 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:17:43.929 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1046
2025-04-19 08:17:43.931 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.932 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:17:43.932 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:17:43.932 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1047, '2022-08-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.933 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (195,1,9,false),(195,2,21,false),(195,3,56,false),(195,4,57,false),(195,5,66,false),(195,6,11,true)
	        
2025-04-19 08:17:43.933 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:17:43.936 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1047
2025-04-19 08:17:43.938 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.938 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:17:43.939 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:17:43.939 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1048, '2022-08-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.940 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (196,1,8,false),(196,2,15,false),(196,3,46,false),(196,4,56,false),(196,5,68,false),(196,6,3,true)
	        
2025-04-19 08:17:43.940 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:17:43.943 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1048
2025-04-19 08:17:43.944 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.945 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:17:43.945 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:17:43.945 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1049, '2022-08-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.945 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (197,1,19,false),(197,2,24,false),(197,3,35,false),(197,4,43,false),(197,5,62,false),(197,6,2,true)
	        
2025-04-19 08:17:43.946 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:17:43.948 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1049
2025-04-19 08:17:43.950 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.951 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:17:43.951 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:17:43.951 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1050, '2022-08-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.951 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (198,1,20,false),(198,2,24,false),(198,3,47,false),(198,4,50,false),(198,5,63,false),(198,6,5,true)
	        
2025-04-19 08:17:43.952 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:17:43.955 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1050
2025-04-19 08:17:43.957 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.958 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:17:43.958 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:17:43.958 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1051, '2022-08-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.959 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (199,1,5,false),(199,2,9,false),(199,3,11,false),(199,4,16,false),(199,5,66,false),(199,6,7,true)
	        
2025-04-19 08:17:43.959 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:17:43.961 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1051
2025-04-19 08:17:43.963 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.964 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:17:43.964 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:17:43.964 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1052, '2022-08-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.965 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (200,1,12,false),(200,2,27,false),(200,3,34,false),(200,4,55,false),(200,5,67,false),(200,6,9,true)
	        
2025-04-19 08:17:43.965 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:17:43.967 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1052
2025-04-19 08:17:43.969 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.970 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:17:43.970 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:17:43.970 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1053, '2022-08-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.971 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (201,1,7,false),(201,2,8,false),(201,3,19,false),(201,4,24,false),(201,5,28,false),(201,6,1,true)
	        
2025-04-19 08:17:43.971 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:17:43.974 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1053
2025-04-19 08:17:43.976 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.976 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:17:43.977 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:17:43.977 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1054, '2022-09-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.977 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (202,1,18,false),(202,2,27,false),(202,3,49,false),(202,4,65,false),(202,5,69,false),(202,6,9,true)
	        
2025-04-19 08:17:43.978 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:17:43.980 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1054
2025-04-19 08:17:43.982 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.983 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:17:43.983 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:17:43.983 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1055, '2022-09-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.984 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (203,1,38,false),(203,2,42,false),(203,3,56,false),(203,4,68,false),(203,5,69,false),(203,6,4,true)
	        
2025-04-19 08:17:43.984 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:17:43.987 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1055
2025-04-19 08:17:43.990 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.991 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:17:43.991 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:17:43.991 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1056, '2022-09-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.991 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (204,1,5,false),(204,2,25,false),(204,3,36,false),(204,4,51,false),(204,5,61,false),(204,6,1,true)
	        
2025-04-19 08:17:43.992 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:17:43.995 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1056
2025-04-19 08:17:43.997 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:43.997 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:17:43.998 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:17:43.998 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1057, '2022-09-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:43.998 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (205,1,7,false),(205,2,15,false),(205,3,36,false),(205,4,46,false),(205,5,67,false),(205,6,7,true)
	        
2025-04-19 08:17:43.999 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:17:44.001 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1057
2025-04-19 08:17:44.003 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.003 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:17:44.004 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:17:44.004 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1058, '2022-09-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.005 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (206,1,6,false),(206,2,33,false),(206,3,34,false),(206,4,45,false),(206,5,54,false),(206,6,7,true)
	        
2025-04-19 08:17:44.005 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:17:44.008 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1058
2025-04-19 08:17:44.010 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.010 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:17:44.011 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:17:44.011 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1059, '2022-09-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.011 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (207,1,6,false),(207,2,10,false),(207,3,24,false),(207,4,33,false),(207,5,67,false),(207,6,11,true)
	        
2025-04-19 08:17:44.012 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:17:44.014 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1059
2025-04-19 08:17:44.016 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.017 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:17:44.017 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:17:44.017 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1060, '2022-10-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.018 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (208,1,26,false),(208,2,30,false),(208,3,33,false),(208,4,37,false),(208,5,62,false),(208,6,6,true)
	        
2025-04-19 08:17:44.018 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:17:44.021 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1060
2025-04-19 08:17:44.024 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.024 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:17:44.024 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:17:44.024 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1061, '2022-10-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.025 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (209,1,13,false),(209,2,43,false),(209,3,53,false),(209,4,60,false),(209,5,68,false),(209,6,5,true)
	        
2025-04-19 08:17:44.025 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:17:44.028 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1061
2025-04-19 08:17:44.030 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.030 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:17:44.030 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:17:44.030 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1062, '2022-10-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.031 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (210,1,3,false),(210,2,6,false),(210,3,11,false),(210,4,17,false),(210,5,22,false),(210,6,11,true)
	        
2025-04-19 08:17:44.031 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:17:44.034 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1062
2025-04-19 08:17:44.036 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.036 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:17:44.037 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:17:44.037 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1063, '2022-10-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.037 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (211,1,14,false),(211,2,30,false),(211,3,41,false),(211,4,42,false),(211,5,59,false),(211,6,6,true)
	        
2025-04-19 08:17:44.038 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:17:44.041 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1063
2025-04-19 08:17:44.043 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.044 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:17:44.044 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:17:44.044 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1064, '2022-10-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.044 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (212,1,6,false),(212,2,8,false),(212,3,15,false),(212,4,27,false),(212,5,42,false),(212,6,10,true)
	        
2025-04-19 08:17:44.045 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:17:44.047 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1064
2025-04-19 08:17:44.050 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.050 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:17:44.050 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:17:44.051 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1065, '2022-11-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.051 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (213,1,10,false),(213,2,33,false),(213,3,41,false),(213,4,47,false),(213,5,56,false),(213,6,10,true)
	        
2025-04-19 08:17:44.052 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:17:44.055 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1065
2025-04-19 08:17:44.057 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.058 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:17:44.058 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:17:44.058 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1066, '2022-11-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.059 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (214,1,7,false),(214,2,14,false),(214,3,24,false),(214,4,30,false),(214,5,56,false),(214,6,7,true)
	        
2025-04-19 08:17:44.059 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:17:44.062 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1066
2025-04-19 08:17:44.064 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.065 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:17:44.065 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:17:44.065 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1067, '2022-11-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.066 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (215,1,16,false),(215,2,20,false),(215,3,44,false),(215,4,57,false),(215,5,58,false),(215,6,6,true)
	        
2025-04-19 08:17:44.066 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:17:44.069 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1067
2025-04-19 08:17:44.073 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.073 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:17:44.074 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:17:44.074 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1068, '2022-11-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.074 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (216,1,28,false),(216,2,34,false),(216,3,51,false),(216,4,53,false),(216,5,56,false),(216,6,11,true)
	        
2025-04-19 08:17:44.075 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:17:44.077 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1068
2025-04-19 08:17:44.079 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.080 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:17:44.080 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:17:44.080 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1069, '2022-11-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.081 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (217,1,7,false),(217,2,28,false),(217,3,62,false),(217,4,63,false),(217,5,64,false),(217,6,10,true)
	        
2025-04-19 08:17:44.081 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:17:44.084 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1069
2025-04-19 08:17:44.086 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.086 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:17:44.087 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:17:44.087 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1070, '2022-11-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.087 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (218,1,1,false),(218,2,6,false),(218,3,40,false),(218,4,51,false),(218,5,67,false),(218,6,2,true)
	        
2025-04-19 08:17:44.088 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:17:44.091 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1070
2025-04-19 08:17:44.093 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.093 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:17:44.094 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:17:44.094 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1071, '2023-11-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.094 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (219,1,1,false),(219,2,2,false),(219,3,31,false),(219,4,39,false),(219,5,66,false),(219,6,25,true)
	        
2025-04-19 08:17:44.095 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:17:44.098 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1071
2025-04-19 08:17:44.100 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.101 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:17:44.101 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:17:44.101 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1072, '2022-11-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.102 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (220,1,15,false),(220,2,30,false),(220,3,47,false),(220,4,50,false),(220,5,51,false),(220,6,3,true)
	        
2025-04-19 08:17:44.102 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:17:44.106 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1072
2025-04-19 08:17:44.108 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.108 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:17:44.109 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:17:44.109 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1073, '2022-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.109 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (221,1,29,false),(221,2,30,false),(221,3,32,false),(221,4,48,false),(221,5,50,false),(221,6,20,true)
	        
2025-04-19 08:17:44.110 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:17:44.119 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1073
2025-04-19 08:17:44.123 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.124 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:17:44.124 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:17:44.124 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1074, '2022-11-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.124 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (222,1,4,false),(222,2,19,false),(222,3,24,false),(222,4,47,false),(222,5,66,false),(222,6,10,true)
	        
2025-04-19 08:17:44.125 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:17:44.128 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1074
2025-04-19 08:17:44.130 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.131 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:17:44.131 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:17:44.131 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1075, '2022-12-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.131 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (223,1,6,false),(223,2,13,false),(223,3,33,false),(223,4,36,false),(223,5,37,false),(223,6,7,true)
	        
2025-04-19 08:17:44.132 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:17:44.135 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1075
2025-04-19 08:17:44.137 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.137 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:17:44.137 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:17:44.137 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1076, '2022-12-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.138 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (224,1,35,false),(224,2,45,false),(224,3,47,false),(224,4,54,false),(224,5,55,false),(224,6,14,true)
	        
2025-04-19 08:17:44.139 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:17:44.142 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1076
2025-04-19 08:17:44.143 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.144 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:17:44.144 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:17:44.144 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1077, '2022-12-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.145 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (225,1,6,false),(225,2,28,false),(225,3,44,false),(225,4,59,false),(225,5,61,false),(225,6,21,true)
	        
2025-04-19 08:17:44.145 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:17:44.148 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1077
2025-04-19 08:17:44.150 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.151 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:17:44.151 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:17:44.151 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1078, '2022-12-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.152 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (226,1,9,false),(226,2,23,false),(226,3,47,false),(226,4,59,false),(226,5,61,false),(226,6,21,true)
	        
2025-04-19 08:17:44.152 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:17:44.155 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1078
2025-04-19 08:17:44.158 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.158 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:17:44.158 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:17:44.158 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1079, '2022-12-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.159 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (227,1,16,false),(227,2,31,false),(227,3,50,false),(227,4,55,false),(227,5,61,false),(227,6,9,true)
	        
2025-04-19 08:17:44.159 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:17:44.162 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1079
2025-04-19 08:17:44.164 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.164 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:17:44.165 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:17:44.165 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1080, '2022-12-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.165 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (228,1,36,false),(228,2,51,false),(228,3,59,false),(228,4,66,false),(228,5,68,false),(228,6,25,true)
	        
2025-04-19 08:17:44.166 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:17:44.168 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1080
2025-04-19 08:17:44.170 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.171 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:17:44.172 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:17:44.172 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1081, '2022-12-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.172 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (229,1,33,false),(229,2,56,false),(229,3,64,false),(229,4,66,false),(229,5,68,false),(229,6,12,true)
	        
2025-04-19 08:17:44.173 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:17:44.176 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1081
2025-04-19 08:17:44.178 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.179 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:17:44.179 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:17:44.179 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1082, '2022-12-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.180 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (230,1,7,false),(230,2,37,false),(230,3,55,false),(230,4,65,false),(230,5,67,false),(230,6,12,true)
	        
2025-04-19 08:17:44.181 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:17:44.184 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1082
2025-04-19 08:17:44.186 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.186 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:17:44.187 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:17:44.187 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1083, '2022-12-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.187 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (231,1,12,false),(231,2,15,false),(231,3,24,false),(231,4,34,false),(231,5,59,false),(231,6,14,true)
	        
2025-04-19 08:17:44.188 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:17:44.191 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1083
2025-04-19 08:17:44.193 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.194 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:17:44.194 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:17:44.194 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1084, '2022-12-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.195 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (232,1,17,false),(232,2,37,false),(232,3,46,false),(232,4,54,false),(232,5,67,false),(232,6,8,true)
	        
2025-04-19 08:17:44.195 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:17:44.198 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1084
2025-04-19 08:17:44.200 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.200 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:17:44.201 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:17:44.201 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1085, '2022-12-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.201 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (233,1,17,false),(233,2,41,false),(233,3,47,false),(233,4,60,false),(233,5,61,false),(233,6,17,true)
	        
2025-04-19 08:17:44.202 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:17:44.207 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1085
2025-04-19 08:17:44.209 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.210 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:17:44.210 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:17:44.210 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1086, '2022-12-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.211 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (234,1,26,false),(234,2,32,false),(234,3,38,false),(234,4,45,false),(234,5,56,false),(234,6,1,true)
	        
2025-04-19 08:17:44.211 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:17:44.214 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1086
2025-04-19 08:17:44.216 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.216 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:17:44.217 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:17:44.217 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1087, '2022-12-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.217 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (235,1,18,false),(235,2,37,false),(235,3,44,false),(235,4,50,false),(235,5,64,false),(235,6,11,true)
	        
2025-04-19 08:17:44.218 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:17:44.221 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1087
2025-04-19 08:17:44.224 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.224 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:17:44.224 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:17:44.225 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1088, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.225 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (236,1,7,false),(236,2,9,false),(236,3,12,false),(236,4,31,false),(236,5,62,false),(236,6,22,true)
	        
2025-04-19 08:17:44.226 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:17:44.229 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1088
2025-04-19 08:17:44.231 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.232 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:17:44.232 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:17:44.232 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1089, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.233 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (237,1,12,false),(237,2,32,false),(237,3,56,false),(237,4,67,false),(237,5,68,false),(237,6,26,true)
	        
2025-04-19 08:17:44.233 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:17:44.236 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1089
2025-04-19 08:17:44.238 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.238 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:17:44.239 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:17:44.239 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1090, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.239 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (238,1,35,false),(238,2,36,false),(238,3,44,false),(238,4,45,false),(238,5,67,false),(238,6,14,true)
	        
2025-04-19 08:17:44.240 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:17:44.243 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1090
2025-04-19 08:17:44.244 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.245 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:17:44.245 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:17:44.245 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1091, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.246 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (239,1,18,false),(239,2,43,false),(239,3,48,false),(239,4,60,false),(239,5,69,false),(239,6,14,true)
	        
2025-04-19 08:17:44.246 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:17:44.249 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1091
2025-04-19 08:17:44.251 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.251 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:17:44.252 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:17:44.252 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1092, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.252 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (240,1,4,false),(240,2,8,false),(240,3,46,false),(240,4,47,false),(240,5,48,false),(240,6,5,true)
	        
2025-04-19 08:17:44.253 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:17:44.256 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1092
2025-04-19 08:17:44.258 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.259 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:17:44.259 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:17:44.259 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1093, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.259 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (241,1,24,false),(241,2,26,false),(241,3,39,false),(241,4,47,false),(241,5,57,false),(241,6,23,true)
	        
2025-04-19 08:17:44.260 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:17:44.262 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1093
2025-04-19 08:17:44.265 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.265 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:17:44.265 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:17:44.265 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1094, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.266 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (242,1,4,false),(242,2,14,false),(242,3,33,false),(242,4,39,false),(242,5,61,false),(242,6,3,true)
	        
2025-04-19 08:17:44.267 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:17:44.270 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1094
2025-04-19 08:17:44.273 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.273 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:17:44.273 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:17:44.274 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1095, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.274 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (243,1,6,false),(243,2,15,false),(243,3,22,false),(243,4,42,false),(243,5,47,false),(243,6,26,true)
	        
2025-04-19 08:17:44.274 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:17:44.279 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1095
2025-04-19 08:17:44.287 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.288 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:17:44.289 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:17:44.290 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1096, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.291 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (244,1,5,false),(244,2,14,false),(244,3,19,false),(244,4,46,false),(244,5,64,false),(244,6,22,true)
	        
2025-04-19 08:17:44.292 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:17:44.297 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1096
2025-04-19 08:17:44.300 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.301 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:17:44.301 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:17:44.301 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1097, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.302 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (245,1,12,false),(245,2,31,false),(245,3,47,false),(245,4,58,false),(245,5,60,false),(245,6,23,true)
	        
2025-04-19 08:17:44.302 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:17:44.306 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1097
2025-04-19 08:17:44.309 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.309 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:17:44.309 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:17:44.310 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1098, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.310 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (246,1,9,false),(246,2,17,false),(246,3,20,false),(246,4,38,false),(246,5,40,false),(246,6,18,true)
	        
2025-04-19 08:17:44.311 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:17:44.315 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1098
2025-04-19 08:17:44.318 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.319 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:17:44.319 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:17:44.319 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1099, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.320 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (247,1,2,false),(247,2,18,false),(247,3,23,false),(247,4,27,false),(247,5,47,false),(247,6,15,true)
	        
2025-04-19 08:17:44.321 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:17:44.325 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1099
2025-04-19 08:17:44.327 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.328 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:17:44.328 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:17:44.328 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1100, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.329 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (248,1,1,false),(248,2,4,false),(248,3,12,false),(248,4,36,false),(248,5,49,false),(248,6,5,true)
	        
2025-04-19 08:17:44.329 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:17:44.333 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1100
2025-04-19 08:17:44.335 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.335 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:17:44.335 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:17:44.335 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1101, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.336 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (249,1,31,false),(249,2,43,false),(249,3,58,false),(249,4,59,false),(249,5,66,false),(249,6,9,true)
	        
2025-04-19 08:17:44.336 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:17:44.340 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1101
2025-04-19 08:17:44.342 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.342 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:17:44.343 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:17:44.343 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1102, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.343 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (250,1,2,false),(250,2,8,false),(250,3,15,false),(250,4,19,false),(250,5,58,false),(250,6,10,true)
	        
2025-04-19 08:17:44.344 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:17:44.346 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1102
2025-04-19 08:17:44.348 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.348 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:17:44.349 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:17:44.349 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1103, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.349 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (251,1,5,false),(251,2,11,false),(251,3,22,false),(251,4,23,false),(251,5,69,false),(251,6,7,true)
	        
2025-04-19 08:17:44.350 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:17:44.353 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1103
2025-04-19 08:17:44.356 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.356 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:17:44.357 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:17:44.357 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1104, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.357 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (252,1,52,false),(252,2,58,false),(252,3,59,false),(252,4,64,false),(252,5,66,false),(252,6,9,true)
	        
2025-04-19 08:17:44.358 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:17:44.361 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1104
2025-04-19 08:17:44.363 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.363 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:17:44.364 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:17:44.364 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1105, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.365 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (253,1,10,false),(253,2,23,false),(253,3,30,false),(253,4,54,false),(253,5,65,false),(253,6,11,true)
	        
2025-04-19 08:17:44.365 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:17:44.368 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1105
2025-04-19 08:17:44.370 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.370 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:17:44.371 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:17:44.371 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1106, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.371 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (254,1,17,false),(254,2,26,false),(254,3,37,false),(254,4,61,false),(254,5,65,false),(254,6,2,true)
	        
2025-04-19 08:17:44.372 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:17:44.375 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1106
2025-04-19 08:17:44.377 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.377 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:17:44.378 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:17:44.378 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1107, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.378 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (255,1,31,false),(255,2,32,false),(255,3,54,false),(255,4,60,false),(255,5,63,false),(255,6,12,true)
	        
2025-04-19 08:17:44.379 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:17:44.382 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1107
2025-04-19 08:17:44.384 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.384 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:17:44.384 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:17:44.384 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1108, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.385 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (256,1,8,false),(256,2,21,false),(256,3,31,false),(256,4,32,false),(256,5,37,false),(256,6,23,true)
	        
2025-04-19 08:17:44.385 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:17:44.389 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1108
2025-04-19 08:17:44.391 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.392 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:17:44.392 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:17:44.392 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1109, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.393 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (257,1,3,false),(257,2,17,false),(257,3,26,false),(257,4,38,false),(257,5,54,false),(257,6,15,true)
	        
2025-04-19 08:17:44.393 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:17:44.396 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1109
2025-04-19 08:17:44.398 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.399 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:17:44.399 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:17:44.399 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1110, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.400 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (258,1,11,false),(258,2,18,false),(258,3,39,false),(258,4,44,false),(258,5,65,false),(258,6,7,true)
	        
2025-04-19 08:17:44.401 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:17:44.405 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1110
2025-04-19 08:17:44.408 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.408 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:17:44.409 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:17:44.409 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1111, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.409 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (259,1,11,false),(259,2,24,false),(259,3,58,false),(259,4,66,false),(259,5,67,false),(259,6,26,true)
	        
2025-04-19 08:17:44.410 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:17:44.413 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1111
2025-04-19 08:17:44.415 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.415 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:17:44.416 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:17:44.416 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1112, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.416 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (260,1,16,false),(260,2,28,false),(260,3,49,false),(260,4,51,false),(260,5,55,false),(260,6,23,true)
	        
2025-04-19 08:17:44.417 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:17:44.419 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1112
2025-04-19 08:17:44.423 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.423 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:17:44.423 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:17:44.423 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1113, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.424 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (261,1,2,false),(261,2,9,false),(261,3,28,false),(261,4,36,false),(261,5,53,false),(261,6,4,true)
	        
2025-04-19 08:17:44.424 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:17:44.428 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1113
2025-04-19 08:17:44.429 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.430 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:17:44.430 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:17:44.430 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1114, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.431 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (262,1,10,false),(262,2,16,false),(262,3,18,false),(262,4,40,false),(262,5,66,false),(262,6,16,true)
	        
2025-04-19 08:17:44.431 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:17:44.433 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1114
2025-04-19 08:17:44.435 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.436 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:17:44.436 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:17:44.436 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1115, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.436 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (263,1,2,false),(263,2,13,false),(263,3,29,false),(263,4,58,false),(263,5,69,false),(263,6,4,true)
	        
2025-04-19 08:17:44.437 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:17:44.440 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1115
2025-04-19 08:17:44.442 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.443 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:17:44.443 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:17:44.443 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1116, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.443 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (264,1,26,false),(264,2,27,false),(264,3,43,false),(264,4,61,false),(264,5,69,false),(264,6,4,true)
	        
2025-04-19 08:17:44.444 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:17:44.447 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1116
2025-04-19 08:17:44.449 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.450 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:17:44.450 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:17:44.450 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1117, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.450 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (265,1,11,false),(265,2,20,false),(265,3,33,false),(265,4,43,false),(265,5,58,false),(265,6,24,true)
	        
2025-04-19 08:17:44.451 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:17:44.453 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1117
2025-04-19 08:17:44.456 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.456 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:17:44.457 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:17:44.457 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1118, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.457 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (266,1,3,false),(266,2,10,false),(266,3,24,false),(266,4,46,false),(266,5,63,false),(266,6,4,true)
	        
2025-04-19 08:17:44.458 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:17:44.460 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1118
2025-04-19 08:17:44.462 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.462 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:17:44.463 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:17:44.463 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1119, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.463 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (267,1,16,false),(267,2,18,false),(267,3,33,false),(267,4,37,false),(267,5,50,false),(267,6,8,true)
	        
2025-04-19 08:17:44.464 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:17:44.467 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1119
2025-04-19 08:17:44.468 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.469 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:17:44.469 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:17:44.469 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1120, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.470 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (268,1,14,false),(268,2,29,false),(268,3,30,false),(268,4,54,false),(268,5,69,false),(268,6,11,true)
	        
2025-04-19 08:17:44.470 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:17:44.474 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1120
2025-04-19 08:17:44.476 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.476 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:17:44.476 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:17:44.476 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1121, '2023-03-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.477 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (269,1,1,false),(269,2,27,false),(269,3,32,false),(269,4,47,false),(269,5,67,false),(269,6,14,true)
	        
2025-04-19 08:17:44.477 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:17:44.480 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1121
2025-04-19 08:17:44.482 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.482 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:17:44.483 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:17:44.483 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1122, '2023-03-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.483 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (270,1,27,false),(270,2,28,false),(270,3,37,false),(270,4,50,false),(270,5,57,false),(270,6,5,true)
	        
2025-04-19 08:17:44.484 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:17:44.486 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1122
2025-04-19 08:17:44.489 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.490 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:17:44.490 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:17:44.490 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1123, '2023-03-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.491 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (271,1,15,false),(271,2,17,false),(271,3,18,false),(271,4,47,false),(271,5,57,false),(271,6,19,true)
	        
2025-04-19 08:17:44.491 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:17:44.494 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1123
2025-04-19 08:17:44.496 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.497 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:17:44.497 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:17:44.497 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1124, '2023-03-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.498 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (272,1,19,false),(272,2,26,false),(272,3,36,false),(272,4,43,false),(272,5,58,false),(272,6,14,true)
	        
2025-04-19 08:17:44.498 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:17:44.500 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1124
2025-04-19 08:17:44.502 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.503 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:17:44.503 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:17:44.503 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1125, '2023-03-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.504 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (273,1,4,false),(273,2,9,false),(273,3,24,false),(273,4,46,false),(273,5,66,false),(273,6,7,true)
	        
2025-04-19 08:17:44.505 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:17:44.508 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1125
2025-04-19 08:17:44.510 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.510 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:17:44.510 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:17:44.510 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1126, '2023-04-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.511 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (274,1,11,false),(274,2,19,false),(274,3,21,false),(274,4,29,false),(274,5,52,false),(274,6,17,true)
	        
2025-04-19 08:17:44.511 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:17:44.514 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1126
2025-04-19 08:17:44.516 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.517 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:17:44.517 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:17:44.517 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1127, '2023-04-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.518 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (275,1,16,false),(275,2,30,false),(275,3,31,false),(275,4,54,false),(275,5,68,false),(275,6,1,true)
	        
2025-04-19 08:17:44.518 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:17:44.521 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1127
2025-04-19 08:17:44.524 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.524 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:17:44.524 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:17:44.524 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1128, '2023-04-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.525 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (276,1,3,false),(276,2,5,false),(276,3,9,false),(276,4,42,false),(276,5,52,false),(276,6,11,true)
	        
2025-04-19 08:17:44.525 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:17:44.528 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1128
2025-04-19 08:17:44.530 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.530 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:17:44.530 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:17:44.530 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1129, '2023-04-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.531 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (277,1,11,false),(277,2,22,false),(277,3,24,false),(277,4,51,false),(277,5,60,false),(277,6,18,true)
	        
2025-04-19 08:17:44.531 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:17:44.534 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1129
2025-04-19 08:17:44.535 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.536 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:17:44.536 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:17:44.536 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1130, '2023-04-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.537 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (278,1,9,false),(278,2,10,false),(278,3,36,false),(278,4,46,false),(278,5,52,false),(278,6,14,true)
	        
2025-04-19 08:17:44.537 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:17:44.540 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1130
2025-04-19 08:17:44.542 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.543 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:17:44.543 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:17:44.543 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1131, '2023-04-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.544 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (279,1,9,false),(279,2,36,false),(279,3,41,false),(279,4,44,false),(279,5,59,false),(279,6,4,true)
	        
2025-04-19 08:17:44.544 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:17:44.547 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1131
2025-04-19 08:17:44.549 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.549 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:17:44.549 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:17:44.550 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1132, '2023-04-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.550 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (280,1,1,false),(280,2,33,false),(280,3,34,false),(280,4,56,false),(280,5,59,false),(280,6,18,true)
	        
2025-04-19 08:17:44.550 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:17:44.553 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1132
2025-04-19 08:17:44.555 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.556 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:17:44.556 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:17:44.556 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1133, '2023-04-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.557 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (281,1,23,false),(281,2,25,false),(281,3,35,false),(281,4,63,false),(281,5,64,false),(281,6,25,true)
	        
2025-04-19 08:17:44.557 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:17:44.560 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1133
2025-04-19 08:17:44.562 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.562 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:17:44.562 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:17:44.563 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1134, '2023-04-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.563 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (282,1,4,false),(282,2,11,false),(282,3,21,false),(282,4,38,false),(282,5,64,false),(282,6,11,true)
	        
2025-04-19 08:17:44.563 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:17:44.567 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1134
2025-04-19 08:17:44.569 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.569 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:17:44.570 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:17:44.570 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1135, '2023-04-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.571 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (283,1,17,false),(283,2,36,false),(283,3,47,false),(283,4,63,false),(283,5,68,false),(283,6,25,true)
	        
2025-04-19 08:17:44.571 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:17:44.574 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1135
2025-04-19 08:17:44.577 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.577 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:17:44.578 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:17:44.578 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1136, '2023-04-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.578 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (284,1,19,false),(284,2,21,false),(284,3,55,false),(284,4,66,false),(284,5,68,false),(284,6,3,true)
	        
2025-04-19 08:17:44.579 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:17:44.582 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1136
2025-04-19 08:17:44.585 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.585 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:17:44.585 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:17:44.586 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1137, '2023-04-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.586 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (285,1,2,false),(285,2,15,false),(285,3,30,false),(285,4,35,false),(285,5,49,false),(285,6,6,true)
	        
2025-04-19 08:17:44.587 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:17:44.591 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1137
2025-04-19 08:17:44.594 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.594 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:17:44.594 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:17:44.594 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1138, '2023-04-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.595 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (286,1,16,false),(286,2,53,false),(286,3,54,false),(286,4,57,false),(286,5,65,false),(286,6,8,true)
	        
2025-04-19 08:17:44.595 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:17:44.598 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1138
2025-04-19 08:17:44.600 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.601 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:17:44.601 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:17:44.601 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1139, '2023-05-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.602 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (287,1,3,false),(287,2,38,false),(287,3,55,false),(287,4,61,false),(287,5,66,false),(287,6,1,true)
	        
2025-04-19 08:17:44.602 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:17:44.606 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1139
2025-04-19 08:17:44.608 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.609 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:17:44.609 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:17:44.609 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1140, '2023-05-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.610 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (288,1,21,false),(288,2,26,false),(288,3,30,false),(288,4,45,false),(288,5,47,false),(288,6,23,true)
	        
2025-04-19 08:17:44.610 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:17:44.613 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1140
2025-04-19 08:17:44.615 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.616 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:17:44.616 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:17:44.616 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1141, '2023-05-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.617 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (289,1,31,false),(289,2,39,false),(289,3,47,false),(289,4,51,false),(289,5,53,false),(289,6,6,true)
	        
2025-04-19 08:17:44.617 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:17:44.620 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1141
2025-04-19 08:17:44.622 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.623 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:17:44.623 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:17:44.624 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1142, '2023-05-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.624 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (290,1,15,false),(290,2,20,false),(290,3,33,false),(290,4,36,false),(290,5,43,false),(290,6,12,true)
	        
2025-04-19 08:17:44.625 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:17:44.628 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1142
2025-04-19 08:17:44.630 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.631 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:17:44.631 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:17:44.631 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1143, '2023-05-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.632 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (291,1,21,false),(291,2,24,false),(291,3,33,false),(291,4,55,false),(291,5,69,false),(291,6,3,true)
	        
2025-04-19 08:17:44.632 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:17:44.635 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1143
2025-04-19 08:17:44.638 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.638 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:17:44.639 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:17:44.639 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1144, '2023-05-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.639 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (292,1,3,false),(292,2,15,false),(292,3,20,false),(292,4,23,false),(292,5,46,false),(292,6,11,true)
	        
2025-04-19 08:17:44.640 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:17:44.642 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1144
2025-04-19 08:17:44.644 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.644 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:17:44.645 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:17:44.645 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1145, '2023-05-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.645 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (293,1,1,false),(293,2,26,false),(293,3,28,false),(293,4,55,false),(293,5,58,false),(293,6,25,true)
	        
2025-04-19 08:17:44.646 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:17:44.648 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1145
2025-04-19 08:17:44.651 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.651 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:17:44.651 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:17:44.652 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1146, '2023-05-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.652 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (294,1,18,false),(294,2,34,false),(294,3,37,false),(294,4,45,false),(294,5,51,false),(294,6,14,true)
	        
2025-04-19 08:17:44.652 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:17:44.656 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1146
2025-04-19 08:17:44.658 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.659 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:17:44.659 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:17:44.660 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1147, '2023-05-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.660 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (295,1,17,false),(295,2,23,false),(295,3,32,false),(295,4,38,false),(295,5,63,false),(295,6,23,true)
	        
2025-04-19 08:17:44.660 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:17:44.663 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1147
2025-04-19 08:17:44.665 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.665 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:17:44.665 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:17:44.666 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1148, '2023-05-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.666 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (296,1,9,false),(296,2,38,false),(296,3,48,false),(296,4,52,false),(296,5,68,false),(296,6,25,true)
	        
2025-04-19 08:17:44.667 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:17:44.669 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1148
2025-04-19 08:17:44.672 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.673 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:17:44.673 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:17:44.673 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1149, '2023-05-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.674 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (297,1,12,false),(297,2,21,false),(297,3,44,false),(297,4,50,false),(297,5,58,false),(297,6,26,true)
	        
2025-04-19 08:17:44.674 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:17:44.677 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1149
2025-04-19 08:17:44.679 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.679 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:17:44.680 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:17:44.680 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1150, '2023-05-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.680 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (298,1,24,false),(298,2,38,false),(298,3,39,false),(298,4,48,false),(298,5,56,false),(298,6,4,true)
	        
2025-04-19 08:17:44.681 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:17:44.683 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1150
2025-04-19 08:17:44.685 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.686 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:17:44.686 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:17:44.686 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1151, '2023-05-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.686 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (299,1,21,false),(299,2,33,false),(299,3,35,false),(299,4,62,false),(299,5,64,false),(299,6,24,true)
	        
2025-04-19 08:17:44.687 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:17:44.690 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1151
2025-04-19 08:17:44.692 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.692 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:17:44.693 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:17:44.693 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1152, '2023-05-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.693 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (300,1,2,false),(300,2,4,false),(300,3,54,false),(300,4,61,false),(300,5,62,false),(300,6,14,true)
	        
2025-04-19 08:17:44.694 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:17:44.697 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1152
2025-04-19 08:17:44.699 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.699 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:17:44.699 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:17:44.700 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1153, '2023-06-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.700 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (301,1,15,false),(301,2,45,false),(301,3,64,false),(301,4,67,false),(301,5,68,false),(301,6,18,true)
	        
2025-04-19 08:17:44.700 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:17:44.703 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1153
2025-04-19 08:17:44.705 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.706 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:17:44.706 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:17:44.706 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1154, '2023-06-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.707 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (302,1,2,false),(302,2,31,false),(302,3,45,false),(302,4,46,false),(302,5,49,false),(302,6,20,true)
	        
2025-04-19 08:17:44.708 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:17:44.710 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1154
2025-04-19 08:17:44.712 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.713 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:17:44.713 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:17:44.713 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1155, '2023-06-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.713 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (303,1,16,false),(303,2,21,false),(303,3,29,false),(303,4,53,false),(303,5,66,false),(303,6,2,true)
	        
2025-04-19 08:17:44.714 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:17:44.716 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1155
2025-04-19 08:17:44.718 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.719 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:17:44.719 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:17:44.719 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1156, '2023-06-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.720 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (304,1,21,false),(304,2,32,false),(304,3,42,false),(304,4,46,false),(304,5,50,false),(304,6,4,true)
	        
2025-04-19 08:17:44.720 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:17:44.724 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1156
2025-04-19 08:17:44.725 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.726 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:17:44.726 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:17:44.726 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1157, '2023-06-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.727 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (305,1,2,false),(305,2,3,false),(305,3,16,false),(305,4,23,false),(305,5,68,false),(305,6,7,true)
	        
2025-04-19 08:17:44.727 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:17:44.730 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1157
2025-04-19 08:17:44.732 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.732 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:17:44.732 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:17:44.732 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1158, '2023-06-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.733 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (306,1,3,false),(306,2,20,false),(306,3,36,false),(306,4,42,false),(306,5,64,false),(306,6,4,true)
	        
2025-04-19 08:17:44.733 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:17:44.736 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1158
2025-04-19 08:17:44.738 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.738 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:17:44.739 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:17:44.739 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1159, '2023-06-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.739 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (307,1,2,false),(307,2,12,false),(307,3,45,false),(307,4,61,false),(307,5,64,false),(307,6,26,true)
	        
2025-04-19 08:17:44.740 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:17:44.743 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1159
2025-04-19 08:17:44.744 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.745 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:17:44.745 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:17:44.745 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1160, '2023-06-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.746 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (308,1,36,false),(308,2,39,false),(308,3,52,false),(308,4,57,false),(308,5,69,false),(308,6,1,true)
	        
2025-04-19 08:17:44.746 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:17:44.749 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1160
2025-04-19 08:17:44.751 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.751 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:17:44.751 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:17:44.751 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1161, '2023-06-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.752 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (309,1,5,false),(309,2,11,false),(309,3,33,false),(309,4,35,false),(309,5,63,false),(309,6,14,true)
	        
2025-04-19 08:17:44.752 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:17:44.756 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1161
2025-04-19 08:17:44.758 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.759 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:17:44.759 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:17:44.759 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1162, '2023-06-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.759 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (310,1,2,false),(310,2,38,false),(310,3,44,false),(310,4,50,false),(310,5,62,false),(310,6,19,true)
	        
2025-04-19 08:17:44.760 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:17:44.763 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1162
2025-04-19 08:17:44.765 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.766 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:17:44.766 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:17:44.766 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1163, '2023-06-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.767 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (311,1,6,false),(311,2,28,false),(311,3,39,false),(311,4,43,false),(311,5,54,false),(311,6,12,true)
	        
2025-04-19 08:17:44.768 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:17:44.772 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1163
2025-04-19 08:17:44.774 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.775 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:17:44.775 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:17:44.775 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1164, '2023-06-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.775 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (312,1,19,false),(312,2,25,false),(312,3,34,false),(312,4,57,false),(312,5,68,false),(312,6,4,true)
	        
2025-04-19 08:17:44.776 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:17:44.779 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1164
2025-04-19 08:17:44.780 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.781 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:17:44.781 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:17:44.781 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1165, '2023-07-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.782 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (313,1,4,false),(313,2,17,false),(313,3,35,false),(313,4,49,false),(313,5,61,false),(313,6,8,true)
	        
2025-04-19 08:17:44.782 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:17:44.785 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1165
2025-04-19 08:17:44.788 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.789 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:17:44.789 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:17:44.790 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1166, '2023-07-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.790 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (314,1,15,false),(314,2,26,false),(314,3,31,false),(314,4,38,false),(314,5,61,false),(314,6,3,true)
	        
2025-04-19 08:17:44.791 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:17:44.794 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1166
2025-04-19 08:17:44.796 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.796 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:17:44.796 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:17:44.796 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1167, '2023-07-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.797 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (315,1,17,false),(315,2,24,false),(315,3,48,false),(315,4,62,false),(315,5,68,false),(315,6,23,true)
	        
2025-04-19 08:17:44.797 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:17:44.800 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1167
2025-04-19 08:17:44.802 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.802 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:17:44.803 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:17:44.803 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1168, '2023-07-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.803 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (316,1,7,false),(316,2,23,false),(316,3,24,false),(316,4,32,false),(316,5,43,false),(316,6,18,true)
	        
2025-04-19 08:17:44.804 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:17:44.807 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1168
2025-04-19 08:17:44.809 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.809 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:17:44.809 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:17:44.810 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1169, '2023-07-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.810 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (317,1,2,false),(317,2,24,false),(317,3,34,false),(317,4,53,false),(317,5,58,false),(317,6,13,true)
	        
2025-04-19 08:17:44.810 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:17:44.813 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1169
2025-04-19 08:17:44.815 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.816 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:17:44.816 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:17:44.816 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1170, '2023-07-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.816 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (318,1,23,false),(318,2,35,false),(318,3,45,false),(318,4,66,false),(318,5,67,false),(318,6,20,true)
	        
2025-04-19 08:17:44.817 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:17:44.820 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1170
2025-04-19 08:17:44.823 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.823 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:17:44.823 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:17:44.823 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1171, '2023-07-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.824 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (319,1,2,false),(319,2,9,false),(319,3,43,false),(319,4,55,false),(319,5,57,false),(319,6,18,true)
	        
2025-04-19 08:17:44.824 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:17:44.827 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1171
2025-04-19 08:17:44.829 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.829 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:17:44.830 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:17:44.830 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1172, '2023-07-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.830 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (320,1,5,false),(320,2,8,false),(320,3,9,false),(320,4,17,false),(320,5,41,false),(320,6,21,true)
	        
2025-04-19 08:17:44.831 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:17:44.833 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1172
2025-04-19 08:17:44.835 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.836 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:17:44.836 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:17:44.836 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1173, '2023-07-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.836 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (321,1,7,false),(321,2,10,false),(321,3,11,false),(321,4,13,false),(321,5,24,false),(321,6,24,true)
	        
2025-04-19 08:17:44.837 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:17:44.841 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1173
2025-04-19 08:17:44.843 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.844 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:17:44.844 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:17:44.844 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1174, '2023-07-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.845 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (322,1,25,false),(322,2,27,false),(322,3,36,false),(322,4,37,false),(322,5,63,false),(322,6,7,true)
	        
2025-04-19 08:17:44.845 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:17:44.848 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1174
2025-04-19 08:17:44.850 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.850 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:17:44.851 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:17:44.851 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1175, '2023-07-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.851 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (323,1,3,false),(323,2,4,false),(323,3,12,false),(323,4,28,false),(323,5,49,false),(323,6,25,true)
	        
2025-04-19 08:17:44.851 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:17:44.854 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1175
2025-04-19 08:17:44.857 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.857 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:17:44.857 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:17:44.858 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1176, '2023-07-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.858 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (324,1,3,false),(324,2,16,false),(324,3,40,false),(324,4,48,false),(324,5,60,false),(324,6,14,true)
	        
2025-04-19 08:17:44.859 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:17:44.861 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1176
2025-04-19 08:17:44.863 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.863 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:17:44.863 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:17:44.863 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1177, '2023-07-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.864 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (325,1,10,false),(325,2,25,false),(325,3,27,false),(325,4,34,false),(325,5,38,false),(325,6,2,true)
	        
2025-04-19 08:17:44.864 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:17:44.867 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1177
2025-04-19 08:17:44.869 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.869 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:17:44.869 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:17:44.869 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1178, '2023-08-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.870 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (326,1,2,false),(326,2,11,false),(326,3,48,false),(326,4,58,false),(326,5,65,false),(326,6,13,true)
	        
2025-04-19 08:17:44.870 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:17:44.873 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1178
2025-04-19 08:17:44.875 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.875 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:17:44.876 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:17:44.876 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1179, '2023-08-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.876 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (327,1,23,false),(327,2,24,false),(327,3,33,false),(327,4,51,false),(327,5,64,false),(327,6,5,true)
	        
2025-04-19 08:17:44.877 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:17:44.879 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1179
2025-04-19 08:17:44.881 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.882 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:17:44.882 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:17:44.882 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1180, '2023-08-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.882 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (328,1,18,false),(328,2,42,false),(328,3,44,false),(328,4,62,false),(328,5,65,false),(328,6,23,true)
	        
2025-04-19 08:17:44.883 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:17:44.885 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1180
2025-04-19 08:17:44.887 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.888 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:17:44.888 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:17:44.888 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1181, '2023-08-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.889 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (329,1,6,false),(329,2,13,false),(329,3,20,false),(329,4,35,false),(329,5,54,false),(329,6,22,true)
	        
2025-04-19 08:17:44.889 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:17:44.892 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1181
2025-04-19 08:17:44.894 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.894 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:17:44.894 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:17:44.894 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1182, '2023-08-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.895 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (330,1,10,false),(330,2,15,false),(330,3,21,false),(330,4,67,false),(330,5,69,false),(330,6,3,true)
	        
2025-04-19 08:17:44.895 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:17:44.898 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1182
2025-04-19 08:17:44.900 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.901 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:17:44.902 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:17:44.902 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1183, '2023-08-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.902 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (331,1,19,false),(331,2,21,false),(331,3,37,false),(331,4,50,false),(331,5,65,false),(331,6,26,true)
	        
2025-04-19 08:17:44.903 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:17:44.908 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1183
2025-04-19 08:17:44.911 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.911 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:17:44.911 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:17:44.912 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1184, '2023-08-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.912 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (332,1,32,false),(332,2,34,false),(332,3,37,false),(332,4,39,false),(332,5,47,false),(332,6,3,true)
	        
2025-04-19 08:17:44.913 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:17:44.918 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1184
2025-04-19 08:17:44.920 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.920 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:17:44.921 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:17:44.921 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1186, '2023-08-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.922 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (333,1,1,false),(333,2,25,false),(333,3,27,false),(333,4,38,false),(333,5,62,false),(333,6,13,true)
	        
2025-04-19 08:17:44.923 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:17:44.925 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1186
2025-04-19 08:17:44.927 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.928 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:17:44.928 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:17:44.928 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1187, '2023-08-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.929 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (334,1,3,false),(334,2,4,false),(334,3,12,false),(334,4,22,false),(334,5,28,false),(334,6,16,true)
	        
2025-04-19 08:17:44.929 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:17:44.932 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1187
2025-04-19 08:17:44.934 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.934 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:17:44.935 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:17:44.935 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1188, '2023-08-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.935 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (335,1,25,false),(335,2,30,false),(335,3,32,false),(335,4,33,false),(335,5,55,false),(335,6,20,true)
	        
2025-04-19 08:17:44.936 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:17:44.940 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1188
2025-04-19 08:17:44.943 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.943 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:17:44.944 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:17:44.944 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1189, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.944 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (336,1,20,false),(336,2,22,false),(336,3,26,false),(336,4,28,false),(336,5,63,false),(336,6,5,true)
	        
2025-04-19 08:17:44.945 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:17:44.948 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1189
2025-04-19 08:17:44.950 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.950 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:17:44.951 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:17:44.951 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1190, '2023-08-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.951 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (337,1,4,false),(337,2,6,false),(337,3,25,false),(337,4,55,false),(337,5,68,false),(337,6,26,true)
	        
2025-04-19 08:17:44.952 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:17:44.955 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1190
2025-04-19 08:17:44.957 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.957 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:17:44.957 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:17:44.958 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1191, '2023-08-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.958 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (338,1,4,false),(338,2,13,false),(338,3,35,false),(338,4,61,false),(338,5,69,false),(338,6,4,true)
	        
2025-04-19 08:17:44.958 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:17:44.961 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1191
2025-04-19 08:17:44.963 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.963 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:17:44.963 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:17:44.964 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1192, '2023-09-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.964 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (339,1,25,false),(339,2,38,false),(339,3,42,false),(339,4,66,false),(339,5,67,false),(339,6,19,true)
	        
2025-04-19 08:17:44.964 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:17:44.967 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1192
2025-04-19 08:17:44.969 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.969 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:17:44.970 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:17:44.970 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1193, '2023-09-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.971 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (340,1,1,false),(340,2,26,false),(340,3,32,false),(340,4,46,false),(340,5,51,false),(340,6,13,true)
	        
2025-04-19 08:17:44.971 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:17:44.974 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1193
2025-04-19 08:17:44.976 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.977 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:17:44.977 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:17:44.977 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1194, '2023-09-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.978 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (341,1,9,false),(341,2,14,false),(341,3,20,false),(341,4,23,false),(341,5,63,false),(341,6,1,true)
	        
2025-04-19 08:17:44.978 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:17:44.981 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1194
2025-04-19 08:17:44.983 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.983 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:17:44.983 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:17:44.983 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1195, '2023-09-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.984 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (342,1,11,false),(342,2,19,false),(342,3,29,false),(342,4,63,false),(342,5,68,false),(342,6,25,true)
	        
2025-04-19 08:17:44.984 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:17:44.987 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1195
2025-04-19 08:17:44.989 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.990 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:17:44.990 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:17:44.990 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1196, '2023-09-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.991 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (343,1,9,false),(343,2,25,false),(343,3,27,false),(343,4,53,false),(343,5,66,false),(343,6,5,true)
	        
2025-04-19 08:17:44.991 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:17:44.994 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1196
2025-04-19 08:17:44.995 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:44.996 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:17:44.996 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:17:44.996 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1197, '2023-09-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:44.997 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (344,1,22,false),(344,2,30,false),(344,3,37,false),(344,4,44,false),(344,5,45,false),(344,6,18,true)
	        
2025-04-19 08:17:44.997 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:17:45.000 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1197
2025-04-19 08:17:45.002 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.002 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:17:45.002 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:17:45.002 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1198, '2023-09-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.003 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (345,1,8,false),(345,2,11,false),(345,3,19,false),(345,4,24,false),(345,5,46,false),(345,6,5,true)
	        
2025-04-19 08:17:45.003 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:17:45.007 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1198
2025-04-19 08:17:45.009 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.009 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:17:45.009 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:17:45.010 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1199, '2023-09-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.010 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (346,1,2,false),(346,2,21,false),(346,3,26,false),(346,4,40,false),(346,5,42,false),(346,6,9,true)
	        
2025-04-19 08:17:45.010 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:17:45.013 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1199
2025-04-19 08:17:45.015 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.015 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:17:45.016 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:17:45.016 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1200, '2023-09-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.017 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (347,1,16,false),(347,2,27,false),(347,3,59,false),(347,4,62,false),(347,5,63,false),(347,6,23,true)
	        
2025-04-19 08:17:45.017 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:17:45.020 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1200
2025-04-19 08:17:45.022 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.023 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:17:45.023 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:17:45.023 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1201, '2023-09-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.024 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (348,1,1,false),(348,2,12,false),(348,3,20,false),(348,4,33,false),(348,5,66,false),(348,6,21,true)
	        
2025-04-19 08:17:45.024 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:17:45.027 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1201
2025-04-19 08:17:45.029 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.029 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:17:45.029 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:17:45.029 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1202, '2023-09-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.030 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (349,1,10,false),(349,2,12,false),(349,3,22,false),(349,4,36,false),(349,5,50,false),(349,6,4,true)
	        
2025-04-19 08:17:45.030 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:17:45.033 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1202
2025-04-19 08:17:45.035 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.035 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:17:45.036 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:17:45.036 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1203, '2023-09-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.036 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (350,1,1,false),(350,2,7,false),(350,3,46,false),(350,4,47,false),(350,5,63,false),(350,6,7,true)
	        
2025-04-19 08:17:45.037 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:17:45.040 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1203
2025-04-19 08:17:45.042 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.043 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:17:45.043 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:17:45.043 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1204, '2023-09-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.044 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (351,1,19,false),(351,2,30,false),(351,3,37,false),(351,4,44,false),(351,5,46,false),(351,6,22,true)
	        
2025-04-19 08:17:45.044 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:17:45.047 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1204
2025-04-19 08:17:45.049 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.049 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:17:45.049 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:17:45.049 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1205, '2023-10-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.050 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (352,1,12,false),(352,2,26,false),(352,3,27,false),(352,4,43,false),(352,5,47,false),(352,6,5,true)
	        
2025-04-19 08:17:45.050 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:17:45.053 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1205
2025-04-19 08:17:45.055 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.056 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:17:45.056 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:17:45.056 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1206, '2023-10-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.057 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (353,1,9,false),(353,2,35,false),(353,3,54,false),(353,4,63,false),(353,5,64,false),(353,6,1,true)
	        
2025-04-19 08:17:45.057 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:17:45.060 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1206
2025-04-19 08:17:45.061 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.062 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:17:45.062 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:17:45.062 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1207, '2023-10-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.063 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (354,1,47,false),(354,2,54,false),(354,3,57,false),(354,4,60,false),(354,5,65,false),(354,6,19,true)
	        
2025-04-19 08:17:45.063 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:17:45.066 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1207
2025-04-19 08:17:45.068 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.068 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:17:45.068 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:17:45.068 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1208, '2023-10-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.069 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (355,1,16,false),(355,2,34,false),(355,3,46,false),(355,4,55,false),(355,5,67,false),(355,6,14,true)
	        
2025-04-19 08:17:45.069 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:17:45.073 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1208
2025-04-19 08:17:45.075 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.075 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:17:45.075 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:17:45.076 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1209, '2023-10-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.076 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (356,1,22,false),(356,2,24,false),(356,3,40,false),(356,4,52,false),(356,5,64,false),(356,6,10,true)
	        
2025-04-19 08:17:45.076 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:17:45.079 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1209
2025-04-19 08:17:45.081 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.082 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:17:45.082 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:17:45.082 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1210, '2023-10-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.083 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (357,1,14,false),(357,2,16,false),(357,3,42,false),(357,4,48,false),(357,5,64,false),(357,6,14,true)
	        
2025-04-19 08:17:45.083 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:17:45.086 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1210
2025-04-19 08:17:45.089 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.089 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:17:45.089 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:17:45.089 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1211, '2023-10-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.090 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (358,1,2,false),(358,2,27,false),(358,3,31,false),(358,4,44,false),(358,5,64,false),(358,6,18,true)
	        
2025-04-19 08:17:45.090 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:17:45.093 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1211
2025-04-19 08:17:45.096 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.096 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:17:45.096 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:17:45.097 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1212, '2023-10-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.097 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (359,1,1,false),(359,2,4,false),(359,3,13,false),(359,4,35,false),(359,5,58,false),(359,6,24,true)
	        
2025-04-19 08:17:45.098 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:17:45.100 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1212
2025-04-19 08:17:45.103 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.103 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:17:45.104 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:17:45.104 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1213, '2023-10-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.104 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (360,1,6,false),(360,2,15,false),(360,3,24,false),(360,4,67,false),(360,5,68,false),(360,6,11,true)
	        
2025-04-19 08:17:45.105 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:17:45.108 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1213
2025-04-19 08:17:45.110 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.110 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:17:45.111 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:17:45.111 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1214, '2023-10-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.111 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (361,1,18,false),(361,2,21,false),(361,3,25,false),(361,4,46,false),(361,5,64,false),(361,6,21,true)
	        
2025-04-19 08:17:45.112 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:17:45.115 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1214
2025-04-19 08:17:45.117 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.117 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:17:45.117 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:17:45.117 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1215, '2023-10-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.118 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (362,1,24,false),(362,2,27,false),(362,3,41,false),(362,4,53,false),(362,5,68,false),(362,6,2,true)
	        
2025-04-19 08:17:45.118 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:17:45.121 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1215
2025-04-19 08:17:45.124 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.124 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:17:45.124 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:17:45.124 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1216, '2023-10-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.125 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (363,1,14,false),(363,2,24,false),(363,3,50,false),(363,4,59,false),(363,5,64,false),(363,6,2,true)
	        
2025-04-19 08:17:45.125 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:17:45.128 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1216
2025-04-19 08:17:45.130 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.130 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:17:45.130 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:17:45.131 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1217, '2023-10-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.131 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (364,1,19,false),(364,2,22,false),(364,3,34,false),(364,4,66,false),(364,5,69,false),(364,6,5,true)
	        
2025-04-19 08:17:45.132 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:17:45.134 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1217
2025-04-19 08:17:45.136 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.136 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:17:45.137 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:17:45.137 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1218, '2023-11-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.137 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (365,1,22,false),(365,2,26,false),(365,3,39,false),(365,4,47,false),(365,5,63,false),(365,6,12,true)
	        
2025-04-19 08:17:45.138 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:17:45.141 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1218
2025-04-19 08:17:45.143 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.143 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:17:45.143 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:17:45.143 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1219, '2023-11-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.144 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (366,1,1,false),(366,2,28,false),(366,3,30,false),(366,4,34,false),(366,5,52,false),(366,6,6,true)
	        
2025-04-19 08:17:45.144 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:17:45.147 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1219
2025-04-19 08:17:45.149 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.150 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:17:45.150 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:17:45.150 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1220, '2023-11-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.150 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (367,1,12,false),(367,2,25,false),(367,3,40,false),(367,4,59,false),(367,5,61,false),(367,6,26,true)
	        
2025-04-19 08:17:45.151 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:17:45.154 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1220
2025-04-19 08:17:45.156 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.157 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:17:45.157 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:17:45.157 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1221, '2023-11-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.158 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (368,1,14,false),(368,2,21,false),(368,3,33,false),(368,4,39,false),(368,5,62,false),(368,6,20,true)
	        
2025-04-19 08:17:45.158 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:17:45.161 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1221
2025-04-19 08:17:45.163 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.163 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:17:45.163 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:17:45.163 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1222, '2023-11-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.164 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (369,1,1,false),(369,2,12,false),(369,3,14,false),(369,4,24,false),(369,5,57,false),(369,6,7,true)
	        
2025-04-19 08:17:45.165 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:17:45.167 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1222
2025-04-19 08:17:45.169 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.169 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:17:45.170 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:17:45.170 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1223, '2023-11-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.170 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (370,1,24,false),(370,2,33,false),(370,3,35,false),(370,4,37,false),(370,5,42,false),(370,6,21,true)
	        
2025-04-19 08:17:45.171 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:17:45.174 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1223
2025-04-19 08:17:45.176 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.177 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:17:45.177 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:17:45.177 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1224, '2023-11-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.177 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (371,1,3,false),(371,2,4,false),(371,3,51,false),(371,4,53,false),(371,5,60,false),(371,6,6,true)
	        
2025-04-19 08:17:45.178 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:17:45.180 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1224
2025-04-19 08:17:45.183 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.183 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:17:45.184 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:17:45.184 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1225, '2023-11-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.184 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (372,1,34,false),(372,2,50,false),(372,3,51,false),(372,4,61,false),(372,5,67,false),(372,6,20,true)
	        
2025-04-19 08:17:45.185 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:17:45.188 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1225
2025-04-19 08:17:45.190 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.190 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:17:45.191 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:17:45.191 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1226, '2023-11-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.191 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (373,1,19,false),(373,2,26,false),(373,3,30,false),(373,4,39,false),(373,5,63,false),(373,6,13,true)
	        
2025-04-19 08:17:45.192 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:17:45.194 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1226
2025-04-19 08:17:45.196 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.196 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:17:45.197 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:17:45.197 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1227, '2023-11-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.197 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (374,1,20,false),(374,2,24,false),(374,3,33,false),(374,4,39,false),(374,5,42,false),(374,6,21,true)
	        
2025-04-19 08:17:45.198 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:17:45.200 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1227
2025-04-19 08:17:45.202 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.203 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:17:45.203 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:17:45.203 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1228, '2023-11-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.204 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (375,1,27,false),(375,2,33,false),(375,3,63,false),(375,4,66,false),(375,5,68,false),(375,6,9,true)
	        
2025-04-19 08:17:45.204 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:17:45.207 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1228
2025-04-19 08:17:45.209 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.209 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:17:45.210 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:17:45.210 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1229, '2023-11-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.210 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (376,1,2,false),(376,2,21,false),(376,3,38,false),(376,4,61,false),(376,5,66,false),(376,6,12,true)
	        
2025-04-19 08:17:45.211 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:17:45.213 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1229
2025-04-19 08:17:45.215 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.216 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:17:45.216 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:17:45.216 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1230, '2023-11-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.217 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (377,1,6,false),(377,2,47,false),(377,3,50,false),(377,4,61,false),(377,5,68,false),(377,6,4,true)
	        
2025-04-19 08:17:45.217 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:17:45.219 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1230
2025-04-19 08:17:45.223 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.223 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:17:45.223 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:17:45.224 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1231, '2023-12-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.224 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (378,1,28,false),(378,2,35,false),(378,3,41,false),(378,4,47,false),(378,5,60,false),(378,6,3,true)
	        
2025-04-19 08:17:45.225 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:17:45.228 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1231
2025-04-19 08:17:45.229 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.230 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:17:45.230 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:17:45.230 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1232, '2023-12-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.231 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (379,1,18,false),(379,2,19,false),(379,3,27,false),(379,4,28,false),(379,5,45,false),(379,6,9,true)
	        
2025-04-19 08:17:45.231 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:17:45.234 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1232
2025-04-19 08:17:45.236 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.237 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:17:45.237 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:17:45.237 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1233, '2023-12-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.238 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (380,1,2,false),(380,2,12,false),(380,3,37,false),(380,4,56,false),(380,5,65,false),(380,6,21,true)
	        
2025-04-19 08:17:45.239 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:17:45.241 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1233
2025-04-19 08:17:45.243 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.244 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:17:45.244 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:17:45.244 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1234, '2023-12-09', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.245 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (381,1,5,false),(381,2,25,false),(381,3,26,false),(381,4,40,false),(381,5,60,false),(381,6,1,true)
	        
2025-04-19 08:17:45.245 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:17:45.248 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1234
2025-04-19 08:17:45.250 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.251 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:17:45.251 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:17:45.251 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1235, '2023-12-11', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.251 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (382,1,1,false),(382,2,24,false),(382,3,27,false),(382,4,31,false),(382,5,62,false),(382,6,20,true)
	        
2025-04-19 08:17:45.252 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:17:45.256 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1235
2025-04-19 08:17:45.258 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.259 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:17:45.259 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:17:45.259 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1236, '2023-12-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.260 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (383,1,3,false),(383,2,8,false),(383,3,41,false),(383,4,56,false),(383,5,64,false),(383,6,18,true)
	        
2025-04-19 08:17:45.260 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:17:45.263 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1236
2025-04-19 08:17:45.265 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.265 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:17:45.266 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:17:45.266 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1237, '2023-12-16', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.266 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (384,1,3,false),(384,2,9,false),(384,3,10,false),(384,4,20,false),(384,5,62,false),(384,6,25,true)
	        
2025-04-19 08:17:45.267 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:17:45.269 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1237
2025-04-19 08:17:45.273 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.273 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:17:45.273 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:17:45.274 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1238, '2023-12-18', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.274 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (385,1,5,false),(385,2,8,false),(385,3,19,false),(385,4,34,false),(385,5,39,false),(385,6,26,true)
	        
2025-04-19 08:17:45.275 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:17:45.277 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1238
2025-04-19 08:17:45.279 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.280 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:17:45.280 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:17:45.280 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1239, '2023-12-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.281 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (386,1,27,false),(386,2,35,false),(386,3,41,false),(386,4,56,false),(386,5,60,false),(386,6,16,true)
	        
2025-04-19 08:17:45.281 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:17:45.284 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1239
2025-04-19 08:17:45.286 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.286 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:17:45.287 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:17:45.287 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1240, '2023-12-23', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.288 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (387,1,9,false),(387,2,14,false),(387,3,17,false),(387,4,18,false),(387,5,53,false),(387,6,6,true)
	        
2025-04-19 08:17:45.288 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:17:45.291 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1240
2025-04-19 08:17:45.294 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.294 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:17:45.294 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:17:45.295 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1241, '2023-12-25', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.295 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (388,1,5,false),(388,2,12,false),(388,3,20,false),(388,4,24,false),(388,5,29,false),(388,6,4,true)
	        
2025-04-19 08:17:45.296 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:17:45.299 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1241
2025-04-19 08:17:45.302 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.302 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:17:45.302 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:17:45.302 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1242, '2023-12-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.303 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (389,1,4,false),(389,2,11,false),(389,3,38,false),(389,4,51,false),(389,5,68,false),(389,6,5,true)
	        
2025-04-19 08:17:45.303 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:17:45.307 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1242
2025-04-19 08:17:45.309 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.309 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:17:45.310 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:17:45.310 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1243, '2023-12-30', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.310 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (390,1,10,false),(390,2,11,false),(390,3,26,false),(390,4,27,false),(390,5,34,false),(390,6,7,true)
	        
2025-04-19 08:17:45.311 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:17:45.314 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1243
2025-04-19 08:17:45.316 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.317 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:17:45.317 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:17:45.317 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1244, '2024-01-01', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.318 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (391,1,12,false),(391,2,21,false),(391,3,42,false),(391,4,44,false),(391,5,49,false),(391,6,1,true)
	        
2025-04-19 08:17:45.318 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:17:45.322 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1244
2025-04-19 08:17:45.324 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.324 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:17:45.325 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:17:45.325 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1245, '2024-01-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.325 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (392,1,30,false),(392,2,31,false),(392,3,38,false),(392,4,48,false),(392,5,68,false),(392,6,8,true)
	        
2025-04-19 08:17:45.326 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:17:45.328 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1245
2025-04-19 08:17:45.330 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.330 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:17:45.331 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:17:45.331 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1246, '2024-01-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.331 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (393,1,4,false),(393,2,31,false),(393,3,34,false),(393,4,38,false),(393,5,61,false),(393,6,13,true)
	        
2025-04-19 08:17:45.332 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:17:45.334 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1246
2025-04-19 08:17:45.336 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.337 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:17:45.337 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:17:45.337 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1247, '2024-01-08', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.338 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (394,1,7,false),(394,2,17,false),(394,3,28,false),(394,4,40,false),(394,5,45,false),(394,6,2,true)
	        
2025-04-19 08:17:45.339 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:17:45.342 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1247
2025-04-19 08:17:45.343 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.344 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:17:45.344 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:17:45.344 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1248, '2024-01-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.345 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (395,1,25,false),(395,2,40,false),(395,3,43,false),(395,4,48,false),(395,5,50,false),(395,6,11,true)
	        
2025-04-19 08:17:45.345 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:17:45.348 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1248
2025-04-19 08:17:45.350 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.350 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:17:45.350 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:17:45.350 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1249, '2024-01-13', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.351 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (396,1,12,false),(396,2,31,false),(396,3,33,false),(396,4,51,false),(396,5,58,false),(396,6,15,true)
	        
2025-04-19 08:17:45.351 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:17:45.354 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1249
2025-04-19 08:17:45.356 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.357 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:17:45.357 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:17:45.357 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1250, '2024-01-15', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.358 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (397,1,13,false),(397,2,30,false),(397,3,35,false),(397,4,49,false),(397,5,59,false),(397,6,4,true)
	        
2025-04-19 08:17:45.358 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:17:45.361 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1250
2025-04-19 08:17:45.363 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.363 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:17:45.364 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:17:45.364 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1251, '2024-01-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.364 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (398,1,18,false),(398,2,22,false),(398,3,43,false),(398,4,61,false),(398,5,65,false),(398,6,2,true)
	        
2025-04-19 08:17:45.365 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:17:45.367 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1251
2025-04-19 08:17:45.369 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.370 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:17:45.370 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:17:45.370 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1252, '2024-01-20', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.371 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (399,1,16,false),(399,2,31,false),(399,3,34,false),(399,4,47,false),(399,5,65,false),(399,6,10,true)
	        
2025-04-19 08:17:45.371 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:17:45.374 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1252
2025-04-19 08:17:45.376 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.376 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:17:45.376 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:17:45.376 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1253, '2024-01-22', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.377 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (400,1,24,false),(400,2,25,false),(400,3,43,false),(400,4,52,false),(400,5,63,false),(400,6,21,true)
	        
2025-04-19 08:17:45.377 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:17:45.380 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1253
2025-04-19 08:17:45.382 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.382 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:17:45.382 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:17:45.383 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1254, '2024-01-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.383 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (401,1,1,false),(401,2,5,false),(401,3,32,false),(401,4,50,false),(401,5,64,false),(401,6,8,true)
	        
2025-04-19 08:17:45.383 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:17:45.386 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1254
2025-04-19 08:17:45.389 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.389 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:17:45.389 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:17:45.389 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1255, '2024-01-27', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.390 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (402,1,7,false),(402,2,38,false),(402,3,65,false),(402,4,66,false),(402,5,68,false),(402,6,21,true)
	        
2025-04-19 08:17:45.390 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:17:45.393 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1255
2025-04-19 08:17:45.395 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.395 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:17:45.396 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:17:45.396 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1256, '2024-01-29', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.396 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (403,1,39,false),(403,2,41,false),(403,3,43,false),(403,4,49,false),(403,5,64,false),(403,6,4,true)
	        
2025-04-19 08:17:45.397 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:17:45.399 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1256
2025-04-19 08:17:45.401 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.402 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:17:45.402 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:17:45.403 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1257, '2024-01-31', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.404 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (404,1,15,false),(404,2,18,false),(404,3,19,false),(404,4,41,false),(404,5,43,false),(404,6,14,true)
	        
2025-04-19 08:17:45.404 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:17:45.408 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1257
2025-04-19 08:17:45.411 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.412 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:17:45.412 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:17:45.412 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1258, '2024-02-03', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.413 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (405,1,9,false),(405,2,11,false),(405,3,27,false),(405,4,59,false),(405,5,66,false),(405,6,19,true)
	        
2025-04-19 08:17:45.414 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:17:45.417 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1258
2025-04-19 08:17:45.419 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.420 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:17:45.420 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:17:45.421 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1259, '2024-02-05', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.421 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (406,1,1,false),(406,2,2,false),(406,3,27,false),(406,4,30,false),(406,5,67,false),(406,6,9,true)
	        
2025-04-19 08:17:45.422 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:17:45.425 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1259
2025-04-19 08:17:45.427 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.427 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:17:45.428 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:17:45.428 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1260, '2024-02-07', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.428 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (407,1,12,false),(407,2,21,false),(407,3,62,false),(407,4,67,false),(407,5,69,false),(407,6,17,true)
	        
2025-04-19 08:17:45.429 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:17:45.431 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1260
2025-04-19 08:17:45.434 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.434 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:17:45.435 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:17:45.435 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1261, '2024-02-10', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.436 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (408,1,27,false),(408,2,28,false),(408,3,34,false),(408,4,37,false),(408,5,44,false),(408,6,8,true)
	        
2025-04-19 08:17:45.437 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:17:45.440 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1261
2025-04-19 08:17:45.443 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.443 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:17:45.443 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:17:45.443 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1262, '2024-02-12', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.444 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (409,1,17,false),(409,2,36,false),(409,3,43,false),(409,4,53,false),(409,5,67,false),(409,6,14,true)
	        
2025-04-19 08:17:45.444 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:17:45.447 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1262
2025-04-19 08:17:45.449 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.449 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:17:45.450 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:17:45.450 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1263, '2024-02-14', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.450 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (410,1,1,false),(410,2,4,false),(410,3,45,false),(410,4,47,false),(410,5,67,false),(410,6,18,true)
	        
2025-04-19 08:17:45.451 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:17:45.454 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1263
2025-04-19 08:17:45.456 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.457 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:17:45.457 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:17:45.457 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1264, '2024-02-17', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.458 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (411,1,6,false),(411,2,28,false),(411,3,59,false),(411,4,62,false),(411,5,69,false),(411,6,21,true)
	        
2025-04-19 08:17:45.458 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:17:45.461 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1264
2025-04-19 08:17:45.463 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.463 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:17:45.463 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:17:45.464 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1265, '2024-02-19', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.464 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (412,1,4,false),(412,2,23,false),(412,3,45,false),(412,4,50,false),(412,5,53,false),(412,6,17,true)
	        
2025-04-19 08:17:45.464 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:17:45.467 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1265
2025-04-19 08:17:45.469 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.469 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:17:45.470 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:17:45.470 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1266, '2024-02-21', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.470 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (413,1,4,false),(413,2,27,false),(413,3,33,false),(413,4,41,false),(413,5,42,false),(413,6,14,true)
	        
2025-04-19 08:17:45.471 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:17:45.474 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1266
2025-04-19 08:17:45.476 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.476 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:17:45.477 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:17:45.477 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1267, '2024-02-24', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.477 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (414,1,3,false),(414,2,8,false),(414,3,40,false),(414,4,53,false),(414,5,58,false),(414,6,3,true)
	        
2025-04-19 08:17:45.478 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:17:45.480 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1267
2025-04-19 08:17:45.482 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.483 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:17:45.483 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:17:45.483 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1268, '2024-02-26', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.483 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (415,1,24,false),(415,2,29,false),(415,3,42,false),(415,4,51,false),(415,5,54,false),(415,6,16,true)
	        
2025-04-19 08:17:45.484 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:17:45.486 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1268
2025-04-19 08:17:45.488 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.489 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:17:45.489 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:17:45.490 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1269, '2024-02-28', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.490 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (416,1,16,false),(416,2,26,false),(416,3,29,false),(416,4,38,false),(416,5,50,false),(416,6,6,true)
	        
2025-04-19 08:17:45.490 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:17:45.493 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1269
2025-04-19 08:17:45.495 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.495 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:17:45.496 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:17:45.496 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1270, '2024-03-02', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.496 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (417,1,3,false),(417,2,18,false),(417,3,27,false),(417,4,36,false),(417,5,53,false),(417,6,12,true)
	        
2025-04-19 08:17:45.497 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:17:45.500 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1270
2025-04-19 08:17:45.502 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.502 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:17:45.502 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:17:45.502 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1271, '2024-03-04', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.503 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (418,1,36,false),(418,2,42,false),(418,3,50,false),(418,4,52,false),(418,5,67,false),(418,6,26,true)
	        
2025-04-19 08:17:45.503 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:17:45.507 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1271
2025-04-19 08:17:45.509 UTC [121] LOG:  statement: SELECT id, username, email FROM users WHERE id = 2 AND username = 'admin'
2025-04-19 08:17:45.509 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:17:45.509 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:17:45.510 UTC [121] LOG:  statement: 
	        INSERT INTO draws 
	        (draw_number, draw_date, jackpot_amount, winners, source) 
	        VALUES (1272, '2024-03-06', 0.0, 0, 'api')
	        RETURNING id, draw_number, draw_date, jackpot_amount, winners, source, created_at
	        
2025-04-19 08:17:45.510 UTC [121] LOG:  statement: 
	        INSERT INTO numbers (draw_id, position, number, is_powerball)
	        VALUES (419,1,6,false),(419,2,19,false),(419,3,28,false),(419,4,44,false),(419,5,60,false),(419,6,10,true)
	        
2025-04-19 08:17:45.511 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:17:45.513 UTC [121] LOG:  statement: SELECT * FROM draws WHERE draw_number = 1272
2025-04-19 08:17:46.293 UTC [121] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:17:46.609 UTC [121] DEBUG:  unexpected EOF on client connection
2025-04-19 08:17:48.426 UTC [136] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:48.437 UTC [136] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:48.443 UTC [136] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:48.443 UTC [136] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:48.446 UTC [136] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:48.450 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:48.453 UTC [136] DEBUG:  building index "pg_toast_18026_index" on table "pg_toast_18026" serially
2025-04-19 08:17:48.455 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:48.455 UTC [136] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:48.456 UTC [136] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:48.459 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:48.459 UTC [136] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:48.460 UTC [136] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:48.461 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:48.462 UTC [136] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:48.462 UTC [136] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:48.465 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:48.467 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:48.468 UTC [136] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:48.468 UTC [136] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:48.470 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:48.470 UTC [136] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:48.470 UTC [136] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:48.471 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:48.473 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:48.473 UTC [136] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:48.473 UTC [136] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:48.475 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:48.475 UTC [136] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:48.475 UTC [136] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:48.478 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:48.479 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:48.480 UTC [136] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:48.480 UTC [136] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:48.486 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:48.492 UTC [136] DEBUG:  building index "pg_toast_18087_index" on table "pg_toast_18087" serially
2025-04-19 08:17:48.495 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:48.495 UTC [136] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:48.496 UTC [136] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:48.497 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:48.499 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:48.499 UTC [136] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:48.499 UTC [136] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:48.500 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:48.501 UTC [136] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:48.501 UTC [136] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:48.502 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:48.504 UTC [136] DEBUG:  building index "pg_toast_18120_index" on table "pg_toast_18120" serially
2025-04-19 08:17:48.505 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:48.506 UTC [136] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:48.506 UTC [136] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:48.507 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:48.508 UTC [136] DEBUG:  building index "pg_toast_18131_index" on table "pg_toast_18131" serially
2025-04-19 08:17:48.509 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:48.510 UTC [136] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:48.510 UTC [136] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:48.511 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:48.512 UTC [136] DEBUG:  building index "pg_toast_18154_index" on table "pg_toast_18154" serially
2025-04-19 08:17:48.513 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:48.514 UTC [136] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:48.514 UTC [136] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:48.515 UTC [136] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:48.515 UTC [136] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:48.515 UTC [136] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:48.516 UTC [136] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:48.516 UTC [136] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:48.516 UTC [136] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:48.517 UTC [136] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:48.517 UTC [136] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:48.518 UTC [136] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:48.518 UTC [136] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:48.519 UTC [136] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:48.519 UTC [136] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:48.520 UTC [136] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:48.520 UTC [136] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:48.520 UTC [136] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:48.520 UTC [136] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:48.521 UTC [136] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:48.521 UTC [136] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:48.522 UTC [136] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:48.522 UTC [136] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:48.523 UTC [136] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:48.523 UTC [136] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:48.544 UTC [136] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:48.810 UTC [136] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$GG/8aTcNpCx.mMiak2Ymze1ZN0OfD0HvRf5BzHxHqw589NyNyW9Eu')
	                RETURNING id, username, email
	                
2025-04-19 08:17:48.811 UTC [136] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:48.811 UTC [136] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:17:48.812 UTC [136] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:17:48.820 UTC [136] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:48.821 UTC [136] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:17:48.824 UTC [136] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:17:48.828 UTC [136] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:17:48.828 UTC [136] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:17:48.831 UTC [136] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:17:48.834 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:17:48.835 UTC [136] DEBUG:  building index "pg_toast_18190_index" on table "pg_toast_18190" serially
2025-04-19 08:17:48.836 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:17:48.836 UTC [136] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:17:48.836 UTC [136] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:17:48.837 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:17:48.837 UTC [136] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:17:48.837 UTC [136] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:17:48.838 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:17:48.838 UTC [136] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:17:48.838 UTC [136] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:17:48.839 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:17:48.839 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:17:48.840 UTC [136] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:17:48.840 UTC [136] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:17:48.841 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:17:48.841 UTC [136] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:17:48.841 UTC [136] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:17:48.844 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:17:48.845 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:17:48.845 UTC [136] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:17:48.845 UTC [136] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:17:48.846 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:17:48.846 UTC [136] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:17:48.846 UTC [136] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:17:48.848 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:17:48.851 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:17:48.851 UTC [136] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:17:48.851 UTC [136] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:17:48.853 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:17:48.855 UTC [136] DEBUG:  building index "pg_toast_18251_index" on table "pg_toast_18251" serially
2025-04-19 08:17:48.857 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:17:48.857 UTC [136] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:17:48.857 UTC [136] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:17:48.859 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:17:48.860 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:17:48.860 UTC [136] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:17:48.860 UTC [136] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:17:48.861 UTC [136] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:17:48.861 UTC [136] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:17:48.861 UTC [136] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:17:48.862 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:17:48.863 UTC [136] DEBUG:  building index "pg_toast_18284_index" on table "pg_toast_18284" serially
2025-04-19 08:17:48.864 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:17:48.864 UTC [136] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:17:48.864 UTC [136] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:17:48.864 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:17:48.865 UTC [136] DEBUG:  building index "pg_toast_18295_index" on table "pg_toast_18295" serially
2025-04-19 08:17:48.866 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:17:48.866 UTC [136] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:17:48.866 UTC [136] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:17:48.867 UTC [136] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:17:48.868 UTC [136] DEBUG:  building index "pg_toast_18318_index" on table "pg_toast_18318" serially
2025-04-19 08:17:48.869 UTC [136] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:17:48.869 UTC [136] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:17:48.869 UTC [136] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:17:48.870 UTC [136] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:17:48.870 UTC [136] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:17:48.871 UTC [136] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:17:48.871 UTC [136] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:17:48.872 UTC [136] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:17:48.872 UTC [136] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:17:48.873 UTC [136] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:17:48.873 UTC [136] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:17:48.873 UTC [136] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:17:48.873 UTC [136] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:17:48.874 UTC [136] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:17:48.874 UTC [136] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:17:48.875 UTC [136] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:17:48.875 UTC [136] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:17:48.876 UTC [136] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:17:48.876 UTC [136] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:17:48.877 UTC [136] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:17:48.877 UTC [136] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:17:48.877 UTC [136] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:17:48.877 UTC [136] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:17:48.878 UTC [136] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:17:48.878 UTC [136] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:17:48.884 UTC [136] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:17:49.160 UTC [136] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$IcqZ7b9I9baf4aeXEa7o3uSk0b92SsMjIyXXbBKeHvpAINWA8pBKC')
	                RETURNING id, username, email
	                
2025-04-19 08:17:49.160 UTC [136] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:17:49.161 UTC [136] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:02.239 UTC [136] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:18:02.630 UTC [136] DEBUG:  unexpected EOF on client connection
2025-04-19 08:18:04.432 UTC [144] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:04.440 UTC [144] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:04.447 UTC [144] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:04.447 UTC [144] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:04.451 UTC [144] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:04.458 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:04.460 UTC [144] DEBUG:  building index "pg_toast_18354_index" on table "pg_toast_18354" serially
2025-04-19 08:18:04.461 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:04.461 UTC [144] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:04.461 UTC [144] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:04.462 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:04.463 UTC [144] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:04.463 UTC [144] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:04.463 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:04.464 UTC [144] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:04.464 UTC [144] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:04.464 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:04.465 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:04.466 UTC [144] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:04.466 UTC [144] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:04.466 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:04.467 UTC [144] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:04.467 UTC [144] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:04.468 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:04.470 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:04.470 UTC [144] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:04.470 UTC [144] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:04.471 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:04.471 UTC [144] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:04.471 UTC [144] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:04.474 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:04.476 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:04.477 UTC [144] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:04.477 UTC [144] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:04.480 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:04.486 UTC [144] DEBUG:  building index "pg_toast_18415_index" on table "pg_toast_18415" serially
2025-04-19 08:18:04.488 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:04.488 UTC [144] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:04.488 UTC [144] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:04.490 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:04.491 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:04.491 UTC [144] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:04.491 UTC [144] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:04.493 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:04.494 UTC [144] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:04.494 UTC [144] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:04.495 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:04.496 UTC [144] DEBUG:  building index "pg_toast_18448_index" on table "pg_toast_18448" serially
2025-04-19 08:18:04.497 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:04.497 UTC [144] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:04.497 UTC [144] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:04.498 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:04.499 UTC [144] DEBUG:  building index "pg_toast_18459_index" on table "pg_toast_18459" serially
2025-04-19 08:18:04.500 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:04.500 UTC [144] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:04.500 UTC [144] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:04.501 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:04.502 UTC [144] DEBUG:  building index "pg_toast_18482_index" on table "pg_toast_18482" serially
2025-04-19 08:18:04.503 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:04.503 UTC [144] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:04.503 UTC [144] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:04.504 UTC [144] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:04.504 UTC [144] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:04.505 UTC [144] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:04.505 UTC [144] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:04.506 UTC [144] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:04.506 UTC [144] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:04.507 UTC [144] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:04.507 UTC [144] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:04.507 UTC [144] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:04.507 UTC [144] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:04.508 UTC [144] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:04.508 UTC [144] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:04.509 UTC [144] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:04.509 UTC [144] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:04.510 UTC [144] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:04.510 UTC [144] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:04.510 UTC [144] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:04.510 UTC [144] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:04.511 UTC [144] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:04.511 UTC [144] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:04.512 UTC [144] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:04.512 UTC [144] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:04.523 UTC [144] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:04.798 UTC [144] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1BcRMqD08ZwTn9LaaFV8AuoOV.wV.T5vgffTwtcFMN1bl8MGeTJey')
	                RETURNING id, username, email
	                
2025-04-19 08:18:04.798 UTC [144] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:04.799 UTC [144] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:04.799 UTC [144] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:18:04.807 UTC [144] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:04.808 UTC [144] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:04.810 UTC [144] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:04.815 UTC [144] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:04.815 UTC [144] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:04.820 UTC [144] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:04.824 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:04.825 UTC [144] DEBUG:  building index "pg_toast_18518_index" on table "pg_toast_18518" serially
2025-04-19 08:18:04.826 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:04.826 UTC [144] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:04.826 UTC [144] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:04.827 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:04.827 UTC [144] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:04.827 UTC [144] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:04.828 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:04.828 UTC [144] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:04.828 UTC [144] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:04.829 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:04.829 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:04.830 UTC [144] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:04.830 UTC [144] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:04.830 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:04.830 UTC [144] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:04.830 UTC [144] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:04.831 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:04.832 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:04.832 UTC [144] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:04.832 UTC [144] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:04.833 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:04.833 UTC [144] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:04.833 UTC [144] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:04.835 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:04.835 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:04.836 UTC [144] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:04.836 UTC [144] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:04.837 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:04.838 UTC [144] DEBUG:  building index "pg_toast_18579_index" on table "pg_toast_18579" serially
2025-04-19 08:18:04.839 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:04.840 UTC [144] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:04.840 UTC [144] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:04.840 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:04.841 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:04.842 UTC [144] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:04.842 UTC [144] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:04.842 UTC [144] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:04.843 UTC [144] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:04.843 UTC [144] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:04.844 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:04.844 UTC [144] DEBUG:  building index "pg_toast_18612_index" on table "pg_toast_18612" serially
2025-04-19 08:18:04.845 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:04.846 UTC [144] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:04.846 UTC [144] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:04.846 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:04.848 UTC [144] DEBUG:  building index "pg_toast_18623_index" on table "pg_toast_18623" serially
2025-04-19 08:18:04.848 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:04.848 UTC [144] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:04.849 UTC [144] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:04.850 UTC [144] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:04.851 UTC [144] DEBUG:  building index "pg_toast_18646_index" on table "pg_toast_18646" serially
2025-04-19 08:18:04.852 UTC [144] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:04.853 UTC [144] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:04.853 UTC [144] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:04.854 UTC [144] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:04.854 UTC [144] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:04.855 UTC [144] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:04.855 UTC [144] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:04.855 UTC [144] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:04.855 UTC [144] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:04.856 UTC [144] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:04.856 UTC [144] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:04.857 UTC [144] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:04.857 UTC [144] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:04.858 UTC [144] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:04.858 UTC [144] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:04.859 UTC [144] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:04.859 UTC [144] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:04.860 UTC [144] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:04.860 UTC [144] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:04.860 UTC [144] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:04.860 UTC [144] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:04.861 UTC [144] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:04.861 UTC [144] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:04.862 UTC [144] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:04.862 UTC [144] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:04.869 UTC [144] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:05.112 UTC [144] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$sSr2Y3qINRb4zFpvsIJPIun9u9rISHRBzyjfCNt8EAOm1TfijPO.6')
	                RETURNING id, username, email
	                
2025-04-19 08:18:05.113 UTC [144] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:05.113 UTC [144] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:12.589 UTC [144] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:18:17.547 UTC [159] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:18:17.834 UTC [159] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:18:18.262 UTC [144] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:18:18.559 UTC [144] DEBUG:  unexpected EOF on client connection
2025-04-19 08:18:20.275 UTC [160] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:20.281 UTC [160] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:20.287 UTC [160] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:20.287 UTC [160] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:20.291 UTC [160] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:20.295 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:20.297 UTC [160] DEBUG:  building index "pg_toast_18683_index" on table "pg_toast_18683" serially
2025-04-19 08:18:20.298 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:20.299 UTC [160] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:20.299 UTC [160] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:20.300 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:20.300 UTC [160] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:20.300 UTC [160] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:20.301 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:20.301 UTC [160] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:20.301 UTC [160] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:20.302 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:20.303 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:20.303 UTC [160] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:20.303 UTC [160] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:20.303 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:20.304 UTC [160] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:20.304 UTC [160] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:20.305 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:20.306 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:20.306 UTC [160] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:20.306 UTC [160] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:20.307 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:20.307 UTC [160] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:20.307 UTC [160] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:20.308 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:20.309 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:20.309 UTC [160] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:20.309 UTC [160] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:20.310 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:20.314 UTC [160] DEBUG:  building index "pg_toast_18744_index" on table "pg_toast_18744" serially
2025-04-19 08:18:20.315 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:20.315 UTC [160] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:20.315 UTC [160] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:20.317 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:20.319 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:20.320 UTC [160] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:20.320 UTC [160] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:20.321 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:20.321 UTC [160] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:20.321 UTC [160] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:20.323 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:20.324 UTC [160] DEBUG:  building index "pg_toast_18777_index" on table "pg_toast_18777" serially
2025-04-19 08:18:20.325 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:20.325 UTC [160] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:20.325 UTC [160] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:20.326 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:20.327 UTC [160] DEBUG:  building index "pg_toast_18788_index" on table "pg_toast_18788" serially
2025-04-19 08:18:20.328 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:20.328 UTC [160] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:20.328 UTC [160] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:20.329 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:20.330 UTC [160] DEBUG:  building index "pg_toast_18811_index" on table "pg_toast_18811" serially
2025-04-19 08:18:20.331 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:20.331 UTC [160] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:20.331 UTC [160] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:20.332 UTC [160] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:20.332 UTC [160] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:20.333 UTC [160] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:20.333 UTC [160] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:20.333 UTC [160] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:20.333 UTC [160] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:20.334 UTC [160] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:20.334 UTC [160] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:20.335 UTC [160] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:20.335 UTC [160] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:20.336 UTC [160] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:20.336 UTC [160] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:20.337 UTC [160] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:20.337 UTC [160] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:20.338 UTC [160] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 08:18:20.338 UTC [160] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:20.338 UTC [160] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:20.339 UTC [160] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:20.339 UTC [160] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:20.340 UTC [160] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:20.340 UTC [160] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:20.340 UTC [160] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:20.340 UTC [160] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:20.350 UTC [160] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:20.633 UTC [160] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5ebiJqQph6n4.Z4l8ZVEs.PgXtPa2pviutsRNEJ1vrId/5OLrg9Xy')
	                RETURNING id, username, email
	                
2025-04-19 08:18:20.634 UTC [160] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:20.634 UTC [160] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:20.636 UTC [160] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:18:20.639 UTC [160] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 08:18:20.639 UTC [160] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 08:18:20.645 UTC [160] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:20.646 UTC [160] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:20.648 UTC [160] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:20.652 UTC [160] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:20.652 UTC [160] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:20.655 UTC [160] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:20.658 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:20.660 UTC [160] DEBUG:  building index "pg_toast_18847_index" on table "pg_toast_18847" serially
2025-04-19 08:18:20.661 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:20.662 UTC [160] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:20.662 UTC [160] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:20.663 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:20.664 UTC [160] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:20.664 UTC [160] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:20.664 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:20.664 UTC [160] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:20.665 UTC [160] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:20.665 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:20.666 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:20.667 UTC [160] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:20.667 UTC [160] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:20.667 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:20.668 UTC [160] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:20.668 UTC [160] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:20.668 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:20.669 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:20.669 UTC [160] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:20.669 UTC [160] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:20.670 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:20.670 UTC [160] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:20.670 UTC [160] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:20.671 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:20.672 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:20.672 UTC [160] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:20.672 UTC [160] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:20.674 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:20.675 UTC [160] DEBUG:  building index "pg_toast_18908_index" on table "pg_toast_18908" serially
2025-04-19 08:18:20.675 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:20.676 UTC [160] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:20.676 UTC [160] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:20.677 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:20.679 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:20.679 UTC [160] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:20.679 UTC [160] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:20.680 UTC [160] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:20.680 UTC [160] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:20.680 UTC [160] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:20.681 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:20.682 UTC [160] DEBUG:  building index "pg_toast_18941_index" on table "pg_toast_18941" serially
2025-04-19 08:18:20.683 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:20.683 UTC [160] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:20.683 UTC [160] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:20.684 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:20.686 UTC [160] DEBUG:  building index "pg_toast_18952_index" on table "pg_toast_18952" serially
2025-04-19 08:18:20.687 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:20.688 UTC [160] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:20.688 UTC [160] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:20.691 UTC [160] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:20.694 UTC [160] DEBUG:  building index "pg_toast_18975_index" on table "pg_toast_18975" serially
2025-04-19 08:18:20.695 UTC [160] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:20.696 UTC [160] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:20.696 UTC [160] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:20.699 UTC [160] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:20.699 UTC [160] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:20.700 UTC [160] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:20.700 UTC [160] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:20.701 UTC [160] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:20.701 UTC [160] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:20.701 UTC [160] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:20.701 UTC [160] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:20.702 UTC [160] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:20.702 UTC [160] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:20.703 UTC [160] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:20.703 UTC [160] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:20.704 UTC [160] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:20.704 UTC [160] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:20.704 UTC [160] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:20.704 UTC [160] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:20.705 UTC [160] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:20.705 UTC [160] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:20.706 UTC [160] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:20.706 UTC [160] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:20.707 UTC [160] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:20.707 UTC [160] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:20.715 UTC [160] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:20.963 UTC [160] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$0O2ZAWMNbr.tLs0tspVFnetxuvJe2x3qtaYtmneaiN2CoVKuRC97K')
	                RETURNING id, username, email
	                
2025-04-19 08:18:20.964 UTC [160] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:20.965 UTC [160] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:23.074 UTC [160] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:18:24.763 UTC [160] LOG:  statement: 
	        SELECT * FROM draws 
	        ORDER BY draw_number DESC 
	        LIMIT 20 OFFSET 0
	        
2025-04-19 08:18:34.102 UTC [160] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:18:34.387 UTC [160] DEBUG:  unexpected EOF on client connection
2025-04-19 08:18:35.980 UTC [168] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:35.986 UTC [168] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:35.993 UTC [168] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:35.993 UTC [168] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:35.997 UTC [168] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:36.001 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:36.003 UTC [168] DEBUG:  building index "pg_toast_19011_index" on table "pg_toast_19011" serially
2025-04-19 08:18:36.005 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:36.006 UTC [168] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:36.006 UTC [168] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:36.007 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:36.007 UTC [168] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:36.007 UTC [168] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:36.008 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:36.008 UTC [168] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:36.008 UTC [168] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:36.009 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:36.010 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:36.010 UTC [168] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:36.010 UTC [168] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:36.011 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:36.011 UTC [168] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:36.011 UTC [168] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:36.012 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:36.013 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:36.013 UTC [168] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:36.013 UTC [168] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:36.014 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:36.014 UTC [168] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:36.014 UTC [168] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:36.016 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:36.017 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:36.017 UTC [168] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:36.017 UTC [168] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:36.018 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:36.019 UTC [168] DEBUG:  building index "pg_toast_19072_index" on table "pg_toast_19072" serially
2025-04-19 08:18:36.020 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:36.020 UTC [168] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:36.020 UTC [168] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:36.022 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:36.023 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:36.023 UTC [168] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:36.023 UTC [168] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:36.024 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:36.024 UTC [168] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:36.024 UTC [168] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:36.025 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:36.026 UTC [168] DEBUG:  building index "pg_toast_19105_index" on table "pg_toast_19105" serially
2025-04-19 08:18:36.027 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:36.027 UTC [168] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:36.027 UTC [168] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:36.028 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:36.029 UTC [168] DEBUG:  building index "pg_toast_19116_index" on table "pg_toast_19116" serially
2025-04-19 08:18:36.030 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:36.030 UTC [168] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:36.030 UTC [168] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:36.031 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:36.032 UTC [168] DEBUG:  building index "pg_toast_19139_index" on table "pg_toast_19139" serially
2025-04-19 08:18:36.033 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:36.033 UTC [168] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:36.033 UTC [168] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:36.034 UTC [168] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:36.034 UTC [168] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:36.035 UTC [168] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:36.035 UTC [168] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:36.036 UTC [168] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:36.036 UTC [168] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:36.037 UTC [168] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:36.037 UTC [168] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:36.038 UTC [168] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:36.038 UTC [168] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:36.038 UTC [168] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:36.038 UTC [168] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:36.039 UTC [168] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:36.039 UTC [168] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:36.040 UTC [168] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:36.040 UTC [168] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:36.041 UTC [168] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:36.041 UTC [168] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:36.042 UTC [168] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:36.042 UTC [168] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:36.043 UTC [168] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:36.043 UTC [168] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:36.057 UTC [168] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:36.330 UTC [168] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$ve0k9DCrCfbHLN4LKxG3xeeDmi/oN.NCbh3pXvWQMeIat6c5ej7MW')
	                RETURNING id, username, email
	                
2025-04-19 08:18:36.330 UTC [168] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:36.331 UTC [168] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:36.332 UTC [168] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:18:36.342 UTC [168] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:36.343 UTC [168] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:36.346 UTC [168] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:36.350 UTC [168] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:36.350 UTC [168] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:36.354 UTC [168] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:36.357 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:36.358 UTC [168] DEBUG:  building index "pg_toast_19175_index" on table "pg_toast_19175" serially
2025-04-19 08:18:36.359 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:36.359 UTC [168] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:36.359 UTC [168] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:36.360 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:36.360 UTC [168] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:36.360 UTC [168] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:36.361 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:36.361 UTC [168] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:36.361 UTC [168] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:36.362 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:36.363 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:36.363 UTC [168] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:36.363 UTC [168] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:36.364 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:36.364 UTC [168] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:36.364 UTC [168] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:36.365 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:36.366 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:36.366 UTC [168] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:36.366 UTC [168] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:36.367 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:36.367 UTC [168] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:36.367 UTC [168] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:36.368 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:36.369 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:36.369 UTC [168] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:36.369 UTC [168] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:36.370 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:36.371 UTC [168] DEBUG:  building index "pg_toast_19236_index" on table "pg_toast_19236" serially
2025-04-19 08:18:36.372 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:36.372 UTC [168] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:36.372 UTC [168] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:36.373 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:36.374 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:36.374 UTC [168] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:36.374 UTC [168] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:36.375 UTC [168] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:36.375 UTC [168] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:36.375 UTC [168] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:36.376 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:36.377 UTC [168] DEBUG:  building index "pg_toast_19269_index" on table "pg_toast_19269" serially
2025-04-19 08:18:36.378 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:36.379 UTC [168] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:36.379 UTC [168] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:36.379 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:36.381 UTC [168] DEBUG:  building index "pg_toast_19280_index" on table "pg_toast_19280" serially
2025-04-19 08:18:36.381 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:36.382 UTC [168] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:36.382 UTC [168] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:36.384 UTC [168] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:36.385 UTC [168] DEBUG:  building index "pg_toast_19303_index" on table "pg_toast_19303" serially
2025-04-19 08:18:36.386 UTC [168] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:36.386 UTC [168] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:36.386 UTC [168] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:36.387 UTC [168] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:36.387 UTC [168] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:36.388 UTC [168] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:36.388 UTC [168] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:36.389 UTC [168] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:36.389 UTC [168] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:36.389 UTC [168] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:36.389 UTC [168] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:36.390 UTC [168] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:36.390 UTC [168] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:36.391 UTC [168] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:36.391 UTC [168] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:36.392 UTC [168] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:36.392 UTC [168] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:36.393 UTC [168] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:36.393 UTC [168] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:36.394 UTC [168] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:36.394 UTC [168] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:36.395 UTC [168] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:36.395 UTC [168] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:36.396 UTC [168] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:36.396 UTC [168] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:36.402 UTC [168] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:36.667 UTC [168] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$qjZcPNbQUdUu46BxAT47UOZn.xS7PNTNws.UeLzZIx7Dn95I7O./O')
	                RETURNING id, username, email
	                
2025-04-19 08:18:36.668 UTC [168] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:36.668 UTC [168] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:47.590 UTC [176] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:18:50.039 UTC [168] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:18:50.313 UTC [168] DEBUG:  unexpected EOF on client connection
2025-04-19 08:18:51.853 UTC [184] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:51.865 UTC [184] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:51.871 UTC [184] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:51.871 UTC [184] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:51.874 UTC [184] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:51.878 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:51.881 UTC [184] DEBUG:  building index "pg_toast_19339_index" on table "pg_toast_19339" serially
2025-04-19 08:18:51.882 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:51.883 UTC [184] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:51.883 UTC [184] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:51.884 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:51.884 UTC [184] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:51.884 UTC [184] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:51.885 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:51.885 UTC [184] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:51.885 UTC [184] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:51.886 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:51.887 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:51.887 UTC [184] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:51.887 UTC [184] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:51.888 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:51.888 UTC [184] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:51.888 UTC [184] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:51.889 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:51.890 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:51.890 UTC [184] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:51.890 UTC [184] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:51.891 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:51.891 UTC [184] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:51.891 UTC [184] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:51.894 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:51.896 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:51.896 UTC [184] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:51.896 UTC [184] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:51.897 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:51.898 UTC [184] DEBUG:  building index "pg_toast_19400_index" on table "pg_toast_19400" serially
2025-04-19 08:18:51.899 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:51.899 UTC [184] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:51.899 UTC [184] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:51.900 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:51.901 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:51.901 UTC [184] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:51.901 UTC [184] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:51.902 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:51.902 UTC [184] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:51.902 UTC [184] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:51.903 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:51.904 UTC [184] DEBUG:  building index "pg_toast_19433_index" on table "pg_toast_19433" serially
2025-04-19 08:18:51.905 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:51.905 UTC [184] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:51.905 UTC [184] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:51.906 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:51.907 UTC [184] DEBUG:  building index "pg_toast_19444_index" on table "pg_toast_19444" serially
2025-04-19 08:18:51.908 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:51.908 UTC [184] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:51.908 UTC [184] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:51.909 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:51.910 UTC [184] DEBUG:  building index "pg_toast_19467_index" on table "pg_toast_19467" serially
2025-04-19 08:18:51.911 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:51.911 UTC [184] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:51.911 UTC [184] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:51.912 UTC [184] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:51.912 UTC [184] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:51.912 UTC [184] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:51.912 UTC [184] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:51.913 UTC [184] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:51.913 UTC [184] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:51.914 UTC [184] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:51.914 UTC [184] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:51.915 UTC [184] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:51.915 UTC [184] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:51.915 UTC [184] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:51.915 UTC [184] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:51.916 UTC [184] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:51.916 UTC [184] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:51.917 UTC [184] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:51.917 UTC [184] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:51.917 UTC [184] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:51.917 UTC [184] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:51.918 UTC [184] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:51.918 UTC [184] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:51.919 UTC [184] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:51.919 UTC [184] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:51.931 UTC [184] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:52.199 UTC [184] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$akL76tu2m4FZ5j62rbHFd.AhVsLm9xtkFCA.XMjDNV0hAM/mBvG5i')
	                RETURNING id, username, email
	                
2025-04-19 08:18:52.200 UTC [184] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:52.200 UTC [184] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:18:52.201 UTC [184] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:18:52.208 UTC [184] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:52.209 UTC [184] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:18:52.211 UTC [184] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:18:52.216 UTC [184] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:18:52.216 UTC [184] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:18:52.222 UTC [184] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:18:52.225 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:18:52.226 UTC [184] DEBUG:  building index "pg_toast_19503_index" on table "pg_toast_19503" serially
2025-04-19 08:18:52.227 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:18:52.227 UTC [184] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:18:52.227 UTC [184] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:18:52.228 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:18:52.228 UTC [184] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:18:52.228 UTC [184] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:18:52.229 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:18:52.229 UTC [184] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:18:52.229 UTC [184] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:18:52.230 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:18:52.231 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:18:52.231 UTC [184] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:18:52.231 UTC [184] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:18:52.232 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:18:52.232 UTC [184] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:18:52.232 UTC [184] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:18:52.234 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:18:52.235 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:18:52.235 UTC [184] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:18:52.235 UTC [184] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:18:52.236 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:18:52.236 UTC [184] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:18:52.236 UTC [184] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:18:52.237 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:18:52.238 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:18:52.238 UTC [184] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:18:52.238 UTC [184] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:18:52.239 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:18:52.240 UTC [184] DEBUG:  building index "pg_toast_19564_index" on table "pg_toast_19564" serially
2025-04-19 08:18:52.240 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:18:52.241 UTC [184] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:18:52.241 UTC [184] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:18:52.242 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:18:52.243 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:18:52.243 UTC [184] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:18:52.243 UTC [184] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:18:52.244 UTC [184] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:18:52.244 UTC [184] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:18:52.244 UTC [184] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:18:52.245 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:18:52.246 UTC [184] DEBUG:  building index "pg_toast_19597_index" on table "pg_toast_19597" serially
2025-04-19 08:18:52.247 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:18:52.247 UTC [184] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:18:52.247 UTC [184] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:18:52.248 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:18:52.250 UTC [184] DEBUG:  building index "pg_toast_19608_index" on table "pg_toast_19608" serially
2025-04-19 08:18:52.250 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:18:52.251 UTC [184] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:18:52.251 UTC [184] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:18:52.253 UTC [184] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:18:52.254 UTC [184] DEBUG:  building index "pg_toast_19631_index" on table "pg_toast_19631" serially
2025-04-19 08:18:52.254 UTC [184] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:18:52.255 UTC [184] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:18:52.255 UTC [184] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:18:52.255 UTC [184] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:18:52.255 UTC [184] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:18:52.256 UTC [184] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:18:52.256 UTC [184] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:18:52.257 UTC [184] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:18:52.257 UTC [184] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:18:52.258 UTC [184] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:18:52.258 UTC [184] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:18:52.258 UTC [184] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:18:52.258 UTC [184] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:18:52.259 UTC [184] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:18:52.259 UTC [184] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:18:52.260 UTC [184] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:18:52.260 UTC [184] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:18:52.261 UTC [184] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:18:52.261 UTC [184] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:18:52.261 UTC [184] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:18:52.261 UTC [184] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:18:52.262 UTC [184] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:18:52.262 UTC [184] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:18:52.263 UTC [184] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:18:52.263 UTC [184] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:18:52.270 UTC [184] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:18:52.516 UTC [184] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$i2lZRheXnEOM5cTK1UaoPeioLKTQFlUSAZbxzbnlmSNUA4mLbVAWu')
	                RETURNING id, username, email
	                
2025-04-19 08:18:52.516 UTC [184] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:18:52.517 UTC [184] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:05.835 UTC [184] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:19:06.125 UTC [184] DEBUG:  unexpected EOF on client connection
2025-04-19 08:19:07.923 UTC [198] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:07.931 UTC [198] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:07.938 UTC [198] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:07.938 UTC [198] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:07.943 UTC [198] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:07.946 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:07.949 UTC [198] DEBUG:  building index "pg_toast_19667_index" on table "pg_toast_19667" serially
2025-04-19 08:19:07.950 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:07.951 UTC [198] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:07.951 UTC [198] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:07.952 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:07.952 UTC [198] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:07.952 UTC [198] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:07.953 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:07.953 UTC [198] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:07.953 UTC [198] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:07.954 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:07.954 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:07.955 UTC [198] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:07.955 UTC [198] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:07.955 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:07.956 UTC [198] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:07.956 UTC [198] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:07.956 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:07.957 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:07.957 UTC [198] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:07.957 UTC [198] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:07.958 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:07.958 UTC [198] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:07.958 UTC [198] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:07.960 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:07.960 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:07.961 UTC [198] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:07.961 UTC [198] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:07.962 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:07.963 UTC [198] DEBUG:  building index "pg_toast_19728_index" on table "pg_toast_19728" serially
2025-04-19 08:19:07.964 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:07.964 UTC [198] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:07.964 UTC [198] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:07.965 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:07.966 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:07.966 UTC [198] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:07.966 UTC [198] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:07.967 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:07.967 UTC [198] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:07.967 UTC [198] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:07.968 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:07.970 UTC [198] DEBUG:  building index "pg_toast_19761_index" on table "pg_toast_19761" serially
2025-04-19 08:19:07.971 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:07.971 UTC [198] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:07.971 UTC [198] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:07.972 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:07.973 UTC [198] DEBUG:  building index "pg_toast_19772_index" on table "pg_toast_19772" serially
2025-04-19 08:19:07.974 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:07.974 UTC [198] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:07.974 UTC [198] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:07.976 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:07.978 UTC [198] DEBUG:  building index "pg_toast_19795_index" on table "pg_toast_19795" serially
2025-04-19 08:19:07.979 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:07.979 UTC [198] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:07.979 UTC [198] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:07.980 UTC [198] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:07.980 UTC [198] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:07.980 UTC [198] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:07.980 UTC [198] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:07.981 UTC [198] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:07.981 UTC [198] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:07.982 UTC [198] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:07.982 UTC [198] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:07.982 UTC [198] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:07.982 UTC [198] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:07.983 UTC [198] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:07.983 UTC [198] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:07.984 UTC [198] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:07.984 UTC [198] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:07.985 UTC [198] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:07.985 UTC [198] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:07.986 UTC [198] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:07.986 UTC [198] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:07.987 UTC [198] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:07.987 UTC [198] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:07.988 UTC [198] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:07.988 UTC [198] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:08.025 UTC [198] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:08.295 UTC [198] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$egNPflyc.uGTlKfbgl4hsulYV9NX2dYby1dk7EO61QbHpK6vutUo6')
	                RETURNING id, username, email
	                
2025-04-19 08:19:08.295 UTC [198] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:08.296 UTC [198] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:08.296 UTC [198] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:19:08.303 UTC [198] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:08.304 UTC [198] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:08.309 UTC [198] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:08.314 UTC [198] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:08.314 UTC [198] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:08.319 UTC [198] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:08.322 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:08.323 UTC [198] DEBUG:  building index "pg_toast_19831_index" on table "pg_toast_19831" serially
2025-04-19 08:19:08.324 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:08.324 UTC [198] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:08.324 UTC [198] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:08.325 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:08.325 UTC [198] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:08.325 UTC [198] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:08.326 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:08.326 UTC [198] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:08.326 UTC [198] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:08.327 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:08.327 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:08.328 UTC [198] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:08.328 UTC [198] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:08.328 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:08.328 UTC [198] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:08.328 UTC [198] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:08.329 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:08.330 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:08.330 UTC [198] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:08.330 UTC [198] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:08.331 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:08.331 UTC [198] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:08.331 UTC [198] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:08.333 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:08.333 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:08.334 UTC [198] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:08.334 UTC [198] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:08.335 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:08.335 UTC [198] DEBUG:  building index "pg_toast_19892_index" on table "pg_toast_19892" serially
2025-04-19 08:19:08.336 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:08.336 UTC [198] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:08.336 UTC [198] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:08.338 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:08.339 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:08.339 UTC [198] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:08.339 UTC [198] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:08.339 UTC [198] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:08.340 UTC [198] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:08.340 UTC [198] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:08.341 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:08.342 UTC [198] DEBUG:  building index "pg_toast_19925_index" on table "pg_toast_19925" serially
2025-04-19 08:19:08.342 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:08.343 UTC [198] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:08.343 UTC [198] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:08.343 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:08.344 UTC [198] DEBUG:  building index "pg_toast_19936_index" on table "pg_toast_19936" serially
2025-04-19 08:19:08.345 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:08.345 UTC [198] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:08.345 UTC [198] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:08.346 UTC [198] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:08.347 UTC [198] DEBUG:  building index "pg_toast_19959_index" on table "pg_toast_19959" serially
2025-04-19 08:19:08.348 UTC [198] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:08.348 UTC [198] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:08.348 UTC [198] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:08.349 UTC [198] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:08.349 UTC [198] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:08.349 UTC [198] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:08.349 UTC [198] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:08.350 UTC [198] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:08.350 UTC [198] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:08.351 UTC [198] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:08.351 UTC [198] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:08.352 UTC [198] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:08.352 UTC [198] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:08.352 UTC [198] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:08.352 UTC [198] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:08.353 UTC [198] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:08.353 UTC [198] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:08.354 UTC [198] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:08.354 UTC [198] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:08.355 UTC [198] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:08.355 UTC [198] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:08.356 UTC [198] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:08.356 UTC [198] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:08.356 UTC [198] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:08.356 UTC [198] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:08.362 UTC [198] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:08.617 UTC [198] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$m7//w6Kxqf1MdxblFfJB7.ZKAjNUUGbsMMpDnGMBZch64G5EvKpze')
	                RETURNING id, username, email
	                
2025-04-19 08:19:08.618 UTC [198] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:08.619 UTC [198] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:17.594 UTC [199] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:19:17.875 UTC [199] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:19:21.785 UTC [198] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:19:22.074 UTC [198] DEBUG:  unexpected EOF on client connection
2025-04-19 08:19:23.824 UTC [207] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:23.832 UTC [207] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:23.838 UTC [207] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:23.838 UTC [207] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:23.844 UTC [207] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:23.853 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:23.860 UTC [207] DEBUG:  building index "pg_toast_19996_index" on table "pg_toast_19996" serially
2025-04-19 08:19:23.862 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:23.862 UTC [207] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:23.862 UTC [207] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:23.863 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:23.863 UTC [207] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:23.863 UTC [207] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:23.864 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:23.864 UTC [207] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:23.864 UTC [207] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:23.865 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:23.866 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:23.866 UTC [207] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:23.866 UTC [207] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:23.867 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:23.867 UTC [207] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:23.867 UTC [207] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:23.867 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:23.868 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:23.868 UTC [207] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:23.868 UTC [207] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:23.869 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:23.869 UTC [207] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:23.869 UTC [207] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:23.871 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:23.872 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:23.872 UTC [207] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:23.872 UTC [207] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:23.873 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:23.874 UTC [207] DEBUG:  building index "pg_toast_20057_index" on table "pg_toast_20057" serially
2025-04-19 08:19:23.875 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:23.875 UTC [207] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:23.875 UTC [207] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:23.876 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:23.877 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:23.878 UTC [207] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:23.878 UTC [207] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:23.878 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:23.878 UTC [207] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:23.878 UTC [207] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:23.880 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:23.881 UTC [207] DEBUG:  building index "pg_toast_20090_index" on table "pg_toast_20090" serially
2025-04-19 08:19:23.881 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:23.882 UTC [207] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:23.882 UTC [207] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:23.882 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:23.884 UTC [207] DEBUG:  building index "pg_toast_20101_index" on table "pg_toast_20101" serially
2025-04-19 08:19:23.885 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:23.885 UTC [207] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:23.885 UTC [207] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:23.887 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:23.888 UTC [207] DEBUG:  building index "pg_toast_20124_index" on table "pg_toast_20124" serially
2025-04-19 08:19:23.888 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:23.889 UTC [207] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:23.889 UTC [207] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:23.890 UTC [207] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:23.890 UTC [207] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:23.890 UTC [207] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:23.890 UTC [207] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:23.891 UTC [207] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:23.891 UTC [207] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:23.892 UTC [207] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:23.892 UTC [207] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:23.893 UTC [207] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:23.893 UTC [207] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:23.893 UTC [207] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:23.894 UTC [207] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:23.894 UTC [207] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:23.894 UTC [207] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:23.895 UTC [207] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:23.895 UTC [207] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:23.896 UTC [207] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:23.896 UTC [207] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:23.897 UTC [207] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:23.897 UTC [207] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:23.897 UTC [207] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:23.897 UTC [207] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:23.909 UTC [207] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:24.186 UTC [207] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$EzeJQbnM02gskfnkcJv51OaJvLiRGj4Syjq1fN0DxIrpxZ/tcDIfu')
	                RETURNING id, username, email
	                
2025-04-19 08:19:24.187 UTC [207] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:24.187 UTC [207] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:24.188 UTC [207] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:19:24.204 UTC [207] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:24.205 UTC [207] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:24.210 UTC [207] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:24.214 UTC [207] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:24.214 UTC [207] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:24.217 UTC [207] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:24.220 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:24.221 UTC [207] DEBUG:  building index "pg_toast_20160_index" on table "pg_toast_20160" serially
2025-04-19 08:19:24.222 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:24.222 UTC [207] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:24.222 UTC [207] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:24.223 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:24.223 UTC [207] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:24.223 UTC [207] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:24.224 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:24.224 UTC [207] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:24.224 UTC [207] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:24.224 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:24.225 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:24.226 UTC [207] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:24.226 UTC [207] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:24.227 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:24.227 UTC [207] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:24.227 UTC [207] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:24.228 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:24.232 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:24.232 UTC [207] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:24.232 UTC [207] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:24.233 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:24.234 UTC [207] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:24.234 UTC [207] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:24.237 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:24.238 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:24.239 UTC [207] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:24.239 UTC [207] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:24.241 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:24.243 UTC [207] DEBUG:  building index "pg_toast_20221_index" on table "pg_toast_20221" serially
2025-04-19 08:19:24.244 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:24.244 UTC [207] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:24.244 UTC [207] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:24.245 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:24.246 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:24.246 UTC [207] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:24.246 UTC [207] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:24.247 UTC [207] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:24.247 UTC [207] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:24.247 UTC [207] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:24.248 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:24.249 UTC [207] DEBUG:  building index "pg_toast_20254_index" on table "pg_toast_20254" serially
2025-04-19 08:19:24.250 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:24.250 UTC [207] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:24.250 UTC [207] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:24.251 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:24.252 UTC [207] DEBUG:  building index "pg_toast_20265_index" on table "pg_toast_20265" serially
2025-04-19 08:19:24.253 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:24.253 UTC [207] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:24.253 UTC [207] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:24.254 UTC [207] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:24.255 UTC [207] DEBUG:  building index "pg_toast_20288_index" on table "pg_toast_20288" serially
2025-04-19 08:19:24.256 UTC [207] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:24.256 UTC [207] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:24.256 UTC [207] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:24.257 UTC [207] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:24.257 UTC [207] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:24.257 UTC [207] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:24.257 UTC [207] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:24.258 UTC [207] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:24.258 UTC [207] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:24.259 UTC [207] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:24.259 UTC [207] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:24.260 UTC [207] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:24.260 UTC [207] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:24.260 UTC [207] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:24.260 UTC [207] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:24.261 UTC [207] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:24.261 UTC [207] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:24.262 UTC [207] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:24.262 UTC [207] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:24.265 UTC [207] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:24.265 UTC [207] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:24.266 UTC [207] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:24.266 UTC [207] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:24.266 UTC [207] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:24.266 UTC [207] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:24.272 UTC [207] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:24.529 UTC [207] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$z0Zd2JRdSZJmgiHRdmHLC.vIUny4PflhqGL5uZHlzJTCXpWpNSZm6')
	                RETURNING id, username, email
	                
2025-04-19 08:19:24.530 UTC [207] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:24.531 UTC [207] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:34.148 UTC [97] LOG:  statement: SELECT * FROM draws LIMIT 100
2025-04-19 08:19:34.180 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:19:34.190 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:19:34.196 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:19:36.447 UTC [97] LOG:  statement: SELECT * FROM analysis_results LIMIT 100
2025-04-19 08:19:36.453 UTC [88] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'analysis_results' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 08:19:36.558 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:19:36.562 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:19:36.564 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:19:37.676 UTC [207] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:19:37.822 UTC [97] LOG:  statement: SELECT * FROM numbers LIMIT 100
2025-04-19 08:19:37.841 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:19:37.856 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:19:37.860 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:19:37.972 UTC [207] DEBUG:  unexpected EOF on client connection
2025-04-19 08:19:38.513 UTC [97] LOG:  statement: SELECT * FROM prediction_numbers LIMIT 100
2025-04-19 08:19:38.520 UTC [88] LOG:  statement: SELECT 
	          
	          c.COLUMN_NAME "name", 
	          atttypid::regtype AS pg_reg_type,
	          DATA_TYPE "type",
	          IS_NULLABLE nullable, 
	          numeric_precision "precision",
	          numeric_scale "scale",
	          CHARACTER_MAXIMUM_LENGTH "maximum_length", 
	          COLUMN_DEFAULT "defaultValue", 
	          pg_catalog.col_description(pgc.oid, c.ordinal_position::int) AS "comment",
	          tc.constraint_type "key",
	          tc.constraint_name "constraint_name",
	          cc.table_name "referenced_table",
	          cc.column_name "referenced_column",
	          pa.*
	        FROM information_schema.columns c
	        JOIN pg_catalog.pg_class pgc ON c.table_name = pgc.relname 
	        JOIN pg_catalog.pg_namespace pgn ON pgn.oid=pgc.relnamespace and pgn.nspname=c.table_schema
	        JOIN pg_attribute pa on pa.attname =c.column_name and pa.attrelid =pgc.oid 
	        LEFT JOIN information_schema.key_column_usage ccu on ccu.table_schema=c.table_schema
	          and ccu.table_name=c.table_name and ccu.column_name=c.COLUMN_NAME
	        LEFT JOIN information_schema.table_constraints tc on tc.table_schema=c.table_schema 
	          and tc.table_name=c.table_name and tc.constraint_name=ccu.constraint_name
	        LEFT JOIN information_schema.constraint_column_usage cc on cc.table_schema=c.table_schema 
	          and cc.constraint_name=tc.constraint_name and  tc.constraint_type='FOREIGN KEY'
	        WHERE c.TABLE_SCHEMA = 'public' AND c.table_name = 'prediction_numbers' 
	        ORDER BY c.ORDINAL_POSITION;
2025-04-19 08:19:38.591 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:19:38.606 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:19:38.619 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:19:39.812 UTC [97] LOG:  statement: SELECT * FROM user_stats LIMIT 100
2025-04-19 08:19:39.822 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:19:39.833 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:19:39.836 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:19:39.993 UTC [222] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:39.998 UTC [222] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:40.004 UTC [222] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:40.004 UTC [222] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:40.014 UTC [222] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:40.027 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:40.038 UTC [222] DEBUG:  building index "pg_toast_20324_index" on table "pg_toast_20324" serially
2025-04-19 08:19:40.043 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:40.044 UTC [222] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:40.045 UTC [222] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:40.047 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:40.047 UTC [222] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:40.047 UTC [222] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:40.049 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:40.049 UTC [222] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:40.049 UTC [222] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:40.051 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:40.053 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:40.053 UTC [222] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:40.053 UTC [222] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:40.054 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:40.054 UTC [222] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:40.054 UTC [222] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:40.055 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:40.056 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:40.057 UTC [222] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:40.057 UTC [222] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:40.057 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:40.058 UTC [222] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:40.058 UTC [222] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:40.059 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:40.060 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:40.060 UTC [222] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:40.060 UTC [222] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:40.061 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:40.063 UTC [222] DEBUG:  building index "pg_toast_20385_index" on table "pg_toast_20385" serially
2025-04-19 08:19:40.064 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:40.064 UTC [222] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:40.064 UTC [222] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:40.065 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:40.066 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:40.067 UTC [222] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:40.067 UTC [222] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:40.067 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:40.068 UTC [222] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:40.068 UTC [222] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:40.069 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:40.073 UTC [222] DEBUG:  building index "pg_toast_20418_index" on table "pg_toast_20418" serially
2025-04-19 08:19:40.074 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:40.075 UTC [222] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:40.075 UTC [222] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:40.075 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:40.076 UTC [222] DEBUG:  building index "pg_toast_20429_index" on table "pg_toast_20429" serially
2025-04-19 08:19:40.077 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:40.077 UTC [222] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:40.077 UTC [222] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:40.079 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:40.080 UTC [222] DEBUG:  building index "pg_toast_20452_index" on table "pg_toast_20452" serially
2025-04-19 08:19:40.081 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:40.081 UTC [222] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:40.081 UTC [222] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:40.082 UTC [222] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:40.082 UTC [222] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:40.082 UTC [222] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:40.082 UTC [222] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:40.083 UTC [222] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:40.083 UTC [222] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:40.084 UTC [222] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:40.084 UTC [222] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:40.086 UTC [222] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:40.086 UTC [222] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:40.087 UTC [222] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:40.087 UTC [222] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:40.088 UTC [222] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:40.088 UTC [222] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:40.089 UTC [222] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:40.089 UTC [222] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:40.090 UTC [222] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:40.090 UTC [222] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:40.091 UTC [222] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:40.091 UTC [222] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:40.092 UTC [222] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:40.092 UTC [222] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:40.105 UTC [222] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:40.381 UTC [222] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Hj6YV.rdYwImucPY6I1R..fT0ZCsrFVIKbaDNIC2ypHOh6s9ZoL0q')
	                RETURNING id, username, email
	                
2025-04-19 08:19:40.383 UTC [222] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:40.383 UTC [222] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:40.384 UTC [222] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:19:40.392 UTC [222] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:40.393 UTC [222] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:40.395 UTC [222] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:40.399 UTC [222] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:40.399 UTC [222] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:40.402 UTC [222] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:40.407 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:40.409 UTC [222] DEBUG:  building index "pg_toast_20488_index" on table "pg_toast_20488" serially
2025-04-19 08:19:40.410 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:40.411 UTC [222] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:40.411 UTC [222] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:40.411 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:40.412 UTC [222] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:40.412 UTC [222] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:40.412 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:40.413 UTC [222] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:40.413 UTC [222] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:40.413 UTC [97] LOG:  statement: SELECT * FROM user_checks LIMIT 100
2025-04-19 08:19:40.414 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:40.415 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:40.415 UTC [222] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:40.415 UTC [222] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:40.416 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:40.416 UTC [222] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:40.416 UTC [222] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:40.417 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:40.418 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:40.418 UTC [222] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:40.418 UTC [222] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:40.419 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:40.420 UTC [222] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:40.420 UTC [222] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:40.421 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:40.423 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:40.423 UTC [222] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:40.423 UTC [222] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:40.424 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:40.425 UTC [222] DEBUG:  building index "pg_toast_20549_index" on table "pg_toast_20549" serially
2025-04-19 08:19:40.426 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:40.426 UTC [222] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:40.426 UTC [222] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:40.428 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:40.431 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:40.431 UTC [222] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:40.431 UTC [222] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:40.432 UTC [222] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:40.433 UTC [222] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:40.433 UTC [222] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:40.436 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:40.439 UTC [222] DEBUG:  building index "pg_toast_20582_index" on table "pg_toast_20582" serially
2025-04-19 08:19:40.441 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:40.441 UTC [222] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:40.441 UTC [222] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:40.442 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:40.444 UTC [222] DEBUG:  building index "pg_toast_20593_index" on table "pg_toast_20593" serially
2025-04-19 08:19:40.445 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:40.445 UTC [222] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:40.445 UTC [222] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:40.446 UTC [222] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:40.447 UTC [222] DEBUG:  building index "pg_toast_20616_index" on table "pg_toast_20616" serially
2025-04-19 08:19:40.448 UTC [222] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:40.448 UTC [222] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:40.448 UTC [222] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:40.449 UTC [222] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:40.449 UTC [222] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:40.450 UTC [222] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:40.450 UTC [222] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:40.451 UTC [222] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:40.451 UTC [222] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:40.451 UTC [222] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:40.451 UTC [222] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:40.452 UTC [222] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:40.452 UTC [222] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:40.453 UTC [222] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:40.453 UTC [222] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:40.454 UTC [222] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:40.454 UTC [222] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:40.455 UTC [222] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:40.455 UTC [222] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:40.456 UTC [222] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:40.456 UTC [222] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:40.457 UTC [222] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:40.457 UTC [222] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:40.457 UTC [222] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:40.457 UTC [222] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:40.464 UTC [222] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:40.470 UTC [88] LOG:  statement: SELECT
	        a.pid AS "ID",
	        query_start AS "Time",
	        datname AS "db",
	        CASE
	        WHEN c.relname IS NOT NULL THEN c.relname
	        ELSE l.virtualtransaction
	        END AS "Target",
	        l.mode AS "State",
	        query AS "SQL"
	      FROM
	        pg_stat_activity a
	        LEFT JOIN pg_locks l ON a.pid = l.pid
	        LEFT JOIN pg_class c ON l.relation = c.oid
	      ORDER BY
	        a.pid ASC,
	        c.relname ASC
2025-04-19 08:19:40.474 UTC [88] LOG:  statement: SHOW ALL
2025-04-19 08:19:40.481 UTC [88] LOG:  statement: SELECT
	        'db_numbackends' AS db,
	        pg_stat_get_db_numbackends(datid) AS status
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_commit',
	        pg_stat_get_db_xact_commit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_xact_rollback',
	        pg_stat_get_db_xact_rollback(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_fetched',
	        pg_stat_get_db_blocks_fetched(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
	      UNION ALL
	      SELECT
	        'db_blocks_hit',
	        pg_stat_get_db_blocks_hit(datid)
	      FROM
	        pg_stat_database
	      WHERE
	        datname = current_database()
2025-04-19 08:19:40.772 UTC [222] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$lUgnkhN5fPhxm0vVHuLO3eDLPpxXa9kbeujg37o.V/DzwnhqB508q')
	                RETURNING id, username, email
	                
2025-04-19 08:19:40.774 UTC [222] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:40.774 UTC [222] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:47.587 UTC [223] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:19:53.633 UTC [222] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:19:54.060 UTC [222] DEBUG:  unexpected EOF on client connection
2025-04-19 08:19:56.034 UTC [231] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:56.046 UTC [231] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:56.059 UTC [231] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:56.059 UTC [231] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:56.063 UTC [231] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:56.072 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:56.074 UTC [231] DEBUG:  building index "pg_toast_20652_index" on table "pg_toast_20652" serially
2025-04-19 08:19:56.076 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:56.076 UTC [231] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:56.076 UTC [231] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:56.077 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:56.077 UTC [231] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:56.077 UTC [231] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:56.078 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:56.079 UTC [231] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:56.079 UTC [231] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:56.079 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:56.080 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:56.080 UTC [231] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:56.080 UTC [231] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:56.081 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:56.081 UTC [231] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:56.081 UTC [231] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:56.082 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:56.083 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:56.083 UTC [231] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:56.083 UTC [231] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:56.084 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:56.084 UTC [231] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:56.084 UTC [231] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:56.086 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:56.087 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:56.087 UTC [231] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:56.087 UTC [231] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:56.088 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:56.090 UTC [231] DEBUG:  building index "pg_toast_20713_index" on table "pg_toast_20713" serially
2025-04-19 08:19:56.090 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:56.091 UTC [231] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:56.091 UTC [231] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:56.092 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:56.093 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:56.093 UTC [231] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:56.093 UTC [231] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:56.094 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:56.094 UTC [231] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:56.094 UTC [231] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:56.095 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:56.096 UTC [231] DEBUG:  building index "pg_toast_20746_index" on table "pg_toast_20746" serially
2025-04-19 08:19:56.097 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:56.097 UTC [231] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:56.097 UTC [231] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:56.098 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:56.099 UTC [231] DEBUG:  building index "pg_toast_20757_index" on table "pg_toast_20757" serially
2025-04-19 08:19:56.099 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:56.100 UTC [231] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:56.100 UTC [231] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:56.101 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:56.102 UTC [231] DEBUG:  building index "pg_toast_20780_index" on table "pg_toast_20780" serially
2025-04-19 08:19:56.103 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:56.103 UTC [231] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:56.103 UTC [231] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:56.104 UTC [231] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:56.104 UTC [231] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:56.104 UTC [231] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:56.104 UTC [231] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:56.105 UTC [231] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:56.105 UTC [231] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:56.106 UTC [231] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:56.106 UTC [231] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:56.107 UTC [231] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:56.107 UTC [231] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:56.108 UTC [231] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:56.108 UTC [231] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:56.109 UTC [231] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:56.109 UTC [231] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:56.109 UTC [231] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:56.109 UTC [231] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:56.110 UTC [231] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:56.110 UTC [231] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:56.111 UTC [231] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:56.111 UTC [231] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:56.111 UTC [231] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:56.111 UTC [231] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:56.122 UTC [231] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:56.388 UTC [231] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xZXHv8TUr4V8NkFZDzY3fuQhdX7fxqrAi6V/adwPr65PAq8MkUNxO')
	                RETURNING id, username, email
	                
2025-04-19 08:19:56.389 UTC [231] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:56.390 UTC [231] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:19:56.390 UTC [231] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:19:56.397 UTC [231] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:56.398 UTC [231] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:19:56.401 UTC [231] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:19:56.405 UTC [231] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:19:56.405 UTC [231] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:19:56.408 UTC [231] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:19:56.411 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:19:56.414 UTC [231] DEBUG:  building index "pg_toast_20816_index" on table "pg_toast_20816" serially
2025-04-19 08:19:56.415 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:19:56.416 UTC [231] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:19:56.416 UTC [231] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:19:56.416 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:19:56.417 UTC [231] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:19:56.417 UTC [231] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:19:56.417 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:19:56.418 UTC [231] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:19:56.418 UTC [231] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:19:56.418 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:19:56.419 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:19:56.420 UTC [231] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:19:56.420 UTC [231] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:19:56.420 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:19:56.421 UTC [231] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:19:56.421 UTC [231] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:19:56.421 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:19:56.422 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:19:56.422 UTC [231] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:19:56.422 UTC [231] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:19:56.423 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:19:56.423 UTC [231] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:19:56.423 UTC [231] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:19:56.424 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:19:56.425 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:19:56.425 UTC [231] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:19:56.425 UTC [231] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:19:56.427 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:19:56.428 UTC [231] DEBUG:  building index "pg_toast_20877_index" on table "pg_toast_20877" serially
2025-04-19 08:19:56.429 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:19:56.429 UTC [231] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:19:56.429 UTC [231] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:19:56.430 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:19:56.431 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:19:56.431 UTC [231] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:19:56.431 UTC [231] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:19:56.432 UTC [231] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:19:56.432 UTC [231] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:19:56.432 UTC [231] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:19:56.433 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:19:56.435 UTC [231] DEBUG:  building index "pg_toast_20910_index" on table "pg_toast_20910" serially
2025-04-19 08:19:56.436 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:19:56.437 UTC [231] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:19:56.437 UTC [231] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:19:56.438 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:19:56.441 UTC [231] DEBUG:  building index "pg_toast_20921_index" on table "pg_toast_20921" serially
2025-04-19 08:19:56.442 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:19:56.442 UTC [231] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:19:56.443 UTC [231] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:19:56.445 UTC [231] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:19:56.446 UTC [231] DEBUG:  building index "pg_toast_20944_index" on table "pg_toast_20944" serially
2025-04-19 08:19:56.447 UTC [231] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:19:56.447 UTC [231] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:19:56.447 UTC [231] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:19:56.448 UTC [231] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:19:56.448 UTC [231] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:19:56.449 UTC [231] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:19:56.449 UTC [231] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:19:56.450 UTC [231] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:19:56.450 UTC [231] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:19:56.451 UTC [231] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:19:56.451 UTC [231] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:19:56.452 UTC [231] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:19:56.452 UTC [231] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:19:56.453 UTC [231] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:19:56.453 UTC [231] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:19:56.454 UTC [231] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:19:56.454 UTC [231] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:19:56.455 UTC [231] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:19:56.455 UTC [231] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:19:56.457 UTC [231] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:19:56.457 UTC [231] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:19:56.458 UTC [231] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:19:56.458 UTC [231] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:19:56.460 UTC [231] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:19:56.460 UTC [231] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:19:56.478 UTC [231] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:19:56.736 UTC [231] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$S0m99t8PMkG5jG8lgEqjI.zGhud6k5yRTqZpkzVEFSrNvtwYH8zlO')
	                RETURNING id, username, email
	                
2025-04-19 08:19:56.737 UTC [231] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:19:56.738 UTC [231] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:09.874 UTC [231] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:20:10.223 UTC [231] DEBUG:  unexpected EOF on client connection
2025-04-19 08:20:12.772 UTC [246] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:20:12.795 UTC [246] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:20:12.805 UTC [246] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:20:12.805 UTC [246] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:20:12.813 UTC [246] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:20:12.822 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:20:12.829 UTC [246] DEBUG:  building index "pg_toast_20980_index" on table "pg_toast_20980" serially
2025-04-19 08:20:12.831 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:20:12.832 UTC [246] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:20:12.832 UTC [246] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:20:12.835 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:20:12.836 UTC [246] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:20:12.836 UTC [246] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:20:12.839 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:20:12.841 UTC [246] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:20:12.841 UTC [246] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:20:12.845 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:20:12.848 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:20:12.849 UTC [246] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:20:12.850 UTC [246] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:20:12.851 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:20:12.851 UTC [246] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:20:12.851 UTC [246] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:20:12.853 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:20:12.857 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:20:12.857 UTC [246] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:20:12.857 UTC [246] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:20:12.859 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:20:12.860 UTC [246] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:20:12.860 UTC [246] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:20:12.864 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:20:12.867 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:20:12.867 UTC [246] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:20:12.867 UTC [246] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:20:12.870 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:20:12.872 UTC [246] DEBUG:  building index "pg_toast_21041_index" on table "pg_toast_21041" serially
2025-04-19 08:20:12.873 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:20:12.874 UTC [246] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:20:12.874 UTC [246] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:20:12.875 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:20:12.877 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:20:12.877 UTC [246] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:20:12.877 UTC [246] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:20:12.878 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:20:12.879 UTC [246] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:20:12.879 UTC [246] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:20:12.884 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:20:12.887 UTC [246] DEBUG:  building index "pg_toast_21074_index" on table "pg_toast_21074" serially
2025-04-19 08:20:12.888 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:20:12.888 UTC [246] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:20:12.888 UTC [246] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:20:12.889 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:20:12.890 UTC [246] DEBUG:  building index "pg_toast_21085_index" on table "pg_toast_21085" serially
2025-04-19 08:20:12.892 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:20:12.892 UTC [246] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:20:12.892 UTC [246] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:20:12.895 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:20:12.896 UTC [246] DEBUG:  building index "pg_toast_21108_index" on table "pg_toast_21108" serially
2025-04-19 08:20:12.897 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:20:12.898 UTC [246] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:20:12.898 UTC [246] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:20:12.899 UTC [246] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:20:12.899 UTC [246] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:20:12.900 UTC [246] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:20:12.900 UTC [246] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:20:12.901 UTC [246] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:20:12.901 UTC [246] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:20:12.902 UTC [246] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:20:12.902 UTC [246] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:20:12.904 UTC [246] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:20:12.904 UTC [246] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:20:12.905 UTC [246] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:20:12.905 UTC [246] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:20:12.907 UTC [246] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:20:12.907 UTC [246] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:20:12.908 UTC [246] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:20:12.908 UTC [246] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:20:12.909 UTC [246] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:20:12.909 UTC [246] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:20:12.910 UTC [246] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:20:12.910 UTC [246] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:20:12.911 UTC [246] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:20:12.911 UTC [246] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:20:12.937 UTC [246] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:13.278 UTC [246] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$EC9PoA0ryTCxciS5PBDvsObMrD7ToQ8cR8Ct7Din2N2N2ZvEjAWoe')
	                RETURNING id, username, email
	                
2025-04-19 08:20:13.281 UTC [246] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:20:13.282 UTC [246] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:13.285 UTC [246] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:20:13.338 UTC [246] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:13.344 UTC [246] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:20:13.347 UTC [246] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:20:13.353 UTC [246] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:20:13.353 UTC [246] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:20:13.357 UTC [246] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:20:13.361 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:20:13.362 UTC [246] DEBUG:  building index "pg_toast_21144_index" on table "pg_toast_21144" serially
2025-04-19 08:20:13.363 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:20:13.364 UTC [246] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:20:13.364 UTC [246] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:20:13.364 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:20:13.365 UTC [246] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:20:13.365 UTC [246] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:20:13.366 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:20:13.366 UTC [246] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:20:13.366 UTC [246] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:20:13.367 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:20:13.368 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:20:13.368 UTC [246] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:20:13.368 UTC [246] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:20:13.369 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:20:13.369 UTC [246] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:20:13.369 UTC [246] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:20:13.373 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:20:13.378 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:20:13.379 UTC [246] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:20:13.379 UTC [246] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:20:13.382 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:20:13.382 UTC [246] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:20:13.382 UTC [246] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:20:13.390 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:20:13.391 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:20:13.392 UTC [246] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:20:13.392 UTC [246] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:20:13.394 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:20:13.397 UTC [246] DEBUG:  building index "pg_toast_21205_index" on table "pg_toast_21205" serially
2025-04-19 08:20:13.399 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:20:13.400 UTC [246] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:20:13.401 UTC [246] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:20:13.404 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:20:13.407 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:20:13.407 UTC [246] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:20:13.407 UTC [246] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:20:13.410 UTC [246] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:20:13.411 UTC [246] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:20:13.411 UTC [246] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:20:13.413 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:20:13.415 UTC [246] DEBUG:  building index "pg_toast_21238_index" on table "pg_toast_21238" serially
2025-04-19 08:20:13.417 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:20:13.417 UTC [246] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:20:13.417 UTC [246] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:20:13.418 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:20:13.419 UTC [246] DEBUG:  building index "pg_toast_21249_index" on table "pg_toast_21249" serially
2025-04-19 08:20:13.420 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:20:13.420 UTC [246] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:20:13.420 UTC [246] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:20:13.422 UTC [246] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:20:13.423 UTC [246] DEBUG:  building index "pg_toast_21272_index" on table "pg_toast_21272" serially
2025-04-19 08:20:13.424 UTC [246] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:20:13.424 UTC [246] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:20:13.424 UTC [246] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:20:13.425 UTC [246] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:20:13.425 UTC [246] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:20:13.427 UTC [246] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:20:13.427 UTC [246] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:20:13.428 UTC [246] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:20:13.428 UTC [246] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:20:13.429 UTC [246] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:20:13.429 UTC [246] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:20:13.430 UTC [246] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:20:13.430 UTC [246] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:20:13.431 UTC [246] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:20:13.431 UTC [246] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:20:13.433 UTC [246] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:20:13.433 UTC [246] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:20:13.434 UTC [246] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:20:13.434 UTC [246] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:20:13.435 UTC [246] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:20:13.435 UTC [246] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:20:13.436 UTC [246] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:20:13.436 UTC [246] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:20:13.437 UTC [246] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:20:13.437 UTC [246] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:20:13.450 UTC [246] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:13.707 UTC [246] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3griJgKMvO9WJyBf2uaBHOCD97W5BdxV/hZyJVeHhP1CkJfdLpY9W')
	                RETURNING id, username, email
	                
2025-04-19 08:20:13.708 UTC [246] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:20:13.709 UTC [246] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:17.590 UTC [247] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:20:17.843 UTC [247] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:20:26.060 UTC [246] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:20:26.354 UTC [246] DEBUG:  unexpected EOF on client connection
2025-04-19 08:20:28.359 UTC [255] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:20:28.368 UTC [255] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:20:28.379 UTC [255] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:20:28.379 UTC [255] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:20:28.384 UTC [255] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:20:28.387 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:20:28.392 UTC [255] DEBUG:  building index "pg_toast_21309_index" on table "pg_toast_21309" serially
2025-04-19 08:20:28.394 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:20:28.395 UTC [255] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:20:28.395 UTC [255] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:20:28.398 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:20:28.398 UTC [255] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:20:28.398 UTC [255] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:20:28.399 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:20:28.399 UTC [255] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:20:28.400 UTC [255] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:20:28.401 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:20:28.402 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:20:28.402 UTC [255] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:20:28.402 UTC [255] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:20:28.403 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:20:28.403 UTC [255] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:20:28.403 UTC [255] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:20:28.404 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:20:28.405 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:20:28.405 UTC [255] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:20:28.405 UTC [255] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:20:28.406 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:20:28.406 UTC [255] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:20:28.406 UTC [255] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:20:28.408 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:20:28.410 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:20:28.411 UTC [255] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:20:28.411 UTC [255] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:20:28.414 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:20:28.418 UTC [255] DEBUG:  building index "pg_toast_21370_index" on table "pg_toast_21370" serially
2025-04-19 08:20:28.420 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:20:28.421 UTC [255] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:20:28.421 UTC [255] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:20:28.422 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:20:28.423 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:20:28.423 UTC [255] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:20:28.423 UTC [255] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:20:28.424 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:20:28.424 UTC [255] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:20:28.424 UTC [255] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:20:28.425 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:20:28.426 UTC [255] DEBUG:  building index "pg_toast_21403_index" on table "pg_toast_21403" serially
2025-04-19 08:20:28.427 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:20:28.427 UTC [255] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:20:28.427 UTC [255] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:20:28.428 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:20:28.430 UTC [255] DEBUG:  building index "pg_toast_21414_index" on table "pg_toast_21414" serially
2025-04-19 08:20:28.431 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:20:28.431 UTC [255] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:20:28.431 UTC [255] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:20:28.433 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:20:28.434 UTC [255] DEBUG:  building index "pg_toast_21437_index" on table "pg_toast_21437" serially
2025-04-19 08:20:28.434 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:20:28.435 UTC [255] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:20:28.435 UTC [255] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:20:28.435 UTC [255] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:20:28.435 UTC [255] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:20:28.436 UTC [255] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:20:28.436 UTC [255] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:20:28.437 UTC [255] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:20:28.437 UTC [255] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:20:28.438 UTC [255] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:20:28.438 UTC [255] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:20:28.439 UTC [255] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:20:28.439 UTC [255] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:20:28.439 UTC [255] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:20:28.439 UTC [255] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:20:28.440 UTC [255] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:20:28.440 UTC [255] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:20:28.441 UTC [255] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:20:28.441 UTC [255] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:20:28.442 UTC [255] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:20:28.442 UTC [255] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:20:28.442 UTC [255] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:20:28.443 UTC [255] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:20:28.443 UTC [255] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:20:28.443 UTC [255] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:20:28.454 UTC [255] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:28.726 UTC [255] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$T6i0jx9P.049pYz6.DeSneu3ZGTczL1.HfArLAAeG0i6rrsjpLa7O')
	                RETURNING id, username, email
	                
2025-04-19 08:20:28.727 UTC [255] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:20:28.727 UTC [255] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:28.728 UTC [255] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:20:28.740 UTC [255] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:28.741 UTC [255] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:20:28.744 UTC [255] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:20:28.748 UTC [255] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:20:28.748 UTC [255] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:20:28.752 UTC [255] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:20:28.755 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:20:28.756 UTC [255] DEBUG:  building index "pg_toast_21473_index" on table "pg_toast_21473" serially
2025-04-19 08:20:28.758 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:20:28.758 UTC [255] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:20:28.758 UTC [255] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:20:28.759 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:20:28.759 UTC [255] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:20:28.759 UTC [255] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:20:28.760 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:20:28.760 UTC [255] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:20:28.760 UTC [255] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:20:28.761 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:20:28.762 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:20:28.762 UTC [255] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:20:28.762 UTC [255] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:20:28.762 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:20:28.763 UTC [255] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:20:28.763 UTC [255] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:20:28.764 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:20:28.764 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:20:28.765 UTC [255] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:20:28.765 UTC [255] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:20:28.765 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:20:28.765 UTC [255] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:20:28.765 UTC [255] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:20:28.766 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:20:28.768 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:20:28.768 UTC [255] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:20:28.768 UTC [255] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:20:28.770 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:20:28.771 UTC [255] DEBUG:  building index "pg_toast_21534_index" on table "pg_toast_21534" serially
2025-04-19 08:20:28.773 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:20:28.773 UTC [255] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:20:28.773 UTC [255] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:20:28.775 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:20:28.777 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:20:28.777 UTC [255] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:20:28.777 UTC [255] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:20:28.779 UTC [255] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:20:28.780 UTC [255] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:20:28.780 UTC [255] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:20:28.782 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:20:28.784 UTC [255] DEBUG:  building index "pg_toast_21567_index" on table "pg_toast_21567" serially
2025-04-19 08:20:28.785 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:20:28.785 UTC [255] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:20:28.785 UTC [255] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:20:28.787 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:20:28.788 UTC [255] DEBUG:  building index "pg_toast_21578_index" on table "pg_toast_21578" serially
2025-04-19 08:20:28.789 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:20:28.789 UTC [255] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:20:28.789 UTC [255] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:20:28.790 UTC [255] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:20:28.791 UTC [255] DEBUG:  building index "pg_toast_21601_index" on table "pg_toast_21601" serially
2025-04-19 08:20:28.792 UTC [255] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:20:28.792 UTC [255] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:20:28.792 UTC [255] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:20:28.793 UTC [255] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:20:28.793 UTC [255] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:20:28.794 UTC [255] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:20:28.794 UTC [255] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:20:28.795 UTC [255] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:20:28.795 UTC [255] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:20:28.796 UTC [255] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:20:28.796 UTC [255] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:20:28.797 UTC [255] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:20:28.797 UTC [255] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:20:28.798 UTC [255] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:20:28.798 UTC [255] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:20:28.799 UTC [255] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:20:28.799 UTC [255] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:20:28.799 UTC [255] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:20:28.800 UTC [255] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:20:28.800 UTC [255] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:20:28.800 UTC [255] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:20:28.801 UTC [255] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:20:28.801 UTC [255] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:20:28.802 UTC [255] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:20:28.802 UTC [255] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:20:28.809 UTC [255] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:29.090 UTC [255] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jof1KEqKONoYnRJGAU7j6.I3vGLPyJ7bM7KWBvCD1xq2bDO1W7n5y')
	                RETURNING id, username, email
	                
2025-04-19 08:20:29.094 UTC [255] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:20:29.095 UTC [255] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:41.963 UTC [255] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:20:42.274 UTC [255] DEBUG:  unexpected EOF on client connection
2025-04-19 08:20:44.423 UTC [269] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:20:44.431 UTC [269] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:20:44.438 UTC [269] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:20:44.438 UTC [269] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:20:44.441 UTC [269] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:20:44.446 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:20:44.455 UTC [269] DEBUG:  building index "pg_toast_21637_index" on table "pg_toast_21637" serially
2025-04-19 08:20:44.458 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:20:44.459 UTC [269] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:20:44.459 UTC [269] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:20:44.460 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:20:44.460 UTC [269] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:20:44.460 UTC [269] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:20:44.461 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:20:44.461 UTC [269] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:20:44.461 UTC [269] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:20:44.462 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:20:44.462 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:20:44.463 UTC [269] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:20:44.463 UTC [269] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:20:44.463 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:20:44.464 UTC [269] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:20:44.464 UTC [269] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:20:44.464 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:20:44.465 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:20:44.466 UTC [269] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:20:44.466 UTC [269] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:20:44.466 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:20:44.467 UTC [269] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:20:44.467 UTC [269] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:20:44.468 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:20:44.469 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:20:44.469 UTC [269] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:20:44.469 UTC [269] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:20:44.471 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:20:44.474 UTC [269] DEBUG:  building index "pg_toast_21698_index" on table "pg_toast_21698" serially
2025-04-19 08:20:44.475 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:20:44.475 UTC [269] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:20:44.475 UTC [269] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:20:44.476 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:20:44.477 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:20:44.478 UTC [269] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:20:44.478 UTC [269] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:20:44.479 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:20:44.479 UTC [269] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:20:44.479 UTC [269] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:20:44.480 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:20:44.481 UTC [269] DEBUG:  building index "pg_toast_21731_index" on table "pg_toast_21731" serially
2025-04-19 08:20:44.482 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:20:44.482 UTC [269] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:20:44.482 UTC [269] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:20:44.483 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:20:44.484 UTC [269] DEBUG:  building index "pg_toast_21742_index" on table "pg_toast_21742" serially
2025-04-19 08:20:44.485 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:20:44.485 UTC [269] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:20:44.485 UTC [269] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:20:44.487 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:20:44.488 UTC [269] DEBUG:  building index "pg_toast_21765_index" on table "pg_toast_21765" serially
2025-04-19 08:20:44.489 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:20:44.489 UTC [269] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:20:44.489 UTC [269] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:20:44.490 UTC [269] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:20:44.490 UTC [269] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:20:44.491 UTC [269] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:20:44.491 UTC [269] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:20:44.492 UTC [269] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:20:44.492 UTC [269] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:20:44.493 UTC [269] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:20:44.493 UTC [269] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:20:44.494 UTC [269] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:20:44.494 UTC [269] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:20:44.494 UTC [269] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:20:44.494 UTC [269] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:20:44.495 UTC [269] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:20:44.495 UTC [269] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:20:44.496 UTC [269] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:20:44.496 UTC [269] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:20:44.497 UTC [269] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:20:44.497 UTC [269] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:20:44.498 UTC [269] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:20:44.498 UTC [269] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:20:44.498 UTC [269] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:20:44.498 UTC [269] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:20:44.515 UTC [269] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:44.785 UTC [269] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kIUbQf20cD428tC/WPtqaubJUhbgx49SkMoXIPYo.fVt3.jDa2ICK')
	                RETURNING id, username, email
	                
2025-04-19 08:20:44.786 UTC [269] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:20:44.787 UTC [269] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:44.787 UTC [269] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:20:44.797 UTC [269] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:44.798 UTC [269] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:20:44.801 UTC [269] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:20:44.805 UTC [269] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:20:44.805 UTC [269] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:20:44.809 UTC [269] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:20:44.812 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:20:44.813 UTC [269] DEBUG:  building index "pg_toast_21801_index" on table "pg_toast_21801" serially
2025-04-19 08:20:44.815 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:20:44.815 UTC [269] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:20:44.815 UTC [269] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:20:44.816 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:20:44.816 UTC [269] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:20:44.816 UTC [269] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:20:44.817 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:20:44.817 UTC [269] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:20:44.817 UTC [269] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:20:44.818 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:20:44.819 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:20:44.819 UTC [269] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:20:44.819 UTC [269] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:20:44.820 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:20:44.820 UTC [269] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:20:44.820 UTC [269] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:20:44.821 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:20:44.821 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:20:44.822 UTC [269] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:20:44.822 UTC [269] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:20:44.822 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:20:44.823 UTC [269] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:20:44.823 UTC [269] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:20:44.824 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:20:44.825 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:20:44.825 UTC [269] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:20:44.825 UTC [269] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:20:44.826 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:20:44.827 UTC [269] DEBUG:  building index "pg_toast_21862_index" on table "pg_toast_21862" serially
2025-04-19 08:20:44.828 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:20:44.828 UTC [269] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:20:44.828 UTC [269] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:20:44.829 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:20:44.830 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:20:44.830 UTC [269] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:20:44.830 UTC [269] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:20:44.831 UTC [269] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:20:44.831 UTC [269] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:20:44.831 UTC [269] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:20:44.833 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:20:44.834 UTC [269] DEBUG:  building index "pg_toast_21895_index" on table "pg_toast_21895" serially
2025-04-19 08:20:44.835 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:20:44.835 UTC [269] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:20:44.835 UTC [269] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:20:44.836 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:20:44.837 UTC [269] DEBUG:  building index "pg_toast_21906_index" on table "pg_toast_21906" serially
2025-04-19 08:20:44.839 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:20:44.839 UTC [269] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:20:44.839 UTC [269] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:20:44.842 UTC [269] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:20:44.843 UTC [269] DEBUG:  building index "pg_toast_21929_index" on table "pg_toast_21929" serially
2025-04-19 08:20:44.844 UTC [269] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:20:44.844 UTC [269] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:20:44.844 UTC [269] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:20:44.845 UTC [269] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:20:44.845 UTC [269] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:20:44.846 UTC [269] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:20:44.846 UTC [269] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:20:44.851 UTC [269] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:20:44.851 UTC [269] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:20:44.853 UTC [269] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:20:44.853 UTC [269] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:20:44.854 UTC [269] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:20:44.855 UTC [269] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:20:44.856 UTC [269] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:20:44.856 UTC [269] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:20:44.857 UTC [269] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:20:44.857 UTC [269] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:20:44.858 UTC [269] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:20:44.858 UTC [269] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:20:44.859 UTC [269] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:20:44.859 UTC [269] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:20:44.860 UTC [269] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:20:44.860 UTC [269] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:20:44.861 UTC [269] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:20:44.861 UTC [269] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:20:44.867 UTC [269] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:20:45.110 UTC [269] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$LdfAkkSwIFJCEmFERCWM4u6/9l.qYLD69xvoHNG0dBHvNfrArKk7y')
	                RETURNING id, username, email
	                
2025-04-19 08:20:45.111 UTC [269] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:20:45.111 UTC [269] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:20:47.611 UTC [270] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:20:57.881 UTC [269] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:20:58.193 UTC [269] DEBUG:  unexpected EOF on client connection
2025-04-19 08:21:00.921 UTC [285] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:00.927 UTC [285] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:00.935 UTC [285] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:00.935 UTC [285] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:00.942 UTC [285] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:00.949 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:00.955 UTC [285] DEBUG:  building index "pg_toast_21965_index" on table "pg_toast_21965" serially
2025-04-19 08:21:00.959 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:00.961 UTC [285] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:00.961 UTC [285] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:00.963 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:00.963 UTC [285] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:00.963 UTC [285] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:00.963 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:00.964 UTC [285] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:00.964 UTC [285] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:00.964 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:00.965 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:00.965 UTC [285] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:00.965 UTC [285] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:00.966 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:00.966 UTC [285] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:00.966 UTC [285] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:00.967 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:00.968 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:00.968 UTC [285] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:00.968 UTC [285] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:00.969 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:00.970 UTC [285] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:00.970 UTC [285] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:00.971 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:00.972 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:00.972 UTC [285] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:00.972 UTC [285] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:00.973 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:00.975 UTC [285] DEBUG:  building index "pg_toast_22026_index" on table "pg_toast_22026" serially
2025-04-19 08:21:00.980 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:00.980 UTC [285] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:00.981 UTC [285] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:00.986 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:00.988 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:00.988 UTC [285] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:00.988 UTC [285] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:00.990 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:00.990 UTC [285] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:00.991 UTC [285] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:00.992 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:00.993 UTC [285] DEBUG:  building index "pg_toast_22059_index" on table "pg_toast_22059" serially
2025-04-19 08:21:00.994 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:00.995 UTC [285] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:00.995 UTC [285] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:00.995 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:00.996 UTC [285] DEBUG:  building index "pg_toast_22070_index" on table "pg_toast_22070" serially
2025-04-19 08:21:00.997 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:00.997 UTC [285] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:00.997 UTC [285] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:00.999 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:00.999 UTC [285] DEBUG:  building index "pg_toast_22093_index" on table "pg_toast_22093" serially
2025-04-19 08:21:01.001 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:01.001 UTC [285] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:01.001 UTC [285] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:01.002 UTC [285] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:01.002 UTC [285] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:01.003 UTC [285] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:01.003 UTC [285] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:01.003 UTC [285] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:01.003 UTC [285] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:01.005 UTC [285] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:01.005 UTC [285] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:01.005 UTC [285] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:01.005 UTC [285] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:01.006 UTC [285] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:01.006 UTC [285] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:01.007 UTC [285] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:01.007 UTC [285] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:01.008 UTC [285] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:01.008 UTC [285] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:01.010 UTC [285] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:01.010 UTC [285] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:01.011 UTC [285] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:01.011 UTC [285] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:01.012 UTC [285] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:01.012 UTC [285] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:01.030 UTC [285] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:01.328 UTC [285] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$OMNyveKCuCefQXih4aI6MewZ1c69XM6PqNYa3uN/KF9bz.T0LlKtC')
	                RETURNING id, username, email
	                
2025-04-19 08:21:01.329 UTC [285] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:01.330 UTC [285] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:01.331 UTC [285] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:21:01.350 UTC [285] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:01.352 UTC [285] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:01.355 UTC [285] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:01.360 UTC [285] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:01.360 UTC [285] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:01.365 UTC [285] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:01.368 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:01.370 UTC [285] DEBUG:  building index "pg_toast_22129_index" on table "pg_toast_22129" serially
2025-04-19 08:21:01.372 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:01.373 UTC [285] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:01.373 UTC [285] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:01.374 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:01.375 UTC [285] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:01.375 UTC [285] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:01.376 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:01.376 UTC [285] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:01.376 UTC [285] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:01.377 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:01.379 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:01.380 UTC [285] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:01.380 UTC [285] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:01.381 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:01.382 UTC [285] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:01.382 UTC [285] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:01.383 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:01.384 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:01.385 UTC [285] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:01.385 UTC [285] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:01.386 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:01.386 UTC [285] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:01.386 UTC [285] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:01.388 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:01.389 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:01.389 UTC [285] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:01.389 UTC [285] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:01.390 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:01.392 UTC [285] DEBUG:  building index "pg_toast_22190_index" on table "pg_toast_22190" serially
2025-04-19 08:21:01.392 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:01.392 UTC [285] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:01.392 UTC [285] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:01.393 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:01.394 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:01.395 UTC [285] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:01.395 UTC [285] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:01.395 UTC [285] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:01.396 UTC [285] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:01.396 UTC [285] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:01.398 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:01.399 UTC [285] DEBUG:  building index "pg_toast_22223_index" on table "pg_toast_22223" serially
2025-04-19 08:21:01.399 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:01.399 UTC [285] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:01.399 UTC [285] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:01.400 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:01.401 UTC [285] DEBUG:  building index "pg_toast_22234_index" on table "pg_toast_22234" serially
2025-04-19 08:21:01.402 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:01.402 UTC [285] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:01.402 UTC [285] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:01.404 UTC [285] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:01.405 UTC [285] DEBUG:  building index "pg_toast_22257_index" on table "pg_toast_22257" serially
2025-04-19 08:21:01.406 UTC [285] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:01.406 UTC [285] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:01.406 UTC [285] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:01.407 UTC [285] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:01.407 UTC [285] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:01.408 UTC [285] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:01.408 UTC [285] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:01.409 UTC [285] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:01.409 UTC [285] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:01.410 UTC [285] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:01.410 UTC [285] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:01.411 UTC [285] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:01.411 UTC [285] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:01.412 UTC [285] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:01.412 UTC [285] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:01.413 UTC [285] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:01.413 UTC [285] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:01.414 UTC [285] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:01.414 UTC [285] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:01.415 UTC [285] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:01.415 UTC [285] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:01.416 UTC [285] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:01.416 UTC [285] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:01.417 UTC [285] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:01.417 UTC [285] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:01.424 UTC [285] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:01.671 UTC [285] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$//lkZtYmJQqegRfr.PDls.GS1WjRIC1pHTyWppiThTrH8PJPc/hPG')
	                RETURNING id, username, email
	                
2025-04-19 08:21:01.672 UTC [285] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:01.672 UTC [285] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:14.062 UTC [285] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:21:14.397 UTC [285] DEBUG:  unexpected EOF on client connection
2025-04-19 08:21:17.042 UTC [293] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:17.053 UTC [293] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:17.062 UTC [293] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:17.062 UTC [293] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:17.071 UTC [293] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:17.082 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:17.085 UTC [293] DEBUG:  building index "pg_toast_22293_index" on table "pg_toast_22293" serially
2025-04-19 08:21:17.086 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:17.087 UTC [293] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:17.087 UTC [293] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:17.088 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:17.088 UTC [293] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:17.088 UTC [293] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:17.089 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:17.089 UTC [293] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:17.089 UTC [293] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:17.090 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:17.091 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:17.091 UTC [293] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:17.091 UTC [293] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:17.092 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:17.092 UTC [293] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:17.092 UTC [293] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:17.093 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:17.094 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:17.094 UTC [293] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:17.094 UTC [293] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:17.095 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:17.095 UTC [293] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:17.095 UTC [293] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:17.098 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:17.099 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:17.100 UTC [293] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:17.100 UTC [293] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:17.101 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:17.103 UTC [293] DEBUG:  building index "pg_toast_22354_index" on table "pg_toast_22354" serially
2025-04-19 08:21:17.103 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:17.104 UTC [293] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:17.104 UTC [293] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:17.105 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:17.106 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:17.106 UTC [293] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:17.106 UTC [293] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:17.107 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:17.107 UTC [293] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:17.107 UTC [293] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:17.108 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:17.110 UTC [293] DEBUG:  building index "pg_toast_22387_index" on table "pg_toast_22387" serially
2025-04-19 08:21:17.111 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:17.111 UTC [293] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:17.111 UTC [293] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:17.111 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:17.112 UTC [293] DEBUG:  building index "pg_toast_22398_index" on table "pg_toast_22398" serially
2025-04-19 08:21:17.113 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:17.113 UTC [293] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:17.113 UTC [293] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:17.115 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:17.116 UTC [293] DEBUG:  building index "pg_toast_22421_index" on table "pg_toast_22421" serially
2025-04-19 08:21:17.117 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:17.117 UTC [293] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:17.117 UTC [293] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:17.118 UTC [293] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:17.118 UTC [293] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:17.119 UTC [293] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:17.119 UTC [293] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:17.120 UTC [293] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:17.120 UTC [293] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:17.120 UTC [293] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:17.120 UTC [293] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:17.121 UTC [293] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:17.121 UTC [293] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:17.122 UTC [293] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:17.122 UTC [293] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:17.123 UTC [293] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:17.123 UTC [293] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:17.124 UTC [293] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:17.124 UTC [293] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:17.125 UTC [293] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:17.125 UTC [293] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:17.127 UTC [293] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:17.127 UTC [293] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:17.129 UTC [293] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:17.129 UTC [293] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:17.146 UTC [293] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:17.457 UTC [293] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$nwvA.VP58xpwxVRuK4EhaOieyII4GrdEnxqy84u/NyS39UBQluzYq')
	                RETURNING id, username, email
	                
2025-04-19 08:21:17.458 UTC [293] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:17.458 UTC [293] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:17.459 UTC [293] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:21:17.476 UTC [293] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:17.478 UTC [293] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:17.481 UTC [293] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:17.487 UTC [293] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:17.487 UTC [293] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:17.491 UTC [293] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:17.495 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:17.496 UTC [293] DEBUG:  building index "pg_toast_22457_index" on table "pg_toast_22457" serially
2025-04-19 08:21:17.497 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:17.498 UTC [293] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:17.498 UTC [293] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:17.498 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:17.499 UTC [293] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:17.499 UTC [293] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:17.500 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:17.500 UTC [293] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:17.500 UTC [293] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:17.501 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:17.504 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:17.505 UTC [293] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:17.505 UTC [293] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:17.506 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:17.507 UTC [293] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:17.507 UTC [293] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:17.508 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:17.510 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:17.511 UTC [293] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:17.511 UTC [293] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:17.512 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:17.512 UTC [293] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:17.512 UTC [293] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:17.514 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:17.517 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:17.517 UTC [293] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:17.517 UTC [293] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:17.518 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:17.520 UTC [293] DEBUG:  building index "pg_toast_22518_index" on table "pg_toast_22518" serially
2025-04-19 08:21:17.520 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:17.521 UTC [293] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:17.521 UTC [293] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:17.522 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:17.523 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:17.523 UTC [293] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:17.523 UTC [293] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:17.525 UTC [293] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:17.526 UTC [293] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:17.526 UTC [293] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:17.528 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:17.530 UTC [293] DEBUG:  building index "pg_toast_22551_index" on table "pg_toast_22551" serially
2025-04-19 08:21:17.531 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:17.531 UTC [293] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:17.531 UTC [293] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:17.532 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:17.533 UTC [293] DEBUG:  building index "pg_toast_22562_index" on table "pg_toast_22562" serially
2025-04-19 08:21:17.534 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:17.534 UTC [293] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:17.534 UTC [293] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:17.536 UTC [293] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:17.536 UTC [293] DEBUG:  building index "pg_toast_22585_index" on table "pg_toast_22585" serially
2025-04-19 08:21:17.537 UTC [293] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:17.537 UTC [293] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:17.537 UTC [293] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:17.539 UTC [293] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:17.539 UTC [293] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:17.540 UTC [293] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:17.540 UTC [293] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:17.541 UTC [293] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:17.541 UTC [293] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:17.542 UTC [293] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:17.542 UTC [293] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:17.542 UTC [293] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:17.542 UTC [293] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:17.543 UTC [293] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:17.543 UTC [293] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:17.544 UTC [293] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:17.544 UTC [293] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:17.546 UTC [293] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:17.546 UTC [293] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:17.547 UTC [293] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:17.548 UTC [293] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:17.548 UTC [293] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:17.548 UTC [293] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:17.549 UTC [293] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:17.549 UTC [293] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:17.558 UTC [293] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:17.571 UTC [294] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:21:17.788 UTC [294] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:21:17.835 UTC [293] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$1lWZ3CCOlPAJATKgRNHNTedu9h29ENsM0J/lJVfX/EmSpMZ.UBkre')
	                RETURNING id, username, email
	                
2025-04-19 08:21:17.836 UTC [293] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:17.836 UTC [293] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:17.988 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 08:21:30.167 UTC [293] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:21:30.471 UTC [293] DEBUG:  unexpected EOF on client connection
2025-04-19 08:21:34.025 UTC [309] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:34.040 UTC [309] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:34.047 UTC [309] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:34.047 UTC [309] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:34.053 UTC [309] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:34.061 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:34.067 UTC [309] DEBUG:  building index "pg_toast_22622_index" on table "pg_toast_22622" serially
2025-04-19 08:21:34.071 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:34.072 UTC [309] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:34.072 UTC [309] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:34.073 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:34.073 UTC [309] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:34.074 UTC [309] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:34.074 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:34.074 UTC [309] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:34.074 UTC [309] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:34.075 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:34.077 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:34.077 UTC [309] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:34.077 UTC [309] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:34.078 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:34.078 UTC [309] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:34.078 UTC [309] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:34.079 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:34.080 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:34.081 UTC [309] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:34.081 UTC [309] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:34.082 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:34.082 UTC [309] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:34.082 UTC [309] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:34.083 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:34.085 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:34.085 UTC [309] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:34.085 UTC [309] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:34.087 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:34.091 UTC [309] DEBUG:  building index "pg_toast_22683_index" on table "pg_toast_22683" serially
2025-04-19 08:21:34.097 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:34.097 UTC [309] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:34.097 UTC [309] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:34.100 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:34.102 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:34.102 UTC [309] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:34.102 UTC [309] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:34.104 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:34.104 UTC [309] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:34.104 UTC [309] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:34.105 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:34.108 UTC [309] DEBUG:  building index "pg_toast_22716_index" on table "pg_toast_22716" serially
2025-04-19 08:21:34.114 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:34.116 UTC [309] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:34.116 UTC [309] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:34.119 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:34.122 UTC [309] DEBUG:  building index "pg_toast_22727_index" on table "pg_toast_22727" serially
2025-04-19 08:21:34.124 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:34.124 UTC [309] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:34.125 UTC [309] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:34.129 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:34.131 UTC [309] DEBUG:  building index "pg_toast_22750_index" on table "pg_toast_22750" serially
2025-04-19 08:21:34.133 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:34.133 UTC [309] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:34.133 UTC [309] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:34.134 UTC [309] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:34.134 UTC [309] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:34.135 UTC [309] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:34.135 UTC [309] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:34.136 UTC [309] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:34.136 UTC [309] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:34.137 UTC [309] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:34.137 UTC [309] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:34.138 UTC [309] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:34.138 UTC [309] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:34.139 UTC [309] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:34.139 UTC [309] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:34.140 UTC [309] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:34.140 UTC [309] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:34.141 UTC [309] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:34.141 UTC [309] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:34.142 UTC [309] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:34.142 UTC [309] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:34.146 UTC [309] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:34.146 UTC [309] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:34.147 UTC [309] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:34.147 UTC [309] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:34.165 UTC [309] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:34.452 UTC [309] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$s2e4vWf1ybZs0nGS.PUw6OSfjmJq9vH1oYuCQkruOcNvH2i2N.ko2')
	                RETURNING id, username, email
	                
2025-04-19 08:21:34.453 UTC [309] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:34.454 UTC [309] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:34.455 UTC [309] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:21:34.465 UTC [309] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:34.467 UTC [309] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:34.469 UTC [309] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:34.474 UTC [309] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:34.474 UTC [309] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:34.477 UTC [309] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:34.480 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:34.481 UTC [309] DEBUG:  building index "pg_toast_22786_index" on table "pg_toast_22786" serially
2025-04-19 08:21:34.482 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:34.483 UTC [309] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:34.483 UTC [309] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:34.483 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:34.484 UTC [309] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:34.484 UTC [309] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:34.484 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:34.485 UTC [309] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:34.485 UTC [309] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:34.485 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:34.487 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:34.487 UTC [309] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:34.487 UTC [309] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:34.488 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:34.488 UTC [309] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:34.488 UTC [309] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:34.489 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:34.489 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:34.490 UTC [309] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:34.490 UTC [309] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:34.491 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:34.491 UTC [309] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:34.491 UTC [309] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:34.493 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:34.495 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:34.495 UTC [309] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:34.495 UTC [309] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:34.497 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:34.499 UTC [309] DEBUG:  building index "pg_toast_22847_index" on table "pg_toast_22847" serially
2025-04-19 08:21:34.501 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:34.502 UTC [309] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:34.502 UTC [309] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:34.504 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:34.505 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:34.506 UTC [309] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:34.506 UTC [309] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:34.507 UTC [309] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:34.507 UTC [309] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:34.507 UTC [309] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:34.508 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:34.511 UTC [309] DEBUG:  building index "pg_toast_22880_index" on table "pg_toast_22880" serially
2025-04-19 08:21:34.513 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:34.513 UTC [309] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:34.513 UTC [309] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:34.514 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:34.515 UTC [309] DEBUG:  building index "pg_toast_22891_index" on table "pg_toast_22891" serially
2025-04-19 08:21:34.516 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:34.516 UTC [309] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:34.516 UTC [309] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:34.519 UTC [309] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:34.520 UTC [309] DEBUG:  building index "pg_toast_22914_index" on table "pg_toast_22914" serially
2025-04-19 08:21:34.521 UTC [309] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:34.522 UTC [309] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:34.522 UTC [309] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:34.522 UTC [309] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:34.522 UTC [309] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:34.524 UTC [309] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:34.524 UTC [309] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:34.525 UTC [309] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:34.525 UTC [309] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:34.526 UTC [309] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:34.526 UTC [309] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:34.527 UTC [309] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:34.527 UTC [309] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:34.528 UTC [309] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:34.528 UTC [309] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:34.529 UTC [309] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:34.529 UTC [309] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:34.530 UTC [309] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:34.530 UTC [309] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:34.531 UTC [309] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:34.531 UTC [309] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:34.532 UTC [309] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:34.532 UTC [309] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:34.533 UTC [309] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:34.533 UTC [309] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:34.542 UTC [309] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:34.801 UTC [309] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$riNDovaPmhC2h1YuThFbVusws4Bx57eMkJQvVbPsN444CRC2yslbm')
	                RETURNING id, username, email
	                
2025-04-19 08:21:34.802 UTC [309] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:34.803 UTC [309] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:46.252 UTC [309] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:21:46.677 UTC [309] DEBUG:  unexpected EOF on client connection
2025-04-19 08:21:47.586 UTC [317] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:21:49.996 UTC [318] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:50.007 UTC [318] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:50.027 UTC [318] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:50.027 UTC [318] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:50.033 UTC [318] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:50.037 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:50.042 UTC [318] DEBUG:  building index "pg_toast_22950_index" on table "pg_toast_22950" serially
2025-04-19 08:21:50.044 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:50.045 UTC [318] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:50.045 UTC [318] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:50.046 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:50.046 UTC [318] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:50.046 UTC [318] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:50.047 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:50.047 UTC [318] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:50.047 UTC [318] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:50.048 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:50.049 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:50.049 UTC [318] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:50.049 UTC [318] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:50.050 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:50.050 UTC [318] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:50.050 UTC [318] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:50.051 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:50.054 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:50.055 UTC [318] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:50.055 UTC [318] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:50.056 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:50.056 UTC [318] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:50.056 UTC [318] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:50.058 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:50.059 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:50.060 UTC [318] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:50.060 UTC [318] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:50.061 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:50.063 UTC [318] DEBUG:  building index "pg_toast_23011_index" on table "pg_toast_23011" serially
2025-04-19 08:21:50.064 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:50.064 UTC [318] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:50.064 UTC [318] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:50.065 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:50.067 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:50.067 UTC [318] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:50.067 UTC [318] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:50.068 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:50.068 UTC [318] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:50.068 UTC [318] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:50.070 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:50.072 UTC [318] DEBUG:  building index "pg_toast_23044_index" on table "pg_toast_23044" serially
2025-04-19 08:21:50.075 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:50.076 UTC [318] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:50.076 UTC [318] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:50.077 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:50.083 UTC [318] DEBUG:  building index "pg_toast_23055_index" on table "pg_toast_23055" serially
2025-04-19 08:21:50.086 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:50.087 UTC [318] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:50.087 UTC [318] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:50.089 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:50.092 UTC [318] DEBUG:  building index "pg_toast_23078_index" on table "pg_toast_23078" serially
2025-04-19 08:21:50.095 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:50.096 UTC [318] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:50.096 UTC [318] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:50.098 UTC [318] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:50.098 UTC [318] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:50.100 UTC [318] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:50.100 UTC [318] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:50.102 UTC [318] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:50.102 UTC [318] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:50.103 UTC [318] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:50.103 UTC [318] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:50.104 UTC [318] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:50.104 UTC [318] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:50.105 UTC [318] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:50.105 UTC [318] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:50.106 UTC [318] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:50.106 UTC [318] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:50.108 UTC [318] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:50.108 UTC [318] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:50.109 UTC [318] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:50.109 UTC [318] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:50.110 UTC [318] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:50.110 UTC [318] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:50.111 UTC [318] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:50.111 UTC [318] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:50.126 UTC [318] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:50.503 UTC [318] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$faF8gdEPP6Ja70aQtJq2KuABfcMOoDiL5C0wp8rfHjfys5ncCLGO6')
	                RETURNING id, username, email
	                
2025-04-19 08:21:50.504 UTC [318] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:50.504 UTC [318] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:21:50.506 UTC [318] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:21:50.524 UTC [318] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:50.527 UTC [318] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:21:50.530 UTC [318] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:21:50.535 UTC [318] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:21:50.535 UTC [318] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:21:50.539 UTC [318] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:21:50.543 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:21:50.545 UTC [318] DEBUG:  building index "pg_toast_23114_index" on table "pg_toast_23114" serially
2025-04-19 08:21:50.547 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:21:50.547 UTC [318] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:21:50.547 UTC [318] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:21:50.548 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:21:50.548 UTC [318] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:21:50.548 UTC [318] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:21:50.549 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:21:50.550 UTC [318] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:21:50.550 UTC [318] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:21:50.550 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:21:50.551 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:21:50.552 UTC [318] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:21:50.552 UTC [318] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:21:50.552 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:21:50.553 UTC [318] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:21:50.553 UTC [318] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:21:50.553 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:21:50.554 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:21:50.555 UTC [318] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:21:50.555 UTC [318] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:21:50.555 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:21:50.556 UTC [318] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:21:50.556 UTC [318] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:21:50.557 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:21:50.558 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:21:50.558 UTC [318] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:21:50.558 UTC [318] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:21:50.559 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:21:50.561 UTC [318] DEBUG:  building index "pg_toast_23175_index" on table "pg_toast_23175" serially
2025-04-19 08:21:50.562 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:21:50.562 UTC [318] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:21:50.562 UTC [318] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:21:50.563 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:21:50.564 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:21:50.564 UTC [318] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:21:50.564 UTC [318] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:21:50.565 UTC [318] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:21:50.565 UTC [318] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:21:50.565 UTC [318] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:21:50.567 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:21:50.568 UTC [318] DEBUG:  building index "pg_toast_23208_index" on table "pg_toast_23208" serially
2025-04-19 08:21:50.569 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:21:50.569 UTC [318] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:21:50.569 UTC [318] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:21:50.570 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:21:50.571 UTC [318] DEBUG:  building index "pg_toast_23219_index" on table "pg_toast_23219" serially
2025-04-19 08:21:50.572 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:21:50.572 UTC [318] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:21:50.572 UTC [318] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:21:50.574 UTC [318] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:21:50.577 UTC [318] DEBUG:  building index "pg_toast_23242_index" on table "pg_toast_23242" serially
2025-04-19 08:21:50.578 UTC [318] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:21:50.579 UTC [318] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:21:50.579 UTC [318] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:21:50.581 UTC [318] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:21:50.581 UTC [318] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:21:50.583 UTC [318] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:21:50.583 UTC [318] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:21:50.586 UTC [318] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:21:50.586 UTC [318] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:21:50.589 UTC [318] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:21:50.589 UTC [318] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:21:50.591 UTC [318] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:21:50.591 UTC [318] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:21:50.594 UTC [318] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:21:50.594 UTC [318] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:21:50.596 UTC [318] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:21:50.596 UTC [318] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:21:50.597 UTC [318] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:21:50.597 UTC [318] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:21:50.599 UTC [318] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:21:50.599 UTC [318] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:21:50.600 UTC [318] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:21:50.600 UTC [318] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:21:50.602 UTC [318] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:21:50.602 UTC [318] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:21:50.614 UTC [318] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:21:50.921 UTC [318] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$0GguI5tfqBowiRqq0piE4.bqeOoW0c113bywks.RMmkpWwMi8fAMi')
	                RETURNING id, username, email
	                
2025-04-19 08:21:50.925 UTC [318] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:21:50.927 UTC [318] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:02.944 UTC [318] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:22:03.613 UTC [318] DEBUG:  unexpected EOF on client connection
2025-04-19 08:22:08.396 UTC [333] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:08.444 UTC [333] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:08.476 UTC [333] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:08.476 UTC [333] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:08.495 UTC [333] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:08.501 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:08.513 UTC [333] DEBUG:  building index "pg_toast_23278_index" on table "pg_toast_23278" serially
2025-04-19 08:22:08.519 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:08.520 UTC [333] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:08.520 UTC [333] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:08.521 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:08.522 UTC [333] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:08.522 UTC [333] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:08.523 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:08.524 UTC [333] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:08.524 UTC [333] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:08.525 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:08.527 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:08.527 UTC [333] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:08.527 UTC [333] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:08.528 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:08.528 UTC [333] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:08.528 UTC [333] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:08.530 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:08.531 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:08.532 UTC [333] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:08.532 UTC [333] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:08.533 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:08.533 UTC [333] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:08.533 UTC [333] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:08.535 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:08.537 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:08.537 UTC [333] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:08.537 UTC [333] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:08.539 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:08.553 UTC [333] DEBUG:  building index "pg_toast_23339_index" on table "pg_toast_23339" serially
2025-04-19 08:22:08.555 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:08.555 UTC [333] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:08.555 UTC [333] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:08.557 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:08.559 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:08.560 UTC [333] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:08.560 UTC [333] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:08.561 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:08.562 UTC [333] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:08.562 UTC [333] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:08.564 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:08.566 UTC [333] DEBUG:  building index "pg_toast_23372_index" on table "pg_toast_23372" serially
2025-04-19 08:22:08.568 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:08.568 UTC [333] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:08.568 UTC [333] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:08.570 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:08.572 UTC [333] DEBUG:  building index "pg_toast_23383_index" on table "pg_toast_23383" serially
2025-04-19 08:22:08.574 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:08.574 UTC [333] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:08.574 UTC [333] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:08.579 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:08.585 UTC [333] DEBUG:  building index "pg_toast_23406_index" on table "pg_toast_23406" serially
2025-04-19 08:22:08.587 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:08.588 UTC [333] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:08.588 UTC [333] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:08.590 UTC [333] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:08.590 UTC [333] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:08.592 UTC [333] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:08.592 UTC [333] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:08.595 UTC [333] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:08.595 UTC [333] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:08.598 UTC [333] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:08.598 UTC [333] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:08.601 UTC [333] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:08.601 UTC [333] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:08.602 UTC [333] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:08.602 UTC [333] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:08.604 UTC [333] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:08.604 UTC [333] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:08.605 UTC [333] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:08.605 UTC [333] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:08.607 UTC [333] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:08.607 UTC [333] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:08.608 UTC [333] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:08.608 UTC [333] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:08.609 UTC [333] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:08.609 UTC [333] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:08.640 UTC [333] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:09.073 UTC [333] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$2wYD5jC7TsJ5siP.id2KXuuucH6PQmNh6cQYZB/6w.XPrl2uCAEWW')
	                RETURNING id, username, email
	                
2025-04-19 08:22:09.078 UTC [333] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:09.080 UTC [333] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:09.082 UTC [333] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:22:09.102 UTC [333] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:09.114 UTC [333] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:09.120 UTC [333] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:09.129 UTC [333] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:09.129 UTC [333] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:09.133 UTC [333] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:09.140 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:09.142 UTC [333] DEBUG:  building index "pg_toast_23442_index" on table "pg_toast_23442" serially
2025-04-19 08:22:09.144 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:09.144 UTC [333] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:09.144 UTC [333] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:09.145 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:09.146 UTC [333] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:09.146 UTC [333] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:09.147 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:09.147 UTC [333] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:09.147 UTC [333] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:09.148 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:09.149 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:09.150 UTC [333] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:09.150 UTC [333] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:09.151 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:09.151 UTC [333] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:09.151 UTC [333] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:09.152 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:09.153 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:09.154 UTC [333] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:09.154 UTC [333] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:09.154 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:09.155 UTC [333] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:09.155 UTC [333] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:09.157 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:09.158 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:09.159 UTC [333] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:09.159 UTC [333] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:09.161 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:09.162 UTC [333] DEBUG:  building index "pg_toast_23503_index" on table "pg_toast_23503" serially
2025-04-19 08:22:09.164 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:09.164 UTC [333] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:09.164 UTC [333] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:09.177 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:09.184 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:09.187 UTC [333] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:09.187 UTC [333] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:09.189 UTC [333] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:09.190 UTC [333] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:09.190 UTC [333] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:09.192 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:09.195 UTC [333] DEBUG:  building index "pg_toast_23536_index" on table "pg_toast_23536" serially
2025-04-19 08:22:09.197 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:09.197 UTC [333] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:09.197 UTC [333] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:09.199 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:09.206 UTC [333] DEBUG:  building index "pg_toast_23547_index" on table "pg_toast_23547" serially
2025-04-19 08:22:09.207 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:09.208 UTC [333] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:09.208 UTC [333] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:09.211 UTC [333] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:09.212 UTC [333] DEBUG:  building index "pg_toast_23570_index" on table "pg_toast_23570" serially
2025-04-19 08:22:09.218 UTC [333] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:09.221 UTC [333] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:09.221 UTC [333] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:09.223 UTC [333] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:09.223 UTC [333] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:09.226 UTC [333] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:09.226 UTC [333] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:09.228 UTC [333] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:09.228 UTC [333] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:09.230 UTC [333] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:09.230 UTC [333] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:09.232 UTC [333] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:09.232 UTC [333] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:09.238 UTC [333] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:09.238 UTC [333] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:09.241 UTC [333] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:09.242 UTC [333] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:09.245 UTC [333] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:09.245 UTC [333] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:09.252 UTC [333] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:09.252 UTC [333] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:09.259 UTC [333] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:09.259 UTC [333] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:09.264 UTC [333] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:09.264 UTC [333] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:09.318 UTC [333] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:09.760 UTC [333] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$oU45hrxW.O74seNV7xMQoOoiqkJAehja6Dr3iRH/O/KjAoJc0TaZa')
	                RETURNING id, username, email
	                
2025-04-19 08:22:09.763 UTC [333] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:09.764 UTC [333] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:17.604 UTC [341] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:22:17.852 UTC [341] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:22:19.710 UTC [333] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:22:20.053 UTC [333] DEBUG:  unexpected EOF on client connection
2025-04-19 08:22:23.079 UTC [348] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:23.098 UTC [348] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:23.109 UTC [348] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:23.109 UTC [348] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:23.118 UTC [348] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:23.128 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:23.136 UTC [348] DEBUG:  building index "pg_toast_23607_index" on table "pg_toast_23607" serially
2025-04-19 08:22:23.138 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:23.138 UTC [348] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:23.138 UTC [348] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:23.139 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:23.140 UTC [348] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:23.140 UTC [348] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:23.140 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:23.141 UTC [348] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:23.141 UTC [348] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:23.142 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:23.143 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:23.143 UTC [348] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:23.143 UTC [348] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:23.144 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:23.144 UTC [348] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:23.144 UTC [348] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:23.145 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:23.147 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:23.147 UTC [348] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:23.147 UTC [348] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:23.148 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:23.148 UTC [348] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:23.148 UTC [348] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:23.149 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:23.150 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:23.150 UTC [348] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:23.150 UTC [348] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:23.151 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:23.156 UTC [348] DEBUG:  building index "pg_toast_23668_index" on table "pg_toast_23668" serially
2025-04-19 08:22:23.157 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:23.157 UTC [348] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:23.157 UTC [348] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:23.160 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:23.162 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:23.163 UTC [348] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:23.163 UTC [348] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:23.164 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:23.164 UTC [348] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:23.164 UTC [348] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:23.165 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:23.167 UTC [348] DEBUG:  building index "pg_toast_23701_index" on table "pg_toast_23701" serially
2025-04-19 08:22:23.169 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:23.169 UTC [348] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:23.169 UTC [348] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:23.170 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:23.171 UTC [348] DEBUG:  building index "pg_toast_23712_index" on table "pg_toast_23712" serially
2025-04-19 08:22:23.173 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:23.173 UTC [348] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:23.173 UTC [348] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:23.174 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:23.175 UTC [348] DEBUG:  building index "pg_toast_23735_index" on table "pg_toast_23735" serially
2025-04-19 08:22:23.177 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:23.178 UTC [348] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:23.178 UTC [348] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:23.180 UTC [348] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:23.180 UTC [348] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:23.183 UTC [348] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:23.184 UTC [348] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:23.186 UTC [348] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:23.186 UTC [348] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:23.188 UTC [348] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:23.188 UTC [348] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:23.188 UTC [348] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:23.188 UTC [348] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:23.189 UTC [348] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:23.189 UTC [348] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:23.190 UTC [348] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:23.190 UTC [348] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:23.191 UTC [348] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:23.191 UTC [348] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:23.192 UTC [348] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:23.192 UTC [348] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:23.193 UTC [348] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:23.193 UTC [348] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:23.195 UTC [348] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:23.195 UTC [348] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:23.242 UTC [348] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:23.557 UTC [348] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$b8z7cluHLWnDc2uGGNEQEOP.t0fcbo/uF8fuo4IqZCJuhb6Qxgbj2')
	                RETURNING id, username, email
	                
2025-04-19 08:22:23.564 UTC [348] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:23.566 UTC [348] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:23.572 UTC [348] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:22:23.606 UTC [348] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:23.615 UTC [348] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:23.618 UTC [348] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:23.633 UTC [348] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:23.633 UTC [348] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:23.639 UTC [348] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:23.643 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:23.645 UTC [348] DEBUG:  building index "pg_toast_23771_index" on table "pg_toast_23771" serially
2025-04-19 08:22:23.647 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:23.647 UTC [348] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:23.647 UTC [348] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:23.648 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:23.649 UTC [348] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:23.649 UTC [348] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:23.649 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:23.650 UTC [348] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:23.650 UTC [348] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:23.651 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:23.652 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:23.652 UTC [348] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:23.652 UTC [348] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:23.653 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:23.653 UTC [348] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:23.653 UTC [348] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:23.655 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:23.656 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:23.656 UTC [348] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:23.656 UTC [348] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:23.657 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:23.658 UTC [348] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:23.658 UTC [348] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:23.659 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:23.660 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:23.660 UTC [348] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:23.660 UTC [348] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:23.661 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:23.663 UTC [348] DEBUG:  building index "pg_toast_23832_index" on table "pg_toast_23832" serially
2025-04-19 08:22:23.663 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:23.664 UTC [348] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:23.664 UTC [348] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:23.665 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:23.666 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:23.666 UTC [348] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:23.666 UTC [348] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:23.667 UTC [348] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:23.667 UTC [348] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:23.667 UTC [348] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:23.671 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:23.675 UTC [348] DEBUG:  building index "pg_toast_23865_index" on table "pg_toast_23865" serially
2025-04-19 08:22:23.677 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:23.678 UTC [348] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:23.678 UTC [348] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:23.680 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:23.682 UTC [348] DEBUG:  building index "pg_toast_23876_index" on table "pg_toast_23876" serially
2025-04-19 08:22:23.683 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:23.684 UTC [348] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:23.684 UTC [348] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:23.687 UTC [348] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:23.688 UTC [348] DEBUG:  building index "pg_toast_23899_index" on table "pg_toast_23899" serially
2025-04-19 08:22:23.690 UTC [348] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:23.690 UTC [348] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:23.690 UTC [348] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:23.691 UTC [348] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:23.692 UTC [348] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:23.693 UTC [348] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:23.693 UTC [348] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:23.694 UTC [348] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:23.694 UTC [348] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:23.695 UTC [348] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:23.695 UTC [348] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:23.696 UTC [348] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:23.696 UTC [348] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:23.697 UTC [348] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:23.697 UTC [348] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:23.699 UTC [348] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:23.699 UTC [348] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:23.700 UTC [348] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:23.700 UTC [348] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:23.701 UTC [348] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:23.701 UTC [348] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:23.702 UTC [348] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:23.702 UTC [348] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:23.703 UTC [348] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:23.703 UTC [348] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:23.714 UTC [348] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:24.397 UTC [348] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$xhmWyeaIqc6AOvTPLeF0w.9hbJRZKJCrQZIw8NwPRyHQI8zF5HeQS')
	                RETURNING id, username, email
	                
2025-04-19 08:22:24.402 UTC [348] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:24.404 UTC [348] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:35.902 UTC [348] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:22:36.235 UTC [348] DEBUG:  unexpected EOF on client connection
2025-04-19 08:22:42.886 UTC [363] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:42.910 UTC [363] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:42.920 UTC [363] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:42.920 UTC [363] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:42.930 UTC [363] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:42.939 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:42.955 UTC [363] DEBUG:  building index "pg_toast_23935_index" on table "pg_toast_23935" serially
2025-04-19 08:22:42.960 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:42.961 UTC [363] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:42.961 UTC [363] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:42.964 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:42.964 UTC [363] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:42.965 UTC [363] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:42.969 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:42.970 UTC [363] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:42.970 UTC [363] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:42.971 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:42.972 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:42.973 UTC [363] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:42.973 UTC [363] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:42.974 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:42.974 UTC [363] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:42.974 UTC [363] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:42.975 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:42.977 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:42.978 UTC [363] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:42.978 UTC [363] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:42.979 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:42.979 UTC [363] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:42.979 UTC [363] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:42.981 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:42.982 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:42.983 UTC [363] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:42.983 UTC [363] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:42.984 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:42.987 UTC [363] DEBUG:  building index "pg_toast_23996_index" on table "pg_toast_23996" serially
2025-04-19 08:22:42.988 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:42.989 UTC [363] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:42.989 UTC [363] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:42.992 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:42.996 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:42.997 UTC [363] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:42.997 UTC [363] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:42.999 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:42.999 UTC [363] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:43.000 UTC [363] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:43.004 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:43.005 UTC [363] DEBUG:  building index "pg_toast_24029_index" on table "pg_toast_24029" serially
2025-04-19 08:22:43.006 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:43.007 UTC [363] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:43.007 UTC [363] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:43.007 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:43.009 UTC [363] DEBUG:  building index "pg_toast_24040_index" on table "pg_toast_24040" serially
2025-04-19 08:22:43.012 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:43.012 UTC [363] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:43.012 UTC [363] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:43.014 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:43.017 UTC [363] DEBUG:  building index "pg_toast_24063_index" on table "pg_toast_24063" serially
2025-04-19 08:22:43.018 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:43.018 UTC [363] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:43.019 UTC [363] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:43.020 UTC [363] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:43.020 UTC [363] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:43.021 UTC [363] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:43.021 UTC [363] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:43.022 UTC [363] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:43.022 UTC [363] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:43.023 UTC [363] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:43.023 UTC [363] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:43.024 UTC [363] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:43.024 UTC [363] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:43.025 UTC [363] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:43.025 UTC [363] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:43.028 UTC [363] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:43.028 UTC [363] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:43.030 UTC [363] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:43.030 UTC [363] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:43.031 UTC [363] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:43.031 UTC [363] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:43.032 UTC [363] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:43.036 UTC [363] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:43.038 UTC [363] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:43.038 UTC [363] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:43.062 UTC [363] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:43.427 UTC [363] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$VmRUGJs3TJjr/e.UQrBj7u5K24i9jplFyQ6r1NHhfPzCP..i5Puee')
	                RETURNING id, username, email
	                
2025-04-19 08:22:43.438 UTC [363] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:43.442 UTC [363] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:43.448 UTC [363] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:22:43.481 UTC [363] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:43.493 UTC [363] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:43.498 UTC [363] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:43.505 UTC [363] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:43.505 UTC [363] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:43.510 UTC [363] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:43.518 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:43.519 UTC [363] DEBUG:  building index "pg_toast_24099_index" on table "pg_toast_24099" serially
2025-04-19 08:22:43.521 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:43.521 UTC [363] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:43.521 UTC [363] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:43.522 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:43.522 UTC [363] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:43.522 UTC [363] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:43.526 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:43.528 UTC [363] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:43.528 UTC [363] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:43.531 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:43.533 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:43.534 UTC [363] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:43.534 UTC [363] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:43.535 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:43.535 UTC [363] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:43.535 UTC [363] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:43.536 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:43.537 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:43.538 UTC [363] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:43.538 UTC [363] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:43.539 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:43.539 UTC [363] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:43.539 UTC [363] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:43.542 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:43.548 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:43.550 UTC [363] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:43.550 UTC [363] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:43.554 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:43.563 UTC [363] DEBUG:  building index "pg_toast_24160_index" on table "pg_toast_24160" serially
2025-04-19 08:22:43.567 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:43.567 UTC [363] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:43.567 UTC [363] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:43.569 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:43.571 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:43.571 UTC [363] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:43.571 UTC [363] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:43.572 UTC [363] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:43.572 UTC [363] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:43.572 UTC [363] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:43.574 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:43.575 UTC [363] DEBUG:  building index "pg_toast_24193_index" on table "pg_toast_24193" serially
2025-04-19 08:22:43.577 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:43.577 UTC [363] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:43.577 UTC [363] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:43.580 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:43.586 UTC [363] DEBUG:  building index "pg_toast_24204_index" on table "pg_toast_24204" serially
2025-04-19 08:22:43.589 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:43.590 UTC [363] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:43.590 UTC [363] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:43.594 UTC [363] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:43.595 UTC [363] DEBUG:  building index "pg_toast_24227_index" on table "pg_toast_24227" serially
2025-04-19 08:22:43.597 UTC [363] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:43.597 UTC [363] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:43.597 UTC [363] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:43.598 UTC [363] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:43.598 UTC [363] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:43.600 UTC [363] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:43.600 UTC [363] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:43.601 UTC [363] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:43.601 UTC [363] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:43.604 UTC [363] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:43.604 UTC [363] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:43.607 UTC [363] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:43.607 UTC [363] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:43.608 UTC [363] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:43.608 UTC [363] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:43.610 UTC [363] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:43.610 UTC [363] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:43.612 UTC [363] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:43.612 UTC [363] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:43.613 UTC [363] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:43.613 UTC [363] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:43.616 UTC [363] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:43.616 UTC [363] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:43.617 UTC [363] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:43.617 UTC [363] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:43.638 UTC [363] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:44.005 UTC [363] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$M9VJPmY4e6UKZq3G4wW.fe2nFXLsIhGeDJhXV8evBTpiOwiHiL91.')
	                RETURNING id, username, email
	                
2025-04-19 08:22:44.007 UTC [363] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:44.008 UTC [363] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:47.618 UTC [364] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:22:52.660 UTC [363] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:22:53.034 UTC [363] DEBUG:  unexpected EOF on client connection
2025-04-19 08:22:55.343 UTC [372] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:55.349 UTC [372] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:55.359 UTC [372] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:55.359 UTC [372] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:55.362 UTC [372] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:55.366 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:55.371 UTC [372] DEBUG:  building index "pg_toast_24263_index" on table "pg_toast_24263" serially
2025-04-19 08:22:55.373 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:55.374 UTC [372] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:55.374 UTC [372] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:55.375 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:55.375 UTC [372] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:55.375 UTC [372] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:55.376 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:55.376 UTC [372] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:55.376 UTC [372] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:55.378 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:55.381 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:55.381 UTC [372] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:55.382 UTC [372] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:55.383 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:55.383 UTC [372] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:55.383 UTC [372] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:55.384 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:55.386 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:55.387 UTC [372] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:55.387 UTC [372] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:55.388 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:55.388 UTC [372] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:55.388 UTC [372] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:55.390 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:55.391 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:55.391 UTC [372] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:55.391 UTC [372] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:55.392 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:55.394 UTC [372] DEBUG:  building index "pg_toast_24324_index" on table "pg_toast_24324" serially
2025-04-19 08:22:55.395 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:55.395 UTC [372] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:55.395 UTC [372] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:55.396 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:55.397 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:55.397 UTC [372] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:55.397 UTC [372] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:55.398 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:55.398 UTC [372] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:55.398 UTC [372] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:55.399 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:55.400 UTC [372] DEBUG:  building index "pg_toast_24357_index" on table "pg_toast_24357" serially
2025-04-19 08:22:55.401 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:55.402 UTC [372] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:55.402 UTC [372] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:55.402 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:55.405 UTC [372] DEBUG:  building index "pg_toast_24368_index" on table "pg_toast_24368" serially
2025-04-19 08:22:55.406 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:55.407 UTC [372] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:55.407 UTC [372] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:55.409 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:55.410 UTC [372] DEBUG:  building index "pg_toast_24391_index" on table "pg_toast_24391" serially
2025-04-19 08:22:55.411 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:55.412 UTC [372] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:55.412 UTC [372] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:55.414 UTC [372] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:55.414 UTC [372] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:55.415 UTC [372] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:55.415 UTC [372] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:55.416 UTC [372] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:55.416 UTC [372] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:55.417 UTC [372] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:55.417 UTC [372] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:55.418 UTC [372] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:55.418 UTC [372] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:55.419 UTC [372] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:55.419 UTC [372] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:55.419 UTC [372] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:55.419 UTC [372] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:55.420 UTC [372] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:55.420 UTC [372] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:55.421 UTC [372] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:55.421 UTC [372] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:55.422 UTC [372] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:55.422 UTC [372] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:55.423 UTC [372] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:55.423 UTC [372] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:55.436 UTC [372] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:55.708 UTC [372] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4.QMoLTFlsQMAEBKUSSn4.UBki2G8O3zzkxL8rpmkjAMSdTCiIAya')
	                RETURNING id, username, email
	                
2025-04-19 08:22:55.708 UTC [372] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:55.709 UTC [372] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:22:55.709 UTC [372] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:22:55.724 UTC [372] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:55.725 UTC [372] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:22:55.729 UTC [372] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:22:55.734 UTC [372] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:22:55.734 UTC [372] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:22:55.739 UTC [372] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:22:55.743 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:22:55.744 UTC [372] DEBUG:  building index "pg_toast_24427_index" on table "pg_toast_24427" serially
2025-04-19 08:22:55.745 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:22:55.746 UTC [372] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:22:55.746 UTC [372] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:22:55.746 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:22:55.747 UTC [372] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:22:55.747 UTC [372] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:22:55.748 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:22:55.748 UTC [372] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:22:55.748 UTC [372] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:22:55.749 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:22:55.750 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:22:55.751 UTC [372] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:22:55.751 UTC [372] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:22:55.752 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:22:55.753 UTC [372] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:22:55.753 UTC [372] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:22:55.754 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:22:55.755 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:22:55.755 UTC [372] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:22:55.755 UTC [372] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:22:55.756 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:22:55.757 UTC [372] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:22:55.757 UTC [372] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:22:55.759 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:22:55.761 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:22:55.762 UTC [372] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:22:55.762 UTC [372] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:22:55.764 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:22:55.765 UTC [372] DEBUG:  building index "pg_toast_24488_index" on table "pg_toast_24488" serially
2025-04-19 08:22:55.766 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:22:55.767 UTC [372] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:22:55.767 UTC [372] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:22:55.769 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:22:55.771 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:22:55.772 UTC [372] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:22:55.772 UTC [372] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:22:55.772 UTC [372] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:22:55.773 UTC [372] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:22:55.773 UTC [372] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:22:55.774 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:22:55.775 UTC [372] DEBUG:  building index "pg_toast_24521_index" on table "pg_toast_24521" serially
2025-04-19 08:22:55.776 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:22:55.776 UTC [372] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:22:55.776 UTC [372] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:22:55.776 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:22:55.777 UTC [372] DEBUG:  building index "pg_toast_24532_index" on table "pg_toast_24532" serially
2025-04-19 08:22:55.778 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:22:55.778 UTC [372] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:22:55.778 UTC [372] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:22:55.779 UTC [372] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:22:55.780 UTC [372] DEBUG:  building index "pg_toast_24555_index" on table "pg_toast_24555" serially
2025-04-19 08:22:55.781 UTC [372] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:22:55.781 UTC [372] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:22:55.781 UTC [372] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:22:55.782 UTC [372] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:22:55.782 UTC [372] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:22:55.783 UTC [372] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:22:55.783 UTC [372] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:22:55.784 UTC [372] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:22:55.784 UTC [372] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:22:55.785 UTC [372] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:22:55.785 UTC [372] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:22:55.786 UTC [372] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:22:55.786 UTC [372] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:22:55.786 UTC [372] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:22:55.786 UTC [372] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:22:55.787 UTC [372] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:22:55.787 UTC [372] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:22:55.788 UTC [372] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:22:55.788 UTC [372] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:22:55.789 UTC [372] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:22:55.789 UTC [372] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:22:55.790 UTC [372] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:22:55.790 UTC [372] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:22:55.790 UTC [372] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:22:55.790 UTC [372] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:22:55.797 UTC [372] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:22:56.044 UTC [372] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$eLMzSBVKA3T2hCcysKJzauf1e8PPb5s76aK8HKUcwACoi4NzwS3l2')
	                RETURNING id, username, email
	                
2025-04-19 08:22:56.045 UTC [372] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:22:56.045 UTC [372] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:08.926 UTC [372] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:23:09.225 UTC [372] DEBUG:  unexpected EOF on client connection
2025-04-19 08:23:12.106 UTC [380] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:12.113 UTC [380] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:12.119 UTC [380] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:12.119 UTC [380] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:12.123 UTC [380] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:12.127 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:12.134 UTC [380] DEBUG:  building index "pg_toast_24591_index" on table "pg_toast_24591" serially
2025-04-19 08:23:12.137 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:12.138 UTC [380] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:12.138 UTC [380] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:12.140 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:12.140 UTC [380] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:12.140 UTC [380] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:12.141 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:12.142 UTC [380] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:12.142 UTC [380] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:12.143 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:12.145 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:12.145 UTC [380] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:12.145 UTC [380] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:12.147 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:12.147 UTC [380] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:12.147 UTC [380] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:12.148 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:12.149 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:12.149 UTC [380] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:12.150 UTC [380] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:12.150 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:12.151 UTC [380] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:12.151 UTC [380] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:12.152 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:12.153 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:12.153 UTC [380] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:12.153 UTC [380] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:12.154 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:12.156 UTC [380] DEBUG:  building index "pg_toast_24652_index" on table "pg_toast_24652" serially
2025-04-19 08:23:12.157 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:12.157 UTC [380] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:12.157 UTC [380] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:12.158 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:12.159 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:12.160 UTC [380] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:12.160 UTC [380] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:12.161 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:12.161 UTC [380] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:12.161 UTC [380] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:12.162 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:12.164 UTC [380] DEBUG:  building index "pg_toast_24685_index" on table "pg_toast_24685" serially
2025-04-19 08:23:12.165 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:12.165 UTC [380] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:12.165 UTC [380] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:12.166 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:12.167 UTC [380] DEBUG:  building index "pg_toast_24696_index" on table "pg_toast_24696" serially
2025-04-19 08:23:12.168 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:12.168 UTC [380] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:12.168 UTC [380] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:12.169 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:12.170 UTC [380] DEBUG:  building index "pg_toast_24719_index" on table "pg_toast_24719" serially
2025-04-19 08:23:12.171 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:12.171 UTC [380] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:12.171 UTC [380] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:12.172 UTC [380] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:12.172 UTC [380] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:12.173 UTC [380] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:12.173 UTC [380] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:12.174 UTC [380] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:12.174 UTC [380] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:12.175 UTC [380] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:12.175 UTC [380] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:12.176 UTC [380] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:12.176 UTC [380] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:12.177 UTC [380] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:12.177 UTC [380] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:12.177 UTC [380] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:12.177 UTC [380] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:12.178 UTC [380] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:12.178 UTC [380] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:12.179 UTC [380] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:12.179 UTC [380] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:12.180 UTC [380] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:12.180 UTC [380] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:12.180 UTC [380] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:12.180 UTC [380] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:12.199 UTC [380] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:12.473 UTC [380] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yGhuFB3WtVY6meQUj3/ynuI4175oskSs7XQayEe4B2rhansW0yqGG')
	                RETURNING id, username, email
	                
2025-04-19 08:23:12.474 UTC [380] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:12.474 UTC [380] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:12.475 UTC [380] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:23:12.489 UTC [380] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:12.491 UTC [380] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:12.495 UTC [380] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:12.500 UTC [380] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:12.500 UTC [380] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:12.504 UTC [380] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:12.507 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:12.508 UTC [380] DEBUG:  building index "pg_toast_24755_index" on table "pg_toast_24755" serially
2025-04-19 08:23:12.509 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:12.509 UTC [380] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:12.509 UTC [380] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:12.510 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:12.510 UTC [380] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:12.510 UTC [380] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:12.511 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:12.511 UTC [380] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:12.511 UTC [380] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:12.512 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:12.513 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:12.513 UTC [380] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:12.513 UTC [380] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:12.514 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:12.514 UTC [380] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:12.514 UTC [380] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:12.515 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:12.516 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:12.516 UTC [380] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:12.516 UTC [380] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:12.517 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:12.517 UTC [380] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:12.517 UTC [380] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:12.518 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:12.519 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:12.519 UTC [380] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:12.519 UTC [380] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:12.520 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:12.522 UTC [380] DEBUG:  building index "pg_toast_24816_index" on table "pg_toast_24816" serially
2025-04-19 08:23:12.523 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:12.524 UTC [380] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:12.524 UTC [380] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:12.525 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:12.527 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:12.527 UTC [380] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:12.527 UTC [380] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:12.528 UTC [380] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:12.529 UTC [380] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:12.529 UTC [380] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:12.531 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:12.534 UTC [380] DEBUG:  building index "pg_toast_24849_index" on table "pg_toast_24849" serially
2025-04-19 08:23:12.535 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:12.535 UTC [380] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:12.535 UTC [380] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:12.536 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:12.538 UTC [380] DEBUG:  building index "pg_toast_24860_index" on table "pg_toast_24860" serially
2025-04-19 08:23:12.539 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:12.539 UTC [380] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:12.539 UTC [380] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:12.541 UTC [380] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:12.542 UTC [380] DEBUG:  building index "pg_toast_24883_index" on table "pg_toast_24883" serially
2025-04-19 08:23:12.543 UTC [380] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:12.543 UTC [380] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:12.543 UTC [380] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:12.544 UTC [380] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:12.544 UTC [380] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:12.545 UTC [380] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:12.545 UTC [380] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:12.546 UTC [380] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:12.546 UTC [380] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:12.547 UTC [380] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:12.547 UTC [380] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:12.548 UTC [380] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:12.548 UTC [380] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:12.548 UTC [380] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:12.548 UTC [380] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:12.549 UTC [380] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:12.549 UTC [380] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:12.550 UTC [380] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:12.550 UTC [380] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:12.552 UTC [380] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:12.552 UTC [380] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:12.553 UTC [380] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:12.553 UTC [380] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:12.554 UTC [380] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:12.554 UTC [380] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:12.561 UTC [380] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:12.840 UTC [380] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$IoSCwaPzqP7FjlQ696Z2.eFhXLfa1a4lhakHT4tqGNkjBHZaD7S3y')
	                RETURNING id, username, email
	                
2025-04-19 08:23:12.841 UTC [380] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:12.841 UTC [380] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:17.606 UTC [388] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:23:17.844 UTC [388] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:23:24.811 UTC [380] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:23:25.089 UTC [380] DEBUG:  unexpected EOF on client connection
2025-04-19 08:23:26.889 UTC [396] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:26.897 UTC [396] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:26.903 UTC [396] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:26.903 UTC [396] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:26.906 UTC [396] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:26.910 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:26.919 UTC [396] DEBUG:  building index "pg_toast_24920_index" on table "pg_toast_24920" serially
2025-04-19 08:23:26.921 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:26.921 UTC [396] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:26.921 UTC [396] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:26.922 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:26.922 UTC [396] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:26.922 UTC [396] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:26.923 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:26.923 UTC [396] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:26.923 UTC [396] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:26.924 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:26.925 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:26.926 UTC [396] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:26.926 UTC [396] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:26.926 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:26.926 UTC [396] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:26.926 UTC [396] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:26.927 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:26.928 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:26.928 UTC [396] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:26.928 UTC [396] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:26.929 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:26.929 UTC [396] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:26.929 UTC [396] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:26.930 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:26.932 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:26.932 UTC [396] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:26.932 UTC [396] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:26.933 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:26.935 UTC [396] DEBUG:  building index "pg_toast_24981_index" on table "pg_toast_24981" serially
2025-04-19 08:23:26.936 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:26.936 UTC [396] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:26.936 UTC [396] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:26.937 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:26.938 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:26.939 UTC [396] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:26.939 UTC [396] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:26.940 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:26.940 UTC [396] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:26.940 UTC [396] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:26.941 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:26.943 UTC [396] DEBUG:  building index "pg_toast_25014_index" on table "pg_toast_25014" serially
2025-04-19 08:23:26.944 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:26.944 UTC [396] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:26.944 UTC [396] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:26.948 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:26.951 UTC [396] DEBUG:  building index "pg_toast_25025_index" on table "pg_toast_25025" serially
2025-04-19 08:23:26.953 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:26.953 UTC [396] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:26.953 UTC [396] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:26.957 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:26.958 UTC [396] DEBUG:  building index "pg_toast_25048_index" on table "pg_toast_25048" serially
2025-04-19 08:23:26.959 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:26.961 UTC [396] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:26.961 UTC [396] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:26.963 UTC [396] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:26.963 UTC [396] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:26.965 UTC [396] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:26.965 UTC [396] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:26.965 UTC [396] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:26.966 UTC [396] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:26.967 UTC [396] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:26.967 UTC [396] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:26.968 UTC [396] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:26.968 UTC [396] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:26.970 UTC [396] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:26.970 UTC [396] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:26.972 UTC [396] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:26.972 UTC [396] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:26.973 UTC [396] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:26.973 UTC [396] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:26.975 UTC [396] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:26.975 UTC [396] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:26.976 UTC [396] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:26.976 UTC [396] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:26.977 UTC [396] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:26.977 UTC [396] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:26.987 UTC [396] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:27.262 UTC [396] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Y0UswJ0MF03K55xrVReVbOtq8rJjDdRiVCdJL0/6u/M4o/WS38Y0G')
	                RETURNING id, username, email
	                
2025-04-19 08:23:27.264 UTC [396] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:27.264 UTC [396] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:27.266 UTC [396] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:23:27.275 UTC [396] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:27.276 UTC [396] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:27.280 UTC [396] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:27.284 UTC [396] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:27.284 UTC [396] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:27.287 UTC [396] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:27.293 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:27.294 UTC [396] DEBUG:  building index "pg_toast_25084_index" on table "pg_toast_25084" serially
2025-04-19 08:23:27.297 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:27.297 UTC [396] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:27.297 UTC [396] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:27.298 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:27.298 UTC [396] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:27.298 UTC [396] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:27.299 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:27.299 UTC [396] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:27.299 UTC [396] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:27.300 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:27.301 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:27.301 UTC [396] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:27.301 UTC [396] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:27.301 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:27.302 UTC [396] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:27.302 UTC [396] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:27.302 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:27.303 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:27.303 UTC [396] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:27.303 UTC [396] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:27.304 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:27.304 UTC [396] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:27.304 UTC [396] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:27.305 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:27.306 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:27.306 UTC [396] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:27.306 UTC [396] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:27.307 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:27.308 UTC [396] DEBUG:  building index "pg_toast_25145_index" on table "pg_toast_25145" serially
2025-04-19 08:23:27.309 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:27.309 UTC [396] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:27.309 UTC [396] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:27.310 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:27.311 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:27.311 UTC [396] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:27.311 UTC [396] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:27.312 UTC [396] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:27.312 UTC [396] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:27.312 UTC [396] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:27.313 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:27.315 UTC [396] DEBUG:  building index "pg_toast_25178_index" on table "pg_toast_25178" serially
2025-04-19 08:23:27.317 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:27.318 UTC [396] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:27.318 UTC [396] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:27.320 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:27.323 UTC [396] DEBUG:  building index "pg_toast_25189_index" on table "pg_toast_25189" serially
2025-04-19 08:23:27.324 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:27.324 UTC [396] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:27.324 UTC [396] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:27.327 UTC [396] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:27.328 UTC [396] DEBUG:  building index "pg_toast_25212_index" on table "pg_toast_25212" serially
2025-04-19 08:23:27.329 UTC [396] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:27.329 UTC [396] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:27.329 UTC [396] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:27.330 UTC [396] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:27.330 UTC [396] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:27.331 UTC [396] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:27.331 UTC [396] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:27.332 UTC [396] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:27.332 UTC [396] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:27.333 UTC [396] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:27.333 UTC [396] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:27.334 UTC [396] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:27.334 UTC [396] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:27.334 UTC [396] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:27.334 UTC [396] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:27.335 UTC [396] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:27.335 UTC [396] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:27.336 UTC [396] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:27.336 UTC [396] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:27.337 UTC [396] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:27.337 UTC [396] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:27.338 UTC [396] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:27.338 UTC [396] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:27.339 UTC [396] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:27.339 UTC [396] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:27.345 UTC [396] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:27.589 UTC [396] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$a1q4IbMvK7vxi3tQZ7i8Ne3aUxwYzqUqfBA3piX2IgB1bTrXW56oC')
	                RETURNING id, username, email
	                
2025-04-19 08:23:27.589 UTC [396] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:27.590 UTC [396] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:40.655 UTC [396] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:23:40.945 UTC [396] DEBUG:  unexpected EOF on client connection
2025-04-19 08:23:42.741 UTC [403] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:42.746 UTC [403] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:42.751 UTC [403] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:42.751 UTC [403] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:42.757 UTC [403] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:42.762 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:42.764 UTC [403] DEBUG:  building index "pg_toast_25248_index" on table "pg_toast_25248" serially
2025-04-19 08:23:42.766 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:42.766 UTC [403] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:42.766 UTC [403] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:42.767 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:42.767 UTC [403] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:42.767 UTC [403] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:42.768 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:42.768 UTC [403] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:42.768 UTC [403] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:42.769 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:42.769 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:42.770 UTC [403] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:42.770 UTC [403] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:42.771 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:42.771 UTC [403] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:42.771 UTC [403] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:42.772 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:42.773 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:42.773 UTC [403] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:42.773 UTC [403] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:42.774 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:42.775 UTC [403] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:42.775 UTC [403] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:42.777 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:42.778 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:42.778 UTC [403] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:42.778 UTC [403] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:42.780 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:42.782 UTC [403] DEBUG:  building index "pg_toast_25309_index" on table "pg_toast_25309" serially
2025-04-19 08:23:42.783 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:42.784 UTC [403] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:42.784 UTC [403] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:42.785 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:42.787 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:42.787 UTC [403] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:42.787 UTC [403] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:42.788 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:42.788 UTC [403] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:42.788 UTC [403] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:42.790 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:42.795 UTC [403] DEBUG:  building index "pg_toast_25342_index" on table "pg_toast_25342" serially
2025-04-19 08:23:42.796 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:42.796 UTC [403] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:42.796 UTC [403] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:42.797 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:42.798 UTC [403] DEBUG:  building index "pg_toast_25353_index" on table "pg_toast_25353" serially
2025-04-19 08:23:42.799 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:42.799 UTC [403] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:42.799 UTC [403] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:42.800 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:42.801 UTC [403] DEBUG:  building index "pg_toast_25376_index" on table "pg_toast_25376" serially
2025-04-19 08:23:42.802 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:42.802 UTC [403] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:42.802 UTC [403] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:42.803 UTC [403] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:42.803 UTC [403] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:42.804 UTC [403] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:42.804 UTC [403] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:42.805 UTC [403] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:42.805 UTC [403] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:42.805 UTC [403] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:42.806 UTC [403] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:42.807 UTC [403] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:42.807 UTC [403] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:42.807 UTC [403] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:42.807 UTC [403] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:42.808 UTC [403] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:42.808 UTC [403] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:42.809 UTC [403] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:42.809 UTC [403] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:42.810 UTC [403] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:42.810 UTC [403] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:42.811 UTC [403] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:42.811 UTC [403] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:42.812 UTC [403] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:42.812 UTC [403] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:42.820 UTC [403] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:43.116 UTC [403] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Oj0oRPokqczrA3zaLSJRZe3lHblsoewtlLipcsuzPTWXHcwxPS4Jy')
	                RETURNING id, username, email
	                
2025-04-19 08:23:43.117 UTC [403] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:43.117 UTC [403] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:43.118 UTC [403] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:23:43.125 UTC [403] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:43.126 UTC [403] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:43.129 UTC [403] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:43.133 UTC [403] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:43.133 UTC [403] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:43.136 UTC [403] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:43.139 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:43.140 UTC [403] DEBUG:  building index "pg_toast_25412_index" on table "pg_toast_25412" serially
2025-04-19 08:23:43.142 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:43.142 UTC [403] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:43.142 UTC [403] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:43.143 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:43.143 UTC [403] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:43.143 UTC [403] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:43.144 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:43.144 UTC [403] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:43.144 UTC [403] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:43.145 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:43.146 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:43.146 UTC [403] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:43.146 UTC [403] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:43.147 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:43.147 UTC [403] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:43.147 UTC [403] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:43.148 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:43.148 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:43.149 UTC [403] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:43.149 UTC [403] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:43.150 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:43.150 UTC [403] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:43.150 UTC [403] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:43.151 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:43.151 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:43.151 UTC [403] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:43.151 UTC [403] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:43.152 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:43.153 UTC [403] DEBUG:  building index "pg_toast_25473_index" on table "pg_toast_25473" serially
2025-04-19 08:23:43.154 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:43.154 UTC [403] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:43.154 UTC [403] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:43.156 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:43.157 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:43.157 UTC [403] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:43.157 UTC [403] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:43.157 UTC [403] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:43.158 UTC [403] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:43.158 UTC [403] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:43.159 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:43.160 UTC [403] DEBUG:  building index "pg_toast_25506_index" on table "pg_toast_25506" serially
2025-04-19 08:23:43.161 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:43.162 UTC [403] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:43.162 UTC [403] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:43.163 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:43.164 UTC [403] DEBUG:  building index "pg_toast_25517_index" on table "pg_toast_25517" serially
2025-04-19 08:23:43.166 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:43.166 UTC [403] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:43.166 UTC [403] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:43.168 UTC [403] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:43.169 UTC [403] DEBUG:  building index "pg_toast_25540_index" on table "pg_toast_25540" serially
2025-04-19 08:23:43.170 UTC [403] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:43.170 UTC [403] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:43.170 UTC [403] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:43.171 UTC [403] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:43.171 UTC [403] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:43.172 UTC [403] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:43.172 UTC [403] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:43.173 UTC [403] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:43.173 UTC [403] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:43.174 UTC [403] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:43.174 UTC [403] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:43.176 UTC [403] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:43.176 UTC [403] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:43.177 UTC [403] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:43.177 UTC [403] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:43.178 UTC [403] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:43.178 UTC [403] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:43.178 UTC [403] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:43.178 UTC [403] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:43.180 UTC [403] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:43.180 UTC [403] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:43.181 UTC [403] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:43.181 UTC [403] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:43.181 UTC [403] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:43.181 UTC [403] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:43.187 UTC [403] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:43.433 UTC [403] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$tpG7EC4Qqh7PhG8TG.5wU.2DZuNIIXyr0u5cl8SoL1psb5XmLOl72')
	                RETURNING id, username, email
	                
2025-04-19 08:23:43.435 UTC [403] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:43.435 UTC [403] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:47.621 UTC [410] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:23:56.528 UTC [403] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:23:56.847 UTC [403] DEBUG:  unexpected EOF on client connection
2025-04-19 08:23:58.601 UTC [418] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:58.609 UTC [418] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:58.617 UTC [418] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:58.617 UTC [418] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:58.621 UTC [418] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:58.625 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:58.633 UTC [418] DEBUG:  building index "pg_toast_25576_index" on table "pg_toast_25576" serially
2025-04-19 08:23:58.634 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:58.635 UTC [418] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:58.635 UTC [418] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:58.636 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:58.636 UTC [418] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:58.636 UTC [418] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:58.637 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:58.637 UTC [418] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:58.637 UTC [418] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:58.638 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:58.639 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:58.639 UTC [418] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:58.639 UTC [418] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:58.640 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:58.640 UTC [418] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:58.640 UTC [418] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:58.640 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:58.641 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:58.641 UTC [418] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:58.641 UTC [418] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:58.642 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:58.642 UTC [418] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:58.642 UTC [418] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:58.644 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:58.645 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:58.645 UTC [418] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:58.645 UTC [418] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:58.646 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:58.647 UTC [418] DEBUG:  building index "pg_toast_25637_index" on table "pg_toast_25637" serially
2025-04-19 08:23:58.648 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:58.648 UTC [418] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:58.648 UTC [418] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:58.649 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:58.650 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:58.651 UTC [418] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:58.651 UTC [418] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:58.652 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:58.652 UTC [418] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:58.652 UTC [418] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:58.654 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:58.656 UTC [418] DEBUG:  building index "pg_toast_25670_index" on table "pg_toast_25670" serially
2025-04-19 08:23:58.657 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:58.657 UTC [418] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:58.657 UTC [418] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:58.660 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:58.663 UTC [418] DEBUG:  building index "pg_toast_25681_index" on table "pg_toast_25681" serially
2025-04-19 08:23:58.664 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:58.665 UTC [418] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:58.665 UTC [418] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:58.666 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:58.668 UTC [418] DEBUG:  building index "pg_toast_25704_index" on table "pg_toast_25704" serially
2025-04-19 08:23:58.669 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:58.669 UTC [418] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:58.669 UTC [418] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:58.670 UTC [418] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:58.670 UTC [418] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:58.671 UTC [418] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:58.671 UTC [418] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:58.671 UTC [418] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:58.671 UTC [418] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:58.672 UTC [418] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:58.672 UTC [418] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:58.673 UTC [418] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:58.673 UTC [418] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:58.674 UTC [418] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:58.674 UTC [418] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:58.674 UTC [418] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:58.674 UTC [418] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:58.675 UTC [418] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:58.675 UTC [418] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:58.676 UTC [418] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:58.676 UTC [418] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:58.677 UTC [418] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:58.677 UTC [418] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:58.677 UTC [418] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:58.677 UTC [418] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:58.687 UTC [418] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:58.952 UTC [418] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$k/jBpVuZDBlj/sVYIqxYW.0.3MXaidgWe8e8OINdrpuTwXj9avv6.')
	                RETURNING id, username, email
	                
2025-04-19 08:23:58.953 UTC [418] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:58.953 UTC [418] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:23:58.954 UTC [418] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:23:58.961 UTC [418] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:58.962 UTC [418] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:23:58.965 UTC [418] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:23:58.969 UTC [418] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:23:58.969 UTC [418] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:23:58.974 UTC [418] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:23:58.978 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:23:58.979 UTC [418] DEBUG:  building index "pg_toast_25740_index" on table "pg_toast_25740" serially
2025-04-19 08:23:58.980 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:23:58.980 UTC [418] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:23:58.980 UTC [418] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:23:58.981 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:23:58.981 UTC [418] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:23:58.981 UTC [418] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:23:58.982 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:23:58.982 UTC [418] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:23:58.982 UTC [418] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:23:58.983 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:23:58.983 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:23:58.984 UTC [418] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:23:58.984 UTC [418] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:23:58.984 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:23:58.984 UTC [418] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:23:58.984 UTC [418] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:23:58.985 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:23:58.986 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:23:58.986 UTC [418] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:23:58.986 UTC [418] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:23:58.987 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:23:58.987 UTC [418] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:23:58.987 UTC [418] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:23:58.988 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:23:58.989 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:23:58.989 UTC [418] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:23:58.989 UTC [418] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:23:58.990 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:23:58.991 UTC [418] DEBUG:  building index "pg_toast_25801_index" on table "pg_toast_25801" serially
2025-04-19 08:23:58.992 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:23:58.992 UTC [418] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:23:58.992 UTC [418] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:23:58.993 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:23:58.994 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:23:58.994 UTC [418] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:23:58.994 UTC [418] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:23:58.995 UTC [418] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:23:58.995 UTC [418] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:23:58.995 UTC [418] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:23:58.997 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:23:58.998 UTC [418] DEBUG:  building index "pg_toast_25834_index" on table "pg_toast_25834" serially
2025-04-19 08:23:58.998 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:23:58.999 UTC [418] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:23:58.999 UTC [418] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:23:58.999 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:23:59.000 UTC [418] DEBUG:  building index "pg_toast_25845_index" on table "pg_toast_25845" serially
2025-04-19 08:23:59.001 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:23:59.001 UTC [418] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:23:59.001 UTC [418] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:23:59.003 UTC [418] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:23:59.003 UTC [418] DEBUG:  building index "pg_toast_25868_index" on table "pg_toast_25868" serially
2025-04-19 08:23:59.004 UTC [418] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:23:59.004 UTC [418] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:23:59.004 UTC [418] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:23:59.005 UTC [418] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:23:59.005 UTC [418] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:23:59.006 UTC [418] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:23:59.006 UTC [418] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:23:59.007 UTC [418] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:23:59.007 UTC [418] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:23:59.008 UTC [418] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:23:59.008 UTC [418] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:23:59.009 UTC [418] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:23:59.009 UTC [418] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:23:59.010 UTC [418] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:23:59.010 UTC [418] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:23:59.011 UTC [418] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:23:59.011 UTC [418] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:23:59.012 UTC [418] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:23:59.012 UTC [418] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:23:59.013 UTC [418] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:23:59.013 UTC [418] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:23:59.015 UTC [418] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:23:59.015 UTC [418] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:23:59.015 UTC [418] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:23:59.015 UTC [418] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:23:59.026 UTC [418] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:23:59.316 UTC [418] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$SfN4ueyVwZk/y8ECVJG5SuLUIcHjOdNmjbuaJhisLwcne8n4nTJTK')
	                RETURNING id, username, email
	                
2025-04-19 08:23:59.317 UTC [418] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:23:59.318 UTC [418] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:12.481 UTC [418] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:24:12.773 UTC [418] DEBUG:  unexpected EOF on client connection
2025-04-19 08:24:14.553 UTC [433] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:24:14.559 UTC [433] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:24:14.565 UTC [433] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:24:14.565 UTC [433] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:24:14.569 UTC [433] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:24:14.572 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:24:14.576 UTC [433] DEBUG:  building index "pg_toast_25904_index" on table "pg_toast_25904" serially
2025-04-19 08:24:14.579 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:24:14.580 UTC [433] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:24:14.580 UTC [433] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:24:14.582 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:24:14.583 UTC [433] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:24:14.583 UTC [433] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:24:14.584 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:24:14.584 UTC [433] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:24:14.584 UTC [433] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:24:14.586 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:24:14.588 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:24:14.589 UTC [433] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:24:14.589 UTC [433] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:24:14.590 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:24:14.591 UTC [433] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:24:14.591 UTC [433] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:24:14.592 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:24:14.595 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:24:14.596 UTC [433] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:24:14.596 UTC [433] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:24:14.598 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:24:14.598 UTC [433] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:24:14.598 UTC [433] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:24:14.601 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:24:14.602 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:24:14.602 UTC [433] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:24:14.602 UTC [433] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:24:14.604 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:24:14.608 UTC [433] DEBUG:  building index "pg_toast_25965_index" on table "pg_toast_25965" serially
2025-04-19 08:24:14.610 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:24:14.611 UTC [433] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:24:14.611 UTC [433] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:24:14.613 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:24:14.615 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:24:14.615 UTC [433] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:24:14.615 UTC [433] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:24:14.616 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:24:14.616 UTC [433] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:24:14.616 UTC [433] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:24:14.617 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:24:14.620 UTC [433] DEBUG:  building index "pg_toast_25998_index" on table "pg_toast_25998" serially
2025-04-19 08:24:14.621 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:24:14.621 UTC [433] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:24:14.621 UTC [433] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:24:14.622 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:24:14.623 UTC [433] DEBUG:  building index "pg_toast_26009_index" on table "pg_toast_26009" serially
2025-04-19 08:24:14.624 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:24:14.624 UTC [433] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:24:14.624 UTC [433] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:24:14.627 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:24:14.629 UTC [433] DEBUG:  building index "pg_toast_26032_index" on table "pg_toast_26032" serially
2025-04-19 08:24:14.630 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:24:14.630 UTC [433] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:24:14.630 UTC [433] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:24:14.632 UTC [433] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:24:14.632 UTC [433] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:24:14.633 UTC [433] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:24:14.633 UTC [433] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:24:14.634 UTC [433] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:24:14.634 UTC [433] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:24:14.636 UTC [433] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:24:14.636 UTC [433] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:24:14.637 UTC [433] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:24:14.637 UTC [433] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:24:14.638 UTC [433] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:24:14.638 UTC [433] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:24:14.639 UTC [433] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:24:14.639 UTC [433] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:24:14.640 UTC [433] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:24:14.640 UTC [433] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:24:14.641 UTC [433] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:24:14.641 UTC [433] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:24:14.642 UTC [433] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:24:14.642 UTC [433] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:24:14.642 UTC [433] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:24:14.642 UTC [433] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:24:14.653 UTC [433] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:14.935 UTC [433] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3y41dTBq8.38k7Y.yl7lxejXSlQltcN2fEAeBTgv51e.TsjbUfVIG')
	                RETURNING id, username, email
	                
2025-04-19 08:24:14.936 UTC [433] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:24:14.936 UTC [433] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:14.937 UTC [433] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:24:14.945 UTC [433] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:14.947 UTC [433] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:24:14.949 UTC [433] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:24:14.954 UTC [433] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:24:14.954 UTC [433] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:24:14.957 UTC [433] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:24:14.961 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:24:14.962 UTC [433] DEBUG:  building index "pg_toast_26068_index" on table "pg_toast_26068" serially
2025-04-19 08:24:14.963 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:24:14.963 UTC [433] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:24:14.963 UTC [433] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:24:14.964 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:24:14.964 UTC [433] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:24:14.964 UTC [433] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:24:14.965 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:24:14.965 UTC [433] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:24:14.965 UTC [433] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:24:14.966 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:24:14.967 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:24:14.967 UTC [433] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:24:14.967 UTC [433] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:24:14.968 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:24:14.968 UTC [433] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:24:14.968 UTC [433] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:24:14.969 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:24:14.969 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:24:14.969 UTC [433] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:24:14.969 UTC [433] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:24:14.970 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:24:14.970 UTC [433] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:24:14.970 UTC [433] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:24:14.972 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:24:14.972 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:24:14.973 UTC [433] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:24:14.973 UTC [433] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:24:14.974 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:24:14.976 UTC [433] DEBUG:  building index "pg_toast_26129_index" on table "pg_toast_26129" serially
2025-04-19 08:24:14.978 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:24:14.979 UTC [433] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:24:14.979 UTC [433] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:24:14.981 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:24:14.982 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:24:14.982 UTC [433] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:24:14.982 UTC [433] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:24:14.983 UTC [433] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:24:14.983 UTC [433] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:24:14.983 UTC [433] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:24:14.984 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:24:14.986 UTC [433] DEBUG:  building index "pg_toast_26162_index" on table "pg_toast_26162" serially
2025-04-19 08:24:14.987 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:24:14.987 UTC [433] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:24:14.987 UTC [433] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:24:14.988 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:24:14.989 UTC [433] DEBUG:  building index "pg_toast_26173_index" on table "pg_toast_26173" serially
2025-04-19 08:24:14.990 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:24:14.990 UTC [433] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:24:14.990 UTC [433] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:24:14.992 UTC [433] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:24:14.993 UTC [433] DEBUG:  building index "pg_toast_26196_index" on table "pg_toast_26196" serially
2025-04-19 08:24:14.993 UTC [433] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:24:14.994 UTC [433] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:24:14.994 UTC [433] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:24:14.995 UTC [433] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:24:14.995 UTC [433] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:24:14.996 UTC [433] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:24:14.996 UTC [433] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:24:14.996 UTC [433] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:24:14.996 UTC [433] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:24:14.997 UTC [433] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:24:14.997 UTC [433] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:24:14.998 UTC [433] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:24:14.998 UTC [433] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:24:14.999 UTC [433] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:24:14.999 UTC [433] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:24:15.000 UTC [433] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:24:15.000 UTC [433] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:24:15.001 UTC [433] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:24:15.001 UTC [433] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:24:15.002 UTC [433] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:24:15.002 UTC [433] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:24:15.003 UTC [433] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:24:15.003 UTC [433] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:24:15.004 UTC [433] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:24:15.004 UTC [433] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:24:15.010 UTC [433] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:15.254 UTC [433] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$3ZlFbJ4KLq26s5NuF.p5t.Wod84VLWeL2O73rciHQeIl6dHYz4ahO')
	                RETURNING id, username, email
	                
2025-04-19 08:24:15.254 UTC [433] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:24:15.255 UTC [433] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:17.604 UTC [434] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:24:17.851 UTC [434] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:24:28.365 UTC [433] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:24:28.646 UTC [433] DEBUG:  unexpected EOF on client connection
2025-04-19 08:24:30.375 UTC [442] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:24:30.385 UTC [442] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:24:30.391 UTC [442] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:24:30.391 UTC [442] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:24:30.395 UTC [442] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:24:30.403 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:24:30.407 UTC [442] DEBUG:  building index "pg_toast_26233_index" on table "pg_toast_26233" serially
2025-04-19 08:24:30.409 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:24:30.409 UTC [442] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:24:30.409 UTC [442] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:24:30.410 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:24:30.410 UTC [442] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:24:30.410 UTC [442] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:24:30.411 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:24:30.411 UTC [442] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:24:30.411 UTC [442] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:24:30.412 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:24:30.413 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:24:30.413 UTC [442] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:24:30.413 UTC [442] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:24:30.414 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:24:30.414 UTC [442] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:24:30.414 UTC [442] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:24:30.415 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:24:30.416 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:24:30.416 UTC [442] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:24:30.416 UTC [442] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:24:30.417 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:24:30.417 UTC [442] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:24:30.417 UTC [442] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:24:30.419 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:24:30.419 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:24:30.420 UTC [442] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:24:30.420 UTC [442] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:24:30.421 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:24:30.422 UTC [442] DEBUG:  building index "pg_toast_26294_index" on table "pg_toast_26294" serially
2025-04-19 08:24:30.423 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:24:30.423 UTC [442] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:24:30.423 UTC [442] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:24:30.425 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:24:30.427 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:24:30.427 UTC [442] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:24:30.427 UTC [442] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:24:30.429 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:24:30.429 UTC [442] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:24:30.429 UTC [442] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:24:30.431 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:24:30.432 UTC [442] DEBUG:  building index "pg_toast_26327_index" on table "pg_toast_26327" serially
2025-04-19 08:24:30.433 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:24:30.433 UTC [442] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:24:30.433 UTC [442] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:24:30.434 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:24:30.435 UTC [442] DEBUG:  building index "pg_toast_26338_index" on table "pg_toast_26338" serially
2025-04-19 08:24:30.436 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:24:30.436 UTC [442] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:24:30.436 UTC [442] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:24:30.437 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:24:30.438 UTC [442] DEBUG:  building index "pg_toast_26361_index" on table "pg_toast_26361" serially
2025-04-19 08:24:30.439 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:24:30.439 UTC [442] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:24:30.439 UTC [442] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:24:30.440 UTC [442] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:24:30.440 UTC [442] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:24:30.441 UTC [442] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:24:30.441 UTC [442] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:24:30.442 UTC [442] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:24:30.442 UTC [442] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:24:30.443 UTC [442] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:24:30.443 UTC [442] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:24:30.445 UTC [442] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:24:30.445 UTC [442] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:24:30.446 UTC [442] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:24:30.446 UTC [442] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:24:30.448 UTC [442] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:24:30.448 UTC [442] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:24:30.449 UTC [442] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:24:30.449 UTC [442] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:24:30.450 UTC [442] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:24:30.450 UTC [442] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:24:30.451 UTC [442] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:24:30.452 UTC [442] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:24:30.453 UTC [442] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:24:30.453 UTC [442] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:24:30.469 UTC [442] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:30.738 UTC [442] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$BerZSAe7Y5oX0T8Ee6gcueKHQfdMTU/BX2KxMYKHxYt5E7H4fwELS')
	                RETURNING id, username, email
	                
2025-04-19 08:24:30.739 UTC [442] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:24:30.739 UTC [442] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:30.740 UTC [442] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:24:30.747 UTC [442] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:30.748 UTC [442] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:24:30.751 UTC [442] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:24:30.754 UTC [442] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:24:30.754 UTC [442] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:24:30.757 UTC [442] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:24:30.760 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:24:30.761 UTC [442] DEBUG:  building index "pg_toast_26397_index" on table "pg_toast_26397" serially
2025-04-19 08:24:30.762 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:24:30.763 UTC [442] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:24:30.763 UTC [442] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:24:30.764 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:24:30.764 UTC [442] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:24:30.764 UTC [442] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:24:30.765 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:24:30.765 UTC [442] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:24:30.766 UTC [442] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:24:30.767 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:24:30.767 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:24:30.768 UTC [442] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:24:30.768 UTC [442] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:24:30.769 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:24:30.769 UTC [442] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:24:30.769 UTC [442] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:24:30.769 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:24:30.770 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:24:30.770 UTC [442] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:24:30.770 UTC [442] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:24:30.771 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:24:30.771 UTC [442] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:24:30.771 UTC [442] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:24:30.772 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:24:30.773 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:24:30.773 UTC [442] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:24:30.773 UTC [442] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:24:30.774 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:24:30.775 UTC [442] DEBUG:  building index "pg_toast_26458_index" on table "pg_toast_26458" serially
2025-04-19 08:24:30.776 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:24:30.776 UTC [442] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:24:30.776 UTC [442] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:24:30.777 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:24:30.778 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:24:30.778 UTC [442] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:24:30.778 UTC [442] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:24:30.779 UTC [442] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:24:30.779 UTC [442] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:24:30.779 UTC [442] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:24:30.780 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:24:30.781 UTC [442] DEBUG:  building index "pg_toast_26491_index" on table "pg_toast_26491" serially
2025-04-19 08:24:30.782 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:24:30.783 UTC [442] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:24:30.783 UTC [442] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:24:30.783 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:24:30.785 UTC [442] DEBUG:  building index "pg_toast_26502_index" on table "pg_toast_26502" serially
2025-04-19 08:24:30.786 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:24:30.787 UTC [442] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:24:30.787 UTC [442] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:24:30.789 UTC [442] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:24:30.790 UTC [442] DEBUG:  building index "pg_toast_26525_index" on table "pg_toast_26525" serially
2025-04-19 08:24:30.791 UTC [442] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:24:30.792 UTC [442] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:24:30.792 UTC [442] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:24:30.793 UTC [442] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:24:30.793 UTC [442] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:24:30.794 UTC [442] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:24:30.794 UTC [442] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:24:30.796 UTC [442] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:24:30.796 UTC [442] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:24:30.797 UTC [442] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:24:30.797 UTC [442] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:24:30.798 UTC [442] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:24:30.798 UTC [442] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:24:30.799 UTC [442] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:24:30.799 UTC [442] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:24:30.800 UTC [442] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:24:30.800 UTC [442] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:24:30.801 UTC [442] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:24:30.801 UTC [442] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:24:30.803 UTC [442] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:24:30.803 UTC [442] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:24:30.804 UTC [442] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:24:30.804 UTC [442] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:24:30.807 UTC [442] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:24:30.807 UTC [442] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:24:30.813 UTC [442] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:31.061 UTC [442] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$QeOPVretJOIa4TmdklAUQuUyPaUnS2zxQE6QPEXld7GRum9Bh39y6')
	                RETURNING id, username, email
	                
2025-04-19 08:24:31.062 UTC [442] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:24:31.063 UTC [442] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:44.229 UTC [442] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:24:44.507 UTC [442] DEBUG:  unexpected EOF on client connection
2025-04-19 08:24:46.544 UTC [456] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:24:46.550 UTC [456] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:24:46.560 UTC [456] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:24:46.560 UTC [456] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:24:46.565 UTC [456] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:24:46.570 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:24:46.574 UTC [456] DEBUG:  building index "pg_toast_26561_index" on table "pg_toast_26561" serially
2025-04-19 08:24:46.577 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:24:46.578 UTC [456] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:24:46.578 UTC [456] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:24:46.580 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:24:46.580 UTC [456] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:24:46.580 UTC [456] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:24:46.582 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:24:46.582 UTC [456] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:24:46.582 UTC [456] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:24:46.583 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:24:46.584 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:24:46.585 UTC [456] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:24:46.585 UTC [456] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:24:46.586 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:24:46.586 UTC [456] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:24:46.586 UTC [456] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:24:46.587 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:24:46.588 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:24:46.588 UTC [456] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:24:46.588 UTC [456] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:24:46.589 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:24:46.589 UTC [456] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:24:46.589 UTC [456] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:24:46.591 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:24:46.592 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:24:46.593 UTC [456] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:24:46.593 UTC [456] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:24:46.597 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:24:46.601 UTC [456] DEBUG:  building index "pg_toast_26622_index" on table "pg_toast_26622" serially
2025-04-19 08:24:46.603 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:24:46.603 UTC [456] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:24:46.604 UTC [456] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:24:46.605 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:24:46.607 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:24:46.607 UTC [456] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:24:46.607 UTC [456] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:24:46.608 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:24:46.608 UTC [456] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:24:46.609 UTC [456] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:24:46.610 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:24:46.616 UTC [456] DEBUG:  building index "pg_toast_26655_index" on table "pg_toast_26655" serially
2025-04-19 08:24:46.618 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:24:46.619 UTC [456] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:24:46.619 UTC [456] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:24:46.620 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:24:46.624 UTC [456] DEBUG:  building index "pg_toast_26666_index" on table "pg_toast_26666" serially
2025-04-19 08:24:46.626 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:24:46.626 UTC [456] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:24:46.626 UTC [456] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:24:46.628 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:24:46.629 UTC [456] DEBUG:  building index "pg_toast_26689_index" on table "pg_toast_26689" serially
2025-04-19 08:24:46.630 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:24:46.630 UTC [456] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:24:46.630 UTC [456] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:24:46.631 UTC [456] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:24:46.631 UTC [456] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:24:46.632 UTC [456] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:24:46.632 UTC [456] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:24:46.633 UTC [456] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:24:46.633 UTC [456] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:24:46.634 UTC [456] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:24:46.634 UTC [456] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:24:46.635 UTC [456] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:24:46.635 UTC [456] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:24:46.636 UTC [456] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:24:46.636 UTC [456] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:24:46.638 UTC [456] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:24:46.638 UTC [456] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:24:46.639 UTC [456] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:24:46.639 UTC [456] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:24:46.640 UTC [456] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:24:46.640 UTC [456] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:24:46.641 UTC [456] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:24:46.641 UTC [456] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:24:46.643 UTC [456] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:24:46.643 UTC [456] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:24:46.657 UTC [456] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:46.937 UTC [456] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$OHUztErIiZFazh3LWzzbI.qoeFq2kbREv.f4B2K8mapHsNl./RzNi')
	                RETURNING id, username, email
	                
2025-04-19 08:24:46.938 UTC [456] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:24:46.939 UTC [456] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:46.940 UTC [456] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:24:46.957 UTC [456] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:46.958 UTC [456] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:24:46.961 UTC [456] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:24:46.966 UTC [456] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:24:46.966 UTC [456] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:24:46.970 UTC [456] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:24:46.972 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:24:46.973 UTC [456] DEBUG:  building index "pg_toast_26725_index" on table "pg_toast_26725" serially
2025-04-19 08:24:46.975 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:24:46.975 UTC [456] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:24:46.975 UTC [456] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:24:46.976 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:24:46.976 UTC [456] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:24:46.976 UTC [456] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:24:46.977 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:24:46.977 UTC [456] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:24:46.977 UTC [456] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:24:46.977 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:24:46.978 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:24:46.979 UTC [456] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:24:46.979 UTC [456] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:24:46.979 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:24:46.980 UTC [456] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:24:46.980 UTC [456] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:24:46.981 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:24:46.983 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:24:46.983 UTC [456] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:24:46.983 UTC [456] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:24:46.985 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:24:46.986 UTC [456] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:24:46.986 UTC [456] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:24:46.989 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:24:46.990 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:24:46.990 UTC [456] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:24:46.990 UTC [456] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:24:46.992 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:24:46.995 UTC [456] DEBUG:  building index "pg_toast_26786_index" on table "pg_toast_26786" serially
2025-04-19 08:24:46.996 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:24:46.996 UTC [456] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:24:46.996 UTC [456] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:24:46.997 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:24:46.998 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:24:46.998 UTC [456] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:24:46.998 UTC [456] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:24:46.999 UTC [456] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:24:46.999 UTC [456] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:24:46.999 UTC [456] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:24:47.000 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:24:47.001 UTC [456] DEBUG:  building index "pg_toast_26819_index" on table "pg_toast_26819" serially
2025-04-19 08:24:47.002 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:24:47.002 UTC [456] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:24:47.002 UTC [456] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:24:47.002 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:24:47.003 UTC [456] DEBUG:  building index "pg_toast_26830_index" on table "pg_toast_26830" serially
2025-04-19 08:24:47.004 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:24:47.004 UTC [456] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:24:47.004 UTC [456] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:24:47.006 UTC [456] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:24:47.007 UTC [456] DEBUG:  building index "pg_toast_26853_index" on table "pg_toast_26853" serially
2025-04-19 08:24:47.007 UTC [456] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:24:47.007 UTC [456] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:24:47.008 UTC [456] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:24:47.008 UTC [456] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:24:47.008 UTC [456] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:24:47.009 UTC [456] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:24:47.009 UTC [456] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:24:47.010 UTC [456] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:24:47.010 UTC [456] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:24:47.011 UTC [456] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:24:47.011 UTC [456] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:24:47.011 UTC [456] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:24:47.011 UTC [456] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:24:47.013 UTC [456] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:24:47.013 UTC [456] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:24:47.013 UTC [456] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:24:47.013 UTC [456] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:24:47.014 UTC [456] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:24:47.014 UTC [456] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:24:47.015 UTC [456] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:24:47.015 UTC [456] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:24:47.016 UTC [456] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:24:47.016 UTC [456] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:24:47.016 UTC [456] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:24:47.016 UTC [456] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:24:47.026 UTC [456] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:24:47.274 UTC [456] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$CT5w9rD78eFI0bjVas9beeqR7UqwNP/uWu0KA1tC7PpCEicuhhFHe')
	                RETURNING id, username, email
	                
2025-04-19 08:24:47.276 UTC [456] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:24:47.276 UTC [456] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:24:47.601 UTC [457] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:25:00.049 UTC [456] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:25:00.354 UTC [456] DEBUG:  unexpected EOF on client connection
2025-04-19 08:25:02.160 UTC [465] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:02.168 UTC [465] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:02.179 UTC [465] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:02.179 UTC [465] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:02.186 UTC [465] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:02.193 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:02.196 UTC [465] DEBUG:  building index "pg_toast_26889_index" on table "pg_toast_26889" serially
2025-04-19 08:25:02.198 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:02.198 UTC [465] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:02.198 UTC [465] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:02.200 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:02.200 UTC [465] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:02.200 UTC [465] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:02.201 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:02.201 UTC [465] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:02.201 UTC [465] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:02.202 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:02.203 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:02.203 UTC [465] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:02.203 UTC [465] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:02.204 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:02.204 UTC [465] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:02.204 UTC [465] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:02.205 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:02.206 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:02.206 UTC [465] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:02.206 UTC [465] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:02.207 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:02.207 UTC [465] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:02.207 UTC [465] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:02.209 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:02.210 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:02.210 UTC [465] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:02.210 UTC [465] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:02.212 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:02.213 UTC [465] DEBUG:  building index "pg_toast_26950_index" on table "pg_toast_26950" serially
2025-04-19 08:25:02.214 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:02.215 UTC [465] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:02.215 UTC [465] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:02.216 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:02.217 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:02.217 UTC [465] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:02.217 UTC [465] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:02.218 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:02.218 UTC [465] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:02.218 UTC [465] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:02.219 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:02.220 UTC [465] DEBUG:  building index "pg_toast_26983_index" on table "pg_toast_26983" serially
2025-04-19 08:25:02.221 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:02.221 UTC [465] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:02.221 UTC [465] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:02.222 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:02.223 UTC [465] DEBUG:  building index "pg_toast_26994_index" on table "pg_toast_26994" serially
2025-04-19 08:25:02.224 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:02.224 UTC [465] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:02.224 UTC [465] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:02.226 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:02.227 UTC [465] DEBUG:  building index "pg_toast_27017_index" on table "pg_toast_27017" serially
2025-04-19 08:25:02.227 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:02.228 UTC [465] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:02.228 UTC [465] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:02.229 UTC [465] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:02.229 UTC [465] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:02.230 UTC [465] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:02.230 UTC [465] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:02.231 UTC [465] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:02.231 UTC [465] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:02.232 UTC [465] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:02.232 UTC [465] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:02.233 UTC [465] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:02.234 UTC [465] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:02.235 UTC [465] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:02.235 UTC [465] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:02.236 UTC [465] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:02.236 UTC [465] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:02.238 UTC [465] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:02.238 UTC [465] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:02.239 UTC [465] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:02.239 UTC [465] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:02.240 UTC [465] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:02.240 UTC [465] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:02.241 UTC [465] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:02.241 UTC [465] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:02.255 UTC [465] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:02.756 UTC [465] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$C3aVJjpk6rQ0l2hIEp9WM.9JrS5TNUcMO9NG2IVYEipiXmAyDaoYi')
	                RETURNING id, username, email
	                
2025-04-19 08:25:02.761 UTC [465] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:02.766 UTC [465] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:02.777 UTC [465] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:25:02.849 UTC [465] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:02.866 UTC [465] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:02.887 UTC [465] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:02.920 UTC [465] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:02.920 UTC [465] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:02.943 UTC [465] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:02.947 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:02.951 UTC [465] DEBUG:  building index "pg_toast_27053_index" on table "pg_toast_27053" serially
2025-04-19 08:25:02.952 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:02.953 UTC [465] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:02.953 UTC [465] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:02.955 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:02.956 UTC [465] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:02.956 UTC [465] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:02.957 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:02.957 UTC [465] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:02.957 UTC [465] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:02.959 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:02.962 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:02.965 UTC [465] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:02.965 UTC [465] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:02.970 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:02.971 UTC [465] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:02.971 UTC [465] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:02.974 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:02.977 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:02.977 UTC [465] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:02.977 UTC [465] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:02.980 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:02.983 UTC [465] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:02.983 UTC [465] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:02.987 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:02.990 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:02.990 UTC [465] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:02.990 UTC [465] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:02.992 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:02.994 UTC [465] DEBUG:  building index "pg_toast_27114_index" on table "pg_toast_27114" serially
2025-04-19 08:25:02.995 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:02.995 UTC [465] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:02.995 UTC [465] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:02.997 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:02.998 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:02.998 UTC [465] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:02.998 UTC [465] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:02.999 UTC [465] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:03.000 UTC [465] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:03.000 UTC [465] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:03.001 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:03.007 UTC [465] DEBUG:  building index "pg_toast_27147_index" on table "pg_toast_27147" serially
2025-04-19 08:25:03.008 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:03.009 UTC [465] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:03.009 UTC [465] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:03.010 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:03.011 UTC [465] DEBUG:  building index "pg_toast_27158_index" on table "pg_toast_27158" serially
2025-04-19 08:25:03.013 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:03.014 UTC [465] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:03.014 UTC [465] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:03.016 UTC [465] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:03.018 UTC [465] DEBUG:  building index "pg_toast_27181_index" on table "pg_toast_27181" serially
2025-04-19 08:25:03.019 UTC [465] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:03.019 UTC [465] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:03.019 UTC [465] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:03.021 UTC [465] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:03.021 UTC [465] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:03.022 UTC [465] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:03.022 UTC [465] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:03.023 UTC [465] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:03.023 UTC [465] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:03.024 UTC [465] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:03.024 UTC [465] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:03.025 UTC [465] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:03.025 UTC [465] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:03.027 UTC [465] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:03.027 UTC [465] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:03.028 UTC [465] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:03.028 UTC [465] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:03.028 UTC [465] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:03.028 UTC [465] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:03.030 UTC [465] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:03.030 UTC [465] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:03.031 UTC [465] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:03.031 UTC [465] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:03.032 UTC [465] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:03.032 UTC [465] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:03.047 UTC [465] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:03.323 UTC [465] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$drsK2sEhls95NeL4XPAT.es2bG/qD4tJ33raw2o3QEA7AHPBulxxa')
	                RETURNING id, username, email
	                
2025-04-19 08:25:03.324 UTC [465] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:03.324 UTC [465] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:15.965 UTC [465] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:25:16.246 UTC [465] DEBUG:  unexpected EOF on client connection
2025-04-19 08:25:17.621 UTC [480] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:25:17.812 UTC [480] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:25:18.260 UTC [481] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:18.265 UTC [481] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:18.271 UTC [481] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:18.271 UTC [481] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:18.277 UTC [481] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:18.280 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:18.282 UTC [481] DEBUG:  building index "pg_toast_27218_index" on table "pg_toast_27218" serially
2025-04-19 08:25:18.284 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:18.285 UTC [481] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:18.285 UTC [481] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:18.286 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:18.286 UTC [481] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:18.286 UTC [481] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:18.287 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:18.287 UTC [481] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:18.288 UTC [481] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:18.289 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:18.291 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:18.291 UTC [481] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:18.291 UTC [481] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:18.293 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:18.293 UTC [481] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:18.293 UTC [481] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:18.294 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:18.296 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:18.296 UTC [481] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:18.296 UTC [481] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:18.297 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:18.297 UTC [481] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:18.297 UTC [481] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:18.298 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:18.299 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:18.300 UTC [481] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:18.300 UTC [481] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:18.301 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:18.302 UTC [481] DEBUG:  building index "pg_toast_27279_index" on table "pg_toast_27279" serially
2025-04-19 08:25:18.303 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:18.303 UTC [481] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:18.303 UTC [481] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:18.305 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:18.308 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:18.308 UTC [481] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:18.308 UTC [481] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:18.309 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:18.309 UTC [481] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:18.309 UTC [481] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:18.310 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:18.312 UTC [481] DEBUG:  building index "pg_toast_27312_index" on table "pg_toast_27312" serially
2025-04-19 08:25:18.313 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:18.314 UTC [481] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:18.314 UTC [481] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:18.315 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:18.316 UTC [481] DEBUG:  building index "pg_toast_27323_index" on table "pg_toast_27323" serially
2025-04-19 08:25:18.317 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:18.317 UTC [481] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:18.317 UTC [481] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:18.318 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:18.319 UTC [481] DEBUG:  building index "pg_toast_27346_index" on table "pg_toast_27346" serially
2025-04-19 08:25:18.320 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:18.320 UTC [481] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:18.320 UTC [481] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:18.321 UTC [481] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:18.321 UTC [481] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:18.322 UTC [481] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:18.322 UTC [481] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:18.323 UTC [481] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:18.323 UTC [481] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:18.324 UTC [481] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:18.324 UTC [481] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:18.324 UTC [481] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:18.324 UTC [481] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:18.325 UTC [481] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:18.325 UTC [481] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:18.326 UTC [481] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:18.326 UTC [481] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:18.327 UTC [481] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 08:25:18.327 UTC [481] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:18.327 UTC [481] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:18.328 UTC [481] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:18.328 UTC [481] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:18.329 UTC [481] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:18.329 UTC [481] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:18.330 UTC [481] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:18.330 UTC [481] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:18.342 UTC [481] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:18.609 UTC [481] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$cA75lQ8Lf1vc1UixDwjsG.o2fOwAUpdwVklsIfyJSSAJvx98PMp8e')
	                RETURNING id, username, email
	                
2025-04-19 08:25:18.610 UTC [481] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:18.610 UTC [481] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:18.611 UTC [481] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:25:18.614 UTC [481] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 08:25:18.614 UTC [481] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 08:25:18.618 UTC [481] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:18.619 UTC [481] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:18.621 UTC [481] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:18.626 UTC [481] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:18.626 UTC [481] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:18.629 UTC [481] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:18.632 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:18.633 UTC [481] DEBUG:  building index "pg_toast_27382_index" on table "pg_toast_27382" serially
2025-04-19 08:25:18.634 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:18.635 UTC [481] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:18.635 UTC [481] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:18.636 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:18.636 UTC [481] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:18.636 UTC [481] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:18.636 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:18.637 UTC [481] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:18.637 UTC [481] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:18.638 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:18.638 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:18.639 UTC [481] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:18.639 UTC [481] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:18.639 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:18.639 UTC [481] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:18.639 UTC [481] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:18.640 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:18.641 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:18.641 UTC [481] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:18.641 UTC [481] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:18.642 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:18.642 UTC [481] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:18.642 UTC [481] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:18.643 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:18.644 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:18.644 UTC [481] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:18.644 UTC [481] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:18.645 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:18.646 UTC [481] DEBUG:  building index "pg_toast_27443_index" on table "pg_toast_27443" serially
2025-04-19 08:25:18.647 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:18.647 UTC [481] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:18.647 UTC [481] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:18.648 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:18.649 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:18.649 UTC [481] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:18.649 UTC [481] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:18.650 UTC [481] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:18.650 UTC [481] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:18.650 UTC [481] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:18.651 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:18.652 UTC [481] DEBUG:  building index "pg_toast_27476_index" on table "pg_toast_27476" serially
2025-04-19 08:25:18.653 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:18.653 UTC [481] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:18.653 UTC [481] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:18.654 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:18.655 UTC [481] DEBUG:  building index "pg_toast_27487_index" on table "pg_toast_27487" serially
2025-04-19 08:25:18.656 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:18.656 UTC [481] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:18.656 UTC [481] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:18.657 UTC [481] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:18.658 UTC [481] DEBUG:  building index "pg_toast_27510_index" on table "pg_toast_27510" serially
2025-04-19 08:25:18.659 UTC [481] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:18.659 UTC [481] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:18.659 UTC [481] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:18.660 UTC [481] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:18.660 UTC [481] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:18.660 UTC [481] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:18.660 UTC [481] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:18.662 UTC [481] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:18.662 UTC [481] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:18.662 UTC [481] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:18.662 UTC [481] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:18.664 UTC [481] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:18.664 UTC [481] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:18.665 UTC [481] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:18.665 UTC [481] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:18.667 UTC [481] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:18.667 UTC [481] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:18.668 UTC [481] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:18.668 UTC [481] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:18.669 UTC [481] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:18.669 UTC [481] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:18.670 UTC [481] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:18.670 UTC [481] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:18.671 UTC [481] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:18.671 UTC [481] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:18.682 UTC [481] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:18.930 UTC [481] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$QtcfLHULrYzYuQ.kAPXfXulacu204BidzCVbOJHIXEwSt/sa/RP6m')
	                RETURNING id, username, email
	                
2025-04-19 08:25:18.931 UTC [481] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:18.931 UTC [481] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:31.980 UTC [481] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:25:32.284 UTC [481] DEBUG:  unexpected EOF on client connection
2025-04-19 08:25:34.069 UTC [489] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:34.076 UTC [489] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:34.082 UTC [489] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:34.082 UTC [489] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:34.086 UTC [489] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:34.089 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:34.094 UTC [489] DEBUG:  building index "pg_toast_27546_index" on table "pg_toast_27546" serially
2025-04-19 08:25:34.097 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:34.097 UTC [489] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:34.097 UTC [489] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:34.098 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:34.098 UTC [489] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:34.099 UTC [489] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:34.099 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:34.099 UTC [489] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:34.100 UTC [489] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:34.100 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:34.101 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:34.102 UTC [489] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:34.102 UTC [489] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:34.103 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:34.103 UTC [489] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:34.103 UTC [489] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:34.104 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:34.105 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:34.105 UTC [489] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:34.106 UTC [489] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:34.107 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:34.107 UTC [489] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:34.107 UTC [489] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:34.109 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:34.110 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:34.111 UTC [489] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:34.111 UTC [489] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:34.113 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:34.117 UTC [489] DEBUG:  building index "pg_toast_27607_index" on table "pg_toast_27607" serially
2025-04-19 08:25:34.118 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:34.118 UTC [489] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:34.118 UTC [489] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:34.119 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:34.121 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:34.122 UTC [489] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:34.122 UTC [489] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:34.123 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:34.123 UTC [489] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:34.123 UTC [489] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:34.124 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:34.125 UTC [489] DEBUG:  building index "pg_toast_27640_index" on table "pg_toast_27640" serially
2025-04-19 08:25:34.126 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:34.126 UTC [489] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:34.126 UTC [489] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:34.127 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:34.128 UTC [489] DEBUG:  building index "pg_toast_27651_index" on table "pg_toast_27651" serially
2025-04-19 08:25:34.129 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:34.129 UTC [489] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:34.129 UTC [489] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:34.131 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:34.131 UTC [489] DEBUG:  building index "pg_toast_27674_index" on table "pg_toast_27674" serially
2025-04-19 08:25:34.132 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:34.133 UTC [489] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:34.133 UTC [489] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:34.133 UTC [489] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:34.133 UTC [489] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:34.134 UTC [489] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:34.134 UTC [489] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:34.135 UTC [489] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:34.135 UTC [489] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:34.136 UTC [489] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:34.136 UTC [489] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:34.137 UTC [489] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:34.137 UTC [489] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:34.138 UTC [489] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:34.138 UTC [489] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:34.139 UTC [489] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:34.139 UTC [489] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:34.140 UTC [489] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:34.140 UTC [489] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:34.141 UTC [489] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:34.141 UTC [489] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:34.142 UTC [489] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:34.142 UTC [489] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:34.143 UTC [489] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:34.143 UTC [489] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:34.157 UTC [489] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:34.503 UTC [489] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$abSnPVTOBcogfvncbLflgeOKdNGV2.oOCBjoi.kk6o4rj0HEKBM7e')
	                RETURNING id, username, email
	                
2025-04-19 08:25:34.506 UTC [489] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:34.508 UTC [489] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:34.514 UTC [489] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:25:34.694 UTC [489] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:34.701 UTC [489] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:34.719 UTC [489] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:34.735 UTC [489] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:34.735 UTC [489] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:34.739 UTC [489] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:34.743 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:34.745 UTC [489] DEBUG:  building index "pg_toast_27710_index" on table "pg_toast_27710" serially
2025-04-19 08:25:34.746 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:34.746 UTC [489] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:34.746 UTC [489] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:34.747 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:34.747 UTC [489] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:34.747 UTC [489] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:34.748 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:34.748 UTC [489] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:34.748 UTC [489] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:34.749 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:34.750 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:34.750 UTC [489] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:34.750 UTC [489] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:34.751 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:34.751 UTC [489] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:34.751 UTC [489] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:34.752 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:34.753 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:34.754 UTC [489] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:34.754 UTC [489] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:34.755 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:34.755 UTC [489] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:34.755 UTC [489] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:34.756 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:34.758 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:34.758 UTC [489] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:34.758 UTC [489] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:34.760 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:34.765 UTC [489] DEBUG:  building index "pg_toast_27771_index" on table "pg_toast_27771" serially
2025-04-19 08:25:34.766 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:34.767 UTC [489] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:34.767 UTC [489] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:34.769 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:34.771 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:34.771 UTC [489] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:34.771 UTC [489] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:34.772 UTC [489] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:34.772 UTC [489] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:34.772 UTC [489] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:34.773 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:34.775 UTC [489] DEBUG:  building index "pg_toast_27804_index" on table "pg_toast_27804" serially
2025-04-19 08:25:34.775 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:34.776 UTC [489] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:34.776 UTC [489] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:34.777 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:34.778 UTC [489] DEBUG:  building index "pg_toast_27815_index" on table "pg_toast_27815" serially
2025-04-19 08:25:34.779 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:34.779 UTC [489] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:34.779 UTC [489] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:34.780 UTC [489] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:34.781 UTC [489] DEBUG:  building index "pg_toast_27838_index" on table "pg_toast_27838" serially
2025-04-19 08:25:34.782 UTC [489] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:34.782 UTC [489] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:34.782 UTC [489] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:34.784 UTC [489] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:34.784 UTC [489] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:34.785 UTC [489] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:34.785 UTC [489] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:34.786 UTC [489] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:34.786 UTC [489] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:34.787 UTC [489] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:34.787 UTC [489] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:34.787 UTC [489] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:34.787 UTC [489] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:34.789 UTC [489] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:34.789 UTC [489] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:34.789 UTC [489] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:34.789 UTC [489] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:34.790 UTC [489] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:34.790 UTC [489] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:34.791 UTC [489] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:34.791 UTC [489] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:34.792 UTC [489] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:34.792 UTC [489] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:34.793 UTC [489] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:34.793 UTC [489] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:34.805 UTC [489] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:35.050 UTC [489] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$P8UoS7M4jkGo0cmBsP/4.uoCEYcbEiga2q.AmX9LYNc3lfCpWZMp6')
	                RETURNING id, username, email
	                
2025-04-19 08:25:35.051 UTC [489] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:35.052 UTC [489] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:47.592 UTC [504] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:25:47.888 UTC [489] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:25:48.184 UTC [489] DEBUG:  unexpected EOF on client connection
2025-04-19 08:25:49.875 UTC [505] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:49.881 UTC [505] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:49.887 UTC [505] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:49.887 UTC [505] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:49.891 UTC [505] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:49.895 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:49.900 UTC [505] DEBUG:  building index "pg_toast_27874_index" on table "pg_toast_27874" serially
2025-04-19 08:25:49.903 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:49.904 UTC [505] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:49.904 UTC [505] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:49.907 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:49.907 UTC [505] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:49.907 UTC [505] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:49.909 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:49.909 UTC [505] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:49.909 UTC [505] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:49.910 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:49.913 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:49.914 UTC [505] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:49.914 UTC [505] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:49.915 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:49.916 UTC [505] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:49.916 UTC [505] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:49.917 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:49.918 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:49.918 UTC [505] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:49.919 UTC [505] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:49.920 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:49.920 UTC [505] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:49.920 UTC [505] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:49.921 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:49.922 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:49.923 UTC [505] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:49.923 UTC [505] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:49.924 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:49.925 UTC [505] DEBUG:  building index "pg_toast_27935_index" on table "pg_toast_27935" serially
2025-04-19 08:25:49.926 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:49.926 UTC [505] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:49.926 UTC [505] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:49.927 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:49.928 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:49.929 UTC [505] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:49.929 UTC [505] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:49.930 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:49.930 UTC [505] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:49.930 UTC [505] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:49.931 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:49.933 UTC [505] DEBUG:  building index "pg_toast_27968_index" on table "pg_toast_27968" serially
2025-04-19 08:25:49.933 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:49.934 UTC [505] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:49.934 UTC [505] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:49.934 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:49.936 UTC [505] DEBUG:  building index "pg_toast_27979_index" on table "pg_toast_27979" serially
2025-04-19 08:25:49.937 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:49.937 UTC [505] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:49.937 UTC [505] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:49.938 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:49.939 UTC [505] DEBUG:  building index "pg_toast_28002_index" on table "pg_toast_28002" serially
2025-04-19 08:25:49.940 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:49.940 UTC [505] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:49.940 UTC [505] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:49.941 UTC [505] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:49.941 UTC [505] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:49.942 UTC [505] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:49.942 UTC [505] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:49.943 UTC [505] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:49.943 UTC [505] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:49.944 UTC [505] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:49.944 UTC [505] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:49.945 UTC [505] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:49.945 UTC [505] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:49.946 UTC [505] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:49.946 UTC [505] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:49.947 UTC [505] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:49.947 UTC [505] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:49.947 UTC [505] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:49.947 UTC [505] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:49.948 UTC [505] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:49.948 UTC [505] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:49.949 UTC [505] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:49.949 UTC [505] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:49.950 UTC [505] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:49.950 UTC [505] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:49.963 UTC [505] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:50.229 UTC [505] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$kXyK9bAhX53M2CMYNBjGdu16n0FQfapB5K9t.wjjsP2XtlCNWKrOy')
	                RETURNING id, username, email
	                
2025-04-19 08:25:50.230 UTC [505] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:50.230 UTC [505] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:25:50.230 UTC [505] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:25:50.240 UTC [505] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:50.242 UTC [505] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:25:50.245 UTC [505] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:25:50.250 UTC [505] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:25:50.250 UTC [505] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:25:50.253 UTC [505] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:25:50.256 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:25:50.257 UTC [505] DEBUG:  building index "pg_toast_28038_index" on table "pg_toast_28038" serially
2025-04-19 08:25:50.258 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:25:50.258 UTC [505] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:25:50.258 UTC [505] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:25:50.259 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:25:50.259 UTC [505] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:25:50.259 UTC [505] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:25:50.260 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:25:50.260 UTC [505] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:25:50.260 UTC [505] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:25:50.261 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:25:50.262 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:25:50.262 UTC [505] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:25:50.262 UTC [505] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:25:50.263 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:25:50.263 UTC [505] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:25:50.263 UTC [505] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:25:50.264 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:25:50.264 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:25:50.264 UTC [505] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:25:50.265 UTC [505] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:25:50.265 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:25:50.265 UTC [505] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:25:50.265 UTC [505] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:25:50.266 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:25:50.267 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:25:50.267 UTC [505] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:25:50.267 UTC [505] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:25:50.269 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:25:50.269 UTC [505] DEBUG:  building index "pg_toast_28099_index" on table "pg_toast_28099" serially
2025-04-19 08:25:50.270 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:25:50.270 UTC [505] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:25:50.270 UTC [505] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:25:50.272 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:25:50.274 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:25:50.275 UTC [505] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:25:50.275 UTC [505] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:25:50.276 UTC [505] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:25:50.276 UTC [505] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:25:50.276 UTC [505] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:25:50.278 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:25:50.279 UTC [505] DEBUG:  building index "pg_toast_28132_index" on table "pg_toast_28132" serially
2025-04-19 08:25:50.280 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:25:50.280 UTC [505] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:25:50.280 UTC [505] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:25:50.281 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:25:50.282 UTC [505] DEBUG:  building index "pg_toast_28143_index" on table "pg_toast_28143" serially
2025-04-19 08:25:50.283 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:25:50.283 UTC [505] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:25:50.283 UTC [505] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:25:50.284 UTC [505] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:25:50.285 UTC [505] DEBUG:  building index "pg_toast_28166_index" on table "pg_toast_28166" serially
2025-04-19 08:25:50.286 UTC [505] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:25:50.286 UTC [505] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:25:50.286 UTC [505] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:25:50.287 UTC [505] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:25:50.287 UTC [505] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:25:50.288 UTC [505] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:25:50.288 UTC [505] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:25:50.288 UTC [505] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:25:50.288 UTC [505] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:25:50.289 UTC [505] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:25:50.289 UTC [505] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:25:50.290 UTC [505] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:25:50.290 UTC [505] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:25:50.291 UTC [505] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:25:50.291 UTC [505] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:25:50.292 UTC [505] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:25:50.292 UTC [505] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:25:50.293 UTC [505] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:25:50.293 UTC [505] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:25:50.294 UTC [505] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:25:50.294 UTC [505] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:25:50.295 UTC [505] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:25:50.295 UTC [505] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:25:50.296 UTC [505] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:25:50.296 UTC [505] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:25:50.305 UTC [505] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:25:50.551 UTC [505] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$y/C5fzb97Ps4m.wZGJo.A.tVwnXtR/FKT1SkKOnYtY8nZjQ9lqBeK')
	                RETURNING id, username, email
	                
2025-04-19 08:25:50.552 UTC [505] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:25:50.553 UTC [505] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:03.805 UTC [505] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:26:04.125 UTC [505] DEBUG:  unexpected EOF on client connection
2025-04-19 08:26:06.837 UTC [520] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:06.844 UTC [520] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:06.850 UTC [520] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:06.850 UTC [520] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:06.854 UTC [520] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:06.860 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:06.866 UTC [520] DEBUG:  building index "pg_toast_28202_index" on table "pg_toast_28202" serially
2025-04-19 08:26:06.870 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:06.871 UTC [520] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:06.871 UTC [520] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:06.872 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:06.873 UTC [520] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:06.873 UTC [520] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:06.874 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:06.874 UTC [520] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:06.874 UTC [520] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:06.876 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:06.877 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:06.878 UTC [520] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:06.878 UTC [520] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:06.878 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:06.879 UTC [520] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:06.879 UTC [520] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:06.879 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:06.880 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:06.881 UTC [520] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:06.881 UTC [520] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:06.882 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:06.882 UTC [520] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:06.882 UTC [520] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:06.883 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:06.884 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:06.884 UTC [520] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:06.884 UTC [520] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:06.885 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:06.887 UTC [520] DEBUG:  building index "pg_toast_28263_index" on table "pg_toast_28263" serially
2025-04-19 08:26:06.888 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:06.888 UTC [520] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:06.888 UTC [520] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:06.890 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:06.891 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:06.891 UTC [520] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:06.891 UTC [520] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:06.892 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:06.892 UTC [520] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:06.892 UTC [520] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:06.893 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:06.894 UTC [520] DEBUG:  building index "pg_toast_28296_index" on table "pg_toast_28296" serially
2025-04-19 08:26:06.895 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:06.895 UTC [520] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:06.895 UTC [520] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:06.896 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:06.897 UTC [520] DEBUG:  building index "pg_toast_28307_index" on table "pg_toast_28307" serially
2025-04-19 08:26:06.898 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:06.898 UTC [520] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:06.898 UTC [520] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:06.900 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:06.901 UTC [520] DEBUG:  building index "pg_toast_28330_index" on table "pg_toast_28330" serially
2025-04-19 08:26:06.902 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:06.902 UTC [520] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:06.902 UTC [520] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:06.903 UTC [520] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:06.903 UTC [520] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:06.904 UTC [520] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:06.904 UTC [520] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:06.905 UTC [520] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:06.905 UTC [520] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:06.906 UTC [520] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:06.906 UTC [520] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:06.907 UTC [520] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:06.907 UTC [520] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:06.908 UTC [520] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:06.908 UTC [520] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:06.908 UTC [520] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:06.908 UTC [520] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:06.909 UTC [520] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:06.909 UTC [520] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:06.910 UTC [520] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:06.910 UTC [520] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:06.911 UTC [520] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:06.911 UTC [520] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:06.912 UTC [520] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:06.912 UTC [520] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:06.928 UTC [520] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:07.197 UTC [520] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$4mqoAL3L9EVHhnbBFYDToeA65qY0pRLL/wGMBYjrC/VhnFQIM8bTq')
	                RETURNING id, username, email
	                
2025-04-19 08:26:07.198 UTC [520] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:07.199 UTC [520] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:07.200 UTC [520] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:26:07.220 UTC [520] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:07.222 UTC [520] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:07.224 UTC [520] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:07.229 UTC [520] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:07.229 UTC [520] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:07.236 UTC [520] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:07.244 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:07.245 UTC [520] DEBUG:  building index "pg_toast_28366_index" on table "pg_toast_28366" serially
2025-04-19 08:26:07.247 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:07.247 UTC [520] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:07.247 UTC [520] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:07.247 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:07.248 UTC [520] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:07.248 UTC [520] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:07.248 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:07.249 UTC [520] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:07.249 UTC [520] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:07.249 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:07.250 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:07.251 UTC [520] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:07.251 UTC [520] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:07.251 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:07.252 UTC [520] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:07.252 UTC [520] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:07.254 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:07.256 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:07.256 UTC [520] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:07.256 UTC [520] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:07.258 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:07.259 UTC [520] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:07.259 UTC [520] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:07.263 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:07.266 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:07.266 UTC [520] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:07.266 UTC [520] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:07.267 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:07.269 UTC [520] DEBUG:  building index "pg_toast_28427_index" on table "pg_toast_28427" serially
2025-04-19 08:26:07.270 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:07.270 UTC [520] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:07.270 UTC [520] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:07.271 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:07.272 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:07.272 UTC [520] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:07.272 UTC [520] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:07.273 UTC [520] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:07.273 UTC [520] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:07.273 UTC [520] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:07.274 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:07.275 UTC [520] DEBUG:  building index "pg_toast_28460_index" on table "pg_toast_28460" serially
2025-04-19 08:26:07.276 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:07.276 UTC [520] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:07.276 UTC [520] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:07.277 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:07.278 UTC [520] DEBUG:  building index "pg_toast_28471_index" on table "pg_toast_28471" serially
2025-04-19 08:26:07.279 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:07.279 UTC [520] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:07.279 UTC [520] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:07.281 UTC [520] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:07.282 UTC [520] DEBUG:  building index "pg_toast_28494_index" on table "pg_toast_28494" serially
2025-04-19 08:26:07.283 UTC [520] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:07.283 UTC [520] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:07.283 UTC [520] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:07.284 UTC [520] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:07.284 UTC [520] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:07.285 UTC [520] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:07.285 UTC [520] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:07.286 UTC [520] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:07.286 UTC [520] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:07.287 UTC [520] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:07.287 UTC [520] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:07.287 UTC [520] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:07.287 UTC [520] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:07.288 UTC [520] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:07.288 UTC [520] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:07.289 UTC [520] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:07.289 UTC [520] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:07.290 UTC [520] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:07.290 UTC [520] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:07.291 UTC [520] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:07.291 UTC [520] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:07.292 UTC [520] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:07.292 UTC [520] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:07.293 UTC [520] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:07.293 UTC [520] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:07.313 UTC [520] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:07.565 UTC [520] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$fPChTXlncif0W5Urf3sxsuKoz43sGnTWh6uddERq.LwoN7arFqt.u')
	                RETURNING id, username, email
	                
2025-04-19 08:26:07.566 UTC [520] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:07.566 UTC [520] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:17.709 UTC [528] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:26:17.935 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 08:26:17.970 UTC [528] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:26:19.838 UTC [520] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:26:20.140 UTC [520] DEBUG:  unexpected EOF on client connection
2025-04-19 08:26:22.301 UTC [529] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:22.312 UTC [529] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:22.324 UTC [529] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:22.324 UTC [529] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:22.328 UTC [529] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:22.332 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:22.334 UTC [529] DEBUG:  building index "pg_toast_28531_index" on table "pg_toast_28531" serially
2025-04-19 08:26:22.338 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:22.338 UTC [529] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:22.338 UTC [529] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:22.340 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:22.340 UTC [529] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:22.340 UTC [529] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:22.341 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:22.341 UTC [529] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:22.341 UTC [529] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:22.342 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:22.343 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:22.343 UTC [529] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:22.343 UTC [529] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:22.344 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:22.344 UTC [529] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:22.344 UTC [529] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:22.345 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:22.346 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:22.346 UTC [529] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:22.346 UTC [529] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:22.347 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:22.347 UTC [529] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:22.347 UTC [529] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:22.349 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:22.350 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:22.350 UTC [529] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:22.350 UTC [529] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:22.351 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:22.353 UTC [529] DEBUG:  building index "pg_toast_28592_index" on table "pg_toast_28592" serially
2025-04-19 08:26:22.354 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:22.355 UTC [529] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:22.355 UTC [529] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:22.356 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:22.357 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:22.357 UTC [529] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:22.357 UTC [529] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:22.358 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:22.358 UTC [529] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:22.358 UTC [529] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:22.359 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:22.361 UTC [529] DEBUG:  building index "pg_toast_28625_index" on table "pg_toast_28625" serially
2025-04-19 08:26:22.362 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:22.362 UTC [529] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:22.362 UTC [529] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:22.364 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:22.367 UTC [529] DEBUG:  building index "pg_toast_28636_index" on table "pg_toast_28636" serially
2025-04-19 08:26:22.368 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:22.369 UTC [529] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:22.369 UTC [529] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:22.372 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:22.375 UTC [529] DEBUG:  building index "pg_toast_28659_index" on table "pg_toast_28659" serially
2025-04-19 08:26:22.376 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:22.376 UTC [529] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:22.376 UTC [529] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:22.378 UTC [529] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:22.378 UTC [529] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:22.379 UTC [529] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:22.379 UTC [529] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:22.380 UTC [529] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:22.380 UTC [529] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:22.380 UTC [529] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:22.380 UTC [529] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:22.381 UTC [529] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:22.381 UTC [529] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:22.382 UTC [529] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:22.382 UTC [529] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:22.383 UTC [529] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:22.383 UTC [529] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:22.384 UTC [529] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 08:26:22.384 UTC [529] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:22.384 UTC [529] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:22.385 UTC [529] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:22.385 UTC [529] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:22.386 UTC [529] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:22.386 UTC [529] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:22.387 UTC [529] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:22.387 UTC [529] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:22.406 UTC [529] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:22.703 UTC [529] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$dwJllc3Ll.x9h1jwA9N.huEymKV/AxJFACMYO1folPNHIrNU//sje')
	                RETURNING id, username, email
	                
2025-04-19 08:26:22.704 UTC [529] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:22.705 UTC [529] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:22.706 UTC [529] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:26:22.709 UTC [529] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 08:26:22.709 UTC [529] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 08:26:22.722 UTC [529] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:22.723 UTC [529] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:22.727 UTC [529] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:22.731 UTC [529] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:22.731 UTC [529] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:22.735 UTC [529] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:22.739 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:22.740 UTC [529] DEBUG:  building index "pg_toast_28695_index" on table "pg_toast_28695" serially
2025-04-19 08:26:22.742 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:22.742 UTC [529] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:22.742 UTC [529] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:22.744 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:22.744 UTC [529] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:22.744 UTC [529] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:22.744 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:22.745 UTC [529] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:22.745 UTC [529] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:22.746 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:22.748 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:22.749 UTC [529] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:22.749 UTC [529] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:22.750 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:22.751 UTC [529] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:22.751 UTC [529] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:22.752 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:22.756 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:22.757 UTC [529] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:22.757 UTC [529] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:22.759 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:22.759 UTC [529] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:22.759 UTC [529] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:22.763 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:22.765 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:22.765 UTC [529] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:22.765 UTC [529] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:22.767 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:22.770 UTC [529] DEBUG:  building index "pg_toast_28756_index" on table "pg_toast_28756" serially
2025-04-19 08:26:22.771 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:22.772 UTC [529] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:22.772 UTC [529] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:22.773 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:22.774 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:22.774 UTC [529] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:22.774 UTC [529] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:22.778 UTC [529] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:22.778 UTC [529] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:22.779 UTC [529] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:22.781 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:22.783 UTC [529] DEBUG:  building index "pg_toast_28789_index" on table "pg_toast_28789" serially
2025-04-19 08:26:22.784 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:22.785 UTC [529] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:22.785 UTC [529] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:22.786 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:22.787 UTC [529] DEBUG:  building index "pg_toast_28800_index" on table "pg_toast_28800" serially
2025-04-19 08:26:22.788 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:22.789 UTC [529] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:22.790 UTC [529] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:22.797 UTC [529] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:22.801 UTC [529] DEBUG:  building index "pg_toast_28823_index" on table "pg_toast_28823" serially
2025-04-19 08:26:22.804 UTC [529] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:22.805 UTC [529] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:22.805 UTC [529] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:22.809 UTC [529] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:22.809 UTC [529] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:22.810 UTC [529] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:22.810 UTC [529] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:22.814 UTC [529] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:22.814 UTC [529] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:22.818 UTC [529] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:22.818 UTC [529] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:22.820 UTC [529] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:22.820 UTC [529] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:22.822 UTC [529] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:22.822 UTC [529] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:22.823 UTC [529] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:22.823 UTC [529] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:22.824 UTC [529] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:22.824 UTC [529] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:22.825 UTC [529] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:22.825 UTC [529] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:22.827 UTC [529] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:22.827 UTC [529] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:22.827 UTC [529] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:22.827 UTC [529] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:22.847 UTC [529] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:23.094 UTC [529] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$YE49/kjJY7daH5uuGuPJnuB/nGrGE/rsU2OfpMuyGc5IghtB91SVa')
	                RETURNING id, username, email
	                
2025-04-19 08:26:23.095 UTC [529] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:23.095 UTC [529] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:35.779 UTC [529] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:26:36.057 UTC [529] DEBUG:  unexpected EOF on client connection
2025-04-19 08:26:37.869 UTC [544] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:37.876 UTC [544] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:37.882 UTC [544] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:37.882 UTC [544] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:37.885 UTC [544] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:37.889 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:37.892 UTC [544] DEBUG:  building index "pg_toast_28859_index" on table "pg_toast_28859" serially
2025-04-19 08:26:37.895 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:37.895 UTC [544] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:37.895 UTC [544] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:37.897 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:37.897 UTC [544] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:37.897 UTC [544] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:37.897 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:37.898 UTC [544] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:37.898 UTC [544] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:37.898 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:37.899 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:37.900 UTC [544] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:37.900 UTC [544] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:37.900 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:37.900 UTC [544] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:37.900 UTC [544] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:37.901 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:37.902 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:37.902 UTC [544] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:37.902 UTC [544] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:37.903 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:37.903 UTC [544] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:37.903 UTC [544] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:37.905 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:37.906 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:37.907 UTC [544] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:37.907 UTC [544] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:37.908 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:37.910 UTC [544] DEBUG:  building index "pg_toast_28920_index" on table "pg_toast_28920" serially
2025-04-19 08:26:37.911 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:37.912 UTC [544] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:37.912 UTC [544] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:37.913 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:37.915 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:37.916 UTC [544] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:37.916 UTC [544] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:37.917 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:37.917 UTC [544] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:37.917 UTC [544] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:37.918 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:37.920 UTC [544] DEBUG:  building index "pg_toast_28953_index" on table "pg_toast_28953" serially
2025-04-19 08:26:37.922 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:37.922 UTC [544] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:37.922 UTC [544] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:37.923 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:37.924 UTC [544] DEBUG:  building index "pg_toast_28964_index" on table "pg_toast_28964" serially
2025-04-19 08:26:37.925 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:37.925 UTC [544] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:37.925 UTC [544] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:37.927 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:37.927 UTC [544] DEBUG:  building index "pg_toast_28987_index" on table "pg_toast_28987" serially
2025-04-19 08:26:37.928 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:37.928 UTC [544] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:37.928 UTC [544] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:37.929 UTC [544] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:37.929 UTC [544] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:37.930 UTC [544] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:37.930 UTC [544] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:37.931 UTC [544] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:37.931 UTC [544] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:37.932 UTC [544] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:37.932 UTC [544] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:37.933 UTC [544] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:37.933 UTC [544] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:37.934 UTC [544] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:37.934 UTC [544] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:37.935 UTC [544] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:37.935 UTC [544] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:37.936 UTC [544] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:37.936 UTC [544] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:37.937 UTC [544] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:37.937 UTC [544] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:37.938 UTC [544] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:37.938 UTC [544] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:37.939 UTC [544] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:37.939 UTC [544] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:37.951 UTC [544] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:38.222 UTC [544] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$FXmIbgSZheHCvdVtwRgDf.jRiFlzXn5gTKf4ocw1BjzrED5W.mKV.')
	                RETURNING id, username, email
	                
2025-04-19 08:26:38.223 UTC [544] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:38.223 UTC [544] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:38.224 UTC [544] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:26:38.233 UTC [544] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:38.234 UTC [544] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:38.238 UTC [544] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:38.243 UTC [544] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:38.243 UTC [544] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:38.246 UTC [544] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:38.249 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:38.250 UTC [544] DEBUG:  building index "pg_toast_29023_index" on table "pg_toast_29023" serially
2025-04-19 08:26:38.251 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:38.251 UTC [544] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:38.251 UTC [544] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:38.252 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:38.252 UTC [544] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:38.252 UTC [544] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:38.253 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:38.253 UTC [544] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:38.253 UTC [544] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:38.254 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:38.255 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:38.255 UTC [544] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:38.255 UTC [544] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:38.256 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:38.256 UTC [544] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:38.256 UTC [544] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:38.257 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:38.257 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:38.258 UTC [544] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:38.258 UTC [544] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:38.258 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:38.258 UTC [544] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:38.258 UTC [544] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:38.260 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:38.260 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:38.261 UTC [544] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:38.261 UTC [544] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:38.262 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:38.263 UTC [544] DEBUG:  building index "pg_toast_29084_index" on table "pg_toast_29084" serially
2025-04-19 08:26:38.263 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:38.264 UTC [544] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:38.264 UTC [544] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:38.265 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:38.267 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:38.267 UTC [544] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:38.267 UTC [544] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:38.268 UTC [544] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:38.268 UTC [544] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:38.268 UTC [544] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:38.269 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:38.270 UTC [544] DEBUG:  building index "pg_toast_29117_index" on table "pg_toast_29117" serially
2025-04-19 08:26:38.271 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:38.272 UTC [544] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:38.272 UTC [544] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:38.272 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:38.273 UTC [544] DEBUG:  building index "pg_toast_29128_index" on table "pg_toast_29128" serially
2025-04-19 08:26:38.274 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:38.274 UTC [544] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:38.274 UTC [544] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:38.276 UTC [544] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:38.277 UTC [544] DEBUG:  building index "pg_toast_29151_index" on table "pg_toast_29151" serially
2025-04-19 08:26:38.278 UTC [544] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:38.279 UTC [544] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:38.279 UTC [544] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:38.280 UTC [544] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:38.280 UTC [544] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:38.281 UTC [544] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:38.281 UTC [544] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:38.282 UTC [544] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:38.282 UTC [544] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:38.283 UTC [544] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:38.283 UTC [544] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:38.284 UTC [544] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:38.284 UTC [544] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:38.285 UTC [544] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:38.285 UTC [544] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:38.287 UTC [544] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:38.287 UTC [544] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:38.288 UTC [544] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:38.288 UTC [544] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:38.289 UTC [544] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:38.289 UTC [544] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:38.290 UTC [544] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:38.290 UTC [544] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:38.291 UTC [544] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:38.291 UTC [544] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:38.308 UTC [544] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:38.555 UTC [544] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$juEJvKu9XyHEi0Bv1PM/Uen8/Yg091zaKbA5AhSpwfYa.8cCJ0bCu')
	                RETURNING id, username, email
	                
2025-04-19 08:26:38.557 UTC [544] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:38.560 UTC [544] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:47.610 UTC [552] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:26:51.607 UTC [544] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:26:51.907 UTC [544] DEBUG:  unexpected EOF on client connection
2025-04-19 08:26:53.682 UTC [553] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:53.689 UTC [553] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:53.695 UTC [553] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:53.695 UTC [553] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:53.699 UTC [553] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:53.704 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:53.709 UTC [553] DEBUG:  building index "pg_toast_29187_index" on table "pg_toast_29187" serially
2025-04-19 08:26:53.711 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:53.713 UTC [553] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:53.713 UTC [553] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:53.715 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:53.715 UTC [553] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:53.715 UTC [553] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:53.716 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:53.717 UTC [553] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:53.717 UTC [553] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:53.718 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:53.722 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:53.722 UTC [553] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:53.722 UTC [553] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:53.723 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:53.723 UTC [553] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:53.723 UTC [553] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:53.724 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:53.725 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:53.725 UTC [553] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:53.725 UTC [553] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:53.726 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:53.726 UTC [553] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:53.726 UTC [553] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:53.728 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:53.729 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:53.729 UTC [553] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:53.729 UTC [553] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:53.730 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:53.732 UTC [553] DEBUG:  building index "pg_toast_29248_index" on table "pg_toast_29248" serially
2025-04-19 08:26:53.733 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:53.733 UTC [553] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:53.733 UTC [553] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:53.734 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:53.735 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:53.735 UTC [553] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:53.735 UTC [553] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:53.736 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:53.736 UTC [553] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:53.736 UTC [553] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:53.737 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:53.738 UTC [553] DEBUG:  building index "pg_toast_29281_index" on table "pg_toast_29281" serially
2025-04-19 08:26:53.739 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:53.739 UTC [553] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:53.739 UTC [553] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:53.740 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:53.741 UTC [553] DEBUG:  building index "pg_toast_29292_index" on table "pg_toast_29292" serially
2025-04-19 08:26:53.742 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:53.742 UTC [553] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:53.742 UTC [553] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:53.743 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:53.745 UTC [553] DEBUG:  building index "pg_toast_29315_index" on table "pg_toast_29315" serially
2025-04-19 08:26:53.745 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:53.746 UTC [553] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:53.746 UTC [553] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:53.746 UTC [553] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:53.746 UTC [553] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:53.747 UTC [553] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:53.747 UTC [553] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:53.748 UTC [553] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:53.748 UTC [553] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:53.749 UTC [553] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:53.749 UTC [553] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:53.750 UTC [553] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:53.750 UTC [553] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:53.751 UTC [553] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:53.751 UTC [553] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:53.751 UTC [553] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:53.751 UTC [553] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:53.752 UTC [553] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:53.752 UTC [553] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:53.753 UTC [553] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:53.753 UTC [553] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:53.754 UTC [553] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:53.754 UTC [553] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:53.755 UTC [553] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:53.755 UTC [553] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:53.768 UTC [553] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:54.030 UTC [553] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$AetB8UdljNLStL24g8Tsw.S6jEr4JQVeVeN9X9auNjtrVpJPmaUru')
	                RETURNING id, username, email
	                
2025-04-19 08:26:54.031 UTC [553] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:54.032 UTC [553] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:26:54.032 UTC [553] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:26:54.040 UTC [553] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:54.041 UTC [553] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:26:54.044 UTC [553] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:26:54.049 UTC [553] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:26:54.049 UTC [553] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:26:54.052 UTC [553] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:26:54.055 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:26:54.056 UTC [553] DEBUG:  building index "pg_toast_29351_index" on table "pg_toast_29351" serially
2025-04-19 08:26:54.058 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:26:54.058 UTC [553] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:26:54.058 UTC [553] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:26:54.059 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:26:54.059 UTC [553] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:26:54.059 UTC [553] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:26:54.060 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:26:54.060 UTC [553] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:26:54.060 UTC [553] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:26:54.061 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:26:54.062 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:26:54.063 UTC [553] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:26:54.063 UTC [553] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:26:54.064 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:26:54.064 UTC [553] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:26:54.064 UTC [553] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:26:54.065 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:26:54.066 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:26:54.066 UTC [553] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:26:54.066 UTC [553] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:26:54.067 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:26:54.067 UTC [553] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:26:54.067 UTC [553] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:26:54.068 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:26:54.069 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:26:54.069 UTC [553] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:26:54.069 UTC [553] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:26:54.070 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:26:54.071 UTC [553] DEBUG:  building index "pg_toast_29412_index" on table "pg_toast_29412" serially
2025-04-19 08:26:54.072 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:26:54.072 UTC [553] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:26:54.072 UTC [553] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:26:54.074 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:26:54.075 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:26:54.075 UTC [553] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:26:54.075 UTC [553] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:26:54.076 UTC [553] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:26:54.076 UTC [553] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:26:54.076 UTC [553] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:26:54.077 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:26:54.078 UTC [553] DEBUG:  building index "pg_toast_29445_index" on table "pg_toast_29445" serially
2025-04-19 08:26:54.079 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:26:54.079 UTC [553] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:26:54.079 UTC [553] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:26:54.080 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:26:54.081 UTC [553] DEBUG:  building index "pg_toast_29456_index" on table "pg_toast_29456" serially
2025-04-19 08:26:54.081 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:26:54.082 UTC [553] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:26:54.082 UTC [553] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:26:54.083 UTC [553] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:26:54.084 UTC [553] DEBUG:  building index "pg_toast_29479_index" on table "pg_toast_29479" serially
2025-04-19 08:26:54.085 UTC [553] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:26:54.085 UTC [553] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:26:54.085 UTC [553] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:26:54.086 UTC [553] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:26:54.086 UTC [553] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:26:54.087 UTC [553] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:26:54.087 UTC [553] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:26:54.088 UTC [553] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:26:54.088 UTC [553] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:26:54.089 UTC [553] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:26:54.089 UTC [553] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:26:54.091 UTC [553] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:26:54.091 UTC [553] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:26:54.092 UTC [553] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:26:54.092 UTC [553] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:26:54.094 UTC [553] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:26:54.094 UTC [553] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:26:54.095 UTC [553] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:26:54.095 UTC [553] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:26:54.097 UTC [553] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:26:54.097 UTC [553] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:26:54.098 UTC [553] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:26:54.098 UTC [553] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:26:54.099 UTC [553] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:26:54.099 UTC [553] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:26:54.110 UTC [553] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:26:54.354 UTC [553] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$MmSvxQUKM7T3nOvhG2bTQuAT/4Fm33CRUV36OWjT1JBCIPJSyAg/S')
	                RETURNING id, username, email
	                
2025-04-19 08:26:54.355 UTC [553] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:26:54.355 UTC [553] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:07.501 UTC [553] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:27:07.808 UTC [553] DEBUG:  unexpected EOF on client connection
2025-04-19 08:27:09.801 UTC [568] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:09.809 UTC [568] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:09.816 UTC [568] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:09.816 UTC [568] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:09.821 UTC [568] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:09.827 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:09.830 UTC [568] DEBUG:  building index "pg_toast_29515_index" on table "pg_toast_29515" serially
2025-04-19 08:27:09.831 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:09.832 UTC [568] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:09.832 UTC [568] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:09.833 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:09.833 UTC [568] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:09.833 UTC [568] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:09.834 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:09.834 UTC [568] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:09.834 UTC [568] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:09.835 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:09.836 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:09.836 UTC [568] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:09.836 UTC [568] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:09.837 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:09.837 UTC [568] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:09.837 UTC [568] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:09.838 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:09.839 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:09.839 UTC [568] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:09.839 UTC [568] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:09.840 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:09.840 UTC [568] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:09.840 UTC [568] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:09.842 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:09.843 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:09.843 UTC [568] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:09.843 UTC [568] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:09.844 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:09.846 UTC [568] DEBUG:  building index "pg_toast_29576_index" on table "pg_toast_29576" serially
2025-04-19 08:27:09.847 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:09.847 UTC [568] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:09.847 UTC [568] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:09.848 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:09.849 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:09.850 UTC [568] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:09.850 UTC [568] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:09.850 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:09.851 UTC [568] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:09.851 UTC [568] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:09.852 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:09.853 UTC [568] DEBUG:  building index "pg_toast_29609_index" on table "pg_toast_29609" serially
2025-04-19 08:27:09.854 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:09.854 UTC [568] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:09.854 UTC [568] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:09.854 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:09.855 UTC [568] DEBUG:  building index "pg_toast_29620_index" on table "pg_toast_29620" serially
2025-04-19 08:27:09.856 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:09.856 UTC [568] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:09.856 UTC [568] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:09.858 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:09.859 UTC [568] DEBUG:  building index "pg_toast_29643_index" on table "pg_toast_29643" serially
2025-04-19 08:27:09.860 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:09.860 UTC [568] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:09.860 UTC [568] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:09.861 UTC [568] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:09.861 UTC [568] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:09.862 UTC [568] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:09.862 UTC [568] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:09.862 UTC [568] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:09.862 UTC [568] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:09.863 UTC [568] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:09.863 UTC [568] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:09.864 UTC [568] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:09.864 UTC [568] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:09.865 UTC [568] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:09.865 UTC [568] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:09.866 UTC [568] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:09.866 UTC [568] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:09.867 UTC [568] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:09.867 UTC [568] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:09.868 UTC [568] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:09.868 UTC [568] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:09.868 UTC [568] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:09.868 UTC [568] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:09.869 UTC [568] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:09.869 UTC [568] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:09.883 UTC [568] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:10.149 UTC [568] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jjubF1VwTkVCJLul1KYOcO5myuIvdcIjk16v1bRZnJVSTU5ig8u3u')
	                RETURNING id, username, email
	                
2025-04-19 08:27:10.150 UTC [568] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:10.150 UTC [568] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:10.151 UTC [568] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:27:10.160 UTC [568] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:10.161 UTC [568] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:10.164 UTC [568] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:10.168 UTC [568] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:10.168 UTC [568] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:10.171 UTC [568] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:10.174 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:10.175 UTC [568] DEBUG:  building index "pg_toast_29679_index" on table "pg_toast_29679" serially
2025-04-19 08:27:10.176 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:10.176 UTC [568] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:10.176 UTC [568] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:10.177 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:10.177 UTC [568] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:10.177 UTC [568] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:10.178 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:10.178 UTC [568] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:10.178 UTC [568] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:10.179 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:10.180 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:10.180 UTC [568] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:10.180 UTC [568] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:10.181 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:10.181 UTC [568] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:10.181 UTC [568] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:10.182 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:10.183 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:10.184 UTC [568] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:10.184 UTC [568] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:10.184 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:10.184 UTC [568] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:10.184 UTC [568] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:10.185 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:10.186 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:10.186 UTC [568] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:10.186 UTC [568] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:10.188 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:10.189 UTC [568] DEBUG:  building index "pg_toast_29740_index" on table "pg_toast_29740" serially
2025-04-19 08:27:10.189 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:10.190 UTC [568] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:10.190 UTC [568] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:10.191 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:10.191 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:10.192 UTC [568] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:10.192 UTC [568] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:10.193 UTC [568] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:10.193 UTC [568] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:10.193 UTC [568] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:10.194 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:10.195 UTC [568] DEBUG:  building index "pg_toast_29773_index" on table "pg_toast_29773" serially
2025-04-19 08:27:10.196 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:10.196 UTC [568] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:10.196 UTC [568] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:10.197 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:10.198 UTC [568] DEBUG:  building index "pg_toast_29784_index" on table "pg_toast_29784" serially
2025-04-19 08:27:10.199 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:10.199 UTC [568] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:10.199 UTC [568] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:10.200 UTC [568] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:10.201 UTC [568] DEBUG:  building index "pg_toast_29807_index" on table "pg_toast_29807" serially
2025-04-19 08:27:10.202 UTC [568] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:10.202 UTC [568] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:10.202 UTC [568] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:10.203 UTC [568] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:10.203 UTC [568] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:10.204 UTC [568] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:10.204 UTC [568] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:10.205 UTC [568] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:10.205 UTC [568] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:10.206 UTC [568] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:10.206 UTC [568] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:10.206 UTC [568] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:10.206 UTC [568] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:10.207 UTC [568] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:10.207 UTC [568] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:10.208 UTC [568] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:10.208 UTC [568] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:10.209 UTC [568] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:10.209 UTC [568] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:10.210 UTC [568] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:10.210 UTC [568] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:10.212 UTC [568] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:10.212 UTC [568] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:10.213 UTC [568] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:10.213 UTC [568] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:10.228 UTC [568] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:10.475 UTC [568] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Xs1i3.6Io.esz72cyXXM6e0YCyl1kiWXkVupkBVNWxR64M.4OObee')
	                RETURNING id, username, email
	                
2025-04-19 08:27:10.476 UTC [568] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:10.477 UTC [568] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:17.722 UTC [576] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:27:17.971 UTC [576] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:27:23.432 UTC [568] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:27:23.720 UTC [568] DEBUG:  unexpected EOF on client connection
2025-04-19 08:27:25.602 UTC [577] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:25.622 UTC [577] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:25.640 UTC [577] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:25.640 UTC [577] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:25.654 UTC [577] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:25.670 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:25.683 UTC [577] DEBUG:  building index "pg_toast_29844_index" on table "pg_toast_29844" serially
2025-04-19 08:27:25.687 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:25.688 UTC [577] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:25.688 UTC [577] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:25.692 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:25.694 UTC [577] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:25.695 UTC [577] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:25.700 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:25.701 UTC [577] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:25.701 UTC [577] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:25.708 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:25.713 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:25.714 UTC [577] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:25.714 UTC [577] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:25.715 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:25.716 UTC [577] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:25.716 UTC [577] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:25.719 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:25.721 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:25.721 UTC [577] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:25.721 UTC [577] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:25.722 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:25.723 UTC [577] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:25.723 UTC [577] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:25.725 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:25.727 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:25.727 UTC [577] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:25.727 UTC [577] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:25.729 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:25.732 UTC [577] DEBUG:  building index "pg_toast_29905_index" on table "pg_toast_29905" serially
2025-04-19 08:27:25.733 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:25.734 UTC [577] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:25.734 UTC [577] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:25.736 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:25.737 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:25.738 UTC [577] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:25.738 UTC [577] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:25.739 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:25.739 UTC [577] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:25.739 UTC [577] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:25.740 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:25.741 UTC [577] DEBUG:  building index "pg_toast_29938_index" on table "pg_toast_29938" serially
2025-04-19 08:27:25.742 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:25.742 UTC [577] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:25.742 UTC [577] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:25.743 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:25.744 UTC [577] DEBUG:  building index "pg_toast_29949_index" on table "pg_toast_29949" serially
2025-04-19 08:27:25.745 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:25.745 UTC [577] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:25.745 UTC [577] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:25.747 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:25.749 UTC [577] DEBUG:  building index "pg_toast_29972_index" on table "pg_toast_29972" serially
2025-04-19 08:27:25.750 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:25.751 UTC [577] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:25.751 UTC [577] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:25.754 UTC [577] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:25.754 UTC [577] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:25.760 UTC [577] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:25.760 UTC [577] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:25.763 UTC [577] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:25.763 UTC [577] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:25.764 UTC [577] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:25.764 UTC [577] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:25.765 UTC [577] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:25.765 UTC [577] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:25.766 UTC [577] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:25.766 UTC [577] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:25.767 UTC [577] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:25.767 UTC [577] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:25.768 UTC [577] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 08:27:25.768 UTC [577] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:25.768 UTC [577] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:25.769 UTC [577] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:25.769 UTC [577] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:25.770 UTC [577] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:25.770 UTC [577] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:25.771 UTC [577] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:25.771 UTC [577] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:25.791 UTC [577] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:26.065 UTC [577] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$XPQVwN4P6Ij5gTjbwdrFnOdjB23Z7zibn5QtDAnUA0KnmU0WpEcIC')
	                RETURNING id, username, email
	                
2025-04-19 08:27:26.065 UTC [577] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:26.066 UTC [577] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:26.067 UTC [577] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:27:26.069 UTC [577] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 08:27:26.069 UTC [577] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 08:27:26.075 UTC [577] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:26.077 UTC [577] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:26.079 UTC [577] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:26.083 UTC [577] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:26.083 UTC [577] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:26.086 UTC [577] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:26.089 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:26.090 UTC [577] DEBUG:  building index "pg_toast_30008_index" on table "pg_toast_30008" serially
2025-04-19 08:27:26.092 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:26.092 UTC [577] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:26.092 UTC [577] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:26.093 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:26.093 UTC [577] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:26.093 UTC [577] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:26.094 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:26.094 UTC [577] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:26.094 UTC [577] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:26.095 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:26.096 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:26.096 UTC [577] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:26.096 UTC [577] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:26.097 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:26.097 UTC [577] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:26.097 UTC [577] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:26.098 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:26.099 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:26.099 UTC [577] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:26.099 UTC [577] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:26.100 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:26.100 UTC [577] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:26.100 UTC [577] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:26.102 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:26.103 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:26.104 UTC [577] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:26.104 UTC [577] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:26.105 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:26.107 UTC [577] DEBUG:  building index "pg_toast_30069_index" on table "pg_toast_30069" serially
2025-04-19 08:27:26.108 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:26.109 UTC [577] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:26.109 UTC [577] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:26.110 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:26.111 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:26.111 UTC [577] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:26.111 UTC [577] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:26.111 UTC [577] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:26.112 UTC [577] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:26.112 UTC [577] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:26.113 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:26.114 UTC [577] DEBUG:  building index "pg_toast_30102_index" on table "pg_toast_30102" serially
2025-04-19 08:27:26.115 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:26.115 UTC [577] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:26.115 UTC [577] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:26.116 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:26.118 UTC [577] DEBUG:  building index "pg_toast_30113_index" on table "pg_toast_30113" serially
2025-04-19 08:27:26.122 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:26.123 UTC [577] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:26.123 UTC [577] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:26.127 UTC [577] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:26.129 UTC [577] DEBUG:  building index "pg_toast_30136_index" on table "pg_toast_30136" serially
2025-04-19 08:27:26.130 UTC [577] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:26.130 UTC [577] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:26.130 UTC [577] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:26.132 UTC [577] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:26.132 UTC [577] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:26.133 UTC [577] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:26.133 UTC [577] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:26.133 UTC [577] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:26.134 UTC [577] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:26.135 UTC [577] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:26.135 UTC [577] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:26.135 UTC [577] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:26.135 UTC [577] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:26.136 UTC [577] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:26.136 UTC [577] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:26.137 UTC [577] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:26.137 UTC [577] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:26.138 UTC [577] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:26.138 UTC [577] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:26.138 UTC [577] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:26.138 UTC [577] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:26.139 UTC [577] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:26.139 UTC [577] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:26.140 UTC [577] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:26.140 UTC [577] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:26.150 UTC [577] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:26.396 UTC [577] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$bfdt07bs0ZvxrRQHuA/l0.F7rZ9otqiJ5mq8/JNBB/PXFiYcW9Dn6')
	                RETURNING id, username, email
	                
2025-04-19 08:27:26.397 UTC [577] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:26.397 UTC [577] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:39.562 UTC [577] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:27:40.145 UTC [577] DEBUG:  unexpected EOF on client connection
2025-04-19 08:27:42.313 UTC [591] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:42.319 UTC [591] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:42.326 UTC [591] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:42.326 UTC [591] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:42.329 UTC [591] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:42.333 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:42.342 UTC [591] DEBUG:  building index "pg_toast_30172_index" on table "pg_toast_30172" serially
2025-04-19 08:27:42.346 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:42.347 UTC [591] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:42.347 UTC [591] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:42.349 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:42.350 UTC [591] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:42.350 UTC [591] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:42.351 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:42.351 UTC [591] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:42.351 UTC [591] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:42.352 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:42.353 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:42.353 UTC [591] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:42.353 UTC [591] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:42.354 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:42.354 UTC [591] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:42.354 UTC [591] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:42.355 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:42.357 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:42.357 UTC [591] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:42.357 UTC [591] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:42.358 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:42.358 UTC [591] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:42.358 UTC [591] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:42.360 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:42.361 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:42.361 UTC [591] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:42.361 UTC [591] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:42.362 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:42.364 UTC [591] DEBUG:  building index "pg_toast_30233_index" on table "pg_toast_30233" serially
2025-04-19 08:27:42.365 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:42.365 UTC [591] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:42.365 UTC [591] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:42.366 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:42.367 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:42.367 UTC [591] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:42.367 UTC [591] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:42.368 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:42.368 UTC [591] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:42.368 UTC [591] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:42.370 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:42.371 UTC [591] DEBUG:  building index "pg_toast_30266_index" on table "pg_toast_30266" serially
2025-04-19 08:27:42.371 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:42.372 UTC [591] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:42.372 UTC [591] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:42.372 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:42.374 UTC [591] DEBUG:  building index "pg_toast_30277_index" on table "pg_toast_30277" serially
2025-04-19 08:27:42.376 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:42.377 UTC [591] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:42.377 UTC [591] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:42.381 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:42.382 UTC [591] DEBUG:  building index "pg_toast_30300_index" on table "pg_toast_30300" serially
2025-04-19 08:27:42.383 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:42.383 UTC [591] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:42.383 UTC [591] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:42.384 UTC [591] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:42.384 UTC [591] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:42.385 UTC [591] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:42.385 UTC [591] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:42.386 UTC [591] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:42.386 UTC [591] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:42.387 UTC [591] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:42.387 UTC [591] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:42.387 UTC [591] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:42.387 UTC [591] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:42.388 UTC [591] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:42.388 UTC [591] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:42.389 UTC [591] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:42.389 UTC [591] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:42.390 UTC [591] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:42.390 UTC [591] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:42.390 UTC [591] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:42.390 UTC [591] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:42.391 UTC [591] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:42.391 UTC [591] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:42.393 UTC [591] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:42.393 UTC [591] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:42.408 UTC [591] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:42.958 UTC [591] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$p2Dk7PQpi/KOBcq7oOmRGuKIdHhpiDCP41AjFs5veu5d1vHfWB3wW')
	                RETURNING id, username, email
	                
2025-04-19 08:27:42.963 UTC [591] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:42.964 UTC [591] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:42.966 UTC [591] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:27:43.028 UTC [591] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:43.037 UTC [591] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:43.042 UTC [591] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:43.058 UTC [591] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:43.058 UTC [591] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:43.070 UTC [591] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:43.086 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:43.092 UTC [591] DEBUG:  building index "pg_toast_30336_index" on table "pg_toast_30336" serially
2025-04-19 08:27:43.097 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:43.097 UTC [591] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:43.097 UTC [591] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:43.104 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:43.104 UTC [591] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:43.104 UTC [591] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:43.105 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:43.106 UTC [591] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:43.106 UTC [591] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:43.107 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:43.108 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:43.108 UTC [591] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:43.108 UTC [591] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:43.110 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:43.111 UTC [591] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:43.112 UTC [591] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:43.116 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:43.125 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:43.126 UTC [591] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:43.126 UTC [591] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:43.127 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:43.127 UTC [591] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:43.127 UTC [591] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:43.129 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:43.131 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:43.131 UTC [591] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:43.131 UTC [591] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:43.134 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:43.136 UTC [591] DEBUG:  building index "pg_toast_30397_index" on table "pg_toast_30397" serially
2025-04-19 08:27:43.137 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:43.138 UTC [591] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:43.138 UTC [591] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:43.140 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:43.142 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:43.143 UTC [591] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:43.143 UTC [591] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:43.145 UTC [591] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:43.146 UTC [591] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:43.146 UTC [591] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:43.148 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:43.152 UTC [591] DEBUG:  building index "pg_toast_30430_index" on table "pg_toast_30430" serially
2025-04-19 08:27:43.156 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:43.157 UTC [591] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:43.157 UTC [591] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:43.158 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:43.161 UTC [591] DEBUG:  building index "pg_toast_30441_index" on table "pg_toast_30441" serially
2025-04-19 08:27:43.162 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:43.162 UTC [591] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:43.162 UTC [591] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:43.164 UTC [591] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:43.166 UTC [591] DEBUG:  building index "pg_toast_30464_index" on table "pg_toast_30464" serially
2025-04-19 08:27:43.167 UTC [591] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:43.167 UTC [591] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:43.167 UTC [591] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:43.171 UTC [591] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:43.171 UTC [591] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:43.173 UTC [591] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:43.173 UTC [591] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:43.175 UTC [591] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:43.175 UTC [591] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:43.177 UTC [591] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:43.177 UTC [591] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:43.178 UTC [591] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:43.178 UTC [591] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:43.180 UTC [591] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:43.180 UTC [591] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:43.181 UTC [591] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:43.181 UTC [591] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:43.182 UTC [591] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:43.182 UTC [591] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:43.184 UTC [591] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:43.184 UTC [591] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:43.188 UTC [591] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:43.188 UTC [591] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:43.190 UTC [591] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:43.190 UTC [591] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:43.214 UTC [591] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:43.475 UTC [591] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$tna33oWqmDMcNK.Eg6ZjKuKFRHR4YdjFBKWczYjy3LUHtWgrkbQ/G')
	                RETURNING id, username, email
	                
2025-04-19 08:27:43.475 UTC [591] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:43.476 UTC [591] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:47.644 UTC [599] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:27:56.134 UTC [591] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:27:56.420 UTC [591] DEBUG:  unexpected EOF on client connection
2025-04-19 08:27:59.212 UTC [607] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:59.222 UTC [607] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:59.228 UTC [607] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:59.228 UTC [607] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:59.233 UTC [607] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:59.243 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:59.249 UTC [607] DEBUG:  building index "pg_toast_30500_index" on table "pg_toast_30500" serially
2025-04-19 08:27:59.252 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:59.254 UTC [607] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:59.254 UTC [607] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:59.256 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:59.256 UTC [607] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:59.256 UTC [607] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:59.258 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:59.258 UTC [607] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:59.258 UTC [607] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:59.259 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:59.261 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:59.262 UTC [607] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:59.262 UTC [607] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:59.263 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:59.263 UTC [607] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:59.263 UTC [607] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:59.264 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:59.266 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:59.267 UTC [607] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:59.267 UTC [607] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:59.267 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:59.268 UTC [607] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:59.268 UTC [607] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:59.270 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:59.271 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:59.271 UTC [607] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:59.271 UTC [607] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:59.272 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:59.274 UTC [607] DEBUG:  building index "pg_toast_30561_index" on table "pg_toast_30561" serially
2025-04-19 08:27:59.275 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:59.275 UTC [607] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:59.275 UTC [607] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:59.277 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:59.278 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:59.278 UTC [607] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:59.278 UTC [607] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:59.279 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:59.279 UTC [607] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:59.279 UTC [607] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:59.280 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:59.281 UTC [607] DEBUG:  building index "pg_toast_30594_index" on table "pg_toast_30594" serially
2025-04-19 08:27:59.282 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:59.283 UTC [607] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:59.283 UTC [607] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:59.284 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:59.285 UTC [607] DEBUG:  building index "pg_toast_30605_index" on table "pg_toast_30605" serially
2025-04-19 08:27:59.286 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:59.286 UTC [607] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:59.286 UTC [607] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:59.287 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:59.288 UTC [607] DEBUG:  building index "pg_toast_30628_index" on table "pg_toast_30628" serially
2025-04-19 08:27:59.289 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:59.289 UTC [607] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:59.289 UTC [607] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:59.290 UTC [607] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:59.290 UTC [607] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:59.291 UTC [607] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:59.291 UTC [607] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:59.292 UTC [607] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:59.292 UTC [607] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:59.293 UTC [607] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:59.293 UTC [607] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:59.294 UTC [607] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:59.294 UTC [607] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:59.295 UTC [607] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:59.295 UTC [607] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:59.295 UTC [607] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:59.295 UTC [607] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:59.296 UTC [607] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:59.296 UTC [607] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:59.297 UTC [607] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:59.297 UTC [607] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:59.299 UTC [607] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:59.299 UTC [607] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:59.299 UTC [607] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:59.299 UTC [607] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:59.319 UTC [607] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:59.630 UTC [607] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$Mds.HlgW1ZQ/e4sD2kmHo.z.EntjcjQIciGplj0QNVYPgBDzYBAXO')
	                RETURNING id, username, email
	                
2025-04-19 08:27:59.631 UTC [607] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:59.632 UTC [607] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:27:59.633 UTC [607] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:27:59.642 UTC [607] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:59.644 UTC [607] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:27:59.647 UTC [607] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:27:59.653 UTC [607] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:27:59.653 UTC [607] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:27:59.657 UTC [607] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:27:59.660 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:27:59.661 UTC [607] DEBUG:  building index "pg_toast_30664_index" on table "pg_toast_30664" serially
2025-04-19 08:27:59.662 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:27:59.662 UTC [607] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:27:59.662 UTC [607] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:27:59.663 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:27:59.663 UTC [607] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:27:59.663 UTC [607] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:27:59.664 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:27:59.664 UTC [607] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:27:59.664 UTC [607] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:27:59.665 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:27:59.666 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:27:59.666 UTC [607] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:27:59.666 UTC [607] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:27:59.667 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:27:59.667 UTC [607] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:27:59.667 UTC [607] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:27:59.668 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:27:59.669 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:27:59.669 UTC [607] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:27:59.669 UTC [607] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:27:59.670 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:27:59.670 UTC [607] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:27:59.670 UTC [607] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:27:59.672 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:27:59.672 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:27:59.673 UTC [607] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:27:59.673 UTC [607] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:27:59.674 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:27:59.676 UTC [607] DEBUG:  building index "pg_toast_30725_index" on table "pg_toast_30725" serially
2025-04-19 08:27:59.677 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:27:59.678 UTC [607] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:27:59.678 UTC [607] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:27:59.679 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:27:59.681 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:27:59.682 UTC [607] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:27:59.682 UTC [607] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:27:59.683 UTC [607] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:27:59.684 UTC [607] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:27:59.684 UTC [607] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:27:59.686 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:27:59.688 UTC [607] DEBUG:  building index "pg_toast_30758_index" on table "pg_toast_30758" serially
2025-04-19 08:27:59.690 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:27:59.690 UTC [607] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:27:59.690 UTC [607] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:27:59.691 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:27:59.693 UTC [607] DEBUG:  building index "pg_toast_30769_index" on table "pg_toast_30769" serially
2025-04-19 08:27:59.694 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:27:59.695 UTC [607] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:27:59.695 UTC [607] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:27:59.698 UTC [607] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:27:59.699 UTC [607] DEBUG:  building index "pg_toast_30792_index" on table "pg_toast_30792" serially
2025-04-19 08:27:59.700 UTC [607] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:27:59.700 UTC [607] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:27:59.700 UTC [607] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:27:59.701 UTC [607] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:27:59.701 UTC [607] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:27:59.702 UTC [607] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:27:59.702 UTC [607] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:27:59.703 UTC [607] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:27:59.703 UTC [607] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:27:59.704 UTC [607] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:27:59.704 UTC [607] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:27:59.705 UTC [607] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:27:59.705 UTC [607] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:27:59.705 UTC [607] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:27:59.705 UTC [607] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:27:59.706 UTC [607] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:27:59.706 UTC [607] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:27:59.707 UTC [607] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:27:59.707 UTC [607] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:27:59.708 UTC [607] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:27:59.708 UTC [607] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:27:59.709 UTC [607] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:27:59.709 UTC [607] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:27:59.710 UTC [607] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:27:59.710 UTC [607] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:27:59.720 UTC [607] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:27:59.969 UTC [607] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$yfJb91TW4JrX7WhPtWTU2.2WTmxDe1TFUq.ZBhvNnxaz4nuMOR7OK')
	                RETURNING id, username, email
	                
2025-04-19 08:27:59.970 UTC [607] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:27:59.971 UTC [607] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:12.100 UTC [607] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:28:12.428 UTC [607] DEBUG:  unexpected EOF on client connection
2025-04-19 08:28:14.522 UTC [615] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:28:14.529 UTC [615] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:28:14.538 UTC [615] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:28:14.538 UTC [615] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:28:14.543 UTC [615] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:28:14.547 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:28:14.555 UTC [615] DEBUG:  building index "pg_toast_30828_index" on table "pg_toast_30828" serially
2025-04-19 08:28:14.558 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:28:14.559 UTC [615] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:28:14.559 UTC [615] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:28:14.562 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:28:14.562 UTC [615] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:28:14.562 UTC [615] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:28:14.563 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:28:14.564 UTC [615] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:28:14.564 UTC [615] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:28:14.564 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:28:14.565 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:28:14.566 UTC [615] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:28:14.566 UTC [615] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:28:14.567 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:28:14.567 UTC [615] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:28:14.567 UTC [615] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:28:14.568 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:28:14.569 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:28:14.569 UTC [615] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:28:14.569 UTC [615] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:28:14.570 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:28:14.570 UTC [615] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:28:14.570 UTC [615] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:28:14.572 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:28:14.573 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:28:14.573 UTC [615] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:28:14.573 UTC [615] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:28:14.574 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:28:14.576 UTC [615] DEBUG:  building index "pg_toast_30889_index" on table "pg_toast_30889" serially
2025-04-19 08:28:14.577 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:28:14.577 UTC [615] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:28:14.577 UTC [615] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:28:14.579 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:28:14.581 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:28:14.581 UTC [615] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:28:14.581 UTC [615] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:28:14.582 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:28:14.582 UTC [615] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:28:14.582 UTC [615] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:28:14.583 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:28:14.584 UTC [615] DEBUG:  building index "pg_toast_30922_index" on table "pg_toast_30922" serially
2025-04-19 08:28:14.585 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:28:14.585 UTC [615] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:28:14.585 UTC [615] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:28:14.586 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:28:14.589 UTC [615] DEBUG:  building index "pg_toast_30933_index" on table "pg_toast_30933" serially
2025-04-19 08:28:14.591 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:28:14.591 UTC [615] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:28:14.591 UTC [615] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:28:14.594 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:28:14.595 UTC [615] DEBUG:  building index "pg_toast_30956_index" on table "pg_toast_30956" serially
2025-04-19 08:28:14.596 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:28:14.597 UTC [615] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:28:14.597 UTC [615] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:28:14.598 UTC [615] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:28:14.598 UTC [615] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:28:14.600 UTC [615] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:28:14.600 UTC [615] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:28:14.604 UTC [615] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:28:14.604 UTC [615] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:28:14.606 UTC [615] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:28:14.606 UTC [615] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:28:14.608 UTC [615] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:28:14.608 UTC [615] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:28:14.610 UTC [615] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:28:14.610 UTC [615] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:28:14.611 UTC [615] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:28:14.611 UTC [615] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:28:14.612 UTC [615] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:28:14.612 UTC [615] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:28:14.613 UTC [615] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:28:14.613 UTC [615] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:28:14.614 UTC [615] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:28:14.614 UTC [615] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:28:14.616 UTC [615] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:28:14.616 UTC [615] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:28:14.634 UTC [615] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:14.904 UTC [615] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$jLhAp0X09Hh1SP2eufuub.NXwCpZn6QZb6eNaYLEefTZwJjGew.nG')
	                RETURNING id, username, email
	                
2025-04-19 08:28:14.905 UTC [615] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:28:14.906 UTC [615] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:14.908 UTC [615] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:28:14.918 UTC [615] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:14.920 UTC [615] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:28:14.924 UTC [615] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:28:14.930 UTC [615] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:28:14.930 UTC [615] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:28:14.934 UTC [615] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:28:14.938 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:28:14.939 UTC [615] DEBUG:  building index "pg_toast_30992_index" on table "pg_toast_30992" serially
2025-04-19 08:28:14.940 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:28:14.941 UTC [615] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:28:14.941 UTC [615] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:28:14.942 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:28:14.942 UTC [615] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:28:14.942 UTC [615] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:28:14.943 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:28:14.943 UTC [615] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:28:14.943 UTC [615] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:28:14.944 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:28:14.946 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:28:14.948 UTC [615] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:28:14.948 UTC [615] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:28:14.949 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:28:14.949 UTC [615] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:28:14.949 UTC [615] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:28:14.951 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:28:14.952 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:28:14.953 UTC [615] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:28:14.953 UTC [615] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:28:14.954 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:28:14.954 UTC [615] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:28:14.954 UTC [615] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:28:14.956 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:28:14.958 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:28:14.958 UTC [615] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:28:14.958 UTC [615] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:28:14.962 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:28:14.964 UTC [615] DEBUG:  building index "pg_toast_31053_index" on table "pg_toast_31053" serially
2025-04-19 08:28:14.966 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:28:14.967 UTC [615] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:28:14.967 UTC [615] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:28:14.969 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:28:14.971 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:28:14.971 UTC [615] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:28:14.971 UTC [615] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:28:14.973 UTC [615] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:28:14.974 UTC [615] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:28:14.974 UTC [615] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:28:14.975 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:28:14.976 UTC [615] DEBUG:  building index "pg_toast_31086_index" on table "pg_toast_31086" serially
2025-04-19 08:28:14.977 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:28:14.977 UTC [615] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:28:14.977 UTC [615] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:28:14.978 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:28:14.980 UTC [615] DEBUG:  building index "pg_toast_31097_index" on table "pg_toast_31097" serially
2025-04-19 08:28:14.981 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:28:14.981 UTC [615] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:28:14.981 UTC [615] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:28:14.983 UTC [615] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:28:14.985 UTC [615] DEBUG:  building index "pg_toast_31120_index" on table "pg_toast_31120" serially
2025-04-19 08:28:14.987 UTC [615] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:28:14.987 UTC [615] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:28:14.987 UTC [615] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:28:14.988 UTC [615] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:28:14.988 UTC [615] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:28:14.990 UTC [615] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:28:14.990 UTC [615] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:28:14.991 UTC [615] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:28:14.991 UTC [615] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:28:14.992 UTC [615] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:28:14.992 UTC [615] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:28:14.993 UTC [615] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:28:14.993 UTC [615] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:28:14.993 UTC [615] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:28:14.993 UTC [615] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:28:14.994 UTC [615] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:28:14.994 UTC [615] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:28:14.995 UTC [615] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:28:14.995 UTC [615] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:28:14.996 UTC [615] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:28:14.996 UTC [615] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:28:14.997 UTC [615] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:28:14.997 UTC [615] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:28:14.997 UTC [615] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:28:14.998 UTC [615] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:28:15.009 UTC [615] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:15.256 UTC [615] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$NjfyKw/BVula83QL.CoLDO2i6FLpMXRU3T8oTtWCzzHr8oo0PUTw.')
	                RETURNING id, username, email
	                
2025-04-19 08:28:15.256 UTC [615] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:28:15.257 UTC [615] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:17.714 UTC [623] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:28:17.957 UTC [623] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:28:28.069 UTC [615] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:28:28.350 UTC [615] DEBUG:  unexpected EOF on client connection
2025-04-19 08:28:30.198 UTC [631] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:28:30.210 UTC [631] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:28:30.217 UTC [631] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:28:30.217 UTC [631] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:28:30.223 UTC [631] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:28:30.231 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:28:30.245 UTC [631] DEBUG:  building index "pg_toast_31157_index" on table "pg_toast_31157" serially
2025-04-19 08:28:30.250 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:28:30.251 UTC [631] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:28:30.251 UTC [631] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:28:30.253 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:28:30.255 UTC [631] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:28:30.255 UTC [631] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:28:30.257 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:28:30.257 UTC [631] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:28:30.257 UTC [631] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:28:30.259 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:28:30.261 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:28:30.261 UTC [631] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:28:30.261 UTC [631] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:28:30.263 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:28:30.263 UTC [631] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:28:30.263 UTC [631] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:28:30.264 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:28:30.265 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:28:30.265 UTC [631] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:28:30.265 UTC [631] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:28:30.266 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:28:30.266 UTC [631] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:28:30.266 UTC [631] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:28:30.267 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:28:30.268 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:28:30.268 UTC [631] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:28:30.268 UTC [631] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:28:30.269 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:28:30.274 UTC [631] DEBUG:  building index "pg_toast_31218_index" on table "pg_toast_31218" serially
2025-04-19 08:28:30.275 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:28:30.276 UTC [631] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:28:30.276 UTC [631] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:28:30.277 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:28:30.278 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:28:30.278 UTC [631] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:28:30.278 UTC [631] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:28:30.279 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:28:30.279 UTC [631] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:28:30.279 UTC [631] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:28:30.280 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:28:30.281 UTC [631] DEBUG:  building index "pg_toast_31251_index" on table "pg_toast_31251" serially
2025-04-19 08:28:30.282 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:28:30.282 UTC [631] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:28:30.282 UTC [631] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:28:30.283 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:28:30.285 UTC [631] DEBUG:  building index "pg_toast_31262_index" on table "pg_toast_31262" serially
2025-04-19 08:28:30.287 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:28:30.287 UTC [631] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:28:30.287 UTC [631] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:28:30.292 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:28:30.295 UTC [631] DEBUG:  building index "pg_toast_31285_index" on table "pg_toast_31285" serially
2025-04-19 08:28:30.297 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:28:30.298 UTC [631] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:28:30.298 UTC [631] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:28:30.300 UTC [631] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:28:30.300 UTC [631] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:28:30.301 UTC [631] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:28:30.301 UTC [631] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:28:30.302 UTC [631] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:28:30.302 UTC [631] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:28:30.302 UTC [631] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:28:30.302 UTC [631] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:28:30.303 UTC [631] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:28:30.303 UTC [631] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:28:30.306 UTC [631] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:28:30.306 UTC [631] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:28:30.309 UTC [631] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:28:30.309 UTC [631] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:28:30.311 UTC [631] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:28:30.311 UTC [631] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:28:30.312 UTC [631] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:28:30.312 UTC [631] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:28:30.313 UTC [631] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:28:30.313 UTC [631] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:28:30.314 UTC [631] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:28:30.314 UTC [631] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:28:30.330 UTC [631] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:30.628 UTC [631] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$vcSuhKx54p4WeAxsI6.vd.gk2AfOTi5KyFdXuIOyDImzREK/p3Jke')
	                RETURNING id, username, email
	                
2025-04-19 08:28:30.629 UTC [631] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:28:30.630 UTC [631] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:30.631 UTC [631] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:28:30.640 UTC [631] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:30.642 UTC [631] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:28:30.644 UTC [631] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:28:30.648 UTC [631] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:28:30.648 UTC [631] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:28:30.651 UTC [631] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:28:30.653 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:28:30.654 UTC [631] DEBUG:  building index "pg_toast_31321_index" on table "pg_toast_31321" serially
2025-04-19 08:28:30.656 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:28:30.657 UTC [631] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:28:30.657 UTC [631] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:28:30.658 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:28:30.658 UTC [631] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:28:30.658 UTC [631] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:28:30.659 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:28:30.659 UTC [631] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:28:30.659 UTC [631] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:28:30.659 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:28:30.660 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:28:30.660 UTC [631] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:28:30.660 UTC [631] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:28:30.661 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:28:30.661 UTC [631] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:28:30.661 UTC [631] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:28:30.662 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:28:30.662 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:28:30.663 UTC [631] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:28:30.663 UTC [631] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:28:30.664 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:28:30.664 UTC [631] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:28:30.664 UTC [631] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:28:30.665 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:28:30.666 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:28:30.667 UTC [631] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:28:30.667 UTC [631] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:28:30.669 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:28:30.671 UTC [631] DEBUG:  building index "pg_toast_31382_index" on table "pg_toast_31382" serially
2025-04-19 08:28:30.672 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:28:30.672 UTC [631] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:28:30.672 UTC [631] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:28:30.674 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:28:30.676 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:28:30.676 UTC [631] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:28:30.676 UTC [631] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:28:30.677 UTC [631] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:28:30.678 UTC [631] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:28:30.678 UTC [631] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:28:30.680 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:28:30.682 UTC [631] DEBUG:  building index "pg_toast_31415_index" on table "pg_toast_31415" serially
2025-04-19 08:28:30.683 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:28:30.684 UTC [631] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:28:30.684 UTC [631] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:28:30.686 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:28:30.687 UTC [631] DEBUG:  building index "pg_toast_31426_index" on table "pg_toast_31426" serially
2025-04-19 08:28:30.688 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:28:30.688 UTC [631] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:28:30.688 UTC [631] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:28:30.690 UTC [631] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:28:30.690 UTC [631] DEBUG:  building index "pg_toast_31449_index" on table "pg_toast_31449" serially
2025-04-19 08:28:30.691 UTC [631] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:28:30.691 UTC [631] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:28:30.691 UTC [631] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:28:30.692 UTC [631] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:28:30.692 UTC [631] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:28:30.693 UTC [631] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:28:30.693 UTC [631] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:28:30.695 UTC [631] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:28:30.695 UTC [631] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:28:30.696 UTC [631] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:28:30.696 UTC [631] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:28:30.697 UTC [631] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:28:30.697 UTC [631] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:28:30.699 UTC [631] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:28:30.699 UTC [631] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:28:30.700 UTC [631] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:28:30.700 UTC [631] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:28:30.702 UTC [631] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:28:30.702 UTC [631] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:28:30.703 UTC [631] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:28:30.703 UTC [631] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:28:30.704 UTC [631] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:28:30.704 UTC [631] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:28:30.705 UTC [631] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:28:30.705 UTC [631] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:28:30.719 UTC [631] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:30.966 UTC [631] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$5OcAXA0ZWzvxvSs665OOpeobSTPx.nDQFRufKUtJ3KUrGaFuMfzza')
	                RETURNING id, username, email
	                
2025-04-19 08:28:30.967 UTC [631] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:28:30.967 UTC [631] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:43.943 UTC [631] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:28:44.222 UTC [631] DEBUG:  unexpected EOF on client connection
2025-04-19 08:28:46.059 UTC [639] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:28:46.078 UTC [639] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:28:46.089 UTC [639] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:28:46.089 UTC [639] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:28:46.095 UTC [639] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:28:46.101 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:28:46.106 UTC [639] DEBUG:  building index "pg_toast_31485_index" on table "pg_toast_31485" serially
2025-04-19 08:28:46.108 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:28:46.109 UTC [639] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:28:46.109 UTC [639] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:28:46.110 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:28:46.111 UTC [639] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:28:46.111 UTC [639] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:28:46.112 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:28:46.112 UTC [639] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:28:46.112 UTC [639] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:28:46.113 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:28:46.114 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:28:46.114 UTC [639] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:28:46.114 UTC [639] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:28:46.115 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:28:46.116 UTC [639] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:28:46.116 UTC [639] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:28:46.116 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:28:46.119 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:28:46.120 UTC [639] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:28:46.120 UTC [639] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:28:46.122 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:28:46.122 UTC [639] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:28:46.122 UTC [639] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:28:46.124 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:28:46.125 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:28:46.125 UTC [639] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:28:46.125 UTC [639] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:28:46.127 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:28:46.129 UTC [639] DEBUG:  building index "pg_toast_31546_index" on table "pg_toast_31546" serially
2025-04-19 08:28:46.130 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:28:46.130 UTC [639] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:28:46.130 UTC [639] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:28:46.133 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:28:46.137 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:28:46.137 UTC [639] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:28:46.137 UTC [639] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:28:46.140 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:28:46.140 UTC [639] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:28:46.140 UTC [639] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:28:46.143 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:28:46.144 UTC [639] DEBUG:  building index "pg_toast_31579_index" on table "pg_toast_31579" serially
2025-04-19 08:28:46.146 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:28:46.146 UTC [639] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:28:46.146 UTC [639] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:28:46.148 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:28:46.150 UTC [639] DEBUG:  building index "pg_toast_31590_index" on table "pg_toast_31590" serially
2025-04-19 08:28:46.151 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:28:46.151 UTC [639] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:28:46.151 UTC [639] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:28:46.153 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:28:46.156 UTC [639] DEBUG:  building index "pg_toast_31613_index" on table "pg_toast_31613" serially
2025-04-19 08:28:46.156 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:28:46.157 UTC [639] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:28:46.157 UTC [639] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:28:46.158 UTC [639] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:28:46.158 UTC [639] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:28:46.159 UTC [639] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:28:46.161 UTC [639] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:28:46.164 UTC [639] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:28:46.164 UTC [639] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:28:46.165 UTC [639] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:28:46.165 UTC [639] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:28:46.166 UTC [639] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:28:46.166 UTC [639] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:28:46.167 UTC [639] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:28:46.167 UTC [639] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:28:46.169 UTC [639] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:28:46.169 UTC [639] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:28:46.169 UTC [639] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:28:46.169 UTC [639] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:28:46.172 UTC [639] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:28:46.172 UTC [639] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:28:46.173 UTC [639] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:28:46.173 UTC [639] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:28:46.175 UTC [639] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:28:46.175 UTC [639] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:28:46.215 UTC [639] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:46.569 UTC [639] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$YWla3UvtZQ9nAtsYSneXQe6VLNPhqvvwzZ928r8KIerM/JcIo0x7a')
	                RETURNING id, username, email
	                
2025-04-19 08:28:46.573 UTC [639] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:28:46.574 UTC [639] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:46.577 UTC [639] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:28:46.601 UTC [639] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:46.606 UTC [639] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:28:46.624 UTC [639] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:28:46.645 UTC [639] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:28:46.645 UTC [639] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:28:46.654 UTC [639] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:28:46.663 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:28:46.666 UTC [639] DEBUG:  building index "pg_toast_31649_index" on table "pg_toast_31649" serially
2025-04-19 08:28:46.684 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:28:46.685 UTC [639] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:28:46.685 UTC [639] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:28:46.705 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:28:46.705 UTC [639] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:28:46.705 UTC [639] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:28:46.720 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:28:46.721 UTC [639] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:28:46.721 UTC [639] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:28:46.723 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:28:46.727 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:28:46.730 UTC [639] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:28:46.730 UTC [639] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:28:46.739 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:28:46.739 UTC [639] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:28:46.739 UTC [639] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:28:46.741 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:28:46.744 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:28:46.744 UTC [639] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:28:46.744 UTC [639] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:28:46.746 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:28:46.746 UTC [639] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:28:46.746 UTC [639] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:28:46.750 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:28:46.753 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:28:46.753 UTC [639] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:28:46.753 UTC [639] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:28:46.756 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:28:46.758 UTC [639] DEBUG:  building index "pg_toast_31710_index" on table "pg_toast_31710" serially
2025-04-19 08:28:46.761 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:28:46.762 UTC [639] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:28:46.762 UTC [639] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:28:46.769 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:28:46.776 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:28:46.777 UTC [639] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:28:46.777 UTC [639] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:28:46.779 UTC [639] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:28:46.780 UTC [639] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:28:46.780 UTC [639] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:28:46.781 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:28:46.782 UTC [639] DEBUG:  building index "pg_toast_31743_index" on table "pg_toast_31743" serially
2025-04-19 08:28:46.783 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:28:46.784 UTC [639] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:28:46.784 UTC [639] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:28:46.784 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:28:46.786 UTC [639] DEBUG:  building index "pg_toast_31754_index" on table "pg_toast_31754" serially
2025-04-19 08:28:46.787 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:28:46.787 UTC [639] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:28:46.787 UTC [639] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:28:46.789 UTC [639] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:28:46.790 UTC [639] DEBUG:  building index "pg_toast_31777_index" on table "pg_toast_31777" serially
2025-04-19 08:28:46.791 UTC [639] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:28:46.791 UTC [639] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:28:46.791 UTC [639] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:28:46.792 UTC [639] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:28:46.792 UTC [639] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:28:46.793 UTC [639] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:28:46.793 UTC [639] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:28:46.794 UTC [639] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:28:46.794 UTC [639] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:28:46.795 UTC [639] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:28:46.795 UTC [639] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:28:46.796 UTC [639] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:28:46.796 UTC [639] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:28:46.797 UTC [639] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:28:46.797 UTC [639] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:28:46.798 UTC [639] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:28:46.798 UTC [639] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:28:46.800 UTC [639] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:28:46.800 UTC [639] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:28:46.802 UTC [639] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:28:46.802 UTC [639] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:28:46.803 UTC [639] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:28:46.803 UTC [639] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:28:46.804 UTC [639] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:28:46.804 UTC [639] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:28:46.820 UTC [639] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:28:47.070 UTC [639] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$PBxVwz1Dgpnwl993RU.yS.ImSjJxicikLmPXM3lVJKFsZ2XZ6P9ha')
	                RETURNING id, username, email
	                
2025-04-19 08:28:47.071 UTC [639] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:28:47.072 UTC [639] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:28:47.606 UTC [647] DEBUG:  autovacuum: processing database "postgres"
2025-04-19 08:28:59.851 UTC [639] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:29:00.141 UTC [639] DEBUG:  unexpected EOF on client connection
2025-04-19 08:29:02.046 UTC [655] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:29:02.053 UTC [655] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:29:02.059 UTC [655] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:29:02.059 UTC [655] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:29:02.064 UTC [655] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:29:02.068 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:29:02.070 UTC [655] DEBUG:  building index "pg_toast_31813_index" on table "pg_toast_31813" serially
2025-04-19 08:29:02.072 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:29:02.072 UTC [655] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:29:02.072 UTC [655] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:29:02.073 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:29:02.074 UTC [655] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:29:02.074 UTC [655] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:29:02.075 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:29:02.075 UTC [655] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:29:02.075 UTC [655] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:29:02.077 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:29:02.079 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:29:02.079 UTC [655] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:29:02.079 UTC [655] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:29:02.081 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:29:02.081 UTC [655] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:29:02.081 UTC [655] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:29:02.082 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:29:02.084 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:29:02.085 UTC [655] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:29:02.085 UTC [655] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:29:02.086 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:29:02.086 UTC [655] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:29:02.086 UTC [655] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:29:02.088 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:29:02.089 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:29:02.089 UTC [655] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:29:02.089 UTC [655] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:29:02.091 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:29:02.093 UTC [655] DEBUG:  building index "pg_toast_31874_index" on table "pg_toast_31874" serially
2025-04-19 08:29:02.094 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:29:02.094 UTC [655] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:29:02.094 UTC [655] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:29:02.095 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:29:02.096 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:29:02.096 UTC [655] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:29:02.096 UTC [655] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:29:02.097 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:29:02.097 UTC [655] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:29:02.097 UTC [655] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:29:02.098 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:29:02.099 UTC [655] DEBUG:  building index "pg_toast_31907_index" on table "pg_toast_31907" serially
2025-04-19 08:29:02.100 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:29:02.100 UTC [655] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:29:02.100 UTC [655] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:29:02.101 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:29:02.102 UTC [655] DEBUG:  building index "pg_toast_31918_index" on table "pg_toast_31918" serially
2025-04-19 08:29:02.103 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:29:02.103 UTC [655] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:29:02.103 UTC [655] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:29:02.105 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:29:02.106 UTC [655] DEBUG:  building index "pg_toast_31941_index" on table "pg_toast_31941" serially
2025-04-19 08:29:02.106 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:29:02.106 UTC [655] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:29:02.107 UTC [655] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:29:02.107 UTC [655] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:29:02.107 UTC [655] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:29:02.108 UTC [655] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:29:02.108 UTC [655] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:29:02.109 UTC [655] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:29:02.109 UTC [655] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:29:02.110 UTC [655] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:29:02.110 UTC [655] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:29:02.111 UTC [655] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:29:02.111 UTC [655] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:29:02.111 UTC [655] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:29:02.111 UTC [655] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:29:02.112 UTC [655] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:29:02.112 UTC [655] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:29:02.113 UTC [655] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:29:02.113 UTC [655] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:29:02.114 UTC [655] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:29:02.114 UTC [655] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:29:02.115 UTC [655] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:29:02.115 UTC [655] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:29:02.116 UTC [655] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:29:02.116 UTC [655] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:29:02.127 UTC [655] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:02.542 UTC [655] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$x/OoS0MTh5F8.ePvPGShv.U0RMgmjFZ.aef0c4urTcwNtop5YlOVq')
	                RETURNING id, username, email
	                
2025-04-19 08:29:02.550 UTC [655] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:29:02.552 UTC [655] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:29:02.563 UTC [655] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:29:02.613 UTC [655] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:02.617 UTC [655] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:29:02.637 UTC [655] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:29:02.645 UTC [655] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:29:02.645 UTC [655] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:29:02.652 UTC [655] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:29:02.666 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:29:02.685 UTC [655] DEBUG:  building index "pg_toast_31977_index" on table "pg_toast_31977" serially
2025-04-19 08:29:02.692 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:29:02.696 UTC [655] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:29:02.696 UTC [655] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:29:02.702 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:29:02.703 UTC [655] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:29:02.703 UTC [655] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:29:02.705 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:29:02.706 UTC [655] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:29:02.706 UTC [655] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:29:02.712 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:29:02.718 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:29:02.720 UTC [655] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:29:02.720 UTC [655] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:29:02.727 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:29:02.729 UTC [655] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:29:02.729 UTC [655] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:29:02.735 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:29:02.745 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:29:02.747 UTC [655] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:29:02.747 UTC [655] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:29:02.750 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:29:02.751 UTC [655] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:29:02.751 UTC [655] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:29:02.753 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:29:02.761 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:29:02.764 UTC [655] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:29:02.764 UTC [655] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:29:02.774 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:29:02.786 UTC [655] DEBUG:  building index "pg_toast_32038_index" on table "pg_toast_32038" serially
2025-04-19 08:29:02.791 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:29:02.797 UTC [655] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:29:02.798 UTC [655] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:29:02.810 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:29:02.815 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:29:02.818 UTC [655] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:29:02.818 UTC [655] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:29:02.823 UTC [655] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:29:02.826 UTC [655] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:29:02.826 UTC [655] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:29:02.834 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:29:02.841 UTC [655] DEBUG:  building index "pg_toast_32071_index" on table "pg_toast_32071" serially
2025-04-19 08:29:02.847 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:29:02.849 UTC [655] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:29:02.849 UTC [655] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:29:02.853 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:29:02.863 UTC [655] DEBUG:  building index "pg_toast_32082_index" on table "pg_toast_32082" serially
2025-04-19 08:29:02.868 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:29:02.869 UTC [655] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:29:02.869 UTC [655] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:29:02.873 UTC [655] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:29:02.875 UTC [655] DEBUG:  building index "pg_toast_32105_index" on table "pg_toast_32105" serially
2025-04-19 08:29:02.876 UTC [655] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:29:02.876 UTC [655] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:29:02.877 UTC [655] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:29:02.878 UTC [655] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:29:02.878 UTC [655] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:29:02.880 UTC [655] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:29:02.880 UTC [655] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:29:02.881 UTC [655] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:29:02.881 UTC [655] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:29:02.882 UTC [655] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:29:02.882 UTC [655] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:29:02.883 UTC [655] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:29:02.883 UTC [655] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:29:02.885 UTC [655] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:29:02.885 UTC [655] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:29:02.886 UTC [655] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:29:02.886 UTC [655] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:29:02.888 UTC [655] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:29:02.888 UTC [655] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:29:02.892 UTC [655] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:29:02.892 UTC [655] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:29:02.899 UTC [655] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:29:02.899 UTC [655] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:29:02.906 UTC [655] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:29:02.906 UTC [655] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:29:02.969 UTC [655] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:03.272 UTC [655] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$du8WgLkrLwh8fYM5O5rxQuTAndFHGHqYy3ECP9ADeV/1.K3wF04yK')
	                RETURNING id, username, email
	                
2025-04-19 08:29:03.273 UTC [655] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:29:03.274 UTC [655] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:29:15.754 UTC [655] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:29:16.302 UTC [655] DEBUG:  unexpected EOF on client connection
2025-04-19 08:29:17.715 UTC [670] DEBUG:  autovacuum: processing database "powerball"
2025-04-19 08:29:18.677 UTC [670] DEBUG:  rehashing catalog cache id 14 for pg_opclass; 17 tups, 8 buckets
2025-04-19 08:29:20.621 UTC [671] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:29:20.634 UTC [671] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:29:20.658 UTC [671] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:29:20.658 UTC [671] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:29:20.693 UTC [671] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:29:20.721 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:29:20.728 UTC [671] DEBUG:  building index "pg_toast_32142_index" on table "pg_toast_32142" serially
2025-04-19 08:29:20.733 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:29:20.737 UTC [671] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:29:20.737 UTC [671] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:29:20.738 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:29:20.738 UTC [671] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:29:20.738 UTC [671] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:29:20.739 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:29:20.739 UTC [671] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:29:20.739 UTC [671] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:29:20.741 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:29:20.742 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:29:20.742 UTC [671] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:29:20.742 UTC [671] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:29:20.743 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:29:20.744 UTC [671] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:29:20.744 UTC [671] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:29:20.745 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:29:20.746 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:29:20.746 UTC [671] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:29:20.746 UTC [671] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:29:20.747 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:29:20.747 UTC [671] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:29:20.747 UTC [671] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:29:20.749 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:29:20.753 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:29:20.753 UTC [671] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:29:20.753 UTC [671] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:29:20.754 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:29:20.756 UTC [671] DEBUG:  building index "pg_toast_32203_index" on table "pg_toast_32203" serially
2025-04-19 08:29:20.757 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:29:20.757 UTC [671] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:29:20.757 UTC [671] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:29:20.760 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:29:20.761 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:29:20.761 UTC [671] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:29:20.761 UTC [671] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:29:20.765 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:29:20.766 UTC [671] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:29:20.766 UTC [671] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:29:20.769 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:29:20.773 UTC [671] DEBUG:  building index "pg_toast_32236_index" on table "pg_toast_32236" serially
2025-04-19 08:29:20.775 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:29:20.775 UTC [671] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:29:20.775 UTC [671] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:29:20.777 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:29:20.779 UTC [671] DEBUG:  building index "pg_toast_32247_index" on table "pg_toast_32247" serially
2025-04-19 08:29:20.780 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:29:20.781 UTC [671] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:29:20.782 UTC [671] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:29:20.784 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:29:20.785 UTC [671] DEBUG:  building index "pg_toast_32270_index" on table "pg_toast_32270" serially
2025-04-19 08:29:20.786 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:29:20.787 UTC [671] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:29:20.787 UTC [671] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:29:20.788 UTC [671] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:29:20.788 UTC [671] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:29:20.789 UTC [671] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:29:20.789 UTC [671] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:29:20.790 UTC [671] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:29:20.790 UTC [671] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:29:20.791 UTC [671] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:29:20.791 UTC [671] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:29:20.793 UTC [671] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:29:20.793 UTC [671] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:29:20.795 UTC [671] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:29:20.795 UTC [671] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:29:20.797 UTC [671] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:29:20.797 UTC [671] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:29:20.798 UTC [671] DEBUG:  rehashing catalog cache id 32 for pg_index; 129 tups, 64 buckets
2025-04-19 08:29:20.798 UTC [671] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:29:20.798 UTC [671] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:29:20.799 UTC [671] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:29:20.799 UTC [671] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:29:20.800 UTC [671] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:29:20.800 UTC [671] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:29:20.802 UTC [671] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:29:20.802 UTC [671] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:29:20.819 UTC [671] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:21.121 UTC [671] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$.HIhK096oftaBHoEyZImeOozlD5PFoYofQEOcg1e5Y2oIcu1EQ4KK')
	                RETURNING id, username, email
	                
2025-04-19 08:29:21.123 UTC [671] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:29:21.123 UTC [671] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:29:21.125 UTC [671] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:29:21.141 UTC [671] DEBUG:  rehashing catalog cache id 7 for pg_attribute; 257 tups, 128 buckets
2025-04-19 08:29:21.141 UTC [671] CONTEXT:  SQL expression "NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        )"
	PL/pgSQL function inline_code_block line 3 at IF
2025-04-19 08:29:21.160 UTC [671] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:21.163 UTC [671] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:29:21.166 UTC [671] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:29:21.171 UTC [671] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:29:21.171 UTC [671] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:29:21.175 UTC [671] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:29:21.183 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:29:21.185 UTC [671] DEBUG:  building index "pg_toast_32306_index" on table "pg_toast_32306" serially
2025-04-19 08:29:21.186 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:29:21.187 UTC [671] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:29:21.187 UTC [671] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:29:21.188 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:29:21.189 UTC [671] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:29:21.189 UTC [671] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:29:21.190 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:29:21.190 UTC [671] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:29:21.191 UTC [671] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:29:21.193 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:29:21.195 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:29:21.196 UTC [671] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:29:21.196 UTC [671] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:29:21.198 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:29:21.198 UTC [671] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:29:21.198 UTC [671] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:29:21.199 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:29:21.200 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:29:21.200 UTC [671] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:29:21.200 UTC [671] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:29:21.201 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:29:21.201 UTC [671] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:29:21.201 UTC [671] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:29:21.203 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:29:21.204 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:29:21.204 UTC [671] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:29:21.204 UTC [671] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:29:21.206 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:29:21.207 UTC [671] DEBUG:  building index "pg_toast_32367_index" on table "pg_toast_32367" serially
2025-04-19 08:29:21.210 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:29:21.210 UTC [671] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:29:21.210 UTC [671] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:29:21.211 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:29:21.212 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:29:21.212 UTC [671] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:29:21.212 UTC [671] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:29:21.213 UTC [671] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:29:21.213 UTC [671] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:29:21.213 UTC [671] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:29:21.215 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:29:21.216 UTC [671] DEBUG:  building index "pg_toast_32400_index" on table "pg_toast_32400" serially
2025-04-19 08:29:21.217 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:29:21.217 UTC [671] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:29:21.217 UTC [671] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:29:21.218 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:29:21.220 UTC [671] DEBUG:  building index "pg_toast_32411_index" on table "pg_toast_32411" serially
2025-04-19 08:29:21.221 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:29:21.221 UTC [671] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:29:21.221 UTC [671] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:29:21.223 UTC [671] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:29:21.224 UTC [671] DEBUG:  building index "pg_toast_32434_index" on table "pg_toast_32434" serially
2025-04-19 08:29:21.225 UTC [671] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:29:21.225 UTC [671] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:29:21.225 UTC [671] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:29:21.226 UTC [671] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:29:21.226 UTC [671] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:29:21.227 UTC [671] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:29:21.227 UTC [671] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:29:21.228 UTC [671] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:29:21.228 UTC [671] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:29:21.229 UTC [671] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:29:21.229 UTC [671] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:29:21.231 UTC [671] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:29:21.231 UTC [671] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:29:21.232 UTC [671] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:29:21.232 UTC [671] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:29:21.234 UTC [671] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:29:21.234 UTC [671] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:29:21.235 UTC [671] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:29:21.235 UTC [671] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:29:21.236 UTC [671] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:29:21.236 UTC [671] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:29:21.238 UTC [671] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:29:21.238 UTC [671] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:29:21.239 UTC [671] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:29:21.239 UTC [671] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:29:21.252 UTC [671] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:21.506 UTC [671] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$6wRu2sDVNGVsx2N5axkBTuOkaaCJCHLkgh8RAE/kU6Js.N3F8SrG2')
	                RETURNING id, username, email
	                
2025-04-19 08:29:21.507 UTC [671] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:29:21.507 UTC [671] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:29:32.997 UTC [671] LOG:  statement: SELECT id, username, email, password_hash FROM users WHERE username = 'admin'
2025-04-19 08:29:33.369 UTC [671] DEBUG:  unexpected EOF on client connection
2025-04-19 08:29:36.272 UTC [679] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:29:36.286 UTC [679] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:29:36.297 UTC [679] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:29:36.297 UTC [679] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:29:36.321 UTC [679] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:29:36.333 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:29:36.339 UTC [679] DEBUG:  building index "pg_toast_32470_index" on table "pg_toast_32470" serially
2025-04-19 08:29:36.346 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:29:36.348 UTC [679] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:29:36.348 UTC [679] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:29:36.350 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:29:36.350 UTC [679] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:29:36.350 UTC [679] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:29:36.352 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:29:36.352 UTC [679] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:29:36.353 UTC [679] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:29:36.354 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:29:36.355 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:29:36.356 UTC [679] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:29:36.356 UTC [679] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:29:36.357 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:29:36.358 UTC [679] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:29:36.358 UTC [679] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:29:36.359 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:29:36.360 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:29:36.361 UTC [679] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:29:36.361 UTC [679] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:29:36.362 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:29:36.362 UTC [679] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:29:36.362 UTC [679] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:29:36.365 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:29:36.366 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:29:36.366 UTC [679] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:29:36.366 UTC [679] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:29:36.369 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:29:36.371 UTC [679] DEBUG:  building index "pg_toast_32531_index" on table "pg_toast_32531" serially
2025-04-19 08:29:36.372 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:29:36.372 UTC [679] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:29:36.372 UTC [679] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:29:36.374 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:29:36.375 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:29:36.376 UTC [679] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:29:36.376 UTC [679] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:29:36.377 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:29:36.377 UTC [679] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:29:36.377 UTC [679] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:29:36.379 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:29:36.380 UTC [679] DEBUG:  building index "pg_toast_32564_index" on table "pg_toast_32564" serially
2025-04-19 08:29:36.382 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:29:36.383 UTC [679] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:29:36.383 UTC [679] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:29:36.384 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:29:36.385 UTC [679] DEBUG:  building index "pg_toast_32575_index" on table "pg_toast_32575" serially
2025-04-19 08:29:36.386 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:29:36.387 UTC [679] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:29:36.387 UTC [679] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:29:36.389 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:29:36.391 UTC [679] DEBUG:  building index "pg_toast_32598_index" on table "pg_toast_32598" serially
2025-04-19 08:29:36.392 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:29:36.392 UTC [679] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:29:36.392 UTC [679] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:29:36.393 UTC [679] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:29:36.394 UTC [679] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:29:36.394 UTC [679] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:29:36.395 UTC [679] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:29:36.396 UTC [679] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:29:36.396 UTC [679] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:29:36.397 UTC [679] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:29:36.397 UTC [679] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:29:36.397 UTC [679] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:29:36.398 UTC [679] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:29:36.398 UTC [679] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:29:36.398 UTC [679] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:29:36.400 UTC [679] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:29:36.400 UTC [679] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:29:36.401 UTC [679] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:29:36.401 UTC [679] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:29:36.402 UTC [679] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:29:36.402 UTC [679] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:29:36.403 UTC [679] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:29:36.403 UTC [679] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:29:36.404 UTC [679] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:29:36.404 UTC [679] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:29:36.430 UTC [679] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:36.797 UTC [679] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$2xwmlpo21fIY22u6jluV9ey0BvneySfCU5RNdmmtK1sm0h4rJCv2K')
	                RETURNING id, username, email
	                
2025-04-19 08:29:36.798 UTC [679] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:29:36.799 UTC [679] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:29:36.800 UTC [679] LOG:  statement: 
	    DO $$ 
	    BEGIN
	        IF NOT EXISTS (
	            SELECT FROM information_schema.columns 
	            WHERE table_name = 'users' AND column_name = 'password_hash'
	        ) THEN
	            ALTER TABLE users ADD COLUMN password_hash TEXT;
	        END IF;
	    END $$;
	    
2025-04-19 08:29:36.811 UTC [679] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:36.814 UTC [679] LOG:  statement: -- Powerball Analyzer Database Schema
	-- Create this file at backend/schema.sql
	
	-- Drop tables if they exist
	DROP TABLE IF EXISTS user_checks CASCADE;
	DROP TABLE IF EXISTS prediction_numbers CASCADE;
	DROP TABLE IF EXISTS predictions CASCADE;
	DROP TABLE IF EXISTS expected_combinations CASCADE;
	DROP TABLE IF EXISTS numbers CASCADE;
	DROP TABLE IF EXISTS draws CASCADE;
	DROP TABLE IF EXISTS users CASCADE;
	DROP TABLE IF EXISTS user_stats CASCADE;
	DROP TABLE IF EXISTS analysis_results CASCADE;
	
	-- Create tables
	CREATE TABLE users (
	    id SERIAL PRIMARY KEY,
	    username VARCHAR(100) UNIQUE NOT NULL,
	    email VARCHAR(255) UNIQUE,
	    password_hash TEXT,  -- Add this column for authentication
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE draws (
	    id SERIAL PRIMARY KEY,
	    draw_number INTEGER UNIQUE NOT NULL,
	    draw_date DATE NOT NULL,
	    jackpot_amount NUMERIC(15, 2) DEFAULT 0,
	    winners INTEGER DEFAULT 0,
	    source VARCHAR(50),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE numbers (
	    id SERIAL PRIMARY KEY,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (number BETWEEN 1 AND 69),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (draw_id, position)
	);
	
	CREATE TABLE user_stats (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	    draws_added INTEGER DEFAULT 0,
	    predictions_made INTEGER DEFAULT 0,
	    analysis_runs INTEGER DEFAULT 0,
	    checks_performed INTEGER DEFAULT 0,
	    wins INTEGER DEFAULT 0,
	    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE predictions (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    method VARCHAR(50) NOT NULL,
	    confidence NUMERIC(5, 2) CHECK (confidence BETWEEN 0 AND 100),
	    rationale TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE prediction_numbers (
	    id SERIAL PRIMARY KEY,
	    prediction_id INTEGER REFERENCES predictions(id) ON DELETE CASCADE,
	    position INTEGER NOT NULL CHECK (position BETWEEN 1 AND 6),
	    number INTEGER NOT NULL CHECK (
	        (position <= 5 AND number BETWEEN 1 AND 69) OR
	        (position = 6 AND number BETWEEN 1 AND 26)
	    ),
	    is_powerball BOOLEAN DEFAULT FALSE,
	    UNIQUE (prediction_id, position)
	);
	
	CREATE TABLE expected_combinations (
	    id SERIAL PRIMARY KEY,
	    score NUMERIC(5, 2) CHECK (score BETWEEN 0 AND 100),
	    method VARCHAR(50) NOT NULL,
	    reason TEXT,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE user_checks (
	    id SERIAL PRIMARY KEY,
	    user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
	    draw_id INTEGER REFERENCES draws(id) ON DELETE CASCADE,
	    white_matches INTEGER[] DEFAULT '{}',
	    powerball_match BOOLEAN DEFAULT FALSE,
	    is_winner BOOLEAN DEFAULT FALSE,
	    prize VARCHAR(100),
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	CREATE TABLE analysis_results (
	    id SERIAL PRIMARY KEY,
	    type VARCHAR(50) NOT NULL,
	    parameters JSONB,
	    result_data JSONB NOT NULL,
	    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
	);
	
	-- Create indexes for performance
	CREATE INDEX idx_draws_draw_number ON draws(draw_number);
	CREATE INDEX idx_draws_draw_date ON draws(draw_date);
	CREATE INDEX idx_numbers_draw_id ON numbers(draw_id);
	CREATE INDEX idx_numbers_number ON numbers(number);
	CREATE INDEX idx_numbers_position ON numbers(position);
	CREATE INDEX idx_prediction_numbers_prediction_id ON prediction_numbers(prediction_id);
	CREATE INDEX idx_user_checks_user_id ON user_checks(user_id);
	CREATE INDEX idx_user_checks_draw_id ON user_checks(draw_id);
	CREATE INDEX idx_predictions_user_id ON predictions(user_id);
	CREATE INDEX idx_predictions_method ON predictions(method);
	CREATE INDEX idx_analysis_results_type ON analysis_results(type);
	
	-- Create views for common queries
	CREATE VIEW view_latest_draw AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC
	LIMIT 1;
	
	CREATE VIEW view_all_draws AS
	SELECT 
	    d.id, d.draw_number, d.draw_date, d.jackpot_amount, d.winners,
	    array_agg(CASE WHEN n.is_powerball = false THEN n.number END ORDER BY n.position) FILTER (WHERE n.is_powerball = false) AS white_balls,
	    (array_agg(n.number) FILTER (WHERE n.is_powerball = true))[1] AS powerball
	FROM 
	    draws d
	JOIN 
	    numbers n ON d.id = n.draw_id
	GROUP BY 
	    d.id, d.draw_number
	ORDER BY 
	    d.draw_date DESC, d.draw_number DESC;
	
	CREATE VIEW view_all_predictions AS
	SELECT 
	    p.id, p.user_id, p.method, p.confidence, p.rationale, p.created_at,
	    array_agg(CASE WHEN pn.is_powerball = false THEN pn.number END ORDER BY pn.position) FILTER (WHERE pn.is_powerball = false) AS white_balls,
	    (array_agg(pn.number) FILTER (WHERE pn.is_powerball = true))[1] AS powerball
	FROM 
	    predictions p
	JOIN 
	    prediction_numbers pn ON p.id = pn.prediction_id
	GROUP BY 
	    p.id
	ORDER BY 
	    p.created_at DESC;
	
	-- Insert a default anonymous user
	INSERT INTO users (id, username, email, password_hash) VALUES 
	(1, 'anonymous', 'anonymous@example.com', NULL);
	
	-- Update the sequence
	SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));
	
	-- Create default user_stats for anonymous user
	INSERT INTO user_stats (user_id) VALUES (1);
2025-04-19 08:29:36.819 UTC [679] NOTICE:  drop cascades to view view_all_predictions
2025-04-19 08:29:36.831 UTC [679] NOTICE:  drop cascades to 2 other objects
2025-04-19 08:29:36.831 UTC [679] DETAIL:  drop cascades to view view_latest_draw
	drop cascades to view view_all_draws
2025-04-19 08:29:36.838 UTC [679] NOTICE:  drop cascades to constraint user_stats_user_id_fkey on table user_stats
2025-04-19 08:29:36.843 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "users_id_seq" for serial column "users.id"
2025-04-19 08:29:36.845 UTC [679] DEBUG:  building index "pg_toast_32634_index" on table "pg_toast_32634" serially
2025-04-19 08:29:36.848 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "users_pkey" for table "users"
2025-04-19 08:29:36.848 UTC [679] DEBUG:  building index "users_pkey" on table "users" serially
2025-04-19 08:29:36.848 UTC [679] DEBUG:  index "users_pkey" can safely use deduplication
2025-04-19 08:29:36.850 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_username_key" for table "users"
2025-04-19 08:29:36.850 UTC [679] DEBUG:  building index "users_username_key" on table "users" serially
2025-04-19 08:29:36.850 UTC [679] DEBUG:  index "users_username_key" can safely use deduplication
2025-04-19 08:29:36.851 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "users_email_key" for table "users"
2025-04-19 08:29:36.851 UTC [679] DEBUG:  building index "users_email_key" on table "users" serially
2025-04-19 08:29:36.852 UTC [679] DEBUG:  index "users_email_key" can safely use deduplication
2025-04-19 08:29:36.853 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "draws_id_seq" for serial column "draws.id"
2025-04-19 08:29:36.855 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "draws_pkey" for table "draws"
2025-04-19 08:29:36.856 UTC [679] DEBUG:  building index "draws_pkey" on table "draws" serially
2025-04-19 08:29:36.856 UTC [679] DEBUG:  index "draws_pkey" can safely use deduplication
2025-04-19 08:29:36.857 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "draws_draw_number_key" for table "draws"
2025-04-19 08:29:36.857 UTC [679] DEBUG:  building index "draws_draw_number_key" on table "draws" serially
2025-04-19 08:29:36.857 UTC [679] DEBUG:  index "draws_draw_number_key" can safely use deduplication
2025-04-19 08:29:36.858 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "numbers_id_seq" for serial column "numbers.id"
2025-04-19 08:29:36.861 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "numbers_pkey" for table "numbers"
2025-04-19 08:29:36.861 UTC [679] DEBUG:  building index "numbers_pkey" on table "numbers" serially
2025-04-19 08:29:36.861 UTC [679] DEBUG:  index "numbers_pkey" can safely use deduplication
2025-04-19 08:29:36.862 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "numbers_draw_id_position_key" for table "numbers"
2025-04-19 08:29:36.862 UTC [679] DEBUG:  building index "numbers_draw_id_position_key" on table "numbers" serially
2025-04-19 08:29:36.862 UTC [679] DEBUG:  index "numbers_draw_id_position_key" can safely use deduplication
2025-04-19 08:29:36.869 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "user_stats_id_seq" for serial column "user_stats.id"
2025-04-19 08:29:36.872 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_stats_pkey" for table "user_stats"
2025-04-19 08:29:36.874 UTC [679] DEBUG:  building index "user_stats_pkey" on table "user_stats" serially
2025-04-19 08:29:36.874 UTC [679] DEBUG:  index "user_stats_pkey" can safely use deduplication
2025-04-19 08:29:36.877 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "predictions_id_seq" for serial column "predictions.id"
2025-04-19 08:29:36.878 UTC [679] DEBUG:  building index "pg_toast_32695_index" on table "pg_toast_32695" serially
2025-04-19 08:29:36.881 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "predictions_pkey" for table "predictions"
2025-04-19 08:29:36.882 UTC [679] DEBUG:  building index "predictions_pkey" on table "predictions" serially
2025-04-19 08:29:36.882 UTC [679] DEBUG:  index "predictions_pkey" can safely use deduplication
2025-04-19 08:29:36.884 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "prediction_numbers_id_seq" for serial column "prediction_numbers.id"
2025-04-19 08:29:36.887 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "prediction_numbers_pkey" for table "prediction_numbers"
2025-04-19 08:29:36.888 UTC [679] DEBUG:  building index "prediction_numbers_pkey" on table "prediction_numbers" serially
2025-04-19 08:29:36.888 UTC [679] DEBUG:  index "prediction_numbers_pkey" can safely use deduplication
2025-04-19 08:29:36.890 UTC [679] DEBUG:  CREATE TABLE / UNIQUE will create implicit index "prediction_numbers_prediction_id_position_key" for table "prediction_numbers"
2025-04-19 08:29:36.890 UTC [679] DEBUG:  building index "prediction_numbers_prediction_id_position_key" on table "prediction_numbers" serially
2025-04-19 08:29:36.890 UTC [679] DEBUG:  index "prediction_numbers_prediction_id_position_key" can safely use deduplication
2025-04-19 08:29:36.893 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "expected_combinations_id_seq" for serial column "expected_combinations.id"
2025-04-19 08:29:36.896 UTC [679] DEBUG:  building index "pg_toast_32728_index" on table "pg_toast_32728" serially
2025-04-19 08:29:36.898 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "expected_combinations_pkey" for table "expected_combinations"
2025-04-19 08:29:36.899 UTC [679] DEBUG:  building index "expected_combinations_pkey" on table "expected_combinations" serially
2025-04-19 08:29:36.899 UTC [679] DEBUG:  index "expected_combinations_pkey" can safely use deduplication
2025-04-19 08:29:36.900 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "user_checks_id_seq" for serial column "user_checks.id"
2025-04-19 08:29:36.901 UTC [679] DEBUG:  building index "pg_toast_32739_index" on table "pg_toast_32739" serially
2025-04-19 08:29:36.904 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "user_checks_pkey" for table "user_checks"
2025-04-19 08:29:36.904 UTC [679] DEBUG:  building index "user_checks_pkey" on table "user_checks" serially
2025-04-19 08:29:36.904 UTC [679] DEBUG:  index "user_checks_pkey" can safely use deduplication
2025-04-19 08:29:36.907 UTC [679] DEBUG:  CREATE TABLE will create implicit sequence "analysis_results_id_seq" for serial column "analysis_results.id"
2025-04-19 08:29:36.909 UTC [679] DEBUG:  building index "pg_toast_32762_index" on table "pg_toast_32762" serially
2025-04-19 08:29:36.910 UTC [679] DEBUG:  CREATE TABLE / PRIMARY KEY will create implicit index "analysis_results_pkey" for table "analysis_results"
2025-04-19 08:29:36.911 UTC [679] DEBUG:  building index "analysis_results_pkey" on table "analysis_results" serially
2025-04-19 08:29:36.911 UTC [679] DEBUG:  index "analysis_results_pkey" can safely use deduplication
2025-04-19 08:29:36.913 UTC [679] DEBUG:  building index "idx_draws_draw_number" on table "draws" serially
2025-04-19 08:29:36.913 UTC [679] DEBUG:  index "idx_draws_draw_number" can safely use deduplication
2025-04-19 08:29:36.916 UTC [679] DEBUG:  building index "idx_draws_draw_date" on table "draws" serially
2025-04-19 08:29:36.916 UTC [679] DEBUG:  index "idx_draws_draw_date" can safely use deduplication
2025-04-19 08:29:36.919 UTC [679] DEBUG:  building index "idx_numbers_draw_id" on table "numbers" serially
2025-04-19 08:29:36.919 UTC [679] DEBUG:  index "idx_numbers_draw_id" can safely use deduplication
2025-04-19 08:29:36.923 UTC [679] DEBUG:  building index "idx_numbers_number" on table "numbers" serially
2025-04-19 08:29:36.923 UTC [679] DEBUG:  index "idx_numbers_number" can safely use deduplication
2025-04-19 08:29:36.927 UTC [679] DEBUG:  building index "idx_numbers_position" on table "numbers" serially
2025-04-19 08:29:36.927 UTC [679] DEBUG:  index "idx_numbers_position" can safely use deduplication
2025-04-19 08:29:36.932 UTC [679] DEBUG:  building index "idx_prediction_numbers_prediction_id" on table "prediction_numbers" serially
2025-04-19 08:29:36.932 UTC [679] DEBUG:  index "idx_prediction_numbers_prediction_id" can safely use deduplication
2025-04-19 08:29:36.937 UTC [679] DEBUG:  building index "idx_user_checks_user_id" on table "user_checks" serially
2025-04-19 08:29:36.937 UTC [679] DEBUG:  index "idx_user_checks_user_id" can safely use deduplication
2025-04-19 08:29:36.941 UTC [679] DEBUG:  building index "idx_user_checks_draw_id" on table "user_checks" serially
2025-04-19 08:29:36.941 UTC [679] DEBUG:  index "idx_user_checks_draw_id" can safely use deduplication
2025-04-19 08:29:36.947 UTC [679] DEBUG:  building index "idx_predictions_user_id" on table "predictions" serially
2025-04-19 08:29:36.947 UTC [679] DEBUG:  index "idx_predictions_user_id" can safely use deduplication
2025-04-19 08:29:36.948 UTC [679] DEBUG:  building index "idx_predictions_method" on table "predictions" serially
2025-04-19 08:29:36.948 UTC [679] DEBUG:  index "idx_predictions_method" can safely use deduplication
2025-04-19 08:29:36.950 UTC [679] DEBUG:  building index "idx_analysis_results_type" on table "analysis_results" serially
2025-04-19 08:29:36.950 UTC [679] DEBUG:  index "idx_analysis_results_type" can safely use deduplication
2025-04-19 08:29:36.966 UTC [679] LOG:  statement: SELECT * FROM users WHERE username = 'admin'
2025-04-19 08:29:37.357 UTC [679] LOG:  statement: 
	                INSERT INTO users (username, email, password_hash)
	                VALUES ('admin', 'admin@example.com', '$2b$12$pSy0RRuZXDWRdqmysUQ.vO5TpiR0blx9xBtY3dFuqXvtRAlDJ0Jfe')
	                RETURNING id, username, email
	                
2025-04-19 08:29:37.367 UTC [679] LOG:  statement: 
	        SELECT * FROM user_stats WHERE user_id = 2
	        
2025-04-19 08:29:37.375 UTC [679] LOG:  statement: 
	            INSERT INTO user_stats (user_id)
	            VALUES (2)
	            RETURNING *
	            
2025-04-19 08:29:44.552 UTC [679] DEBUG:  unexpected EOF on client connection
2025-04-19 08:29:44.834 UTC [1] LOG:  received fast shutdown request
2025-04-19 08:29:44.838 UTC [1] LOG:  aborting any active transactions
2025-04-19 08:29:44.839 UTC [62] DEBUG:  autovacuum launcher shutting down
2025-04-19 08:29:44.839 UTC [88] FATAL:  terminating connection due to administrator command
2025-04-19 08:29:44.840 UTC [64] DEBUG:  logical replication launcher shutting down
2025-04-19 08:29:44.840 UTC [97] FATAL:  terminating connection due to administrator command
2025-04-19 08:29:44.879 UTC [1] LOG:  background worker "logical replication launcher" (PID 64) exited with exit code 1
2025-04-19 08:29:44.882 UTC [59] LOG:  shutting down
2025-04-19 08:29:44.883 UTC [59] DEBUG:  performing replication slot checkpoint
2025-04-19 08:29:45.014 UTC [1] LOG:  database system is shut down
